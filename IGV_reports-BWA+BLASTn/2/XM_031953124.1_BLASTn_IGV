<html>
<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
    <meta http-equiv="Pragma" content="no-cache"/>
    <meta http-equiv="Expires" content="0"/>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>IGV Variant Inspector </title>

    <!-- igv -->
<script type="text/javascript">
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).igv=t()}(this,(function(){"use strict";function e(e){return t("div",e)}function t(e,t){const i=document.createElement(e);return t&&(t.class&&i.classList.add(t.class),t.id&&(i.id=t.id),t.style&&function(e,t){for(let i of Object.keys(t))e.style[i]=t[i]}(i,t.style)),i}function i(e){const t=getComputedStyle(e);"none"!==t.display&&(e._initialDisplay=t.display),e.style.display="none"}function n(e){if("none"===getComputedStyle(e).display){const t=e._initialDisplay||"block";e.style.display=t}}function r(e){if(e.type.startsWith("touch")){const t=e.touches[0];return{x:t.pageX,y:t.pageY}}return{x:e.pageX,y:e.pageY}}function s(){return("0000"+(Math.random()*Math.pow(36,4)|0).toString(36)).slice(-4)}let o=(e,{clientX:t,clientY:i})=>{const{left:n,top:r,width:s,height:o}=e.getBoundingClientRect(),a=t-n,c=i-r;return{x:a,y:c,xNormalized:a/s,yNormalized:c/o,width:s,height:o}};function a(e,t){const{clientX:i,clientY:n}=e;return o(t,{clientX:i,clientY:n})}class c{constructor(){this.elem=t("div",{class:"igv-ui-panel-column"})}add(t){if(t instanceof Node)this.elem.append(t);else if("object"==typeof t)this.elem.append(t.elem);else{const i=e();i.innerHTML=t,this.elem.append(i),this.html=i}}}function l(e,t){return h(e,t)}function h(e,t){t=t||"currentColor";let i=d[e];i||(console.error(`No icon named: ${e}`),i=d.question);const n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttributeNS(null,"viewBox","0 0 "+i[0]+" "+i[1]);const r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttributeNS(null,"fill",t),r.setAttributeNS(null,"d",i[4]),n.appendChild(r),n}const d={check:[512,512,[],"f00c","M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"],cog:[512,512,[],"f013","M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z"],exclamation:[192,512,[],"f12a","M176 432c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80zM25.26 25.199l13.6 272C39.499 309.972 50.041 320 62.83 320h66.34c12.789 0 23.331-10.028 23.97-22.801l13.6-272C167.425 11.49 156.496 0 142.77 0H49.23C35.504 0 24.575 11.49 25.26 25.199z"],"exclamation-circle":[512,512,[],"f06a","M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],"exclamation-triangle":[576,512,[],"f071","M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],minus:[448,512,[],"f068","M424 318.2c13.3 0 24-10.7 24-24v-76.4c0-13.3-10.7-24-24-24H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h400z"],"minus-circle":[512,512,[],"f056","M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zM124 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H124z"],"minus-square":[448,512,[],"f146","M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM92 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H92z"],plus:[448,512,[],"f067","M448 294.2v-76.4c0-13.3-10.7-24-24-24H286.2V56c0-13.3-10.7-24-24-24h-76.4c-13.3 0-24 10.7-24 24v137.8H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h137.8V456c0 13.3 10.7 24 24 24h76.4c13.3 0 24-10.7 24-24V318.2H424c13.3 0 24-10.7 24-24z"],"plus-circle":[512,512,[],"f055","M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],"plus-square":[448,512,[],"f0fe","M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],question:[384,512,[],"f128","M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z"],save:[448,512,[],"f0c7","M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"],search:[512,512,[],"f002","M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"],share:[512,512,[],"f064","M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"],spinner:[512,512,[],"f110","M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"],square:[448,512,[],"f0c8","M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"],"square-full":[512,512,[],"f45c","M512 512H0V0h512v512z"],times:[384,512,[],"f00d","M323.1 441l53.9-53.9c9.4-9.4 9.4-24.5 0-33.9L279.8 256l97.2-97.2c9.4-9.4 9.4-24.5 0-33.9L323.1 71c-9.4-9.4-24.5-9.4-33.9 0L192 168.2 94.8 71c-9.4-9.4-24.5-9.4-33.9 0L7 124.9c-9.4 9.4-9.4 24.5 0 33.9l97.2 97.2L7 353.2c-9.4 9.4-9.4 24.5 0 33.9L60.9 441c9.4 9.4 24.5 9.4 33.9 0l97.2-97.2 97.2 97.2c9.3 9.3 24.5 9.3 33.9 0z"],"times-circle":[512,512,[],"f057","M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"],wrench:[512,512,[],"f0ad","M481.156 200c9.3 0 15.12 10.155 10.325 18.124C466.295 259.992 420.419 288 368 288c-79.222 0-143.501-63.974-143.997-143.079C223.505 65.469 288.548-.001 368.002 0c52.362.001 98.196 27.949 123.4 69.743C496.24 77.766 490.523 88 481.154 88H376l-40 56 40 56h105.156zm-171.649 93.003L109.255 493.255c-24.994 24.993-65.515 24.994-90.51 0-24.993-24.994-24.993-65.516 0-90.51L218.991 202.5c16.16 41.197 49.303 74.335 90.516 90.503zM104 432c0-13.255-10.745-24-24-24s-24 10.745-24 24 10.745 24 24 24 24-10.745 24-24z"]};function u(e,t){var i=document.createElement("div");e.appendChild(i),i.appendChild(l("times")),i.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation(),t()}))}let f;function p(e,t,i){t.addEventListener("mousedown",function(e){e.stopPropagation(),e.preventDefault();const t=g.bind(this),n=m.bind(this),r=getComputedStyle(this),s=this.getBoundingClientRect();f={constraint:i,dragFunction:t,dragEndFunction:n,screenX:e.screenX,screenY:e.screenY,minDy:-s.top,minDx:-s.left,top:parseInt(r.top.replace("px","")),left:parseInt(r.left.replace("px",""))},document.addEventListener("mousemove",t),document.addEventListener("mouseup",n),document.addEventListener("mouseleave",n),document.addEventListener("mouseexit",n)}.bind(e))}function g(e){if(!f)return void console.error("No drag data!");e.stopPropagation(),e.preventDefault();const t=Math.max(f.minDx,e.screenX-f.screenX),i=Math.max(f.minDy,e.screenY-f.screenY),n=f.left+t,r=f.top+i;this.style.left=`${n}px`,this.style.top=`${r}px`}function m(e){if(!f)return void console.error("No drag data!");e.stopPropagation(),e.preventDefault();const t=f.dragFunction,i=f.dragEndFunction;document.removeEventListener("mousemove",t),document.removeEventListener("mouseup",i),document.removeEventListener("mouseleave",i),document.removeEventListener("mouseexit",i),f=void 0}class w{constructor({parent:t,label:n,content:r,okHandler:s,cancelHandler:o}){this.parent=t;const a=()=>{i(this.elem),"function"==typeof o&&o(this)};this.elem=e(),this.elem.classList.add("igv-ui-generic-dialog-container","igv-ui-center-fixed");const c=e({class:"igv-ui-generic-dialog-header"});if(this.elem.appendChild(c),u(c,a),n){const t=e({class:"igv-ui-dialog-one-liner"});this.elem.appendChild(t),t.innerHTML=n}r.elem.style.margin="16px",this.elem.appendChild(r.elem),this.content=r;const l=e({class:"igv-ui-generic-dialog-ok-cancel"});this.elem.appendChild(l),this.ok=e(),l.appendChild(this.ok),this.ok.textContent="OK",this.cancel=e(),l.appendChild(this.cancel),this.cancel.textContent="Cancel",this.callback=void 0,this.ok.addEventListener("click",(e=>{i(this.elem),"function"==typeof s?s(this):this.callback&&"function"==typeof this.callback&&this.callback(this)})),this.cancel.addEventListener("click",a),p(this.elem,c),this.elem.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation()}))}present(e,t){if(e.label&&this.label&&(this.label.textContent=e.label),e.html){this.content.html.innerHTML=e.html}if(e.text){this.content.html.innerText=e.text}e.value&&this.input&&(this.input.value=e.value),e.callback&&(this.callback=e.callback),n(this.elem)}clampLocation(e,t){let i=this.elem.getBoundingClientRect(),n=this.parent.getBoundingClientRect();const r=Math.min(Math.max(t,n.y),n.y+n.height-i.height),s=Math.min(Math.max(e,n.x),n.x+n.width-i.width);this.elem.style.left=s+"px",this.elem.style.top=r+"px"}}
/*!
     * jQuery JavaScript Library v3.3.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector
     * https://jquery.com/
     *
     * Includes Sizzle.js
     * https://sizzlejs.com/
     *
     * Copyright JS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2018-01-20T17:24Z
     */var b=[],F=window.document,v=Object.getPrototypeOf,y=b.slice,A=b.concat,C=b.push,_=b.indexOf,x={},k=x.toString,I=x.hasOwnProperty,S=I.toString,E=S.call(Object),N={},B=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},M=function(e){return null!=e&&e===e.window},R={type:!0,src:!0,noModule:!0};function D(e,t,i){var n,r=(t=t||F).createElement("script");if(r.text=e,i)for(n in R)i[n]&&(r[n]=i[n]);t.head.appendChild(r).parentNode.removeChild(r)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?x[k.call(e)]||"object":typeof e}var L="3.3.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",z=function(e,t){return new z.fn.init(e,t)},H=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function P(e){var t=!!e&&"length"in e&&e.length,i=T(e);return!B(e)&&!M(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}z.fn=z.prototype={jquery:L,constructor:z,length:0,toArray:function(){return y.call(this)},get:function(e){return null==e?y.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=z.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return z.each(this,e)},map:function(e){return this.pushStack(z.map(this,(function(t,i){return e.call(t,i,t)})))},slice:function(){return this.pushStack(y.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:C,sort:b.sort,splice:b.splice},z.extend=z.fn.extend=function(){var e,t,i,n,r,s,o=arguments[0]||{},a=1,c=arguments.length,l=!1;for("boolean"==typeof o&&(l=o,o=arguments[a]||{},a++),"object"==typeof o||B(o)||(o={}),a===c&&(o=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)i=o[t],o!==(n=e[t])&&(l&&n&&(z.isPlainObject(n)||(r=Array.isArray(n)))?(r?(r=!1,s=i&&Array.isArray(i)?i:[]):s=i&&z.isPlainObject(i)?i:{},o[t]=z.extend(l,s,n)):void 0!==n&&(o[t]=n));return o},z.extend({expando:"jQuery"+(L+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==k.call(e))&&(!(t=v(e))||"function"==typeof(i=I.call(t,"constructor")&&t.constructor)&&S.call(i)===E)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){D(e)},each:function(e,t){var i,n=0;if(P(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(H,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(P(Object(e))?z.merge(i,"string"==typeof e?[e]:e):C.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:_.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,r=e.length;n<i;n++)e[r++]=t[n];return e.length=r,e},grep:function(e,t,i){for(var n=[],r=0,s=e.length,o=!i;r<s;r++)!t(e[r],r)!==o&&n.push(e[r]);return n},map:function(e,t,i){var n,r,s=0,o=[];if(P(e))for(n=e.length;s<n;s++)null!=(r=t(e[s],s,i))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,i))&&o.push(r);return A.apply([],o)},guid:1,support:N}),"function"==typeof Symbol&&(z.fn[Symbol.iterator]=b[Symbol.iterator]),z.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){x["[object "+t+"]"]=t.toLowerCase()}));var O=
/*!
     * Sizzle CSS Selector Engine v2.3.3
     * https://sizzlejs.com/
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2016-08-08
     */
function(e){var t,i,n,r,s,o,a,c,l,h,d,u,f,p,g,m,w,b,F,v="sizzle"+1*new Date,y=e.document,A=0,C=0,_=oe(),x=oe(),k=oe(),I=function(e,t){return e===t&&(d=!0),0},S={}.hasOwnProperty,E=[],N=E.pop,B=E.push,M=E.push,R=E.slice,D=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},T="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",z="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+L+"*("+z+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+L+"*\\]",P=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",O=new RegExp(L+"+","g"),U=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),q=new RegExp("^"+L+"*,"+L+"*"),Q=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),V=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),j=new RegExp(P),W=new RegExp("^"+z+"$"),G={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+T+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},$=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ee=function(e,t,i){var n="0x"+t-65536;return n!=n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ne=function(){u()},re=we((function(e){return!0===e.disabled&&("form"in e||"label"in e)}),{dir:"parentNode",next:"legend"});try{M.apply(E=R.call(y.childNodes),y.childNodes),E[y.childNodes.length].nodeType}catch(e){M={apply:E.length?function(e,t){B.apply(e,R.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function se(e,t,n,r){var s,a,l,h,d,p,w,b=t&&t.ownerDocument,A=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==A&&9!==A&&11!==A)return n;if(!r&&((t?t.ownerDocument||t:y)!==f&&u(t),t=t||f,g)){if(11!==A&&(d=X.exec(e)))if(s=d[1]){if(9===A){if(!(l=t.getElementById(s)))return n;if(l.id===s)return n.push(l),n}else if(b&&(l=b.getElementById(s))&&F(t,l)&&l.id===s)return n.push(l),n}else{if(d[2])return M.apply(n,t.getElementsByTagName(e)),n;if((s=d[3])&&i.getElementsByClassName&&t.getElementsByClassName)return M.apply(n,t.getElementsByClassName(s)),n}if(i.qsa&&!k[e+" "]&&(!m||!m.test(e))){if(1!==A)b=t,w=e;else if("object"!==t.nodeName.toLowerCase()){for((h=t.getAttribute("id"))?h=h.replace(te,ie):t.setAttribute("id",h=v),a=(p=o(e)).length;a--;)p[a]="#"+h+" "+me(p[a]);w=p.join(","),b=Z.test(e)&&pe(t.parentNode)||t}if(w)try{return M.apply(n,b.querySelectorAll(w)),n}catch(e){}finally{h===v&&t.removeAttribute("id")}}}return c(e.replace(U,"$1"),t,n,r)}function oe(){var e=[];return function t(i,r){return e.push(i+" ")>n.cacheLength&&delete t[e.shift()],t[i+" "]=r}}function ae(e){return e[v]=!0,e}function ce(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function ue(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return ae((function(t){return t=+t,ae((function(i,n){for(var r,s=e([],i.length,t),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))}))}))}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in i=se.support={},s=se.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},u=se.setDocument=function(e){var t,r,o=e?e.ownerDocument||e:y;return o!==f&&9===o.nodeType&&o.documentElement?(p=(f=o).documentElement,g=!s(f),y!==f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ne,!1):r.attachEvent&&r.attachEvent("onunload",ne)),i.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),i.getElementsByTagName=ce((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),i.getElementsByClassName=Y.test(f.getElementsByClassName),i.getById=ce((function(e){return p.appendChild(e).id=v,!f.getElementsByName||!f.getElementsByName(v).length})),i.getById?(n.filter.ID=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var i=t.getElementById(e);return i?[i]:[]}}):(n.filter.ID=function(e){var t=e.replace(J,ee);return function(e){var i=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var i,n,r,s=t.getElementById(e);if(s){if((i=s.getAttributeNode("id"))&&i.value===e)return[s];for(r=t.getElementsByName(e),n=0;s=r[n++];)if((i=s.getAttributeNode("id"))&&i.value===e)return[s]}return[]}}),n.find.TAG=i.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):i.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},n.find.CLASS=i.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},w=[],m=[],(i.qsa=Y.test(f.querySelectorAll))&&(ce((function(e){p.appendChild(e).innerHTML="<a id='"+v+"'></a><select id='"+v+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+L+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+L+"*(?:value|"+T+")"),e.querySelectorAll("[id~="+v+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+v+"+*").length||m.push(".#.+[+~]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+L+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(i.matchesSelector=Y.test(b=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ce((function(e){i.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),w.push("!=",P)})),m=m.length&&new RegExp(m.join("|")),w=w.length&&new RegExp(w.join("|")),t=Y.test(p.compareDocumentPosition),F=t||Y.test(p.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},I=t?function(e,t){if(e===t)return d=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!i.sortDetached&&t.compareDocumentPosition(e)===n?e===f||e.ownerDocument===y&&F(y,e)?-1:t===f||t.ownerDocument===y&&F(y,t)?1:h?D(h,e)-D(h,t):0:4&n?-1:1)}:function(e,t){if(e===t)return d=!0,0;var i,n=0,r=e.parentNode,s=t.parentNode,o=[e],a=[t];if(!r||!s)return e===f?-1:t===f?1:r?-1:s?1:h?D(h,e)-D(h,t):0;if(r===s)return le(e,t);for(i=e;i=i.parentNode;)o.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;o[n]===a[n];)n++;return n?le(o[n],a[n]):o[n]===y?-1:a[n]===y?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&u(e),t=t.replace(V,"='$1']"),i.matchesSelector&&g&&!k[t+" "]&&(!w||!w.test(t))&&(!m||!m.test(t)))try{var n=b.call(e,t);if(n||i.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==f&&u(e),F(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==f&&u(e);var r=n.attrHandle[t.toLowerCase()],s=r&&S.call(n.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==s?s:i.attributes||!g?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},se.escape=function(e){return(e+"").replace(te,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,s=0;if(d=!i.detectDuplicates,h=!i.sortStable&&e.slice(0),e.sort(I),d){for(;t=e[s++];)t===e[s]&&(r=n.push(s));for(;r--;)e.splice(n[r],1)}return h=null,e},r=se.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=r(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=r(t);return i},n=se.selectors={cacheLength:50,createPseudo:ae,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&j.test(i)&&(t=o(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+L+")"+e+"("+L+"|$)"))&&_(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,i){return function(n){var r=se.attr(n,e);return null==r?"!="===t:!t||(r+="","="===t?r===i:"!="===t?r!==i:"^="===t?i&&0===r.indexOf(i):"*="===t?i&&r.indexOf(i)>-1:"$="===t?i&&r.slice(-i.length)===i:"~="===t?(" "+r.replace(O," ")+" ").indexOf(i)>-1:"|="===t&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,i,n,r){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===r?function(e){return!!e.parentNode}:function(t,i,c){var l,h,d,u,f,p,g=s!==o?"nextSibling":"previousSibling",m=t.parentNode,w=a&&t.nodeName.toLowerCase(),b=!c&&!a,F=!1;if(m){if(s){for(;g;){for(u=t;u=u[g];)if(a?u.nodeName.toLowerCase()===w:1===u.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?m.firstChild:m.lastChild],o&&b){for(F=(f=(l=(h=(d=(u=m)[v]||(u[v]={}))[u.uniqueID]||(d[u.uniqueID]={}))[e]||[])[0]===A&&l[1])&&l[2],u=f&&m.childNodes[f];u=++f&&u&&u[g]||(F=f=0)||p.pop();)if(1===u.nodeType&&++F&&u===t){h[e]=[A,f,F];break}}else if(b&&(F=f=(l=(h=(d=(u=t)[v]||(u[v]={}))[u.uniqueID]||(d[u.uniqueID]={}))[e]||[])[0]===A&&l[1]),!1===F)for(;(u=++f&&u&&u[g]||(F=f=0)||p.pop())&&((a?u.nodeName.toLowerCase()!==w:1!==u.nodeType)||!++F||(b&&((h=(d=u[v]||(u[v]={}))[u.uniqueID]||(d[u.uniqueID]={}))[e]=[A,F]),u!==t)););return(F-=r)===n||F%n==0&&F/n>=0}}},PSEUDO:function(e,t){var i,r=n.pseudos[e]||n.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[v]?r(t):r.length>1?(i=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?ae((function(e,i){for(var n,s=r(e,t),o=s.length;o--;)e[n=D(e,s[o])]=!(i[n]=s[o])})):function(e){return r(e,0,i)}):r}},pseudos:{not:ae((function(e){var t=[],i=[],n=a(e.replace(U,"$1"));return n[v]?ae((function(e,t,i,r){for(var s,o=n(e,null,r,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))})):function(e,r,s){return t[0]=e,n(t,null,s,i),t[0]=null,!i.pop()}})),has:ae((function(e){return function(t){return se(e,t).length>0}})),contains:ae((function(e){return e=e.replace(J,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}})),lang:ae((function(e){return W.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(J,ee).toLowerCase(),function(t){var i;do{if(i=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(i=i.toLowerCase())===e||0===i.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ue(!1),disabled:ue(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe((function(){return[0]})),last:fe((function(e,t){return[t-1]})),eq:fe((function(e,t,i){return[i<0?i+t:i]})),even:fe((function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e})),odd:fe((function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e})),lt:fe((function(e,t,i){for(var n=i<0?i+t:i;--n>=0;)e.push(n);return e})),gt:fe((function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e}))}},n.pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=de(t);function ge(){}function me(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function we(e,t,i){var n=t.dir,r=t.next,s=r||n,o=i&&"parentNode"===s,a=C++;return t.first?function(t,i,r){for(;t=t[n];)if(1===t.nodeType||o)return e(t,i,r);return!1}:function(t,i,c){var l,h,d,u=[A,a];if(c){for(;t=t[n];)if((1===t.nodeType||o)&&e(t,i,c))return!0}else for(;t=t[n];)if(1===t.nodeType||o)if(h=(d=t[v]||(t[v]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[n]||t;else{if((l=h[s])&&l[0]===A&&l[1]===a)return u[2]=l[2];if(h[s]=u,u[2]=e(t,i,c))return!0}return!1}}function be(e){return e.length>1?function(t,i,n){for(var r=e.length;r--;)if(!e[r](t,i,n))return!1;return!0}:e[0]}function Fe(e,t,i,n,r){for(var s,o=[],a=0,c=e.length,l=null!=t;a<c;a++)(s=e[a])&&(i&&!i(s,n,r)||(o.push(s),l&&t.push(a)));return o}function ve(e,t,i,n,r,s){return n&&!n[v]&&(n=ve(n)),r&&!r[v]&&(r=ve(r,s)),ae((function(s,o,a,c){var l,h,d,u=[],f=[],p=o.length,g=s||function(e,t,i){for(var n=0,r=t.length;n<r;n++)se(e,t[n],i);return i}(t||"*",a.nodeType?[a]:a,[]),m=!e||!s&&t?g:Fe(g,u,e,a,c),w=i?r||(s?e:p||n)?[]:o:m;if(i&&i(m,w,a,c),n)for(l=Fe(w,f),n(l,[],a,c),h=l.length;h--;)(d=l[h])&&(w[f[h]]=!(m[f[h]]=d));if(s){if(r||e){if(r){for(l=[],h=w.length;h--;)(d=w[h])&&l.push(m[h]=d);r(null,w=[],l,c)}for(h=w.length;h--;)(d=w[h])&&(l=r?D(s,d):u[h])>-1&&(s[l]=!(o[l]=d))}}else w=Fe(w===o?w.splice(p,w.length):w),r?r(null,o,w,c):M.apply(o,w)}))}function ye(e){for(var t,i,r,s=e.length,o=n.relative[e[0].type],a=o||n.relative[" "],c=o?1:0,h=we((function(e){return e===t}),a,!0),d=we((function(e){return D(t,e)>-1}),a,!0),u=[function(e,i,n){var r=!o&&(n||i!==l)||((t=i).nodeType?h(e,i,n):d(e,i,n));return t=null,r}];c<s;c++)if(i=n.relative[e[c].type])u=[we(be(u),i)];else{if((i=n.filter[e[c].type].apply(null,e[c].matches))[v]){for(r=++c;r<s&&!n.relative[e[r].type];r++);return ve(c>1&&be(u),c>1&&me(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(U,"$1"),i,c<r&&ye(e.slice(c,r)),r<s&&ye(e=e.slice(r)),r<s&&me(e))}u.push(i)}return be(u)}return ge.prototype=n.filters=n.pseudos,n.setFilters=new ge,o=se.tokenize=function(e,t){var i,r,s,o,a,c,l,h=x[e+" "];if(h)return t?0:h.slice(0);for(a=e,c=[],l=n.preFilter;a;){for(o in i&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),c.push(s=[])),i=!1,(r=Q.exec(a))&&(i=r.shift(),s.push({value:i,type:r[0].replace(U," ")}),a=a.slice(i.length)),n.filter)!(r=G[o].exec(a))||l[o]&&!(r=l[o](r))||(i=r.shift(),s.push({value:i,type:o,matches:r}),a=a.slice(i.length));if(!i)break}return t?a.length:a?se.error(e):x(e,c).slice(0)},a=se.compile=function(e,t){var i,r=[],s=[],a=k[e+" "];if(!a){for(t||(t=o(e)),i=t.length;i--;)(a=ye(t[i]))[v]?r.push(a):s.push(a);a=k(e,function(e,t){var i=t.length>0,r=e.length>0,s=function(s,o,a,c,h){var d,p,m,w=0,b="0",F=s&&[],v=[],y=l,C=s||r&&n.find.TAG("*",h),_=A+=null==y?1:Math.random()||.1,x=C.length;for(h&&(l=o===f||o||h);b!==x&&null!=(d=C[b]);b++){if(r&&d){for(p=0,o||d.ownerDocument===f||(u(d),a=!g);m=e[p++];)if(m(d,o||f,a)){c.push(d);break}h&&(A=_)}i&&((d=!m&&d)&&w--,s&&F.push(d))}if(w+=b,i&&b!==w){for(p=0;m=t[p++];)m(F,v,o,a);if(s){if(w>0)for(;b--;)F[b]||v[b]||(v[b]=N.call(c));v=Fe(v)}M.apply(c,v),h&&!s&&v.length>0&&w+t.length>1&&se.uniqueSort(c)}return h&&(A=_,l=y),F};return i?ae(s):s}(s,r)),a.selector=e}return a},c=se.select=function(e,t,i,r){var s,c,l,h,d,u="function"==typeof e&&e,f=!r&&o(e=u.selector||e);if(i=i||[],1===f.length){if((c=f[0]=f[0].slice(0)).length>2&&"ID"===(l=c[0]).type&&9===t.nodeType&&g&&n.relative[c[1].type]){if(!(t=(n.find.ID(l.matches[0].replace(J,ee),t)||[])[0]))return i;u&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(s=G.needsContext.test(e)?0:c.length;s--&&(l=c[s],!n.relative[h=l.type]);)if((d=n.find[h])&&(r=d(l.matches[0].replace(J,ee),Z.test(c[0].type)&&pe(t.parentNode)||t))){if(c.splice(s,1),!(e=r.length&&me(c)))return M.apply(i,r),i;break}}return(u||a(e,f))(r,t,!g,i,!t||Z.test(e)&&pe(t.parentNode)||t),i},i.sortStable=v.split("").sort(I).join("")===v,i.detectDuplicates=!!d,u(),se}(window);z.find=O,z.expr=O.selectors,z.expr[":"]=z.expr.pseudos,z.uniqueSort=z.unique=O.uniqueSort,z.text=O.getText,z.isXMLDoc=O.isXML,z.contains=O.contains,z.escapeSelector=O.escape;var U=function(e,t,i){for(var n=[],r=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&z(e).is(i))break;n.push(e)}return n},q=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},Q=z.expr.match.needsContext;function V(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function W(e,t,i){return B(t)?z.grep(e,(function(e,n){return!!t.call(e,n,e)!==i})):t.nodeType?z.grep(e,(function(e){return e===t!==i})):"string"!=typeof t?z.grep(e,(function(e){return _.call(t,e)>-1!==i})):z.filter(t,e,i)}z.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?z.find.matchesSelector(n,e)?[n]:[]:z.find.matches(e,z.grep(t,(function(e){return 1===e.nodeType})))},z.fn.extend({find:function(e){var t,i,n=this.length,r=this;if("string"!=typeof e)return this.pushStack(z(e).filter((function(){for(t=0;t<n;t++)if(z.contains(r[t],this))return!0})));for(i=this.pushStack([]),t=0;t<n;t++)z.find(e,r[t],i);return n>1?z.uniqueSort(i):i},filter:function(e){return this.pushStack(W(this,e||[],!1))},not:function(e){return this.pushStack(W(this,e||[],!0))},is:function(e){return!!W(this,"string"==typeof e&&Q.test(e)?z(e):e||[],!1).length}});var G,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(z.fn.init=function(e,t,i){var n,r;if(!e)return this;if(i=i||G,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:$.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof z?t[0]:t,z.merge(this,z.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:F,!0)),j.test(n[1])&&z.isPlainObject(t))for(n in t)B(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(r=F.getElementById(n[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):B(e)?void 0!==i.ready?i.ready(e):e(z):z.makeArray(e,this)}).prototype=z.fn,G=z(F);var K=/^(?:parents|prev(?:Until|All))/,Y={children:!0,contents:!0,next:!0,prev:!0};function X(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}z.fn.extend({has:function(e){var t=z(e,this),i=t.length;return this.filter((function(){for(var e=0;e<i;e++)if(z.contains(this,t[e]))return!0}))},closest:function(e,t){var i,n=0,r=this.length,s=[],o="string"!=typeof e&&z(e);if(!Q.test(e))for(;n<r;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&z.find.matchesSelector(i,e))){s.push(i);break}return this.pushStack(s.length>1?z.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?_.call(z(e),this[0]):_.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(z.uniqueSort(z.merge(this.get(),z(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),z.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return U(e,"parentNode")},parentsUntil:function(e,t,i){return U(e,"parentNode",i)},next:function(e){return X(e,"nextSibling")},prev:function(e){return X(e,"previousSibling")},nextAll:function(e){return U(e,"nextSibling")},prevAll:function(e){return U(e,"previousSibling")},nextUntil:function(e,t,i){return U(e,"nextSibling",i)},prevUntil:function(e,t,i){return U(e,"previousSibling",i)},siblings:function(e){return q((e.parentNode||{}).firstChild,e)},children:function(e){return q(e.firstChild)},contents:function(e){return V(e,"iframe")?e.contentDocument:(V(e,"template")&&(e=e.content||e),z.merge([],e.childNodes))}},(function(e,t){z.fn[e]=function(i,n){var r=z.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=z.filter(n,r)),this.length>1&&(Y[e]||z.uniqueSort(r),K.test(e)&&r.reverse()),this.pushStack(r)}}));var Z=/[^\x20\t\r\n\f]+/g;function J(e){return e}function ee(e){throw e}function te(e,t,i,n){var r;try{e&&B(r=e.promise)?r.call(e).done(t).fail(i):e&&B(r=e.then)?r.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}z.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return z.each(e.match(Z)||[],(function(e,i){t[i]=!0})),t}(e):z.extend({},e);var t,i,n,r,s=[],o=[],a=-1,c=function(){for(r=r||e.once,n=t=!0;o.length;a=-1)for(i=o.shift();++a<s.length;)!1===s[a].apply(i[0],i[1])&&e.stopOnFalse&&(a=s.length,i=!1);e.memory||(i=!1),t=!1,r&&(s=i?[]:"")},l={add:function(){return s&&(i&&!t&&(a=s.length-1,o.push(i)),function t(i){z.each(i,(function(i,n){B(n)?e.unique&&l.has(n)||s.push(n):n&&n.length&&"string"!==T(n)&&t(n)}))}(arguments),i&&!t&&c()),this},remove:function(){return z.each(arguments,(function(e,t){for(var i;(i=z.inArray(t,s,i))>-1;)s.splice(i,1),i<=a&&a--})),this},has:function(e){return e?z.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=o=[],i||t||(s=i=""),this},locked:function(){return!!r},fireWith:function(e,i){return r||(i=[e,(i=i||[]).slice?i.slice():i],o.push(i),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!n}};return l},z.extend({Deferred:function(e){var t=[["notify","progress",z.Callbacks("memory"),z.Callbacks("memory"),2],["resolve","done",z.Callbacks("once memory"),z.Callbacks("once memory"),0,"resolved"],["reject","fail",z.Callbacks("once memory"),z.Callbacks("once memory"),1,"rejected"]],i="pending",n={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return n.then(null,e)},pipe:function(){var e=arguments;return z.Deferred((function(i){z.each(t,(function(t,n){var s=B(e[n[4]])&&e[n[4]];r[n[1]]((function(){var e=s&&s.apply(this,arguments);e&&B(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,n){var r=0;function s(e,t,i,n){return function(){var o=this,a=arguments,c=function(){var c,l;if(!(e<r)){if((c=i.apply(o,a))===t.promise())throw new TypeError("Thenable self-resolution");l=c&&("object"==typeof c||"function"==typeof c)&&c.then,B(l)?n?l.call(c,s(r,t,J,n),s(r,t,ee,n)):(r++,l.call(c,s(r,t,J,n),s(r,t,ee,n),s(r,t,J,t.notifyWith))):(i!==J&&(o=void 0,a=[c]),(n||t.resolveWith)(o,a))}},l=n?c:function(){try{c()}catch(n){z.Deferred.exceptionHook&&z.Deferred.exceptionHook(n,l.stackTrace),e+1>=r&&(i!==ee&&(o=void 0,a=[n]),t.rejectWith(o,a))}};e?l():(z.Deferred.getStackHook&&(l.stackTrace=z.Deferred.getStackHook()),window.setTimeout(l))}}return z.Deferred((function(r){t[0][3].add(s(0,r,B(n)?n:J,r.notifyWith)),t[1][3].add(s(0,r,B(e)?e:J)),t[2][3].add(s(0,r,B(i)?i:ee))})).promise()},promise:function(e){return null!=e?z.extend(e,n):n}},r={};return z.each(t,(function(e,s){var o=s[2],a=s[5];n[s[1]]=o.add,a&&o.add((function(){i=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(s[3].fire),r[s[0]]=function(){return r[s[0]+"With"](this===r?void 0:this,arguments),this},r[s[0]+"With"]=o.fireWith})),n.promise(r),e&&e.call(r,r),r},when:function(e){var t=arguments.length,i=t,n=Array(i),r=y.call(arguments),s=z.Deferred(),o=function(e){return function(i){n[e]=this,r[e]=arguments.length>1?y.call(arguments):i,--t||s.resolveWith(n,r)}};if(t<=1&&(te(e,s.done(o(i)).resolve,s.reject,!t),"pending"===s.state()||B(r[i]&&r[i].then)))return s.then();for(;i--;)te(r[i],o(i),s.reject);return s.promise()}});var ie=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;z.Deferred.exceptionHook=function(e,t){window.console&&window.console.warn&&e&&ie.test(e.name)&&window.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},z.readyException=function(e){window.setTimeout((function(){throw e}))};var ne=z.Deferred();function re(){F.removeEventListener("DOMContentLoaded",re),window.removeEventListener("load",re),z.ready()}z.fn.ready=function(e){return ne.then(e).catch((function(e){z.readyException(e)})),this},z.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--z.readyWait:z.isReady)||(z.isReady=!0,!0!==e&&--z.readyWait>0||ne.resolveWith(F,[z]))}}),z.ready.then=ne.then,"complete"===F.readyState||"loading"!==F.readyState&&!F.documentElement.doScroll?window.setTimeout(z.ready):(F.addEventListener("DOMContentLoaded",re),window.addEventListener("load",re));var se=function(e,t,i,n,r,s,o){var a=0,c=e.length,l=null==i;if("object"===T(i))for(a in r=!0,i)se(e,t,a,i[a],!0,s,o);else if(void 0!==n&&(r=!0,B(n)||(o=!0),l&&(o?(t.call(e,n),t=null):(l=t,t=function(e,t,i){return l.call(z(e),i)})),t))for(;a<c;a++)t(e[a],i,o?n:n.call(e[a],a,t(e[a],i)));return r?e:l?t.call(e):c?t(e[0],i):s},oe=/^-ms-/,ae=/-([a-z])/g;function ce(e,t){return t.toUpperCase()}function le(e){return e.replace(oe,"ms-").replace(ae,ce)}var he=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function de(){this.expando=z.expando+de.uid++}de.uid=1,de.prototype={cache:function(e){var t=e[this.expando];return t||(t={},he(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,r=this.cache(e);if("string"==typeof t)r[le(t)]=i;else for(n in t)r[le(n)]=t[n];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][le(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(le):(t=le(t))in n?[t]:t.match(Z)||[]).length;for(;i--;)delete n[t[i]]}(void 0===t||z.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!z.isEmptyObject(t)}};var ue=new de,fe=new de,pe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ge=/[A-Z]/g;function me(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(ge,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:pe.test(e)?JSON.parse(e):e)}(i)}catch(e){}fe.set(e,t,i)}else i=void 0;return i}z.extend({hasData:function(e){return fe.hasData(e)||ue.hasData(e)},data:function(e,t,i){return fe.access(e,t,i)},removeData:function(e,t){fe.remove(e,t)},_data:function(e,t,i){return ue.access(e,t,i)},_removeData:function(e,t){ue.remove(e,t)}}),z.fn.extend({data:function(e,t){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(r=fe.get(s),1===s.nodeType&&!ue.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&0===(n=o[i].name).indexOf("data-")&&(n=le(n.slice(5)),me(s,n,r[n]));ue.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){fe.set(this,e)})):se(this,(function(t){var i;if(s&&void 0===t)return void 0!==(i=fe.get(s,e))||void 0!==(i=me(s,e))?i:void 0;this.each((function(){fe.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){fe.remove(this,e)}))}}),z.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=ue.get(e,t),i&&(!n||Array.isArray(i)?n=ue.access(e,t,z.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=z.queue(e,t),n=i.length,r=i.shift(),s=z._queueHooks(e,t);"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===t&&i.unshift("inprogress"),delete s.stop,r.call(e,(function(){z.dequeue(e,t)}),s)),!n&&s&&s.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return ue.get(e,i)||ue.access(e,i,{empty:z.Callbacks("once memory").add((function(){ue.remove(e,[t+"queue",i])}))})}}),z.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?z.queue(this[0],e):void 0===t?this:this.each((function(){var i=z.queue(this,e,t);z._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&z.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){z.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,r=z.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(i=ue.get(s[o],e+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(t)}});var we=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,be=new RegExp("^(?:([+-])=|)("+we+")([a-z%]*)$","i"),Fe=["Top","Right","Bottom","Left"],ve=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&z.contains(e.ownerDocument,e)&&"none"===z.css(e,"display")},ye=function(e,t,i,n){var r,s,o={};for(s in t)o[s]=e.style[s],e.style[s]=t[s];for(s in r=i.apply(e,n||[]),t)e.style[s]=o[s];return r};var Ae={};function Ce(e){var t,i=e.ownerDocument,n=e.nodeName,r=Ae[n];return r||(t=i.body.appendChild(i.createElement(n)),r=z.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),Ae[n]=r,r)}function _e(e,t){for(var i,n,r=[],s=0,o=e.length;s<o;s++)(n=e[s]).style&&(i=n.style.display,t?("none"===i&&(r[s]=ue.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&ve(n)&&(r[s]=Ce(n))):"none"!==i&&(r[s]="none",ue.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}z.fn.extend({show:function(){return _e(this,!0)},hide:function(){return _e(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ve(this)?z(this).show():z(this).hide()}))}});var xe=/^(?:checkbox|radio)$/i,ke=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ie=/^$|^module$|\/(?:java|ecma)script/i,Se={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Ee(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&V(e,t)?z.merge([e],i):i}function Ne(e,t){for(var i=0,n=e.length;i<n;i++)ue.set(e[i],"globalEval",!t||ue.get(t[i],"globalEval"))}Se.optgroup=Se.option,Se.tbody=Se.tfoot=Se.colgroup=Se.caption=Se.thead,Se.th=Se.td;var Be=/<|&#?\w+;/;function Me(e,t,i,n,r){for(var s,o,a,c,l,h,d=t.createDocumentFragment(),u=[],f=0,p=e.length;f<p;f++)if((s=e[f])||0===s)if("object"===T(s))z.merge(u,s.nodeType?[s]:s);else if(Be.test(s)){for(o=o||d.appendChild(t.createElement("div")),a=(ke.exec(s)||["",""])[1].toLowerCase(),c=Se[a]||Se._default,o.innerHTML=c[1]+z.htmlPrefilter(s)+c[2],h=c[0];h--;)o=o.lastChild;z.merge(u,o.childNodes),(o=d.firstChild).textContent=""}else u.push(t.createTextNode(s));for(d.textContent="",f=0;s=u[f++];)if(n&&z.inArray(s,n)>-1)r&&r.push(s);else if(l=z.contains(s.ownerDocument,s),o=Ee(d.appendChild(s),"script"),l&&Ne(o),i)for(h=0;s=o[h++];)Ie.test(s.type||"")&&i.push(s);return d}!function(){var e=F.createDocumentFragment().appendChild(F.createElement("div")),t=F.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),N.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",N.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Re=F.documentElement,De=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Le=/^([^.]*)(?:\.(.+)|)/;function ze(){return!0}function He(){return!1}function Pe(){try{return F.activeElement}catch(e){}}function Oe(e,t,i,n,r,s){var o,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)Oe(e,a,i,n,t[a],s);return e}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),!1===r)r=He;else if(!r)return e;return 1===s&&(o=r,r=function(e){return z().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=z.guid++)),e.each((function(){z.event.add(this,t,r,n,i)}))}z.event={global:{},add:function(e,t,i,n,r){var s,o,a,c,l,h,d,u,f,p,g,m=ue.get(e);if(m)for(i.handler&&(i=(s=i).handler,r=s.selector),r&&z.find.matchesSelector(Re,r),i.guid||(i.guid=z.guid++),(c=m.events)||(c=m.events={}),(o=m.handle)||(o=m.handle=function(t){return void 0!==z&&z.event.triggered!==t.type?z.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(Z)||[""]).length;l--;)f=g=(a=Le.exec(t[l])||[])[1],p=(a[2]||"").split(".").sort(),f&&(d=z.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=z.event.special[f]||{},h=z.extend({type:f,origType:g,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&z.expr.match.needsContext.test(r),namespace:p.join(".")},s),(u=c[f])||((u=c[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,n,p,o)||e.addEventListener&&e.addEventListener(f,o)),d.add&&(d.add.call(e,h),h.handler.guid||(h.handler.guid=i.guid)),r?u.splice(u.delegateCount++,0,h):u.push(h),z.event.global[f]=!0)},remove:function(e,t,i,n,r){var s,o,a,c,l,h,d,u,f,p,g,m=ue.hasData(e)&&ue.get(e);if(m&&(c=m.events)){for(l=(t=(t||"").match(Z)||[""]).length;l--;)if(f=g=(a=Le.exec(t[l])||[])[1],p=(a[2]||"").split(".").sort(),f){for(d=z.event.special[f]||{},u=c[f=(n?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=u.length;s--;)h=u[s],!r&&g!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(u.splice(s,1),h.selector&&u.delegateCount--,d.remove&&d.remove.call(e,h));o&&!u.length&&(d.teardown&&!1!==d.teardown.call(e,p,m.handle)||z.removeEvent(e,f,m.handle),delete c[f])}else for(f in c)z.event.remove(e,f+t[l],i,n,!0);z.isEmptyObject(c)&&ue.remove(e,"handle events")}},dispatch:function(e){var t,i,n,r,s,o,a=z.event.fix(e),c=new Array(arguments.length),l=(ue.get(this,"events")||{})[a.type]||[],h=z.event.special[a.type]||{};for(c[0]=a,t=1;t<arguments.length;t++)c[t]=arguments[t];if(a.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,a)){for(o=z.event.handlers.call(this,a,l),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(n=((z.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,c))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,r,s,o,a=[],c=t.delegateCount,l=e.target;if(c&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(s=[],o={},i=0;i<c;i++)void 0===o[r=(n=t[i]).selector+" "]&&(o[r]=n.needsContext?z(r,this).index(l)>-1:z.find(r,this,null,[l]).length),o[r]&&s.push(n);s.length&&a.push({elem:l,handlers:s})}return l=this,c<t.length&&a.push({elem:l,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(z.Event.prototype,e,{enumerable:!0,configurable:!0,get:B(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[z.expando]?e:new z.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Pe()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Pe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&V(this,"input"))return this.click(),!1},_default:function(e){return V(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},z.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},z.Event=function(e,t){if(!(this instanceof z.Event))return new z.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ze:He,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&z.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[z.expando]=!0},z.Event.prototype={constructor:z.Event,isDefaultPrevented:He,isPropagationStopped:He,isImmediatePropagationStopped:He,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ze,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ze,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ze,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},z.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&De.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},z.event.addProp),z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){z.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||z.contains(this,n))||(e.type=r.origType,i=r.handler.apply(this,arguments),e.type=t),i}}})),z.fn.extend({on:function(e,t,i,n){return Oe(this,e,t,i,n)},one:function(e,t,i,n){return Oe(this,e,t,i,n,1)},off:function(e,t,i){var n,r;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,z(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=He),this.each((function(){z.event.remove(this,e,i,t)}))}});var Ue=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ve=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return V(e,"table")&&V(11!==t.nodeType?t:t.firstChild,"tr")&&z(e).children("tbody")[0]||e}function We(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ge(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function $e(e,t){var i,n,r,s,o,a,c,l;if(1===t.nodeType){if(ue.hasData(e)&&(s=ue.access(e),o=ue.set(t,s),l=s.events))for(r in delete o.handle,o.events={},l)for(i=0,n=l[r].length;i<n;i++)z.event.add(t,r,l[r][i]);fe.hasData(e)&&(a=fe.access(e),c=z.extend({},a),fe.set(t,c))}}function Ke(e,t){var i=t.nodeName.toLowerCase();"input"===i&&xe.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function Ye(e,t,i,n){t=A.apply([],t);var r,s,o,a,c,l,h=0,d=e.length,u=d-1,f=t[0],p=B(f);if(p||d>1&&"string"==typeof f&&!N.checkClone&&Qe.test(f))return e.each((function(r){var s=e.eq(r);p&&(t[0]=f.call(this,r,s.html())),Ye(s,t,i,n)}));if(d&&(s=(r=Me(t,e[0].ownerDocument,!1,e,n)).firstChild,1===r.childNodes.length&&(r=s),s||n)){for(a=(o=z.map(Ee(r,"script"),We)).length;h<d;h++)c=r,h!==u&&(c=z.clone(c,!0,!0),a&&z.merge(o,Ee(c,"script"))),i.call(e[h],c,h);if(a)for(l=o[o.length-1].ownerDocument,z.map(o,Ge),h=0;h<a;h++)c=o[h],Ie.test(c.type||"")&&!ue.access(c,"globalEval")&&z.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?z._evalUrl&&z._evalUrl(c.src):D(c.textContent.replace(Ve,""),l,c))}return e}function Xe(e,t,i){for(var n,r=t?z.filter(t,e):e,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||z.cleanData(Ee(n)),n.parentNode&&(i&&z.contains(n.ownerDocument,n)&&Ne(Ee(n,"script")),n.parentNode.removeChild(n));return e}z.extend({htmlPrefilter:function(e){return e.replace(Ue,"<$1></$2>")},clone:function(e,t,i){var n,r,s,o,a=e.cloneNode(!0),c=z.contains(e.ownerDocument,e);if(!(N.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||z.isXMLDoc(e)))for(o=Ee(a),n=0,r=(s=Ee(e)).length;n<r;n++)Ke(s[n],o[n]);if(t)if(i)for(s=s||Ee(e),o=o||Ee(a),n=0,r=s.length;n<r;n++)$e(s[n],o[n]);else $e(e,a);return(o=Ee(a,"script")).length>0&&Ne(o,!c&&Ee(e,"script")),a},cleanData:function(e){for(var t,i,n,r=z.event.special,s=0;void 0!==(i=e[s]);s++)if(he(i)){if(t=i[ue.expando]){if(t.events)for(n in t.events)r[n]?z.event.remove(i,n):z.removeEvent(i,n,t.handle);i[ue.expando]=void 0}i[fe.expando]&&(i[fe.expando]=void 0)}}}),z.fn.extend({detach:function(e){return Xe(this,e,!0)},remove:function(e){return Xe(this,e)},text:function(e){return se(this,(function(e){return void 0===e?z.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ye(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Ye(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(z.cleanData(Ee(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return z.clone(this,e,t)}))},html:function(e){return se(this,(function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!Se[(ke.exec(e)||["",""])[1].toLowerCase()]){e=z.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(z.cleanData(Ee(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ye(this,arguments,(function(t){var i=this.parentNode;z.inArray(this,e)<0&&(z.cleanData(Ee(this)),i&&i.replaceChild(t,this))}),e)}}),z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){z.fn[e]=function(e){for(var i,n=[],r=z(e),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),z(r[o])[t](i),C.apply(n,i.get());return this.pushStack(n)}}));var Ze=new RegExp("^("+we+")(?!px)[a-z%]+$","i"),Je=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=window),t.getComputedStyle(e)},et=new RegExp(Fe.join("|"),"i");function tt(e,t,i){var n,r,s,o,a=e.style;return(i=i||Je(e))&&(""!==(o=i.getPropertyValue(t)||i[t])||z.contains(e.ownerDocument,e)||(o=z.style(e,t)),!N.pixelBoxStyles()&&Ze.test(o)&&et.test(t)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function it(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Re.appendChild(a).appendChild(c);var e=window.getComputedStyle(c);i="1%"!==e.top,o=12===t(e.marginLeft),c.style.right="60%",s=36===t(e.right),n=36===t(e.width),c.style.position="absolute",r=36===c.offsetWidth||"absolute",Re.removeChild(a),c=null}}function t(e){return Math.round(parseFloat(e))}var i,n,r,s,o,a=F.createElement("div"),c=F.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",N.clearCloneStyle="content-box"===c.style.backgroundClip,z.extend(N,{boxSizingReliable:function(){return e(),n},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),o},scrollboxSize:function(){return e(),r}}))}();var nt,rt,st=/^(none|table(?!-c[ea]).+)/,ot=/^--/,at={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},lt=["Webkit","Moz","ms"],ht=F.createElement("div").style;function dt(e){var t=z.cssProps[e];return t||(t=z.cssProps[e]=function(e){if(e in ht)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=lt.length;i--;)if((e=lt[i]+t)in ht)return e}(e)||e),t}function ut(e,t,i){var n=be.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function ft(e,t,i,n,r,s){var o="width"===t?1:0,a=0,c=0;if(i===(n?"border":"content"))return 0;for(;o<4;o+=2)"margin"===i&&(c+=z.css(e,i+Fe[o],!0,r)),n?("content"===i&&(c-=z.css(e,"padding"+Fe[o],!0,r)),"margin"!==i&&(c-=z.css(e,"border"+Fe[o]+"Width",!0,r))):(c+=z.css(e,"padding"+Fe[o],!0,r),"padding"!==i?c+=z.css(e,"border"+Fe[o]+"Width",!0,r):a+=z.css(e,"border"+Fe[o]+"Width",!0,r));return!n&&s>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-c-a-.5))),c}function pt(e,t,i){var n=Je(e),r=tt(e,t,n),s="border-box"===z.css(e,"boxSizing",!1,n),o=s;if(Ze.test(r)){if(!i)return r;r="auto"}return o=o&&(N.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===z.css(e,"display",!1,n))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],o=!0),(r=parseFloat(r)||0)+ft(e,t,i||(s?"border":"content"),o,n,r)+"px"}z.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=tt(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,o,a=le(t),c=ot.test(t),l=e.style;if(c||(t=dt(a)),o=z.cssHooks[t]||z.cssHooks[a],void 0===i)return o&&"get"in o&&void 0!==(r=o.get(e,!1,n))?r:l[t];"string"===(s=typeof i)&&(r=be.exec(i))&&r[1]&&(i=function(e,t,i,n){var r,s,o=20,a=n?function(){return n.cur()}:function(){return z.css(e,t,"")},c=a(),l=i&&i[3]||(z.cssNumber[t]?"":"px"),h=(z.cssNumber[t]||"px"!==l&&+c)&&be.exec(z.css(e,t));if(h&&h[3]!==l){for(c/=2,l=l||h[3],h=+c||1;o--;)z.style(e,t,h+l),(1-s)*(1-(s=a()/c||.5))<=0&&(o=0),h/=s;h*=2,z.style(e,t,h+l),i=i||[]}return i&&(h=+h||+c||0,r=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=l,n.start=h,n.end=r)),r}(e,t,r),s="number"),null!=i&&i==i&&("number"===s&&(i+=r&&r[3]||(z.cssNumber[a]?"":"px")),N.clearCloneStyle||""!==i||0!==t.indexOf("background")||(l[t]="inherit"),o&&"set"in o&&void 0===(i=o.set(e,i,n))||(c?l.setProperty(t,i):l[t]=i))}},css:function(e,t,i,n){var r,s,o,a=le(t);return ot.test(t)||(t=dt(a)),(o=z.cssHooks[t]||z.cssHooks[a])&&"get"in o&&(r=o.get(e,!0,i)),void 0===r&&(r=tt(e,t,n)),"normal"===r&&t in ct&&(r=ct[t]),""===i||i?(s=parseFloat(r),!0===i||isFinite(s)?s||0:r):r}}),z.each(["height","width"],(function(e,t){z.cssHooks[t]={get:function(e,i,n){if(i)return!st.test(z.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?pt(e,t,n):ye(e,at,(function(){return pt(e,t,n)}))},set:function(e,i,n){var r,s=Je(e),o="border-box"===z.css(e,"boxSizing",!1,s),a=n&&ft(e,t,n,o,s);return o&&N.scrollboxSize()===s.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-ft(e,t,"border",!1,s)-.5)),a&&(r=be.exec(i))&&"px"!==(r[3]||"px")&&(e.style[t]=i,i=z.css(e,t)),ut(0,i,a)}}})),z.cssHooks.marginLeft=it(N.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(tt(e,"marginLeft"))||e.getBoundingClientRect().left-ye(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),z.each({margin:"",padding:"",border:"Width"},(function(e,t){z.cssHooks[e+t]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[e+Fe[n]+t]=s[n]||s[n-2]||s[0];return r}},"margin"!==e&&(z.cssHooks[e+t].set=ut)})),z.fn.extend({css:function(e,t){return se(this,(function(e,t,i){var n,r,s={},o=0;if(Array.isArray(t)){for(n=Je(e),r=t.length;o<r;o++)s[t[o]]=z.css(e,t[o],!1,n);return s}return void 0!==i?z.style(e,t,i):z.css(e,t)}),e,t,arguments.length>1)}}),z.fn.delay=function(e,t){return e=z.fx&&z.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var n=window.setTimeout(t,e);i.stop=function(){window.clearTimeout(n)}}))},nt=F.createElement("input"),rt=F.createElement("select").appendChild(F.createElement("option")),nt.type="checkbox",N.checkOn=""!==nt.value,N.optSelected=rt.selected,(nt=F.createElement("input")).value="t",nt.type="radio",N.radioValue="t"===nt.value;var gt,mt=z.expr.attrHandle;z.fn.extend({attr:function(e,t){return se(this,z.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){z.removeAttr(this,e)}))}}),z.extend({attr:function(e,t,i){var n,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?z.prop(e,t,i):(1===s&&z.isXMLDoc(e)||(r=z.attrHooks[t.toLowerCase()]||(z.expr.match.bool.test(t)?gt:void 0)),void 0!==i?null===i?void z.removeAttr(e,t):r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:(e.setAttribute(t,i+""),i):r&&"get"in r&&null!==(n=r.get(e,t))?n:null==(n=z.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!N.radioValue&&"radio"===t&&V(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,r=t&&t.match(Z);if(r&&1===e.nodeType)for(;i=r[n++];)e.removeAttribute(i)}}),gt={set:function(e,t,i){return!1===t?z.removeAttr(e,i):e.setAttribute(i,i),i}},z.each(z.expr.match.bool.source.match(/\w+/g),(function(e,t){var i=mt[t]||z.find.attr;mt[t]=function(e,t,n){var r,s,o=t.toLowerCase();return n||(s=mt[o],mt[o]=r,r=null!=i(e,t,n)?o:null,mt[o]=s),r}}));var wt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;function Ft(e){return(e.match(Z)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function yt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Z)||[]}z.fn.extend({prop:function(e,t){return se(this,z.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[z.propFix[e]||e]}))}}),z.extend({prop:function(e,t,i){var n,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&z.isXMLDoc(e)||(t=z.propFix[t]||t,r=z.propHooks[t]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:e[t]=i:r&&"get"in r&&null!==(n=r.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=z.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),N.optSelected||(z.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){z.propFix[this.toLowerCase()]=this})),z.fn.extend({addClass:function(e){var t,i,n,r,s,o,a,c=0;if(B(e))return this.each((function(t){z(this).addClass(e.call(this,t,vt(this)))}));if((t=yt(e)).length)for(;i=this[c++];)if(r=vt(i),n=1===i.nodeType&&" "+Ft(r)+" "){for(o=0;s=t[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");r!==(a=Ft(n))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,r,s,o,a,c=0;if(B(e))return this.each((function(t){z(this).removeClass(e.call(this,t,vt(this)))}));if(!arguments.length)return this.attr("class","");if((t=yt(e)).length)for(;i=this[c++];)if(r=vt(i),n=1===i.nodeType&&" "+Ft(r)+" "){for(o=0;s=t[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");r!==(a=Ft(n))&&i.setAttribute("class",a)}return this},toggleClass:function(e,t){var i=typeof e,n="string"===i||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):B(e)?this.each((function(i){z(this).toggleClass(e.call(this,i,vt(this),t),t)})):this.each((function(){var t,r,s,o;if(n)for(r=0,s=z(this),o=yt(e);t=o[r++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==i||((t=vt(this))&&ue.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":ue.get(this,"__className__")||""))}))},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+Ft(vt(i))+" ").indexOf(t)>-1)return!0;return!1}});var At=/\r/g;z.fn.extend({val:function(e){var t,i,n,r=this[0];return arguments.length?(n=B(e),this.each((function(i){var r;1===this.nodeType&&(null==(r=n?e.call(this,i,z(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=z.map(r,(function(e){return null==e?"":e+""}))),(t=z.valHooks[this.type]||z.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=z.valHooks[r.type]||z.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(i=t.get(r,"value"))?i:"string"==typeof(i=r.value)?i.replace(At,""):null==i?"":i:void 0}}),z.extend({valHooks:{option:{get:function(e){var t=z.find.attr(e,"value");return null!=t?t:Ft(z.text(e))}},select:{get:function(e){var t,i,n,r=e.options,s=e.selectedIndex,o="select-one"===e.type,a=o?null:[],c=o?s+1:r.length;for(n=s<0?c:o?s:0;n<c;n++)if(((i=r[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!V(i.parentNode,"optgroup"))){if(t=z(i).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var i,n,r=e.options,s=z.makeArray(t),o=r.length;o--;)((n=r[o]).selected=z.inArray(z.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(e.selectedIndex=-1),s}}}}),z.each(["radio","checkbox"],(function(){z.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=z.inArray(z(e).val(),t)>-1}},N.checkOn||(z.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),N.focusin="onfocusin"in window;var Ct=/^(?:focusinfocus|focusoutblur)$/,_t=function(e){e.stopPropagation()};z.extend(z.event,{trigger:function(e,t,i,n){var r,s,o,a,c,l,h,d,u=[i||F],f=I.call(e,"type")?e.type:e,p=I.call(e,"namespace")?e.namespace.split("."):[];if(s=d=o=i=i||F,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(f+z.event.triggered)&&(f.indexOf(".")>-1&&(p=f.split("."),f=p.shift(),p.sort()),c=f.indexOf(":")<0&&"on"+f,(e=e[z.expando]?e:new z.Event(f,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:z.makeArray(t,[e]),h=z.event.special[f]||{},n||!h.trigger||!1!==h.trigger.apply(i,t))){if(!n&&!h.noBubble&&!M(i)){for(a=h.delegateType||f,Ct.test(a+f)||(s=s.parentNode);s;s=s.parentNode)u.push(s),o=s;o===(i.ownerDocument||F)&&u.push(o.defaultView||o.parentWindow||window)}for(r=0;(s=u[r++])&&!e.isPropagationStopped();)d=s,e.type=r>1?a:h.bindType||f,(l=(ue.get(s,"events")||{})[e.type]&&ue.get(s,"handle"))&&l.apply(s,t),(l=c&&s[c])&&l.apply&&he(s)&&(e.result=l.apply(s,t),!1===e.result&&e.preventDefault());return e.type=f,n||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(u.pop(),t)||!he(i)||c&&B(i[f])&&!M(i)&&((o=i[c])&&(i[c]=null),z.event.triggered=f,e.isPropagationStopped()&&d.addEventListener(f,_t),i[f](),e.isPropagationStopped()&&d.removeEventListener(f,_t),z.event.triggered=void 0,o&&(i[c]=o)),e.result}},simulate:function(e,t,i){var n=z.extend(new z.Event,i,{type:e,isSimulated:!0});z.event.trigger(n,null,t)}}),z.fn.extend({trigger:function(e,t){return this.each((function(){z.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var i=this[0];if(i)return z.event.trigger(e,t,i,!0)}}),N.focusin||z.each({focus:"focusin",blur:"focusout"},(function(e,t){var i=function(e){z.event.simulate(t,e.target,z.event.fix(e))};z.event.special[t]={setup:function(){var n=this.ownerDocument||this,r=ue.access(n,t);r||n.addEventListener(e,i,!0),ue.access(n,t,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=ue.access(n,t)-1;r?ue.access(n,t,r):(n.removeEventListener(e,i,!0),ue.remove(n,t))}}}));var xt,kt=/\[\]$/,It=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,Et=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,i,n){var r;if(Array.isArray(t))z.each(t,(function(t,r){i||kt.test(e)?n(e,r):Nt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,i,n)}));else if(i||"object"!==T(t))n(e,t);else for(r in t)Nt(e+"["+r+"]",t[r],i,n)}z.param=function(e,t){var i,n=[],r=function(e,t){var i=B(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(e)||e.jquery&&!z.isPlainObject(e))z.each(e,(function(){r(this.name,this.value)}));else for(i in e)Nt(i,e[i],t,r);return n.join("&")},z.fn.extend({serialize:function(){return z.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=z.prop(this,"elements");return e?z.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!z(this).is(":disabled")&&Et.test(this.nodeName)&&!St.test(e)&&(this.checked||!xe.test(e))})).map((function(e,t){var i=z(this).val();return null==i?null:Array.isArray(i)?z.map(i,(function(e){return{name:t.name,value:e.replace(It,"\r\n")}})):{name:t.name,value:i.replace(It,"\r\n")}})).get()}}),z.fn.extend({wrapAll:function(e){var t;return this[0]&&(B(e)&&(e=e.call(this[0])),t=z(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return B(e)?this.each((function(t){z(this).wrapInner(e.call(this,t))})):this.each((function(){var t=z(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)}))},wrap:function(e){var t=B(e);return this.each((function(i){z(this).wrapAll(t?e.call(this,i):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){z(this).replaceWith(this.childNodes)})),this}}),z.expr.pseudos.hidden=function(e){return!z.expr.pseudos.visible(e)},z.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},N.createHTMLDocument=((xt=F.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===xt.childNodes.length),z.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(N.createHTMLDocument?((n=(t=F.implementation.createHTMLDocument("")).createElement("base")).href=F.location.href,t.head.appendChild(n)):t=F),s=!i&&[],(r=j.exec(e))?[t.createElement(r[1])]:(r=Me([e],t,s),s&&s.length&&z(s).remove(),z.merge([],r.childNodes)));var n,r,s},z.offset={setOffset:function(e,t,i){var n,r,s,o,a,c,l=z.css(e,"position"),h=z(e),d={};"static"===l&&(e.style.position="relative"),a=h.offset(),s=z.css(e,"top"),c=z.css(e,"left"),("absolute"===l||"fixed"===l)&&(s+c).indexOf("auto")>-1?(o=(n=h.position()).top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(c)||0),B(t)&&(t=t.call(e,i,z.extend({},a))),null!=t.top&&(d.top=t.top-a.top+o),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):h.css(d)}},z.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){z.offset.setOffset(this,e,t)}));var t,i,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],r={top:0,left:0};if("fixed"===z.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===z.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((r=z(e).offset()).top+=z.css(e,"borderTopWidth",!0),r.left+=z.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-z.css(n,"marginTop",!0),left:t.left-r.left-z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===z.css(e,"position");)e=e.offsetParent;return e||Re}))}}),z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var i="pageYOffset"===t;z.fn[e]=function(n){return se(this,(function(e,n,r){var s;if(M(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r)return s?s[t]:e[n];s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):e[n]=r}),e,n,arguments.length)}})),z.each(["top","left"],(function(e,t){z.cssHooks[t]=it(N.pixelPosition,(function(e,i){if(i)return i=tt(e,t),Ze.test(i)?z(e).position()[t]+"px":i}))})),z.each({Height:"height",Width:"width"},(function(e,t){z.each({padding:"inner"+e,content:t,"":"outer"+e},(function(i,n){z.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(!0===r||!0===s?"margin":"border");return se(this,(function(t,i,r){var s;return M(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?z.css(t,i,a):z.style(t,i,r,a)}),t,o?r:void 0,o)}}))})),z.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){z.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}})),z.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),z.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),z.proxy=function(e,t){var i,n,r;if("string"==typeof t&&(i=e[t],t=e,e=i),B(e))return n=y.call(arguments,2),r=function(){return e.apply(t||this,n.concat(y.call(arguments)))},r.guid=e.guid=e.guid||z.guid++,r},z.holdReady=function(e){e?z.readyWait++:z.ready(!0)},z.isArray=Array.isArray,z.parseJSON=JSON.parse,z.nodeName=V,z.isFunction=B,z.isWindow=M,z.camelCase=le,z.type=T,z.now=Date.now,z.isNumeric=function(e){var t=z.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))};const Bt=z;function Mt(e){return"string"==typeof e||e instanceof String}function Rt(e){var t=String(e).split(/[.,]/);return t[0].split("").reverse().reduce((function(e,t,i){return i%3==0?e+","+t:e+t})).split("").reverse().join("")+(t[1]?"."+t[1]:"")}const Dt=function(e){return e.split(/\n|\r\n|\r/g)};function Tt(e,t){var i,n,r=[],s=e.length,o=0,a=!1;if(s>0)for(r[o]=e.charAt(0),i=1;i<s;i++)'"'===(n=e.charAt(i))?a=!a:a||n!==t?r[o]+=n:r[++o]="";return r}function Lt(e){return e.length>0?e.charAt(0).toUpperCase()+e.slice(1):e}function zt(e){if(void 0!==e.name)return e.name;if(Mt(e)){let t=e.lastIndexOf("/"),i=t<0?e:e.substr(t+1);return t=i.indexOf("?"),t>0&&(i=i.substr(0,t)),i}throw Error("Expected File or string, got "+typeof e)}function Ht(e){return!!e&&("function"!=typeof e&&(e instanceof File||e.hasOwnProperty("name")&&"function"==typeof e.slice&&"function"==typeof e.arrayBuffer))}function Pt(e,t){const i=document.createElement("a");i.setAttribute("href",t),i.setAttribute("download",e),i.style.display="none",document.body.appendChild(i),i.click(),document.body.removeChild(i)}function Ot(e){for(var t=Ut,i=t.parser.loose.exec(e),n={},r=14;r--;)n[t.key[r]]=i[r]||"";return n[t.q.name]={},n[t.key[12]].replace(t.q.parser,(function(e,i,r){i&&(n[t.q.name][i]=r)})),n}"object"==typeof process&&"undefined"==typeof window&&(global.atob=function(e){return Buffer.from(e,"base64").toString("binary")});const Ut={strictMode:!1,key:["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],q:{name:"queryKey",parser:/(?:^|&)([^&=]*)=?([^&]*)/g},parser:{strict:/^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,loose:/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/}};function qt(e){let t=e.length;for(;--t>=0;)e[t]=0}const Qt=256,Vt=286,jt=30,Wt=15,Gt=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),$t=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Kt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Yt=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Xt=new Array(576);qt(Xt);const Zt=new Array(60);qt(Zt);const Jt=new Array(512);qt(Jt);const ei=new Array(256);qt(ei);const ti=new Array(29);qt(ti);const ii=new Array(jt);function ni(e,t,i,n,r){this.static_tree=e,this.extra_bits=t,this.extra_base=i,this.elems=n,this.max_length=r,this.has_stree=e&&e.length}let ri,si,oi;function ai(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}qt(ii);const ci=e=>e<256?Jt[e]:Jt[256+(e>>>7)],li=(e,t)=>{e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255},hi=(e,t,i)=>{e.bi_valid>16-i?(e.bi_buf|=t<<e.bi_valid&65535,li(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=i-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=i)},di=(e,t,i)=>{hi(e,i[2*t],i[2*t+1])},ui=(e,t)=>{let i=0;do{i|=1&e,e>>>=1,i<<=1}while(--t>0);return i>>>1},fi=(e,t,i)=>{const n=new Array(16);let r,s,o=0;for(r=1;r<=Wt;r++)o=o+i[r-1]<<1,n[r]=o;for(s=0;s<=t;s++){let t=e[2*s+1];0!==t&&(e[2*s]=ui(n[t]++,t))}},pi=e=>{let t;for(t=0;t<Vt;t++)e.dyn_ltree[2*t]=0;for(t=0;t<jt;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},gi=e=>{e.bi_valid>8?li(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},mi=(e,t,i,n)=>{const r=2*t,s=2*i;return e[r]<e[s]||e[r]===e[s]&&n[t]<=n[i]},wi=(e,t,i)=>{const n=e.heap[i];let r=i<<1;for(;r<=e.heap_len&&(r<e.heap_len&&mi(t,e.heap[r+1],e.heap[r],e.depth)&&r++,!mi(t,n,e.heap[r],e.depth));)e.heap[i]=e.heap[r],i=r,r<<=1;e.heap[i]=n},bi=(e,t,i)=>{let n,r,s,o,a=0;if(0!==e.sym_next)do{n=255&e.pending_buf[e.sym_buf+a++],n+=(255&e.pending_buf[e.sym_buf+a++])<<8,r=e.pending_buf[e.sym_buf+a++],0===n?di(e,r,t):(s=ei[r],di(e,s+Qt+1,t),o=Gt[s],0!==o&&(r-=ti[s],hi(e,r,o)),n--,s=ci(n),di(e,s,i),o=$t[s],0!==o&&(n-=ii[s],hi(e,n,o)))}while(a<e.sym_next);di(e,256,t)},Fi=(e,t)=>{const i=t.dyn_tree,n=t.stat_desc.static_tree,r=t.stat_desc.has_stree,s=t.stat_desc.elems;let o,a,c,l=-1;for(e.heap_len=0,e.heap_max=573,o=0;o<s;o++)0!==i[2*o]?(e.heap[++e.heap_len]=l=o,e.depth[o]=0):i[2*o+1]=0;for(;e.heap_len<2;)c=e.heap[++e.heap_len]=l<2?++l:0,i[2*c]=1,e.depth[c]=0,e.opt_len--,r&&(e.static_len-=n[2*c+1]);for(t.max_code=l,o=e.heap_len>>1;o>=1;o--)wi(e,i,o);c=s;do{o=e.heap[1],e.heap[1]=e.heap[e.heap_len--],wi(e,i,1),a=e.heap[1],e.heap[--e.heap_max]=o,e.heap[--e.heap_max]=a,i[2*c]=i[2*o]+i[2*a],e.depth[c]=(e.depth[o]>=e.depth[a]?e.depth[o]:e.depth[a])+1,i[2*o+1]=i[2*a+1]=c,e.heap[1]=c++,wi(e,i,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],((e,t)=>{const i=t.dyn_tree,n=t.max_code,r=t.stat_desc.static_tree,s=t.stat_desc.has_stree,o=t.stat_desc.extra_bits,a=t.stat_desc.extra_base,c=t.stat_desc.max_length;let l,h,d,u,f,p,g=0;for(u=0;u<=Wt;u++)e.bl_count[u]=0;for(i[2*e.heap[e.heap_max]+1]=0,l=e.heap_max+1;l<573;l++)h=e.heap[l],u=i[2*i[2*h+1]+1]+1,u>c&&(u=c,g++),i[2*h+1]=u,h>n||(e.bl_count[u]++,f=0,h>=a&&(f=o[h-a]),p=i[2*h],e.opt_len+=p*(u+f),s&&(e.static_len+=p*(r[2*h+1]+f)));if(0!==g){do{for(u=c-1;0===e.bl_count[u];)u--;e.bl_count[u]--,e.bl_count[u+1]+=2,e.bl_count[c]--,g-=2}while(g>0);for(u=c;0!==u;u--)for(h=e.bl_count[u];0!==h;)d=e.heap[--l],d>n||(i[2*d+1]!==u&&(e.opt_len+=(u-i[2*d+1])*i[2*d],i[2*d+1]=u),h--)}})(e,t),fi(i,l,e.bl_count)},vi=(e,t,i)=>{let n,r,s=-1,o=t[1],a=0,c=7,l=4;for(0===o&&(c=138,l=3),t[2*(i+1)+1]=65535,n=0;n<=i;n++)r=o,o=t[2*(n+1)+1],++a<c&&r===o||(a<l?e.bl_tree[2*r]+=a:0!==r?(r!==s&&e.bl_tree[2*r]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,a=0,s=r,0===o?(c=138,l=3):r===o?(c=6,l=3):(c=7,l=4))},yi=(e,t,i)=>{let n,r,s=-1,o=t[1],a=0,c=7,l=4;for(0===o&&(c=138,l=3),n=0;n<=i;n++)if(r=o,o=t[2*(n+1)+1],!(++a<c&&r===o)){if(a<l)do{di(e,r,e.bl_tree)}while(0!=--a);else 0!==r?(r!==s&&(di(e,r,e.bl_tree),a--),di(e,16,e.bl_tree),hi(e,a-3,2)):a<=10?(di(e,17,e.bl_tree),hi(e,a-3,3)):(di(e,18,e.bl_tree),hi(e,a-11,7));a=0,s=r,0===o?(c=138,l=3):r===o?(c=6,l=3):(c=7,l=4)}};let Ai=!1;const Ci=(e,t,i,n)=>{hi(e,0+(n?1:0),3),gi(e),li(e,i),li(e,~i),i&&e.pending_buf.set(e.window.subarray(t,t+i),e.pending),e.pending+=i};var _i=e=>{Ai||((()=>{let e,t,i,n,r;const s=new Array(16);for(i=0,n=0;n<28;n++)for(ti[n]=i,e=0;e<1<<Gt[n];e++)ei[i++]=n;for(ei[i-1]=n,r=0,n=0;n<16;n++)for(ii[n]=r,e=0;e<1<<$t[n];e++)Jt[r++]=n;for(r>>=7;n<jt;n++)for(ii[n]=r<<7,e=0;e<1<<$t[n]-7;e++)Jt[256+r++]=n;for(t=0;t<=Wt;t++)s[t]=0;for(e=0;e<=143;)Xt[2*e+1]=8,e++,s[8]++;for(;e<=255;)Xt[2*e+1]=9,e++,s[9]++;for(;e<=279;)Xt[2*e+1]=7,e++,s[7]++;for(;e<=287;)Xt[2*e+1]=8,e++,s[8]++;for(fi(Xt,287,s),e=0;e<jt;e++)Zt[2*e+1]=5,Zt[2*e]=ui(e,5);ri=new ni(Xt,Gt,257,Vt,Wt),si=new ni(Zt,$t,0,jt,Wt),oi=new ni(new Array(0),Kt,0,19,7)})(),Ai=!0),e.l_desc=new ai(e.dyn_ltree,ri),e.d_desc=new ai(e.dyn_dtree,si),e.bl_desc=new ai(e.bl_tree,oi),e.bi_buf=0,e.bi_valid=0,pi(e)},xi=(e,t,i,n)=>{let r,s,o=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=(e=>{let t,i=4093624447;for(t=0;t<=31;t++,i>>>=1)if(1&i&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<Qt;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0})(e)),Fi(e,e.l_desc),Fi(e,e.d_desc),o=(e=>{let t;for(vi(e,e.dyn_ltree,e.l_desc.max_code),vi(e,e.dyn_dtree,e.d_desc.max_code),Fi(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*Yt[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t})(e),r=e.opt_len+3+7>>>3,s=e.static_len+3+7>>>3,s<=r&&(r=s)):r=s=i+5,i+4<=r&&-1!==t?Ci(e,t,i,n):4===e.strategy||s===r?(hi(e,2+(n?1:0),3),bi(e,Xt,Zt)):(hi(e,4+(n?1:0),3),((e,t,i,n)=>{let r;for(hi(e,t-257,5),hi(e,i-1,5),hi(e,n-4,4),r=0;r<n;r++)hi(e,e.bl_tree[2*Yt[r]+1],3);yi(e,e.dyn_ltree,t-1),yi(e,e.dyn_dtree,i-1)})(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),bi(e,e.dyn_ltree,e.dyn_dtree)),pi(e),n&&gi(e)},ki={_tr_init:_i,_tr_stored_block:Ci,_tr_flush_block:xi,_tr_tally:(e,t,i)=>(e.pending_buf[e.sym_buf+e.sym_next++]=t,e.pending_buf[e.sym_buf+e.sym_next++]=t>>8,e.pending_buf[e.sym_buf+e.sym_next++]=i,0===t?e.dyn_ltree[2*i]++:(e.matches++,t--,e.dyn_ltree[2*(ei[i]+Qt+1)]++,e.dyn_dtree[2*ci(t)]++),e.sym_next===e.sym_end),_tr_align:e=>{hi(e,2,3),di(e,256,Xt),(e=>{16===e.bi_valid?(li(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)})(e)}};var Ii=(e,t,i,n)=>{let r=65535&e,s=e>>>16&65535,o=0;for(;0!==i;){o=i>2e3?2e3:i,i-=o;do{r=r+t[n++]|0,s=s+r|0}while(--o);r%=65521,s%=65521}return r|s<<16};const Si=new Uint32Array((()=>{let e,t=[];for(var i=0;i<256;i++){e=i;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[i]=e}return t})());var Ei=(e,t,i,n)=>{const r=Si,s=n+i;e^=-1;for(let i=n;i<s;i++)e=e>>>8^r[255&(e^t[i])];return~e},Ni={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Bi={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Mi,_tr_stored_block:Ri,_tr_flush_block:Di,_tr_tally:Ti,_tr_align:Li}=ki,{Z_NO_FLUSH:zi,Z_PARTIAL_FLUSH:Hi,Z_FULL_FLUSH:Pi,Z_FINISH:Oi,Z_BLOCK:Ui,Z_OK:qi,Z_STREAM_END:Qi,Z_STREAM_ERROR:Vi,Z_DATA_ERROR:ji,Z_BUF_ERROR:Wi,Z_DEFAULT_COMPRESSION:Gi,Z_FILTERED:$i,Z_HUFFMAN_ONLY:Ki,Z_RLE:Yi,Z_FIXED:Xi,Z_DEFAULT_STRATEGY:Zi,Z_UNKNOWN:Ji,Z_DEFLATED:en}=Bi,tn=258,nn=262,rn=42,sn=113,on=666,an=(e,t)=>(e.msg=Ni[t],t),cn=e=>2*e-(e>4?9:0),ln=e=>{let t=e.length;for(;--t>=0;)e[t]=0},hn=e=>{let t,i,n,r=e.w_size;t=e.hash_size,n=t;do{i=e.head[--n],e.head[n]=i>=r?i-r:0}while(--t);t=r,n=t;do{i=e.prev[--n],e.prev[n]=i>=r?i-r:0}while(--t)};let dn=(e,t,i)=>(t<<e.hash_shift^i)&e.hash_mask;const un=e=>{const t=e.state;let i=t.pending;i>e.avail_out&&(i=e.avail_out),0!==i&&(e.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+i),e.next_out),e.next_out+=i,t.pending_out+=i,e.total_out+=i,e.avail_out-=i,t.pending-=i,0===t.pending&&(t.pending_out=0))},fn=(e,t)=>{Di(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,un(e.strm)},pn=(e,t)=>{e.pending_buf[e.pending++]=t},gn=(e,t)=>{e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t},mn=(e,t,i,n)=>{let r=e.avail_in;return r>n&&(r=n),0===r?0:(e.avail_in-=r,t.set(e.input.subarray(e.next_in,e.next_in+r),i),1===e.state.wrap?e.adler=Ii(e.adler,t,r,i):2===e.state.wrap&&(e.adler=Ei(e.adler,t,r,i)),e.next_in+=r,e.total_in+=r,r)},wn=(e,t)=>{let i,n,r=e.max_chain_length,s=e.strstart,o=e.prev_length,a=e.nice_match;const c=e.strstart>e.w_size-nn?e.strstart-(e.w_size-nn):0,l=e.window,h=e.w_mask,d=e.prev,u=e.strstart+tn;let f=l[s+o-1],p=l[s+o];e.prev_length>=e.good_match&&(r>>=2),a>e.lookahead&&(a=e.lookahead);do{if(i=t,l[i+o]===p&&l[i+o-1]===f&&l[i]===l[s]&&l[++i]===l[s+1]){s+=2,i++;do{}while(l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&s<u);if(n=tn-(u-s),s=u-tn,n>o){if(e.match_start=t,o=n,n>=a)break;f=l[s+o-1],p=l[s+o]}}}while((t=d[t&h])>c&&0!=--r);return o<=e.lookahead?o:e.lookahead},bn=e=>{const t=e.w_size;let i,n,r;do{if(n=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-nn)&&(e.window.set(e.window.subarray(t,t+t-n),0),e.match_start-=t,e.strstart-=t,e.block_start-=t,e.insert>e.strstart&&(e.insert=e.strstart),hn(e),n+=t),0===e.strm.avail_in)break;if(i=mn(e.strm,e.window,e.strstart+e.lookahead,n),e.lookahead+=i,e.lookahead+e.insert>=3)for(r=e.strstart-e.insert,e.ins_h=e.window[r],e.ins_h=dn(e,e.ins_h,e.window[r+1]);e.insert&&(e.ins_h=dn(e,e.ins_h,e.window[r+3-1]),e.prev[r&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=r,r++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<nn&&0!==e.strm.avail_in)},Fn=(e,t)=>{let i,n,r,s=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,o=0,a=e.strm.avail_in;do{if(i=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r)break;if(r=e.strm.avail_out-r,n=e.strstart-e.block_start,i>n+e.strm.avail_in&&(i=n+e.strm.avail_in),i>r&&(i=r),i<s&&(0===i&&t!==Oi||t===zi||i!==n+e.strm.avail_in))break;o=t===Oi&&i===n+e.strm.avail_in?1:0,Ri(e,0,0,o),e.pending_buf[e.pending-4]=i,e.pending_buf[e.pending-3]=i>>8,e.pending_buf[e.pending-2]=~i,e.pending_buf[e.pending-1]=~i>>8,un(e.strm),n&&(n>i&&(n=i),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+n),e.strm.next_out),e.strm.next_out+=n,e.strm.avail_out-=n,e.strm.total_out+=n,e.block_start+=n,i-=n),i&&(mn(e.strm,e.strm.output,e.strm.next_out,i),e.strm.next_out+=i,e.strm.avail_out-=i,e.strm.total_out+=i)}while(0===o);return a-=e.strm.avail_in,a&&(a>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=a&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-a,e.strm.next_in),e.strstart),e.strstart+=a,e.insert+=a>e.w_size-e.insert?e.w_size-e.insert:a),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),o?4:t!==zi&&t!==Oi&&0===e.strm.avail_in&&e.strstart===e.block_start?2:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(mn(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,s=r>e.w_size?e.w_size:r,n=e.strstart-e.block_start,(n>=s||(n||t===Oi)&&t!==zi&&0===e.strm.avail_in&&n<=r)&&(i=n>r?r:n,o=t===Oi&&0===e.strm.avail_in&&i===n?1:0,Ri(e,e.block_start,i,o),e.block_start+=i,un(e.strm)),o?3:1)},vn=(e,t)=>{let i,n;for(;;){if(e.lookahead<nn){if(bn(e),e.lookahead<nn&&t===zi)return 1;if(0===e.lookahead)break}if(i=0,e.lookahead>=3&&(e.ins_h=dn(e,e.ins_h,e.window[e.strstart+3-1]),i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==i&&e.strstart-i<=e.w_size-nn&&(e.match_length=wn(e,i)),e.match_length>=3)if(n=Ti(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=dn(e,e.ins_h,e.window[e.strstart+3-1]),i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=dn(e,e.ins_h,e.window[e.strstart+1]);else n=Ti(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(fn(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,t===Oi?(fn(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(fn(e,!1),0===e.strm.avail_out)?1:2},yn=(e,t)=>{let i,n,r;for(;;){if(e.lookahead<nn){if(bn(e),e.lookahead<nn&&t===zi)return 1;if(0===e.lookahead)break}if(i=0,e.lookahead>=3&&(e.ins_h=dn(e,e.ins_h,e.window[e.strstart+3-1]),i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==i&&e.prev_length<e.max_lazy_match&&e.strstart-i<=e.w_size-nn&&(e.match_length=wn(e,i),e.match_length<=5&&(e.strategy===$i||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){r=e.strstart+e.lookahead-3,n=Ti(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=r&&(e.ins_h=dn(e,e.ins_h,e.window[e.strstart+3-1]),i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(fn(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if(n=Ti(e,0,e.window[e.strstart-1]),n&&fn(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=Ti(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,t===Oi?(fn(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(fn(e,!1),0===e.strm.avail_out)?1:2};function An(e,t,i,n,r){this.good_length=e,this.max_lazy=t,this.nice_length=i,this.max_chain=n,this.func=r}const Cn=[new An(0,0,0,0,Fn),new An(4,4,8,4,vn),new An(4,5,16,8,vn),new An(4,6,32,32,vn),new An(4,4,16,16,yn),new An(8,16,32,32,yn),new An(8,16,128,128,yn),new An(8,32,128,256,yn),new An(32,128,258,1024,yn),new An(32,258,258,4096,yn)];function _n(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=en,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),ln(this.dyn_ltree),ln(this.dyn_dtree),ln(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),ln(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),ln(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const xn=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.status!==rn&&57!==t.status&&69!==t.status&&73!==t.status&&91!==t.status&&103!==t.status&&t.status!==sn&&t.status!==on?1:0},kn=e=>{if(xn(e))return an(e,Vi);e.total_in=e.total_out=0,e.data_type=Ji;const t=e.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=2===t.wrap?57:t.wrap?rn:sn,e.adler=2===t.wrap?0:1,t.last_flush=-2,Mi(t),qi},In=e=>{const t=kn(e);var i;return t===qi&&((i=e.state).window_size=2*i.w_size,ln(i.head),i.max_lazy_match=Cn[i.level].max_lazy,i.good_match=Cn[i.level].good_length,i.nice_match=Cn[i.level].nice_length,i.max_chain_length=Cn[i.level].max_chain,i.strstart=0,i.block_start=0,i.lookahead=0,i.insert=0,i.match_length=i.prev_length=2,i.match_available=0,i.ins_h=0),t},Sn=(e,t,i,n,r,s)=>{if(!e)return Vi;let o=1;if(t===Gi&&(t=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>9||i!==en||n<8||n>15||t<0||t>9||s<0||s>Xi||8===n&&1!==o)return an(e,Vi);8===n&&(n=9);const a=new _n;return e.state=a,a.strm=e,a.status=rn,a.wrap=o,a.gzhead=null,a.w_bits=n,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=r+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+3-1)/3),a.window=new Uint8Array(2*a.w_size),a.head=new Uint16Array(a.hash_size),a.prev=new Uint16Array(a.w_size),a.lit_bufsize=1<<r+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new Uint8Array(a.pending_buf_size),a.sym_buf=a.lit_bufsize,a.sym_end=3*(a.lit_bufsize-1),a.level=t,a.strategy=s,a.method=i,In(e)};var En=(e,t)=>{let i=t.length;if(xn(e))return Vi;const n=e.state,r=n.wrap;if(2===r||1===r&&n.status!==rn||n.lookahead)return Vi;if(1===r&&(e.adler=Ii(e.adler,t,i,0)),n.wrap=0,i>=n.w_size){0===r&&(ln(n.head),n.strstart=0,n.block_start=0,n.insert=0);let e=new Uint8Array(n.w_size);e.set(t.subarray(i-n.w_size,i),0),t=e,i=n.w_size}const s=e.avail_in,o=e.next_in,a=e.input;for(e.avail_in=i,e.next_in=0,e.input=t,bn(n);n.lookahead>=3;){let e=n.strstart,t=n.lookahead-2;do{n.ins_h=dn(n,n.ins_h,n.window[e+3-1]),n.prev[e&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=e,e++}while(--t);n.strstart=e,n.lookahead=2,bn(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=o,e.input=a,e.avail_in=s,n.wrap=r,qi},Nn={deflateInit:(e,t)=>Sn(e,t,en,15,8,Zi),deflateInit2:Sn,deflateReset:In,deflateResetKeep:kn,deflateSetHeader:(e,t)=>xn(e)||2!==e.state.wrap?Vi:(e.state.gzhead=t,qi),deflate:(e,t)=>{if(xn(e)||t>Ui||t<0)return e?an(e,Vi):Vi;const i=e.state;if(!e.output||0!==e.avail_in&&!e.input||i.status===on&&t!==Oi)return an(e,0===e.avail_out?Wi:Vi);const n=i.last_flush;if(i.last_flush=t,0!==i.pending){if(un(e),0===e.avail_out)return i.last_flush=-1,qi}else if(0===e.avail_in&&cn(t)<=cn(n)&&t!==Oi)return an(e,Wi);if(i.status===on&&0!==e.avail_in)return an(e,Wi);if(i.status===rn&&0===i.wrap&&(i.status=sn),i.status===rn){let t=en+(i.w_bits-8<<4)<<8,n=-1;if(n=i.strategy>=Ki||i.level<2?0:i.level<6?1:6===i.level?2:3,t|=n<<6,0!==i.strstart&&(t|=32),t+=31-t%31,gn(i,t),0!==i.strstart&&(gn(i,e.adler>>>16),gn(i,65535&e.adler)),e.adler=1,i.status=sn,un(e),0!==i.pending)return i.last_flush=-1,qi}if(57===i.status)if(e.adler=0,pn(i,31),pn(i,139),pn(i,8),i.gzhead)pn(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),pn(i,255&i.gzhead.time),pn(i,i.gzhead.time>>8&255),pn(i,i.gzhead.time>>16&255),pn(i,i.gzhead.time>>24&255),pn(i,9===i.level?2:i.strategy>=Ki||i.level<2?4:0),pn(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(pn(i,255&i.gzhead.extra.length),pn(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=Ei(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69;else if(pn(i,0),pn(i,0),pn(i,0),pn(i,0),pn(i,0),pn(i,9===i.level?2:i.strategy>=Ki||i.level<2?4:0),pn(i,3),i.status=sn,un(e),0!==i.pending)return i.last_flush=-1,qi;if(69===i.status){if(i.gzhead.extra){let t=i.pending,n=(65535&i.gzhead.extra.length)-i.gzindex;for(;i.pending+n>i.pending_buf_size;){let r=i.pending_buf_size-i.pending;if(i.pending_buf.set(i.gzhead.extra.subarray(i.gzindex,i.gzindex+r),i.pending),i.pending=i.pending_buf_size,i.gzhead.hcrc&&i.pending>t&&(e.adler=Ei(e.adler,i.pending_buf,i.pending-t,t)),i.gzindex+=r,un(e),0!==i.pending)return i.last_flush=-1,qi;t=0,n-=r}let r=new Uint8Array(i.gzhead.extra);i.pending_buf.set(r.subarray(i.gzindex,i.gzindex+n),i.pending),i.pending+=n,i.gzhead.hcrc&&i.pending>t&&(e.adler=Ei(e.adler,i.pending_buf,i.pending-t,t)),i.gzindex=0}i.status=73}if(73===i.status){if(i.gzhead.name){let t,n=i.pending;do{if(i.pending===i.pending_buf_size){if(i.gzhead.hcrc&&i.pending>n&&(e.adler=Ei(e.adler,i.pending_buf,i.pending-n,n)),un(e),0!==i.pending)return i.last_flush=-1,qi;n=0}t=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,pn(i,t)}while(0!==t);i.gzhead.hcrc&&i.pending>n&&(e.adler=Ei(e.adler,i.pending_buf,i.pending-n,n)),i.gzindex=0}i.status=91}if(91===i.status){if(i.gzhead.comment){let t,n=i.pending;do{if(i.pending===i.pending_buf_size){if(i.gzhead.hcrc&&i.pending>n&&(e.adler=Ei(e.adler,i.pending_buf,i.pending-n,n)),un(e),0!==i.pending)return i.last_flush=-1,qi;n=0}t=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,pn(i,t)}while(0!==t);i.gzhead.hcrc&&i.pending>n&&(e.adler=Ei(e.adler,i.pending_buf,i.pending-n,n))}i.status=103}if(103===i.status){if(i.gzhead.hcrc){if(i.pending+2>i.pending_buf_size&&(un(e),0!==i.pending))return i.last_flush=-1,qi;pn(i,255&e.adler),pn(i,e.adler>>8&255),e.adler=0}if(i.status=sn,un(e),0!==i.pending)return i.last_flush=-1,qi}if(0!==e.avail_in||0!==i.lookahead||t!==zi&&i.status!==on){let n=0===i.level?Fn(i,t):i.strategy===Ki?((e,t)=>{let i;for(;;){if(0===e.lookahead&&(bn(e),0===e.lookahead)){if(t===zi)return 1;break}if(e.match_length=0,i=Ti(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,i&&(fn(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===Oi?(fn(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(fn(e,!1),0===e.strm.avail_out)?1:2})(i,t):i.strategy===Yi?((e,t)=>{let i,n,r,s;const o=e.window;for(;;){if(e.lookahead<=tn){if(bn(e),e.lookahead<=tn&&t===zi)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(r=e.strstart-1,n=o[r],n===o[++r]&&n===o[++r]&&n===o[++r])){s=e.strstart+tn;do{}while(n===o[++r]&&n===o[++r]&&n===o[++r]&&n===o[++r]&&n===o[++r]&&n===o[++r]&&n===o[++r]&&n===o[++r]&&r<s);e.match_length=tn-(s-r),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(i=Ti(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(i=Ti(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),i&&(fn(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===Oi?(fn(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(fn(e,!1),0===e.strm.avail_out)?1:2})(i,t):Cn[i.level].func(i,t);if(3!==n&&4!==n||(i.status=on),1===n||3===n)return 0===e.avail_out&&(i.last_flush=-1),qi;if(2===n&&(t===Hi?Li(i):t!==Ui&&(Ri(i,0,0,!1),t===Pi&&(ln(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),un(e),0===e.avail_out))return i.last_flush=-1,qi}return t!==Oi?qi:i.wrap<=0?Qi:(2===i.wrap?(pn(i,255&e.adler),pn(i,e.adler>>8&255),pn(i,e.adler>>16&255),pn(i,e.adler>>24&255),pn(i,255&e.total_in),pn(i,e.total_in>>8&255),pn(i,e.total_in>>16&255),pn(i,e.total_in>>24&255)):(gn(i,e.adler>>>16),gn(i,65535&e.adler)),un(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?qi:Qi)},deflateEnd:e=>{if(xn(e))return Vi;const t=e.state.status;return e.state=null,t===sn?an(e,ji):qi},deflateSetDictionary:En,deflateInfo:"pako deflate (from Nodeca project)"};const Bn=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var Mn={assign:function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const i=t.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(const t in i)Bn(i,t)&&(e[t]=i[t])}}return e},flattenChunks:e=>{let t=0;for(let i=0,n=e.length;i<n;i++)t+=e[i].length;const i=new Uint8Array(t);for(let t=0,n=0,r=e.length;t<r;t++){let r=e[t];i.set(r,n),n+=r.length}return i}};let Rn=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(FA){Rn=!1}const Dn=new Uint8Array(256);for(let vA=0;vA<256;vA++)Dn[vA]=vA>=252?6:vA>=248?5:vA>=240?4:vA>=224?3:vA>=192?2:1;Dn[254]=Dn[254]=1;var Tn={string2buf:e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,i,n,r,s,o=e.length,a=0;for(r=0;r<o;r++)i=e.charCodeAt(r),55296==(64512&i)&&r+1<o&&(n=e.charCodeAt(r+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),r++)),a+=i<128?1:i<2048?2:i<65536?3:4;for(t=new Uint8Array(a),s=0,r=0;s<a;r++)i=e.charCodeAt(r),55296==(64512&i)&&r+1<o&&(n=e.charCodeAt(r+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),r++)),i<128?t[s++]=i:i<2048?(t[s++]=192|i>>>6,t[s++]=128|63&i):i<65536?(t[s++]=224|i>>>12,t[s++]=128|i>>>6&63,t[s++]=128|63&i):(t[s++]=240|i>>>18,t[s++]=128|i>>>12&63,t[s++]=128|i>>>6&63,t[s++]=128|63&i);return t},buf2string:(e,t)=>{const i=t||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));let n,r;const s=new Array(2*i);for(r=0,n=0;n<i;){let t=e[n++];if(t<128){s[r++]=t;continue}let o=Dn[t];if(o>4)s[r++]=65533,n+=o-1;else{for(t&=2===o?31:3===o?15:7;o>1&&n<i;)t=t<<6|63&e[n++],o--;o>1?s[r++]=65533:t<65536?s[r++]=t:(t-=65536,s[r++]=55296|t>>10&1023,s[r++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&Rn)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let i="";for(let n=0;n<t;n++)i+=String.fromCharCode(e[n]);return i})(s,r)},utf8border:(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let i=t-1;for(;i>=0&&128==(192&e[i]);)i--;return i<0||0===i?t:i+Dn[e[i]]>t?i:t}};var Ln=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const zn=Object.prototype.toString,{Z_NO_FLUSH:Hn,Z_SYNC_FLUSH:Pn,Z_FULL_FLUSH:On,Z_FINISH:Un,Z_OK:qn,Z_STREAM_END:Qn,Z_DEFAULT_COMPRESSION:Vn,Z_DEFAULT_STRATEGY:jn,Z_DEFLATED:Wn}=Bi;function Gn(e){this.options=Mn.assign({level:Vn,method:Wn,chunkSize:16384,windowBits:15,memLevel:8,strategy:jn},e||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ln,this.strm.avail_out=0;let i=Nn.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(i!==qn)throw new Error(Ni[i]);if(t.header&&Nn.deflateSetHeader(this.strm,t.header),t.dictionary){let e;if(e="string"==typeof t.dictionary?Tn.string2buf(t.dictionary):"[object ArrayBuffer]"===zn.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,i=Nn.deflateSetDictionary(this.strm,e),i!==qn)throw new Error(Ni[i]);this._dict_set=!0}}function $n(e,t){const i=new Gn(t);if(i.push(e,!0),i.err)throw i.msg||Ni[i.err];return i.result}Gn.prototype.push=function(e,t){const i=this.strm,n=this.options.chunkSize;let r,s;if(this.ended)return!1;for(s=t===~~t?t:!0===t?Un:Hn,"string"==typeof e?i.input=Tn.string2buf(e):"[object ArrayBuffer]"===zn.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;;)if(0===i.avail_out&&(i.output=new Uint8Array(n),i.next_out=0,i.avail_out=n),(s===Pn||s===On)&&i.avail_out<=6)this.onData(i.output.subarray(0,i.next_out)),i.avail_out=0;else{if(r=Nn.deflate(i,s),r===Qn)return i.next_out>0&&this.onData(i.output.subarray(0,i.next_out)),r=Nn.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===qn;if(0!==i.avail_out){if(s>0&&i.next_out>0)this.onData(i.output.subarray(0,i.next_out)),i.avail_out=0;else if(0===i.avail_in)break}else this.onData(i.output)}return!0},Gn.prototype.onData=function(e){this.chunks.push(e)},Gn.prototype.onEnd=function(e){e===qn&&(this.result=Mn.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Kn=function(e,t){return(t=t||{}).raw=!0,$n(e,t)},Yn=function(e,t){return(t=t||{}).gzip=!0,$n(e,t)},Xn={Deflate:Gn,deflate:$n,deflateRaw:Kn,gzip:Yn,constants:Bi};const Zn=16209;var Jn=function(e,t){let i,n,r,s,o,a,c,l,h,d,u,f,p,g,m,w,b,F,v,y,A,C,_,x;const k=e.state;i=e.next_in,_=e.input,n=i+(e.avail_in-5),r=e.next_out,x=e.output,s=r-(t-e.avail_out),o=r+(e.avail_out-257),a=k.dmax,c=k.wsize,l=k.whave,h=k.wnext,d=k.window,u=k.hold,f=k.bits,p=k.lencode,g=k.distcode,m=(1<<k.lenbits)-1,w=(1<<k.distbits)-1;e:do{f<15&&(u+=_[i++]<<f,f+=8,u+=_[i++]<<f,f+=8),b=p[u&m];t:for(;;){if(F=b>>>24,u>>>=F,f-=F,F=b>>>16&255,0===F)x[r++]=65535&b;else{if(!(16&F)){if(64&F){if(32&F){k.mode=16191;break e}e.msg="invalid literal/length code",k.mode=Zn;break e}b=p[(65535&b)+(u&(1<<F)-1)];continue t}for(v=65535&b,F&=15,F&&(f<F&&(u+=_[i++]<<f,f+=8),v+=u&(1<<F)-1,u>>>=F,f-=F),f<15&&(u+=_[i++]<<f,f+=8,u+=_[i++]<<f,f+=8),b=g[u&w];;){if(F=b>>>24,u>>>=F,f-=F,F=b>>>16&255,16&F){if(y=65535&b,F&=15,f<F&&(u+=_[i++]<<f,f+=8,f<F&&(u+=_[i++]<<f,f+=8)),y+=u&(1<<F)-1,y>a){e.msg="invalid distance too far back",k.mode=Zn;break e}if(u>>>=F,f-=F,F=r-s,y>F){if(F=y-F,F>l&&k.sane){e.msg="invalid distance too far back",k.mode=Zn;break e}if(A=0,C=d,0===h){if(A+=c-F,F<v){v-=F;do{x[r++]=d[A++]}while(--F);A=r-y,C=x}}else if(h<F){if(A+=c+h-F,F-=h,F<v){v-=F;do{x[r++]=d[A++]}while(--F);if(A=0,h<v){F=h,v-=F;do{x[r++]=d[A++]}while(--F);A=r-y,C=x}}}else if(A+=h-F,F<v){v-=F;do{x[r++]=d[A++]}while(--F);A=r-y,C=x}for(;v>2;)x[r++]=C[A++],x[r++]=C[A++],x[r++]=C[A++],v-=3;v&&(x[r++]=C[A++],v>1&&(x[r++]=C[A++]))}else{A=r-y;do{x[r++]=x[A++],x[r++]=x[A++],x[r++]=x[A++],v-=3}while(v>2);v&&(x[r++]=x[A++],v>1&&(x[r++]=x[A++]))}break}if(64&F){e.msg="invalid distance code",k.mode=Zn;break e}b=g[(65535&b)+(u&(1<<F)-1)]}}break}}while(i<n&&r<o);v=f>>3,i-=v,f-=v<<3,u&=(1<<f)-1,e.next_in=i,e.next_out=r,e.avail_in=i<n?n-i+5:5-(i-n),e.avail_out=r<o?o-r+257:257-(r-o),k.hold=u,k.bits=f};const er=15,tr=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ir=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),nr=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),rr=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var sr=(e,t,i,n,r,s,o,a)=>{const c=a.bits;let l,h,d,u,f,p,g=0,m=0,w=0,b=0,F=0,v=0,y=0,A=0,C=0,_=0,x=null;const k=new Uint16Array(16),I=new Uint16Array(16);let S,E,N,B=null;for(g=0;g<=er;g++)k[g]=0;for(m=0;m<n;m++)k[t[i+m]]++;for(F=c,b=er;b>=1&&0===k[b];b--);if(F>b&&(F=b),0===b)return r[s++]=20971520,r[s++]=20971520,a.bits=1,0;for(w=1;w<b&&0===k[w];w++);for(F<w&&(F=w),A=1,g=1;g<=er;g++)if(A<<=1,A-=k[g],A<0)return-1;if(A>0&&(0===e||1!==b))return-1;for(I[1]=0,g=1;g<er;g++)I[g+1]=I[g]+k[g];for(m=0;m<n;m++)0!==t[i+m]&&(o[I[t[i+m]]++]=m);if(0===e?(x=B=o,p=20):1===e?(x=tr,B=ir,p=257):(x=nr,B=rr,p=0),_=0,m=0,g=w,f=s,v=F,y=0,d=-1,C=1<<F,u=C-1,1===e&&C>852||2===e&&C>592)return 1;for(;;){S=g-y,o[m]+1<p?(E=0,N=o[m]):o[m]>=p?(E=B[o[m]-p],N=x[o[m]-p]):(E=96,N=0),l=1<<g-y,h=1<<v,w=h;do{h-=l,r[f+(_>>y)+h]=S<<24|E<<16|N}while(0!==h);for(l=1<<g-1;_&l;)l>>=1;if(0!==l?(_&=l-1,_+=l):_=0,m++,0==--k[g]){if(g===b)break;g=t[i+o[m]]}if(g>F&&(_&u)!==d){for(0===y&&(y=F),f+=w,v=g-y,A=1<<v;v+y<b&&(A-=k[v+y],!(A<=0));)v++,A<<=1;if(C+=1<<v,1===e&&C>852||2===e&&C>592)return 1;d=_&u,r[d]=F<<24|v<<16|f-s}}return 0!==_&&(r[f+_]=g-y<<24|64<<16),a.bits=F,0};const{Z_FINISH:or,Z_BLOCK:ar,Z_TREES:cr,Z_OK:lr,Z_STREAM_END:hr,Z_NEED_DICT:dr,Z_STREAM_ERROR:ur,Z_DATA_ERROR:fr,Z_MEM_ERROR:pr,Z_BUF_ERROR:gr,Z_DEFLATED:mr}=Bi,wr=16180,br=16190,Fr=16191,vr=16192,yr=16194,Ar=16199,Cr=16200,_r=16206,xr=16209,kr=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function Ir(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Sr=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.mode<wr||t.mode>16211?1:0},Er=e=>{if(Sr(e))return ur;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=wr,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,lr},Nr=e=>{if(Sr(e))return ur;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,Er(e)},Br=(e,t)=>{let i;if(Sr(e))return ur;const n=e.state;return t<0?(i=0,t=-t):(i=5+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?ur:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=i,n.wbits=t,Nr(e))},Mr=(e,t)=>{if(!e)return ur;const i=new Ir;e.state=i,i.strm=e,i.window=null,i.mode=wr;const n=Br(e,t);return n!==lr&&(e.state=null),n};let Rr,Dr,Tr=!0;const Lr=e=>{if(Tr){Rr=new Int32Array(512),Dr=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(sr(1,e.lens,0,288,Rr,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;sr(2,e.lens,0,32,Dr,0,e.work,{bits:5}),Tr=!1}e.lencode=Rr,e.lenbits=9,e.distcode=Dr,e.distbits=5},zr=(e,t,i,n)=>{let r;const s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),n>=s.wsize?(s.window.set(t.subarray(i-s.wsize,i),0),s.wnext=0,s.whave=s.wsize):(r=s.wsize-s.wnext,r>n&&(r=n),s.window.set(t.subarray(i-n,i-n+r),s.wnext),(n-=r)?(s.window.set(t.subarray(i-n,i),0),s.wnext=n,s.whave=s.wsize):(s.wnext+=r,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=r))),0};var Hr=(e,t)=>{let i,n,r,s,o,a,c,l,h,d,u,f,p,g,m,w,b,F,v,y,A,C,_=0;const x=new Uint8Array(4);let k,I;const S=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Sr(e)||!e.output||!e.input&&0!==e.avail_in)return ur;i=e.state,i.mode===Fr&&(i.mode=vr),o=e.next_out,r=e.output,c=e.avail_out,s=e.next_in,n=e.input,a=e.avail_in,l=i.hold,h=i.bits,d=a,u=c,C=lr;e:for(;;)switch(i.mode){case wr:if(0===i.wrap){i.mode=vr;break}for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(2&i.wrap&&35615===l){0===i.wbits&&(i.wbits=15),i.check=0,x[0]=255&l,x[1]=l>>>8&255,i.check=Ei(i.check,x,2,0),l=0,h=0,i.mode=16181;break}if(i.head&&(i.head.done=!1),!(1&i.wrap)||(((255&l)<<8)+(l>>8))%31){e.msg="incorrect header check",i.mode=xr;break}if((15&l)!==mr){e.msg="unknown compression method",i.mode=xr;break}if(l>>>=4,h-=4,A=8+(15&l),0===i.wbits&&(i.wbits=A),A>15||A>i.wbits){e.msg="invalid window size",i.mode=xr;break}i.dmax=1<<i.wbits,i.flags=0,e.adler=i.check=1,i.mode=512&l?16189:Fr,l=0,h=0;break;case 16181:for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(i.flags=l,(255&i.flags)!==mr){e.msg="unknown compression method",i.mode=xr;break}if(57344&i.flags){e.msg="unknown header flags set",i.mode=xr;break}i.head&&(i.head.text=l>>8&1),512&i.flags&&4&i.wrap&&(x[0]=255&l,x[1]=l>>>8&255,i.check=Ei(i.check,x,2,0)),l=0,h=0,i.mode=16182;case 16182:for(;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.head&&(i.head.time=l),512&i.flags&&4&i.wrap&&(x[0]=255&l,x[1]=l>>>8&255,x[2]=l>>>16&255,x[3]=l>>>24&255,i.check=Ei(i.check,x,4,0)),l=0,h=0,i.mode=16183;case 16183:for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.head&&(i.head.xflags=255&l,i.head.os=l>>8),512&i.flags&&4&i.wrap&&(x[0]=255&l,x[1]=l>>>8&255,i.check=Ei(i.check,x,2,0)),l=0,h=0,i.mode=16184;case 16184:if(1024&i.flags){for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.length=l,i.head&&(i.head.extra_len=l),512&i.flags&&4&i.wrap&&(x[0]=255&l,x[1]=l>>>8&255,i.check=Ei(i.check,x,2,0)),l=0,h=0}else i.head&&(i.head.extra=null);i.mode=16185;case 16185:if(1024&i.flags&&(f=i.length,f>a&&(f=a),f&&(i.head&&(A=i.head.extra_len-i.length,i.head.extra||(i.head.extra=new Uint8Array(i.head.extra_len)),i.head.extra.set(n.subarray(s,s+f),A)),512&i.flags&&4&i.wrap&&(i.check=Ei(i.check,n,f,s)),a-=f,s+=f,i.length-=f),i.length))break e;i.length=0,i.mode=16186;case 16186:if(2048&i.flags){if(0===a)break e;f=0;do{A=n[s+f++],i.head&&A&&i.length<65536&&(i.head.name+=String.fromCharCode(A))}while(A&&f<a);if(512&i.flags&&4&i.wrap&&(i.check=Ei(i.check,n,f,s)),a-=f,s+=f,A)break e}else i.head&&(i.head.name=null);i.length=0,i.mode=16187;case 16187:if(4096&i.flags){if(0===a)break e;f=0;do{A=n[s+f++],i.head&&A&&i.length<65536&&(i.head.comment+=String.fromCharCode(A))}while(A&&f<a);if(512&i.flags&&4&i.wrap&&(i.check=Ei(i.check,n,f,s)),a-=f,s+=f,A)break e}else i.head&&(i.head.comment=null);i.mode=16188;case 16188:if(512&i.flags){for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(4&i.wrap&&l!==(65535&i.check)){e.msg="header crc mismatch",i.mode=xr;break}l=0,h=0}i.head&&(i.head.hcrc=i.flags>>9&1,i.head.done=!0),e.adler=i.check=0,i.mode=Fr;break;case 16189:for(;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}e.adler=i.check=kr(l),l=0,h=0,i.mode=br;case br:if(0===i.havedict)return e.next_out=o,e.avail_out=c,e.next_in=s,e.avail_in=a,i.hold=l,i.bits=h,dr;e.adler=i.check=1,i.mode=Fr;case Fr:if(t===ar||t===cr)break e;case vr:if(i.last){l>>>=7&h,h-=7&h,i.mode=_r;break}for(;h<3;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}switch(i.last=1&l,l>>>=1,h-=1,3&l){case 0:i.mode=16193;break;case 1:if(Lr(i),i.mode=Ar,t===cr){l>>>=2,h-=2;break e}break;case 2:i.mode=16196;break;case 3:e.msg="invalid block type",i.mode=xr}l>>>=2,h-=2;break;case 16193:for(l>>>=7&h,h-=7&h;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if((65535&l)!=(l>>>16^65535)){e.msg="invalid stored block lengths",i.mode=xr;break}if(i.length=65535&l,l=0,h=0,i.mode=yr,t===cr)break e;case yr:i.mode=16195;case 16195:if(f=i.length,f){if(f>a&&(f=a),f>c&&(f=c),0===f)break e;r.set(n.subarray(s,s+f),o),a-=f,s+=f,c-=f,o+=f,i.length-=f;break}i.mode=Fr;break;case 16196:for(;h<14;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(i.nlen=257+(31&l),l>>>=5,h-=5,i.ndist=1+(31&l),l>>>=5,h-=5,i.ncode=4+(15&l),l>>>=4,h-=4,i.nlen>286||i.ndist>30){e.msg="too many length or distance symbols",i.mode=xr;break}i.have=0,i.mode=16197;case 16197:for(;i.have<i.ncode;){for(;h<3;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.lens[S[i.have++]]=7&l,l>>>=3,h-=3}for(;i.have<19;)i.lens[S[i.have++]]=0;if(i.lencode=i.lendyn,i.lenbits=7,k={bits:i.lenbits},C=sr(0,i.lens,0,19,i.lencode,0,i.work,k),i.lenbits=k.bits,C){e.msg="invalid code lengths set",i.mode=xr;break}i.have=0,i.mode=16198;case 16198:for(;i.have<i.nlen+i.ndist;){for(;_=i.lencode[l&(1<<i.lenbits)-1],m=_>>>24,w=_>>>16&255,b=65535&_,!(m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(b<16)l>>>=m,h-=m,i.lens[i.have++]=b;else{if(16===b){for(I=m+2;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(l>>>=m,h-=m,0===i.have){e.msg="invalid bit length repeat",i.mode=xr;break}A=i.lens[i.have-1],f=3+(3&l),l>>>=2,h-=2}else if(17===b){for(I=m+3;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=m,h-=m,A=0,f=3+(7&l),l>>>=3,h-=3}else{for(I=m+7;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=m,h-=m,A=0,f=11+(127&l),l>>>=7,h-=7}if(i.have+f>i.nlen+i.ndist){e.msg="invalid bit length repeat",i.mode=xr;break}for(;f--;)i.lens[i.have++]=A}}if(i.mode===xr)break;if(0===i.lens[256]){e.msg="invalid code -- missing end-of-block",i.mode=xr;break}if(i.lenbits=9,k={bits:i.lenbits},C=sr(1,i.lens,0,i.nlen,i.lencode,0,i.work,k),i.lenbits=k.bits,C){e.msg="invalid literal/lengths set",i.mode=xr;break}if(i.distbits=6,i.distcode=i.distdyn,k={bits:i.distbits},C=sr(2,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,k),i.distbits=k.bits,C){e.msg="invalid distances set",i.mode=xr;break}if(i.mode=Ar,t===cr)break e;case Ar:i.mode=Cr;case Cr:if(a>=6&&c>=258){e.next_out=o,e.avail_out=c,e.next_in=s,e.avail_in=a,i.hold=l,i.bits=h,Jn(e,u),o=e.next_out,r=e.output,c=e.avail_out,s=e.next_in,n=e.input,a=e.avail_in,l=i.hold,h=i.bits,i.mode===Fr&&(i.back=-1);break}for(i.back=0;_=i.lencode[l&(1<<i.lenbits)-1],m=_>>>24,w=_>>>16&255,b=65535&_,!(m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(w&&!(240&w)){for(F=m,v=w,y=b;_=i.lencode[y+((l&(1<<F+v)-1)>>F)],m=_>>>24,w=_>>>16&255,b=65535&_,!(F+m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=F,h-=F,i.back+=F}if(l>>>=m,h-=m,i.back+=m,i.length=b,0===w){i.mode=16205;break}if(32&w){i.back=-1,i.mode=Fr;break}if(64&w){e.msg="invalid literal/length code",i.mode=xr;break}i.extra=15&w,i.mode=16201;case 16201:if(i.extra){for(I=i.extra;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.length+=l&(1<<i.extra)-1,l>>>=i.extra,h-=i.extra,i.back+=i.extra}i.was=i.length,i.mode=16202;case 16202:for(;_=i.distcode[l&(1<<i.distbits)-1],m=_>>>24,w=_>>>16&255,b=65535&_,!(m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(!(240&w)){for(F=m,v=w,y=b;_=i.distcode[y+((l&(1<<F+v)-1)>>F)],m=_>>>24,w=_>>>16&255,b=65535&_,!(F+m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=F,h-=F,i.back+=F}if(l>>>=m,h-=m,i.back+=m,64&w){e.msg="invalid distance code",i.mode=xr;break}i.offset=b,i.extra=15&w,i.mode=16203;case 16203:if(i.extra){for(I=i.extra;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.offset+=l&(1<<i.extra)-1,l>>>=i.extra,h-=i.extra,i.back+=i.extra}if(i.offset>i.dmax){e.msg="invalid distance too far back",i.mode=xr;break}i.mode=16204;case 16204:if(0===c)break e;if(f=u-c,i.offset>f){if(f=i.offset-f,f>i.whave&&i.sane){e.msg="invalid distance too far back",i.mode=xr;break}f>i.wnext?(f-=i.wnext,p=i.wsize-f):p=i.wnext-f,f>i.length&&(f=i.length),g=i.window}else g=r,p=o-i.offset,f=i.length;f>c&&(f=c),c-=f,i.length-=f;do{r[o++]=g[p++]}while(--f);0===i.length&&(i.mode=Cr);break;case 16205:if(0===c)break e;r[o++]=i.length,c--,i.mode=Cr;break;case _r:if(i.wrap){for(;h<32;){if(0===a)break e;a--,l|=n[s++]<<h,h+=8}if(u-=c,e.total_out+=u,i.total+=u,4&i.wrap&&u&&(e.adler=i.check=i.flags?Ei(i.check,r,u,o-u):Ii(i.check,r,u,o-u)),u=c,4&i.wrap&&(i.flags?l:kr(l))!==i.check){e.msg="incorrect data check",i.mode=xr;break}l=0,h=0}i.mode=16207;case 16207:if(i.wrap&&i.flags){for(;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(4&i.wrap&&l!==(4294967295&i.total)){e.msg="incorrect length check",i.mode=xr;break}l=0,h=0}i.mode=16208;case 16208:C=hr;break e;case xr:C=fr;break e;case 16210:return pr;default:return ur}return e.next_out=o,e.avail_out=c,e.next_in=s,e.avail_in=a,i.hold=l,i.bits=h,(i.wsize||u!==e.avail_out&&i.mode<xr&&(i.mode<_r||t!==or))&&zr(e,e.output,e.next_out,u-e.avail_out),d-=e.avail_in,u-=e.avail_out,e.total_in+=d,e.total_out+=u,i.total+=u,4&i.wrap&&u&&(e.adler=i.check=i.flags?Ei(i.check,r,u,e.next_out-u):Ii(i.check,r,u,e.next_out-u)),e.data_type=i.bits+(i.last?64:0)+(i.mode===Fr?128:0)+(i.mode===Ar||i.mode===yr?256:0),(0===d&&0===u||t===or)&&C===lr&&(C=gr),C},Pr={inflateReset:Nr,inflateReset2:Br,inflateResetKeep:Er,inflateInit:e=>Mr(e,15),inflateInit2:Mr,inflate:Hr,inflateEnd:e=>{if(Sr(e))return ur;let t=e.state;return t.window&&(t.window=null),e.state=null,lr},inflateGetHeader:(e,t)=>{if(Sr(e))return ur;const i=e.state;return 2&i.wrap?(i.head=t,t.done=!1,lr):ur},inflateSetDictionary:(e,t)=>{const i=t.length;let n,r,s;return Sr(e)?ur:(n=e.state,0!==n.wrap&&n.mode!==br?ur:n.mode===br&&(r=1,r=Ii(r,t,i,0),r!==n.check)?fr:(s=zr(e,t,i,i),s?(n.mode=16210,pr):(n.havedict=1,lr)))},inflateInfo:"pako inflate (from Nodeca project)"};var Or=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const Ur=Object.prototype.toString,{Z_NO_FLUSH:qr,Z_FINISH:Qr,Z_OK:Vr,Z_STREAM_END:jr,Z_NEED_DICT:Wr,Z_STREAM_ERROR:Gr,Z_DATA_ERROR:$r,Z_MEM_ERROR:Kr}=Bi;function Yr(e){this.options=Mn.assign({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ln,this.strm.avail_out=0;let i=Pr.inflateInit2(this.strm,t.windowBits);if(i!==Vr)throw new Error(Ni[i]);if(this.header=new Or,Pr.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=Tn.string2buf(t.dictionary):"[object ArrayBuffer]"===Ur.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(i=Pr.inflateSetDictionary(this.strm,t.dictionary),i!==Vr)))throw new Error(Ni[i])}function Xr(e,t){const i=new Yr(t);if(i.push(e),i.err)throw i.msg||Ni[i.err];return i.result}Yr.prototype.push=function(e,t){const i=this.strm,n=this.options.chunkSize,r=this.options.dictionary;let s,o,a;if(this.ended)return!1;for(o=t===~~t?t:!0===t?Qr:qr,"[object ArrayBuffer]"===Ur.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;;){for(0===i.avail_out&&(i.output=new Uint8Array(n),i.next_out=0,i.avail_out=n),s=Pr.inflate(i,o),s===Wr&&r&&(s=Pr.inflateSetDictionary(i,r),s===Vr?s=Pr.inflate(i,o):s===$r&&(s=Wr));i.avail_in>0&&s===jr&&i.state.wrap>0&&0!==e[i.next_in];)Pr.inflateReset(i),s=Pr.inflate(i,o);switch(s){case Gr:case $r:case Wr:case Kr:return this.onEnd(s),this.ended=!0,!1}if(a=i.avail_out,i.next_out&&(0===i.avail_out||s===jr))if("string"===this.options.to){let e=Tn.utf8border(i.output,i.next_out),t=i.next_out-e,r=Tn.buf2string(i.output,e);i.next_out=t,i.avail_out=n-t,t&&i.output.set(i.output.subarray(e,e+t),0),this.onData(r)}else this.onData(i.output.length===i.next_out?i.output:i.output.subarray(0,i.next_out));if(s!==Vr||0!==a){if(s===jr)return s=Pr.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===i.avail_in)break}}return!0},Yr.prototype.onData=function(e){this.chunks.push(e)},Yr.prototype.onEnd=function(e){e===Vr&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Mn.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Zr=function(e,t){return(t=t||{}).raw=!0,Xr(e,t)},Jr={Inflate:Yr,inflate:Xr,inflateRaw:Zr,ungzip:Xr,constants:Bi};const{Deflate:es,deflate:ts,deflateRaw:is,gzip:ns}=Xn,{Inflate:rs,inflate:ss,inflateRaw:os,ungzip:as}=Jr;var cs=is,ls=ss,hs=os,ds=as;const us=4;function fs(e){const t=ArrayBuffer.isView(e)?e:new Uint8Array(e);return 31===t[0]&&139===t[1]}function ps(e){const t=ArrayBuffer.isView(e)?e:new Uint8Array(e);return 0!==(t[3]&us)&&66===t[12]&&67===t[13]?gs(t.buffer):ds(t)}function gs(e,t){const i=[];let n=0,r=0;for(t=t||e.byteLength-18;n<t;)try{const t=ArrayBuffer.isView(e)?e:new Uint8Array(e,n,18),s=t[11]<<8|t[10],o=(t[3],t[12],t[13],t[15],t[14],1+(t[17]<<8|t[16])),a=12+s+n,c=e.byteLength-a,l=o-s-19;if(c<l||l<=0)break;const h=new Uint8Array(e,a,l),d=hs(h);n+=l-1+26,r+=d.byteLength,i.push(d)}catch(e){console.error(e);break}if(1===i.length)return i[0];{const e=new Uint8Array(r);let t=0;for(let n=0;n<i.length;++n){var s=new Uint8Array(i[n]);bs(s,0,e,t,s.length),t+=s.length}return e}}function ms(e){const t=ArrayBuffer.isView(e)?e:new Uint8Array(e);return 1+(t[17]<<8|t[16])}const ws="function"==typeof new Uint8Array(1).subarray;function bs(e,t,i,n,r){if(0!==r){if(!e)throw"Undef src";if(!i)throw"Undef dest";0===t&&r===e.length?Fs(e,i,n):ws?Fs(e.subarray(t,t+r),i,n):1===e.BYTES_PER_ELEMENT&&r>100?Fs(new Uint8Array(e.buffer,e.byteOffset+t,r),i,n):function(e,t,i,n,r){for(let s=0;s<r;++s)i[n+s]=e[t+s]}(e,t,i,n,r)}}function Fs(e,t,i){t.set(e,i)}function vs(e,t){const i=e.split(","),n=i[0].split(":")[1];let r=i[1];if(n.indexOf("base64")>=0){r=atob(r);const e=new Uint8Array(r.length);for(let t=0;t<r.length;t++)e[t]=r.charCodeAt(t);let i;return i=t||n.indexOf("gzip")>0?ds(e):e,i}return decodeURIComponent(r)}const ys={lerp:(e,t,i)=>(1-i)*e+i*t,mean:function(e){var t,i=0,n=0;for(t=0;t<e.length;t++)isNaN(e[t])||(i+=e[t],n++);return n>0?i/n:0},meanAndStdev:function(e){var t,i,n=0,r=0,s=0;for(i=0;i<e.length;i++)t=e[i],isNaN(t)||(n+=t,r+=t*t,s++);return s>0?{mean:n/s,stdev:Math.sqrt(r-n*n/s)}:{mean:0,stdev:0}},median:function(e){var t=e.length;return e.sort(),t%2==0?(e[t/2-1]+e[t/2])/2:e[(t-1)/2]},percentile:function(e,t){if(0!==e.length){var i=Math.floor(e.length*((100-t)/100));return 0===i?(e.sort((function(e,t){return t-e})),e[i]):function(e,t){var i,n=new As;for(i=0;i<e.length;i++){var r=e[i];(n.content.length<t||r>n.content[0])&&(n.content.length===t&&n.pop(),n.push(r))}return n.content[0]}(e,i)}},clamp:function(e,t,i){return Math.min(Math.max(e,t),i)},log2:function(e){return Math.log(e)/Math.LN2}};function As(){this.content=[]}function Cs(e,t){return Math.random()*(t-e)+e}As.prototype={push:function(e){this.content.push(e),this.bubbleUp(this.content.length-1)},pop:function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.sinkDown(0)),e},remove:function(e){for(var t=this.content.length,i=0;i<t;i++)if(this.content[i]===e){var n=this.content.pop();if(i===t-1)break;this.content[i]=n,this.bubbleUp(i),this.sinkDown(i);break}},size:function(){return this.content.length},bubbleUp:function(e){for(var t=this.content[e],i=t;e>0;){var n=Math.floor((e+1)/2)-1,r=this.content[n];if(i>=r)break;this.content[n]=t,this.content[e]=r,e=n}},sinkDown:function(e){for(var t=this.content.length,i=this.content[e],n=i;;){var r=2*(e+1),s=r-1,o=null;if(s<t){var a=this.content[s],c=a;a<n&&(o=s)}if(r<t)this.content[r]<(null==o?n:c)&&(o=r);if(null==o)break;this.content[e]=this.content[o],this.content[o]=i,e=o}}};const _s={rgbListFromHSV:()=>{let e=[];for(let t=1;t>=.5;t-=.1)for(let i=0;i<1;i+=1/28){const n="rgb("+_s.hsvToRgb(i,1,t).join(",")+")";e.push(n)}return e.pop(),e.push(_s.rgbColor(16,16,16)),e},rgbToHex:function(e){return(e=e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i))&&4===e.length?"#"+("0"+parseInt(e[1],10).toString(16)).slice(-2)+("0"+parseInt(e[2],10).toString(16)).slice(-2)+("0"+parseInt(e[3],10).toString(16)).slice(-2):""},hexToRgb:function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);if(null!==t)return"rgb("+parseInt(t[1],16)+","+parseInt(t[2],16)+","+parseInt(t[3],16)+")"},hsvToRgb:function(e,t,i){var n,r,s,o=Math.floor(6*e),a=6*e-o,c=i*(1-t),l=i*(1-a*t),h=i*(1-(1-a)*t);switch(o%6){case 0:n=i,r=h,s=c;break;case 1:n=l,r=i,s=c;break;case 2:n=c,r=i,s=h;break;case 3:n=c,r=l,s=i;break;case 4:n=h,r=c,s=i;break;case 5:n=i,r=c,s=l}return[Math.floor(255*n),Math.floor(255*r),Math.floor(255*s)]},hslToRgb:function(e,t,i){var n,r,s;if(0===t)n=r=s=i;else{var o=i<.5?i*(1+t):i+t-i*t,a=2*i-o;n=_s.hue2rgb(a,o,e+1/3),r=_s.hue2rgb(a,o,e),s=_s.hue2rgb(a,o,e-1/3)}return[255*n,255*r,255*s]},hue2rgb:(e,t,i)=>(i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e),rgbaColor:function(e,t,i,n){return"rgba("+(e=ys.clamp(e,0,255))+","+(t=ys.clamp(t,0,255))+","+(i=ys.clamp(i,0,255))+","+(n=ys.clamp(n,0,1))+")"},rgbColor:function(e,t,i){return"rgb("+(e=ys.clamp(e,0,255))+","+(t=ys.clamp(t,0,255))+","+(i=ys.clamp(i,0,255))+")"},greyScale:function(e){var t=ys.clamp(e,0,255);return"rgb("+t+","+t+","+t+")"},randomGrey:function(e,t){e=ys.clamp(e,0,255),t=ys.clamp(t,0,255);var i=Math.round(Cs(e,t)).toString(10);return"rgb("+i+","+i+","+i+")"},randomRGB:function(e,t){return e=ys.clamp(e,0,255),t=ys.clamp(t,0,255),"rgb("+Math.round(Cs(e,t)).toString(10)+","+Math.round(Cs(e,t)).toString(10)+","+Math.round(Cs(e,t)).toString(10)+")"},randomRGBConstantAlpha:function(e,t,i){return e=ys.clamp(e,0,255),t=ys.clamp(t,0,255),"rgba("+Math.round(Cs(e,t)).toString(10)+","+Math.round(Cs(e,t)).toString(10)+","+Math.round(Cs(e,t)).toString(10)+","+i+")"},addAlpha:function(e,t){if("0"===e||"."===e)e="rgb(0,0,0)";else{const t=this.colorNameToHex(e);t&&(e=t)}var i=/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e);if(e.startsWith("rgba")){const i=e.lastIndexOf(",");return e.substring(0,i+1)+t.toString()+")"}return i&&(e=_s.hexToRgb(e)),e.startsWith("rgb")?e.replace("rgb","rgba").replace(")",", "+t+")"):(console.log(e+" is not an rgb style string"),e)},rgbComponents:function(e){if("0"===e||"."===e)return[0,0,0];if(/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e))e=_s.hexToRgb(e);else if(!e.startsWith("rgb")){const t=this.colorNameToHex(e);e=this.hexToRgb(t)}if(e.startsWith("rgb("))return e.substring(4,e.length-1).split(",").map((e=>Number.parseInt(e.trim())));if(e.startsWith("rgba("))return e.substring(5,e.length-1).split(",").map(((e,t)=>(e=e.trim(),3===t?Number.parseFloat(e):Number.parseInt(e))));throw Error("Unrecognized color string: color")},getCompositeColor:function(e,t,i){return"rgb("+Math.floor(i*t[0]+(1-i)*e[0])+","+Math.floor(i*t[1]+(1-i)*e[1])+","+Math.floor(i*t[2]+(1-i)*e[2])+")"},createColorString:function(e){const t=this.createColorStringSafe(e);return t||e},createColorStringSafe:function(e){if((e=function(e){return void 0===e||((e.startsWith("'")||e.startsWith('"'))&&(e=e.substring(1)),(e.endsWith("'")||e.endsWith('"'))&&(e=e.substring(0,e.length-1))),e}(e)).startsWith("rgb(")&&e.endsWith(")"))return e;if(e.startsWith("#")&&e.length<8)return e;const t=this.colorNameToHex(e);if(t)return t;const i=e.split(",");return 3===i.length&&xs(i[0])&&xs(i[1])&&xs(i[2])?`rgb(${e})`:void 0},darkenLighten:function(e,t){let i,n=this.colorNameToHex(e);i=n?_s.hexToRgb(n):e.startsWith("rgb(")?e:_s.hexToRgb(e);const r=i.replace(")","").substring(4).split(","),s=Math.max(0,Math.min(255,Number.parseInt(r[0].trim())+t)),o=Math.max(0,Math.min(255,Number.parseInt(r[1].trim())+t)),a=Math.max(0,Math.min(255,Number.parseInt(r[2].trim())+t));return"rgb("+s.toString()+","+o.toString()+","+a.toString()+")"},colorNameToHex:function(e){return{aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c","indigo ":"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32",darkgrey:"#a9a9a9",darkslategrey:"#2f4f4f",dimgrey:"#696969",grey:"#808080",lightgray:"#d3d3d3",lightslategrey:"#778899",slategrey:"#708090"}[e]}};function xs(e){const t=Number.parseInt(e);return!Number.isNaN(t)&&t>=0&&t<=255}const ks="googleapis";class Is{constructor(){this.oauthTokens={}}setToken(e,t){t=t||ks,this.oauthTokens[t]=e}getToken(e){let t;e=e||ks;for(let i of Object.keys(this.oauthTokens)){if(Ss(i).test(e)){t=this.oauthTokens[i];break}}return t}removeToken(e){e=e||ks;for(let t of Object.keys(this.oauthTokens)){Ss(t).test(e)&&(this.oauthTokens[t]=void 0)}}}function Ss(e){return new RegExp("^"+e.split(/\*+/).map(Es).join(".*")+"$")}function Es(e){return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&")}function Ns(e){return e.includes("googleapis")&&!e.includes("urlshortener")||Bs(e)||Ms(e)}function Bs(e){return e.startsWith("gs://")||e.startsWith("https://www.googleapis.com/storage")||e.startsWith("https://storage.cloud.google.com")||e.startsWith("https://storage.googleapis.com")}function Ms(e){return e.indexOf("drive.google.com")>=0||e.indexOf("www.googleapis.com/drive")>0}function Rs(e){let{bucket:t,object:i}=function(e){let t,i;if(e.startsWith("gs://")){const n=e.indexOf("/",5);if(n>=0){t=e.substring(5,n);const r=e.indexOf("?");i=r<0?e.substring(n+1):e.substring(n+1,r)}}else if(e.startsWith("https://storage.googleapis.com")||e.startsWith("https://storage.cloud.google.com")){const n=e.indexOf("/v1/b/",8);if(n>0){const r=e.indexOf("/o/",n);if(r>0){const s=e.indexOf("?",r);t=e.substring(n+6,r),i=s>0?e.substring(r+3,s):e.substring(r+3)}}else{const n=e.indexOf("/",8),r=e.indexOf("/",n+1),s=e.indexOf("?",r);r>0&&(t=e.substring(n+1,r),i=s<0?e.substring(r+1):e.substring(r+1,s))}}else if(e.startsWith("https://www.googleapis.com/storage/v1/b")){const n=e.indexOf("/v1/b/",8),r=e.indexOf("/o/",n);if(r>0){const s=e.indexOf("?",r);t=e.substring(n+6,r),i=s>0?e.substring(r+3,s):e.substring(r+3)}}if(t&&i)return{bucket:t,object:i};throw Error(`Unrecognized Google Storage URI: ${e}`)}(e);i=function(e){let t="";return e.split("").forEach((function(e){Ds.has(e)?t+=Ds.get(e):t+=e})),t}(i);const n=e.indexOf("?");return`https://storage.googleapis.com/storage/v1/b/${t}/o/${i}${n>0?e.substring(n)+"&alt=media":"?alt=media"}`}const Ds=new Map;function Ts(){return window.google&&window.google.igv}async function Ls(e){if(!Ts())throw Error("Google oAuth has not been initialized");if(google.igv.tokenResponse&&Date.now()<google.igv.tokenExpiresAt&&google.accounts.oauth2.hasGrantedAllScopes(google.igv.tokenResponse,e))return google.igv.tokenResponse.access_token;{const t=google.igv.tokenClient;return new Promise(((i,n)=>{try{t.callback=e=>{void 0!==e.error&&n(e),google.igv.tokenResponse=e,google.igv.tokenExpiresAt=Date.now()+1e3*e.expires_in,i(e.access_token)},t.requestAccessToken({scope:e})}catch(e){console.log(e)}}))}}function zs(){return google.igv.apiKey}function Hs(e){var t=Ps(e);return t?"https://www.googleapis.com/drive/v3/files/"+t+"?alt=media&supportsTeamDrives=true":e}function Ps(e){if(e.includes("/open?id=")){const t=e.indexOf("/open?id=")+9,i=e.indexOf("&");if(t>0&&i>t)return e.substring(t,i);if(t>0)return e.substring(t)}else{if(e.includes("/file/d/")){const t=e.indexOf("/file/d/")+8,i=e.lastIndexOf("/");return e.substring(t,i)}if(e.startsWith("https://www.googleapis.com/drive")){let t=e.indexOf("/files/");const i=e.indexOf("?");if(t>0)return t+=7,i>0?e.substring(t,i):e.substring(t)}}throw Error("Unknown Google Drive url format: "+e)}Ds.set("!","%21"),Ds.set("#","%23"),Ds.set("$","%24"),Ds.set("%","%25"),Ds.set("&","%26"),Ds.set("'","%27"),Ds.set("(","%28"),Ds.set(")","%29"),Ds.set("*","%2A"),Ds.set("+","%2B"),Ds.set(",","%2C"),Ds.set("/","%2F"),Ds.set(":","%3A"),Ds.set(";","%3B"),Ds.set("=","%3D"),Ds.set("?","%3F"),Ds.set("@","%40"),Ds.set("[","%5B"),Ds.set("]","%5D"),Ds.set(" ","%20");class Os{constructor(e){this.requestsPerSecond=e.requestsPerSecond||10,this.lastStartTime=0,this.queued=[]}add(e,t){var i=this;return new Promise((function(t,n){i.queued.push({resolve:t,reject:n,asyncFunction:e}),i.dequeue()}))}addAll(e,t){var i=e.map(function(e){return this.add(e,t)}.bind(this));return Promise.all(i)}dequeue(){if(this.queued.length>0){var e=new Date,t=1e3/this.requestsPerSecond+1,i=e-this.lastStartTime;i>=t?this._execute():setTimeout(function(){this.dequeue()}.bind(this),t-i)}}async _execute(){this.lastStartTime=new Date;var e=this.queued.shift();const t=e.asyncFunction;try{const i=await t();e.resolve(i)}catch(t){e.reject(t)}}}function Us(){if(Ts()){return Ts()&&google.igv.tokenResponse&&Date.now()<google.igv.tokenExpiresAt?google.igv.tokenResponse.access_token:void 0}}function qs(e){let t;return t=fs(e)?ps(e):new Uint8Array(e),"TextDecoder"in function(){if("undefined"!=typeof self)return self;return"undefined"!=typeof global?global:window}()?(new TextDecoder).decode(t):function(e){var t="",i=0;for(;i<e.length;){var n=e[i],r=0,s=0;if(n<=127?(r=0,s=255&n):n<=223?(r=1,s=31&n):n<=239?(r=2,s=15&n):n<=244&&(r=3,s=7&n),e.length-i-r>0)for(var o=0;o<r;)s=s<<6|63&(n=e[i+o+1]),o+=1;else s=65533,r=e.length-i;t+=String.fromCodePoint(s),i+=r+1}return t}(t)}const Qs=new class{constructor(){this.apiKey=void 0,this.googleThrottle=new Os({requestsPerSecond:8}),this.RANGE_WARNING_GIVEN=!1,this.oauth=new Is}setApiKey(e){this.apiKey=e}async loadArrayBuffer(e,t){return(t=t||{}).responseType||(t.responseType="arraybuffer"),Ht(e)?this._loadFileSlice(e,t):this.load(e,t)}async loadByteArray(e,t){const i=await this.loadArrayBuffer(e,t);let n;return n=fs(i)?ps(i):new Uint8Array(i),n}async loadJson(e,t){"POST"===((t=t||{}).method||(t.sendData?"POST":"GET"))&&(t.contentType="application/json");const i=await this.loadString(e,t);return i?JSON.parse(i):i}async loadString(e,t){return t=t||{},e instanceof File?this._loadStringFromFile(e,t):this._loadStringFromUrl(e,t)}async load(e,t){t=t||{};const i=typeof e;if(Ht(e=await("function"==typeof e?e():e)))return this._loadFileSlice(e,t);if("function"==typeof e.startsWith){if(e.startsWith("data:")){const i=vs(e).buffer;if(t.range){const e=t.range.size?t.range.start+t.range.size:i.byteLength;return i.slice(t.range.start,e)}return i}return e.startsWith("https://drive.google.com")&&(e=Hs(e)),Ms(e)||e.startsWith("https://www.dropbox.com")?this.googleThrottle.add((async()=>this._loadURL(e,t))):this._loadURL(e,t)}throw Error(`url must be either a 'File', 'string', 'function', or 'Promise'.  Actual type: ${i}`)}async _loadURL(e,t){const i=this,n=e;e=function(e){return e.startsWith("https://www.dropbox.com")?e.replace("//www.dropbox.com","//dl.dropboxusercontent.com"):e.startsWith("https://drive.google.com")?Hs(e):e.includes("//www.broadinstitute.org/igvdata")?e.replace("//www.broadinstitute.org/igvdata","//data.broadinstitute.org/igvdata"):e.includes("//igvdata.broadinstitute.org")?e.replace("//igvdata.broadinstitute.org","//s3.amazonaws.com/igv.broadinstitute.org"):e.includes("//igv.genepattern.org")?e.replace("//igv.genepattern.org","//igv-genepattern-org.s3.amazonaws.com"):e.startsWith("ftp://ftp.ncbi.nlm.nih.gov/geo")?e.replace("ftp://","https://"):e}(e);let r=(t=t||{}).oauthToken||this.getOauthToken(e);return r&&(r=await("function"==typeof r?r():r)),new Promise((function(s,o){Ns(e)&&!function(e){return e.indexOf("X-Goog-Signature")>-1}(e)&&(Bs(e)&&(e=Rs(e)),Ms(e=function(e){let t=Qs.apiKey;t||"undefined"==typeof gapi||(t=gapi.apiKey);if(void 0!==t&&!e.includes("key=")){const i=e.includes("?")?"&":"?";e=e+i+"key="+t}return e}(e))&&function(e){if(e.includes("supportsTeamDrive"))return e;{const t=e.includes("?")?"&":"?";e=e+t+"supportsTeamDrive=true"}}(e),r||(r=Us()));const a=t.headers||{};r&&function(e,t){t&&(e["Cache-Control"]="no-cache",e.Authorization="Bearer "+t)}(a,r);const c=t.range,l=new XMLHttpRequest,h=t.sendData||t.body,d=t.method||(h?"POST":"GET"),u=t.responseType,f=t.contentType,p=t.mimeType;if(l.open(d,e),t.timeout&&(l.timeout=t.timeout),c){let e="";c.size&&(e=c.start+c.size-1),l.setRequestHeader("Range","bytes="+c.start+"-"+e)}if(f&&l.setRequestHeader("Content-Type",f),p&&l.overrideMimeType(p),u&&(l.responseType=u),a)for(let e of Object.keys(a)){const t=a[e];l.setRequestHeader(e,t)}!0===t.withCredentials&&(l.withCredentials=!0),l.onload=async function(n){if(0===l.status||l.status>=200&&l.status<=300)if("HEAD"===t.method){const e=t.requestedHeaders||["content-length"],i={};for(let t of e)i[t]=l.getResponseHeader(t);s(i)}else c&&206!==l.status&&0!==c.start?(l.response.length>1e5&&!i.RANGE_WARNING_GIVEN&&alert(`Warning: Range header ignored for URL: ${e}.  This can have severe performance impacts.`),s(l.response.slice(c.start,c.start+c.size))):s(l.response);else 416===l.status?g(Error("416 Unsatisfiable Range")):!Ts()||404!==l.status&&401!==l.status&&403!==l.status||!Ns(e)||t.retries?403===l.status?g("Access forbidden: "+e):g(l.status):m()},l.onerror=function(i){Ns(e)&&!t.retries?m():g("Error accessing resource: "+e+" Status: "+l.status)},l.ontimeout=function(e){g("Timed out")},l.onabort=function(e){console.log("Aborted"),o(e)};try{l.send(h)}catch(i){Ns(e)&&!t.retries?m():g(i)}function g(e){if(!o)throw e;o(e)}async function m(){try{const e=await async function(e){if(Ts()){const t=function(e){return Ms(e)?"https://www.googleapis.com/auth/drive.file":Bs(e)?"https://www.googleapis.com/auth/devstorage.read_only":"https://www.googleapis.com/auth/userinfo.profile"}(e);return await Ls(t)}throw Error("Authorization is required, but Google oAuth has not been initalized. Contact your site administrator for assistance.")}(n);t.retries=1,t.oauthToken=e;const r=await i.load(n,t);s(r)}catch(e){if(e.error){const t=e.error.startsWith("popup_blocked")?"Google login popup blocked by browser.":e.error;alert(t)}else g(e)}}}))}async _loadFileSlice(e,t){let i=t&&t.range?e.slice(t.range.start,t.range.start+t.range.size):e;const n=await i.arrayBuffer();return"arraybuffer"===t.responseType?n:qs(n)}async _loadStringFromFile(e,t){const i=t.range?e.slice(t.range.start,t.range.start+t.range.size):e;return qs(await i.arrayBuffer())}async _loadStringFromUrl(e,t){(t=t||{}).responseType="arraybuffer";return qs(await this.load(e,t))}setOauthToken(e,t){this.oauth.setToken(e,t)}getOauthToken(e){const t=Ns(e)?void 0:Ot(e).host;let i=this.oauth.getToken(t);if(i)return i;if(void 0===t){const e=Us();if(e&&e.expires_at>Date.now())return e.access_token}}async getContentLength(e,t){(t=t||{}).method="HEAD",t.requestedHeaders=["content-length"];const i=(await this._loadURL(e,t))["content-length"];return i?Number.parseInt(i):0}};var Vs={color:1};Vs.parent=Vs,Vs.left=Vs,Vs.right=Vs;class js{constructor(){this.root=Vs}insert(e,t,i){var n=new Xs(new Ys(e,t,i));for(this.treeInsert(n),n.color=2;n!==this.root&&2===n.parent.color;)if(n.parent===n.parent.parent.left){let e=n.parent.parent.right;2===e.color?(n.parent.color=1,e.color=1,n.parent.parent.color=2,n=n.parent.parent):(n===n.parent.right&&(n=n.parent,Gs.call(this,n)),n.parent.color=1,n.parent.parent.color=2,$s.call(this,n.parent.parent))}else{let e=n.parent.parent.left;2===e.color?(n.parent.color=1,e.color=1,n.parent.parent.color=2,n=n.parent.parent):(n===n.parent.left&&(n=n.parent,$s.call(this,n)),n.parent.color=1,n.parent.parent.color=2,Gs.call(this,n.parent.parent))}this.root.color=1}findOverlapping(e,t){var i=new Ys(e,t,0);if(this.root===Vs)return[];var n=Ws.call(this,i,this.root,[]);return n.length>1&&n.sort((function(e,t){return e.low-t.low})),n}logIntervals(){!function e(t,i){for(var n="",r=0;r<i;r++)n+=" ";console.log(n+t.interval.low+" "+t.interval.high),i+=5,t.left!==Vs&&e(t.left,i);t.right!==Vs&&e(t.right,i)}(this.root,0)}mapIntervals(e){!function t(i){e(i.interval),i.left!==Vs&&t(i.left);i.right!==Vs&&t(i.right)}(this.root)}treeInsert(e){for(var t=this.root,i=Vs;t!==Vs;)i=t,t=e.interval.low<=t.interval.low?t.left:t.right;e.parent=i,i===Vs?(this.root=e,e.left=e.right=Vs):e.interval.low<=i.interval.low?i.left=e:i.right=e,Ks.call(this,e)}}function Ws(e,t,i){return t.interval.overlaps(e)&&i.push(t.interval),t.left!==Vs&&t.left.max>=e.low&&Ws.call(this,e,t.left,i),t.right!==Vs&&t.right.min<=e.high&&Ws.call(this,e,t.right,i),i}function Gs(e){var t=e.right;e.right=t.left,t.left!==Vs&&(t.left.parent=e),t.parent=e.parent,e.parent===Vs?this.root=t:e.parent.left===e?e.parent.left=t:e.parent.right=t,t.left=e,e.parent=t,Ks.call(this,e)}function $s(e){var t=e.left;e.left=t.right,t.right!==Vs&&(t.right.parent=e),t.parent=e.parent,e.parent===Vs?this.root=t:e.parent.right===e?e.parent.right=t:e.parent.left=t,t.right=e,e.parent=t,Ks.call(this,e)}function Ks(e){for(;e!==Vs;){var t=e.left.max>e.right.max?e.left.max:e.right.max,i=e.interval.high;e.max=t>i?t:i;var n=e.left.min<e.right.min?e.left.min:e.right.min,r=e.interval.low;e.min=n<r?n:r,e=e.parent}}class Ys{constructor(e,t,i){this.low=e,this.high=t,this.value=i}equals(e){return!!e&&(this===e||this.low===e.low&&this.high===e.high)}compareTo(e){return this.low<e.low?-1:this.low>e.low?1:this.high<e.high?-1:this.high>e.high?1:0}overlaps(e){return this.low<=e.high&&e.low<=this.high}}function Xs(e){this.parent=Vs,this.left=Vs,this.right=Vs,this.interval=e,this.color=2}class Zs{constructor(e,t,i){e=e||[],this.treeMap=this.buildTreeMap(e,t),this.range=i,this.count=e.length}containsRange(e){return void 0===this.range||this.range.contains(e.chr,e.start,e.end)}findFeatures(e){const t=[];for(let i of Object.values(this.allFeatures))for(let n of i)e(n)&&t.push(n);return t}queryFeatures(e,t,i){const n=this.treeMap[e];if(!n)return[];const r=n.findOverlapping(t,i);if(0===r.length)return[];{const n=[],s=this.allFeatures[e];if(s){for(let e of r){const r=e.value;for(let e=r.start;e<r.end;e++){let r=s[e];if(r.start>i)break;r.end>=t&&n.push(r)}}n.sort((function(e,t){return e.start-t.start}))}return n}}getAllFeatures(){return this.allFeatures}buildTreeMap(e,t){const i={},n=[];if(this.allFeatures={},e){for(let i of e){let e=i.chr;t&&(e=t.getChromosomeName(e));let r=this.allFeatures[e];r||(n.push(e),r=[],this.allFeatures[e]=r),r.push(i)}for(let e of n){const t=this.allFeatures[e];t.sort((function(e,t){return e.start===t.start?0:e.start>t.start?1:-1})),i[e]=Js(t)}}return i}}function Js(e){const t=new js,i=e.length,n=Math.max(10,Math.round(i/10));for(let r=0;r<i;r+=n){const s=Math.min(i,r+n),o=new eo(r,s),a=e[r].start;let c=a;for(let t=r;t<s;t++)c=Math.max(c,e[t].end);t.insert(a,c,o)}return t}class eo{constructor(e,t){this.start=e,this.end=t}}const to=function(e,t,i){if(e&&0!==e.length){const n=function(e){const t=new js,i=e.length,n=Math.max(10,Math.round(i/100));e.sort((function(e,t){return e.start===t.start?0:e.start>t.start?1:-1}));for(let r=0;r<i;r+=n){const s=Math.min(i,r+n),o=e.slice(r,s),a=o[0].start;let c=a;o.forEach((function(e){c=Math.max(c,e.end)})),t.insert(a,c,o)}return t}(e),r=n.findOverlapping(t,i);return 0===r.length?[]:(e=[],r.forEach((function(n){const r=n.value,s=r.length;for(let n=0;n<s;n++){const s=r[n];if(s.start>i)break;s.end>t&&e.push(s)}})),e.sort((function(e,t){return e.start-t.start})),e)}return[]};function io(e){if(3===(e=e.replace(/^#/,"")).length&&(e=e.split("").map((e=>e+e)).join("")),6!==e.length)throw new Error("Invalid HEX color.");let t=parseInt(e,16);return`rgb(${t>>16&255}, ${t>>8&255}, ${255&t})`}const no={cantaloupe:{r:255,g:206,b:110},honeydew:{r:206,g:250,b:110},spindrift:{r:104,g:251,b:208},sky:{r:106,g:207,b:255},lavender:{r:210,g:120,b:255},carnation:{r:255,g:127,b:211},licorice:{r:0,g:0,b:0},snow:{r:255,g:255,b:255},salmon:{r:255,g:114,b:110},banana:{r:255,g:251,b:109},flora:{r:104,g:249,b:110},ice:{r:104,g:253,b:255},orchid:{r:110,g:118,b:255},bubblegum:{r:255,g:122,b:255},lead:{r:30,g:30,b:30},mercury:{r:232,g:232,b:232},tangerine:{r:255,g:136,b:2},lime:{r:131,g:249,b:2},sea_foam:{r:3,g:249,b:135},aqua:{r:0,g:140,b:255},grape:{r:137,g:49,b:255},strawberry:{r:255,g:41,b:135},tungsten:{r:58,g:58,b:58},silver:{r:208,g:208,b:208},maraschino:{r:255,g:33,b:1},lemon:{r:255,g:250,b:3},spring:{r:5,g:248,b:2},turquoise:{r:0,g:253,b:255},blueberry:{r:0,g:46,b:255},magenta:{r:255,g:57,b:255},iron:{r:84,g:84,b:83},magnesium:{r:184,g:184,b:184},mocha:{r:137,g:72,b:0},fern:{r:69,g:132,b:1},moss:{r:1,g:132,b:72},ocean:{r:0,g:74,b:136},eggplant:{r:73,g:26,b:136},maroon:{r:137,g:22,b:72},steel:{r:110,g:110,b:110},aluminum:{r:160,g:159,b:160},cayenne:{r:137,g:17,b:0},aspargus:{r:136,g:133,b:1},clover:{r:2,g:132,b:1},teal:{r:0,g:134,b:136},midnight:{r:0,g:24,b:136},plum:{r:137,g:30,b:136},tin:{r:135,g:134,b:135},nickel:{r:136,g:135,b:135}};function ro(e){const{r:t,g:i,b:n}=no[e];return`rgb(${t},${i},${n})`}const so={Set1:["rgb(228,26,28)","rgb(55,126,184)","rgb(77,175,74)","rgb(166,86,40)","rgb(152,78,163)","rgb(255,127,0)","rgb(247,129,191)","rgb(153,153,153)","rgb(255,255,51)"],Dark2:["rgb(27,158,119)","rgb(217,95,2)","rgb(117,112,179)","rgb(231,41,138)","rgb(102,166,30)","rgb(230,171,2)","rgb(166,118,29)","rgb(102,102,102)"],Set2:["rgb(102, 194,165)","rgb(252,141,98)","rgb(141,160,203)","rgb(231,138,195)","rgb(166,216,84)","rgb(255,217,47)","rgb(229,196,148)","rgb(179,179,179)"],Set3:["rgb(141,211,199)","rgb(255,255,179)","rgb(190,186,218)","rgb(251,128,114)","rgb(128,177,211)","rgb(253,180,98)","rgb(179,222,105)","rgb(252,205,229)","rgb(217,217,217)","rgb(188,128,189)","rgb(204,235,197)","rgb(255,237,111)"],Pastel1:["rgb(251,180,174)","rgb(179,205,227)","rgb(204,235,197)","rgb(222,203,228)","rgb(254,217,166)","rgb(255,255,204)","rgb(229,216,189)","rgb(253,218,236)"],Pastel2:["rgb(173,226,207)","rgb(253,205,172)","rgb(203,213,232)","rgb(244,202,228)","rgb(230,245,201)","rgb(255,242,174)","rgb(243,225,206)"],Accent:["rgb(127,201,127)","rgb(190,174,212)","rgb(253,192,134)","rgb(255,255,153)","rgb(56,108,176)","rgb(240,2,127)","rgb(191,91,23)"]};class oo{constructor(e){this.colors=so[e],Array.isArray(this.colors)||(this.colors=[]),this.colorTable=new Map,this.nextIdx=0,this.colorGenerator=new co}getColor(e){return this.colorTable.has(e)||(this.nextIdx<this.colors.length?this.colorTable.set(e,this.colors[this.nextIdx]):this.colorTable.set(e,this.colorGenerator.get()),this.nextIdx++),this.colorTable.get(e)}}class ao{constructor(e){this.colorTable=e||{},this.nextIdx=0,this.colorGenerator=new co}getColor(e){if(!this.colorTable.hasOwnProperty(e)){if(this.colorTable.hasOwnProperty("*"))return this.colorTable["*"];this.colorTable[e]=this.colorGenerator.get()}return this.colorTable[e]}}function co(){this.hue=Math.random(),this.goldenRatio=.618033988749895,this.hexwidth=2}function lo(e,t,i,n){return`rgba(${e=ys.clamp(e,0,255)}, ${t=ys.clamp(t,0,255)}, ${i=ys.clamp(i,0,255)}, ${n=ys.clamp(n,0,1)})`}function ho(e,t){e=ys.clamp(e,0,255),t=ys.clamp(t,0,255);return`rgb(${Math.round(Math.random()*(t-e)+e).toString(10)},${Math.round(Math.random()*(t-e)+e).toString(10)},${Math.round(Math.random()*(t-e)+e).toString(10)})`}function uo(e){if(e.startsWith("rgb(")){const[t,i]=e.split("("),[n]=i.split(")");return n.split(",").map((e=>parseInt(e)))}}co.prototype.hsvToRgb=function(e,t,i){var n=Math.floor(6*e),r=6*e-n,s=i*(1-t),o=i*(1-r*t),a=i*(1-(1-r)*t),c=255,l=255,h=255;switch(n){case 0:c=i,l=a,h=s;break;case 1:c=o,l=i,h=s;break;case 2:c=s,l=i,h=a;break;case 3:c=s,l=o,h=i;break;case 4:c=a,l=s,h=i;break;case 5:c=i,l=s,h=o}return[Math.floor(256*c),Math.floor(256*l),Math.floor(256*h)]},co.prototype.padHex=function(e){return e.length>this.hexwidth?e:new Array(this.hexwidth-e.length+1).join("0")+e},co.prototype.get=function(e,t){this.hue+=this.goldenRatio,this.hue%=1,"number"!=typeof e&&(e=.5),"number"!=typeof t&&(t=.95);var i=this.hsvToRgb(this.hue,e,t);return"#"+this.padHex(i[0].toString(16))+this.padHex(i[1].toString(16))+this.padHex(i[2].toString(16))},new co;function fo(e,t,i){if(i<.005)return e;if(i>.995)return t;{let n,r,s,o,a,c;i<.5?(i/=.5,[n,r,s]=uo(e),[o,a,c]=uo(ro("snow"))):(i=(i-.5)/.5,[n,r,s]=uo(ro("snow")),[o,a,c]=uo(t));const[l,h,d]=[Math.floor(ys.lerp(n,o,i)),Math.floor(ys.lerp(r,a,i)),Math.floor(ys.lerp(s,c,i))];return function(e,t,i){return`rgb(${e=ys.clamp(e,0,255)}, ${t=ys.clamp(t,0,255)}, ${i=ys.clamp(i,0,255)})`}(l,h,d)}}const po=new Set(["bedtype","alignment","annotation","variant","wig","interact"]),go=new Set(["alignment","annotation","variant","eqtl","qtl","snp","shoebox"]),mo=new Set(["sequence","ruler","ideogram"]),wo={};class bo{constructor(e){this.browser=e,this.initialize()}initialize(){const e=new c;e.add("...");const t={parent:this.browser.root,content:e};this.dialog=new w(t),this.browser.root.appendChild(this.dialog.elem),i(this.dialog.elem)}trackMenuItemList(e){const t=[];return"sequence"!==e.track.config.type&&t.push(function(){const e=Bt("<div>");function t(e){const t=()=>{const e=parseInt(this.browser.inputDialog.value,10);if(void 0!==e){const t=[];this.trackView.track.selected?t.push(...this.trackView.browser.getSelectedTrackViews().map((({track:e})=>e))):t.push(this);for(const i of t)void 0!==i.minHeight&&i.minHeight>e&&(i.minHeight=e),void 0!==i.maxHeight&&i.maxHeight<e&&(i.minHeight=e),i.trackView.setTrackHeight(e,!0),i.trackView.checkContentHeight(),i.trackView.repaintViews(),i.trackView.autoHeight=!1}},i={label:"Track Height",value:this.height,callback:t};this.browser.inputDialog.present(i,e)}return e.text("Set track height"),{object:e,dialog:t}}()),!0===function(e){const t=e.browser.getSelectedTrackViews();return t&&t.length>1&&new Set(t).has(e)}(e)?t.push(...this.multiSelectMenuItems(e)):("sequence"!==e.track.config.type&&t.push(function(){const e=Bt("<div>");function t(e){const t=()=>{let e=this.browser.inputDialog.value;e=""===e||void 0===e?"untitled":e.trim(),this.name=e},i={label:"Track Name",value:Ao(this)||"unnamed",callback:t};this.browser.inputDialog.present(i,e)}return e.text("Set track name"),{object:e,click:t}}()),t.push(...this.defaultMenuItems(e))),!1!==e.track.removable&&(t.push("<hr/>"),t.push(function(e){const t=e.track.selected?"Remove tracks":"Remove track",i=Bt("<div>");function n(e){this.trackView.browser._removeTrack(this)}return i.text(t),{object:i,click:n,menuItemType:"removeTrack"}}(e))),t}defaultMenuItems(e){const t=[];return Co(e.track)&&(t.push("<hr/>"),t.push(Fo({trackView:e,label:"Set track color",option:"color"})),t.push(vo({trackView:e,label:"Unset track color"})),"wig"!==e.track.config.type&&"annotation"!==e.track.config.type||(t.push(Fo({trackView:e,label:"Set alt color",option:"altColor"})),t.push(yo({trackView:e,label:"Unset alt color"})))),e.track.menuItemList&&t.push(...e.track.menuItemList()),function(e){const t=e.track;return t&&t.config&&void 0!==t.config.visibilityWindow||t&&go.has(t.type)}(e)&&(t.push("<hr/>"),t.push(function(){const e=Bt("<div>");function t(e){const t=()=>{let e=this.browser.inputDialog.value;e=""===e||void 0===e?-1:e.trim(),this.visibilityWindow=Number.parseInt(e),this.config.visibilityWindow=Number.parseInt(e),this.trackView.updateViews()},i={label:"Visibility Window",value:this.visibilityWindow,callback:t};this.browser.inputDialog.present(i,e)}return e.text("Set visibility window"),{object:e,click:t}}())),t}multiSelectMenuItems(e){const t=[],i=e.browser.getSelectedTrackViews();var n;return!0===(n=i.map((({track:e})=>e.type)),1===[...new Set(n)].length)?(t.push(...this.defaultMenuItems(e)),"wig"===e.track.type&&(t.push("<hr/>"),t.push(function(){const e=Bt("<div>");function t(e){const t=so.Dark2,i=Math.floor(Math.random()*t.length),n=`auto-scale-group-${s()}`;wo[n]=t[i];const r=this.browser.getSelectedTrackViews();for(const{track:e}of r)e.autoscaleGroup=n;this.browser.updateViews()}return e.text("Group autoscale"),{object:e,doAllMultiSelectedTracks:!0,click:t}}()))):Co(e.track)&&(t.push("<hr/>"),t.push(Fo({trackView:e,label:"Set track color",option:"color"})),t.push(vo({trackView:e,label:"Unset track color"})),"wig"!==e.track.config.type&&"annotation"!==e.track.config.type||(t.push(Fo({trackView:e,label:"Set alt color",option:"altColor"})),t.push(yo({trackView:e,label:"Unset alt color"})))),t}}function Fo({trackView:e,label:t,option:i}){const n=Bt("<div>");return n.text(t),{object:n,click:()=>e.presentColorPicker(i)}}function vo({trackView:e,label:t}){const i=Bt("<div>");return i.text(t),{object:i,click:()=>{e.track.color=void 0,e.repaintViews()}}}function yo({trackView:e,label:t}){const i=Bt("<div>");return i.text(t),{object:i,click:()=>{e.track.altColor=void 0,e.repaintViews()}}}function Ao(e){return e.name}function Co(e){return void 0===e.type||po.has(e.type)}class _o{constructor(e,t){this.browser=e,this.$container=Bt("<div>",{class:"igv-generic-dialog-container"}),t.append(this.$container),this.$container.offset({left:0,top:0});const i=Bt("<div>",{class:"igv-generic-dialog-header"});this.$container.append(i),u(i[0],(()=>{this.$minimum_input.val(""),this.$maximum_input.val(""),this.$container.offset({left:0,top:0}),this.$container.hide()})),this.$minimum=Bt("<div>",{class:"igv-generic-dialog-label-input"}),this.$container.append(this.$minimum);const n=Bt("<div>");n.text("Minimum"),this.$minimum.append(n),this.$minimum_input=Bt("<input>"),this.$minimum.append(this.$minimum_input),this.$maximum=Bt("<div>",{class:"igv-generic-dialog-label-input"}),this.$container.append(this.$maximum);const r=Bt("<div>");r.text("Maximum"),this.$maximum.append(r),this.$maximum_input=Bt("<input>"),this.$maximum.append(this.$maximum_input);const s=Bt("<div>",{class:"igv-generic-dialog-ok-cancel"});this.$container.append(s),this.$ok=Bt("<div>"),s.append(this.$ok),this.$ok.text("OK"),this.$cancel=Bt("<div>"),s.append(this.$cancel),this.$cancel.text("Cancel"),this.$cancel.on("click",(()=>{this.$minimum_input.val(""),this.$maximum_input.val(""),this.$container.offset({left:0,top:0}),this.$container.hide()})),p(this.$container.get(0),i.get(0)),this.$container.hide()}configure(e){let t;if(Array.isArray(e)){t={min:Number.MAX_SAFE_INTEGER,max:-Number.MAX_SAFE_INTEGER};for(const i of e)i.track.dataRange&&(t.min=Math.min(i.track.dataRange.min,t.min),t.max=Math.max(i.track.dataRange.max,t.max))}else t=e.track.dataRange;t&&(this.$minimum_input.val(t.min),this.$maximum_input.val(t.max)),this.$minimum_input.unbind(),this.$minimum_input.on("keyup",(t=>{13===t.keyCode&&this.processResults(e),t.stopImmediatePropagation()})),this.$maximum_input.unbind(),this.$maximum_input.on("keyup",(t=>{13===t.keyCode&&(t.stopImmediatePropagation(),this.processResults(e))})),this.$ok.unbind(),this.$ok.on("click",(t=>{this.processResults(e)}))}processResults(e){if(""!==this.$minimum_input.val()&&""!==this.$maximum_input.val()){const t=Number(this.$minimum_input.val()),i=Number(this.$maximum_input.val());if(isNaN(t)||isNaN(i))this.browser.alert.present(new Error("Must input numeric values"),void 0);else{const n=Array.isArray(e)?e:[e];for(const e of n)e.track.setDataRange({min:t,max:i})}this.$minimum_input.val(""),this.$maximum_input.val("")}this.$container.offset({left:0,top:0}),this.$container.hide()}present(e){const t=e.offset().top,i=Bt("body").scrollTop();this.$container.offset({left:e.width()-this.$container.width(),top:t+i}),this.$container.show()}}const xo={configureHighDPICanvas:function(e,t,i){const n=window.devicePixelRatio;e.canvas.style.width=`${t}px`,e.canvas.width=Math.floor(n*t),e.canvas.style.height=`${i}px`,e.canvas.height=Math.floor(n*i),e.scale(n,n)},setProperties:function(e,t){for(var i in t)if(t.hasOwnProperty(i)){var n=t[i];e[i]=n}},strokeLine:function(e,t,i,n,r,s){t=Math.floor(t)+.5,i=Math.floor(i)+.5,n=Math.floor(n)+.5,r=Math.floor(r)+.5,s&&(e.save(),xo.setProperties(e,s)),e.beginPath(),e.moveTo(t,i),e.lineTo(n,r),e.stroke(),s&&e.restore()},fillRect:function(e,t,i,n,r,s){s&&(e.save(),xo.setProperties(e,s)),e.fillRect(t,i,n,r),s&&e.restore()},fillPolygon:function(e,t,i,n){n&&(e.save(),xo.setProperties(e,n)),ko(e,t,i),e.fill(),n&&e.restore()},strokePolygon:function(e,t,i,n){n&&(e.save(),xo.setProperties(e,n)),ko(e,t,i),e.stroke(),n&&e.restore()},fillText:function(e,t,i,n,r,s){if((r||s)&&e.save(),r&&xo.setProperties(e,r),s){for(var o in e.translate(i,n),s){var a=s[o];"translate"===o&&e.translate(a.x,a.y),"rotate"===o&&e.rotate(a.angle*Math.PI/180)}e.fillText(t,0,0)}else e.fillText(t,i,n);(r||s)&&e.restore()},strokeText:function(e,t,i,n,r,s){if((r||s)&&e.save(),r&&xo.setProperties(e,r),s){for(var o in e.translate(i,n),s){var a=s[o];"translate"===o&&e.translate(a.x,a.y),"rotate"===o&&e.rotate(a.angle*Math.PI/180)}e.strokeText(t,0,0)}else e.strokeText(t,i,n);(r||s)&&e.restore()},strokeCircle:function(e,t,i,n,r){r&&(e.save(),xo.setProperties(e,r)),e.beginPath(),e.arc(t,i,n,0,2*Math.PI),e.stroke(),r&&e.restore()},fillCircle:function(e,t,i,n,r){r&&(e.save(),xo.setProperties(e,r)),e.beginPath(),e.arc(t,i,n,0,2*Math.PI),e.fill(),r&&e.restore()},drawArrowhead:function(e,t,i,n,r){e.save(),n||(n=5),r&&(e.lineWidth=r),e.beginPath(),e.moveTo(t,i-n/2),e.lineTo(t,i+n/2),e.lineTo(t+n,i),e.lineTo(t,i-n/2),e.closePath(),e.fill(),e.restore()},dashedLine:function(e,t,i,n,r,s,o={}){void 0===s&&(s=2),e.setLineDash([s,s]),xo.strokeLine(e,t,i,n,r,o),e.setLineDash([])},roundRect:function(e,t,i,n,r,s,o,a){void 0===a&&(a=!0),void 0===s&&(s=5),e.beginPath(),e.moveTo(t+s,i),e.lineTo(t+n-s,i),e.quadraticCurveTo(t+n,i,t+n,i+s),e.lineTo(t+n,i+r-s),e.quadraticCurveTo(t+n,i+r,t+n-s,i+r),e.lineTo(t+s,i+r),e.quadraticCurveTo(t,i+r,t,i+r-s),e.lineTo(t,i+s),e.quadraticCurveTo(t,i,t+s,i),e.closePath(),a&&e.stroke(),o&&e.fill()},polygon:function(e,t,i,n,r){void 0===r&&(r=!0),e.beginPath();var s=t.length;e.moveTo(t[0],i[0]);for(var o=1;o<s;o++)e.lineTo(t[o],i[o]);e.closePath(),r&&e.stroke(),n&&e.fill()},drawRandomColorVerticalLines:e=>{for(let t=0;t<e.canvas.width;t++)xo.fillRect(e,t,0,1,e.canvas.height,{fillStyle:ho(100,250)})},labelTransformWithContext:(e,t)=>{e.translate(t,0),e.scale(-1,1),e.translate(-t,0)}};function ko(e,t,i){var n,r=t.length;for(e.beginPath(),e.moveTo(t[0],i[0]),n=1;n<r;n++)e.lineTo(t[n],i[n]);e.closePath()}
/*! @license DOMPurify 3.1.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.1.6/LICENSE */const{entries:Io,setPrototypeOf:So,isFrozen:Eo,getPrototypeOf:No,getOwnPropertyDescriptor:Bo}=Object;let{freeze:Mo,seal:Ro,create:Do}=Object,{apply:To,construct:Lo}="undefined"!=typeof Reflect&&Reflect;Mo||(Mo=function(e){return e}),Ro||(Ro=function(e){return e}),To||(To=function(e,t,i){return e.apply(t,i)}),Lo||(Lo=function(e,t){return new e(...t)});const zo=Yo(Array.prototype.forEach),Ho=Yo(Array.prototype.pop),Po=Yo(Array.prototype.push),Oo=Yo(String.prototype.toLowerCase),Uo=Yo(String.prototype.toString),qo=Yo(String.prototype.match),Qo=Yo(String.prototype.replace),Vo=Yo(String.prototype.indexOf),jo=Yo(String.prototype.trim),Wo=Yo(Object.prototype.hasOwnProperty),Go=Yo(RegExp.prototype.test),$o=(Ko=TypeError,function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return Lo(Ko,t)});var Ko;function Yo(e){return function(t){for(var i=arguments.length,n=new Array(i>1?i-1:0),r=1;r<i;r++)n[r-1]=arguments[r];return To(e,t,n)}}function Xo(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Oo;So&&So(e,null);let n=t.length;for(;n--;){let r=t[n];if("string"==typeof r){const e=i(r);e!==r&&(Eo(t)||(t[n]=e),r=e)}e[r]=!0}return e}function Zo(e){for(let t=0;t<e.length;t++){Wo(e,t)||(e[t]=null)}return e}function Jo(e){const t=Do(null);for(const[i,n]of Io(e)){Wo(e,i)&&(Array.isArray(n)?t[i]=Zo(n):n&&"object"==typeof n&&n.constructor===Object?t[i]=Jo(n):t[i]=n)}return t}function ea(e,t){for(;null!==e;){const i=Bo(e,t);if(i){if(i.get)return Yo(i.get);if("function"==typeof i.value)return Yo(i.value)}e=No(e)}return function(){return null}}const ta=Mo(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),ia=Mo(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),na=Mo(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),ra=Mo(["animate","color-profile","cursor","discard","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),sa=Mo(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","mprescripts"]),oa=Mo(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),aa=Mo(["#text"]),ca=Mo(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","popover","popovertarget","popovertargetaction","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","wrap","xmlns","slot"]),la=Mo(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),ha=Mo(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),da=Mo(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),ua=Ro(/\{\{[\w\W]*|[\w\W]*\}\}/gm),fa=Ro(/<%[\w\W]*|[\w\W]*%>/gm),pa=Ro(/\${[\w\W]*}/gm),ga=Ro(/^data-[\-\w.\u00B7-\uFFFF]/),ma=Ro(/^aria-[\-\w]+$/),wa=Ro(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),ba=Ro(/^(?:\w+script|data):/i),Fa=Ro(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),va=Ro(/^html$/i),ya=Ro(/^[a-z][.\w]*(-[.\w]+)+$/i);var Aa=Object.freeze({__proto__:null,MUSTACHE_EXPR:ua,ERB_EXPR:fa,TMPLIT_EXPR:pa,DATA_ATTR:ga,ARIA_ATTR:ma,IS_ALLOWED_URI:wa,IS_SCRIPT_OR_DATA:ba,ATTR_WHITESPACE:Fa,DOCTYPE_NAME:va,CUSTOM_ELEMENT:ya});const Ca=1,_a=3,xa=7,ka=8,Ia=9,Sa=function(){return"undefined"==typeof window?null:window};var Ea=function e(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Sa();const i=t=>e(t);if(i.version="3.1.6",i.removed=[],!t||!t.document||t.document.nodeType!==Ia)return i.isSupported=!1,i;let{document:n}=t;const r=n,s=r.currentScript,{DocumentFragment:o,HTMLTemplateElement:a,Node:c,Element:l,NodeFilter:h,NamedNodeMap:d=t.NamedNodeMap||t.MozNamedAttrMap,HTMLFormElement:u,DOMParser:f,trustedTypes:p}=t,g=l.prototype,m=ea(g,"cloneNode"),w=ea(g,"remove"),b=ea(g,"nextSibling"),F=ea(g,"childNodes"),v=ea(g,"parentNode");if("function"==typeof a){const e=n.createElement("template");e.content&&e.content.ownerDocument&&(n=e.content.ownerDocument)}let y,A="";const{implementation:C,createNodeIterator:_,createDocumentFragment:x,getElementsByTagName:k}=n,{importNode:I}=r;let S={};i.isSupported="function"==typeof Io&&"function"==typeof v&&C&&void 0!==C.createHTMLDocument;const{MUSTACHE_EXPR:E,ERB_EXPR:N,TMPLIT_EXPR:B,DATA_ATTR:M,ARIA_ATTR:R,IS_SCRIPT_OR_DATA:D,ATTR_WHITESPACE:T,CUSTOM_ELEMENT:L}=Aa;let{IS_ALLOWED_URI:z}=Aa,H=null;const P=Xo({},[...ta,...ia,...na,...sa,...aa]);let O=null;const U=Xo({},[...ca,...la,...ha,...da]);let q=Object.seal(Do(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),Q=null,V=null,j=!0,W=!0,G=!1,$=!0,K=!1,Y=!0,X=!1,Z=!1,J=!1,ee=!1,te=!1,ie=!1,ne=!0,re=!1,se=!0,oe=!1,ae={},ce=null;const le=Xo({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]);let he=null;const de=Xo({},["audio","video","img","source","image","track"]);let ue=null;const fe=Xo({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),pe="http://www.w3.org/1998/Math/MathML",ge="http://www.w3.org/2000/svg",me="http://www.w3.org/1999/xhtml";let we=me,be=!1,Fe=null;const ve=Xo({},[pe,ge,me],Uo);let ye=null;const Ae=["application/xhtml+xml","text/html"];let Ce=null,_e=null;const xe=n.createElement("form"),ke=function(e){return e instanceof RegExp||e instanceof Function},Ie=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!_e||_e!==e){if(e&&"object"==typeof e||(e={}),e=Jo(e),ye=-1===Ae.indexOf(e.PARSER_MEDIA_TYPE)?"text/html":e.PARSER_MEDIA_TYPE,Ce="application/xhtml+xml"===ye?Uo:Oo,H=Wo(e,"ALLOWED_TAGS")?Xo({},e.ALLOWED_TAGS,Ce):P,O=Wo(e,"ALLOWED_ATTR")?Xo({},e.ALLOWED_ATTR,Ce):U,Fe=Wo(e,"ALLOWED_NAMESPACES")?Xo({},e.ALLOWED_NAMESPACES,Uo):ve,ue=Wo(e,"ADD_URI_SAFE_ATTR")?Xo(Jo(fe),e.ADD_URI_SAFE_ATTR,Ce):fe,he=Wo(e,"ADD_DATA_URI_TAGS")?Xo(Jo(de),e.ADD_DATA_URI_TAGS,Ce):de,ce=Wo(e,"FORBID_CONTENTS")?Xo({},e.FORBID_CONTENTS,Ce):le,Q=Wo(e,"FORBID_TAGS")?Xo({},e.FORBID_TAGS,Ce):{},V=Wo(e,"FORBID_ATTR")?Xo({},e.FORBID_ATTR,Ce):{},ae=!!Wo(e,"USE_PROFILES")&&e.USE_PROFILES,j=!1!==e.ALLOW_ARIA_ATTR,W=!1!==e.ALLOW_DATA_ATTR,G=e.ALLOW_UNKNOWN_PROTOCOLS||!1,$=!1!==e.ALLOW_SELF_CLOSE_IN_ATTR,K=e.SAFE_FOR_TEMPLATES||!1,Y=!1!==e.SAFE_FOR_XML,X=e.WHOLE_DOCUMENT||!1,ee=e.RETURN_DOM||!1,te=e.RETURN_DOM_FRAGMENT||!1,ie=e.RETURN_TRUSTED_TYPE||!1,J=e.FORCE_BODY||!1,ne=!1!==e.SANITIZE_DOM,re=e.SANITIZE_NAMED_PROPS||!1,se=!1!==e.KEEP_CONTENT,oe=e.IN_PLACE||!1,z=e.ALLOWED_URI_REGEXP||wa,we=e.NAMESPACE||me,q=e.CUSTOM_ELEMENT_HANDLING||{},e.CUSTOM_ELEMENT_HANDLING&&ke(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(q.tagNameCheck=e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),e.CUSTOM_ELEMENT_HANDLING&&ke(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(q.attributeNameCheck=e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),e.CUSTOM_ELEMENT_HANDLING&&"boolean"==typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements&&(q.allowCustomizedBuiltInElements=e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),K&&(W=!1),te&&(ee=!0),ae&&(H=Xo({},aa),O=[],!0===ae.html&&(Xo(H,ta),Xo(O,ca)),!0===ae.svg&&(Xo(H,ia),Xo(O,la),Xo(O,da)),!0===ae.svgFilters&&(Xo(H,na),Xo(O,la),Xo(O,da)),!0===ae.mathMl&&(Xo(H,sa),Xo(O,ha),Xo(O,da))),e.ADD_TAGS&&(H===P&&(H=Jo(H)),Xo(H,e.ADD_TAGS,Ce)),e.ADD_ATTR&&(O===U&&(O=Jo(O)),Xo(O,e.ADD_ATTR,Ce)),e.ADD_URI_SAFE_ATTR&&Xo(ue,e.ADD_URI_SAFE_ATTR,Ce),e.FORBID_CONTENTS&&(ce===le&&(ce=Jo(ce)),Xo(ce,e.FORBID_CONTENTS,Ce)),se&&(H["#text"]=!0),X&&Xo(H,["html","head","body"]),H.table&&(Xo(H,["tbody"]),delete Q.tbody),e.TRUSTED_TYPES_POLICY){if("function"!=typeof e.TRUSTED_TYPES_POLICY.createHTML)throw $o('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');if("function"!=typeof e.TRUSTED_TYPES_POLICY.createScriptURL)throw $o('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');y=e.TRUSTED_TYPES_POLICY,A=y.createHTML("")}else void 0===y&&(y=function(e,t){if("object"!=typeof e||"function"!=typeof e.createPolicy)return null;let i=null;const n="data-tt-policy-suffix";t&&t.hasAttribute(n)&&(i=t.getAttribute(n));const r="dompurify"+(i?"#"+i:"");try{return e.createPolicy(r,{createHTML:e=>e,createScriptURL:e=>e})}catch(e){return console.warn("TrustedTypes policy "+r+" could not be created."),null}}(p,s)),null!==y&&"string"==typeof A&&(A=y.createHTML(""));Mo&&Mo(e),_e=e}},Se=Xo({},["mi","mo","mn","ms","mtext"]),Ee=Xo({},["foreignobject","annotation-xml"]),Ne=Xo({},["title","style","font","a","script"]),Be=Xo({},[...ia,...na,...ra]),Me=Xo({},[...sa,...oa]),Re=function(e){Po(i.removed,{element:e});try{v(e).removeChild(e)}catch(t){w(e)}},De=function(e,t){try{Po(i.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){Po(i.removed,{attribute:null,from:t})}if(t.removeAttribute(e),"is"===e&&!O[e])if(ee||te)try{Re(t)}catch(e){}else try{t.setAttribute(e,"")}catch(e){}},Te=function(e){let t=null,i=null;if(J)e="<remove></remove>"+e;else{const t=qo(e,/^[\r\n\t ]+/);i=t&&t[0]}"application/xhtml+xml"===ye&&we===me&&(e='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+e+"</body></html>");const r=y?y.createHTML(e):e;if(we===me)try{t=(new f).parseFromString(r,ye)}catch(e){}if(!t||!t.documentElement){t=C.createDocument(we,"template",null);try{t.documentElement.innerHTML=be?A:r}catch(e){}}const s=t.body||t.documentElement;return e&&i&&s.insertBefore(n.createTextNode(i),s.childNodes[0]||null),we===me?k.call(t,X?"html":"body")[0]:X?t.documentElement:s},Le=function(e){return _.call(e.ownerDocument||e,e,h.SHOW_ELEMENT|h.SHOW_COMMENT|h.SHOW_TEXT|h.SHOW_PROCESSING_INSTRUCTION|h.SHOW_CDATA_SECTION,null)},ze=function(e){return e instanceof u&&("string"!=typeof e.nodeName||"string"!=typeof e.textContent||"function"!=typeof e.removeChild||!(e.attributes instanceof d)||"function"!=typeof e.removeAttribute||"function"!=typeof e.setAttribute||"string"!=typeof e.namespaceURI||"function"!=typeof e.insertBefore||"function"!=typeof e.hasChildNodes)},He=function(e){return"function"==typeof c&&e instanceof c},Pe=function(e,t,n){S[e]&&zo(S[e],(e=>{e.call(i,t,n,_e)}))},Oe=function(e){let t=null;if(Pe("beforeSanitizeElements",e,null),ze(e))return Re(e),!0;const n=Ce(e.nodeName);if(Pe("uponSanitizeElement",e,{tagName:n,allowedTags:H}),e.hasChildNodes()&&!He(e.firstElementChild)&&Go(/<[/\w]/g,e.innerHTML)&&Go(/<[/\w]/g,e.textContent))return Re(e),!0;if(e.nodeType===xa)return Re(e),!0;if(Y&&e.nodeType===ka&&Go(/<[/\w]/g,e.data))return Re(e),!0;if(!H[n]||Q[n]){if(!Q[n]&&qe(n)){if(q.tagNameCheck instanceof RegExp&&Go(q.tagNameCheck,n))return!1;if(q.tagNameCheck instanceof Function&&q.tagNameCheck(n))return!1}if(se&&!ce[n]){const t=v(e)||e.parentNode,i=F(e)||e.childNodes;if(i&&t){for(let n=i.length-1;n>=0;--n){const r=m(i[n],!0);r.__removalCount=(e.__removalCount||0)+1,t.insertBefore(r,b(e))}}}return Re(e),!0}return e instanceof l&&!function(e){let t=v(e);t&&t.tagName||(t={namespaceURI:we,tagName:"template"});const i=Oo(e.tagName),n=Oo(t.tagName);return!!Fe[e.namespaceURI]&&(e.namespaceURI===ge?t.namespaceURI===me?"svg"===i:t.namespaceURI===pe?"svg"===i&&("annotation-xml"===n||Se[n]):Boolean(Be[i]):e.namespaceURI===pe?t.namespaceURI===me?"math"===i:t.namespaceURI===ge?"math"===i&&Ee[n]:Boolean(Me[i]):e.namespaceURI===me?!(t.namespaceURI===ge&&!Ee[n])&&!(t.namespaceURI===pe&&!Se[n])&&!Me[i]&&(Ne[i]||!Be[i]):!("application/xhtml+xml"!==ye||!Fe[e.namespaceURI]))}(e)?(Re(e),!0):"noscript"!==n&&"noembed"!==n&&"noframes"!==n||!Go(/<\/no(script|embed|frames)/i,e.innerHTML)?(K&&e.nodeType===_a&&(t=e.textContent,zo([E,N,B],(e=>{t=Qo(t,e," ")})),e.textContent!==t&&(Po(i.removed,{element:e.cloneNode()}),e.textContent=t)),Pe("afterSanitizeElements",e,null),!1):(Re(e),!0)},Ue=function(e,t,i){if(ne&&("id"===t||"name"===t)&&(i in n||i in xe))return!1;if(W&&!V[t]&&Go(M,t));else if(j&&Go(R,t));else if(!O[t]||V[t]){if(!(qe(e)&&(q.tagNameCheck instanceof RegExp&&Go(q.tagNameCheck,e)||q.tagNameCheck instanceof Function&&q.tagNameCheck(e))&&(q.attributeNameCheck instanceof RegExp&&Go(q.attributeNameCheck,t)||q.attributeNameCheck instanceof Function&&q.attributeNameCheck(t))||"is"===t&&q.allowCustomizedBuiltInElements&&(q.tagNameCheck instanceof RegExp&&Go(q.tagNameCheck,i)||q.tagNameCheck instanceof Function&&q.tagNameCheck(i))))return!1}else if(ue[t]);else if(Go(z,Qo(i,T,"")));else if("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==Vo(i,"data:")||!he[e]){if(G&&!Go(D,Qo(i,T,"")));else if(i)return!1}else;return!0},qe=function(e){return"annotation-xml"!==e&&qo(e,L)},Qe=function(e){Pe("beforeSanitizeAttributes",e,null);const{attributes:t}=e;if(!t)return;const n={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:O};let r=t.length;for(;r--;){const s=t[r],{name:o,namespaceURI:a,value:c}=s,l=Ce(o);let h="value"===o?c:jo(c);if(n.attrName=l,n.attrValue=h,n.keepAttr=!0,n.forceKeepAttr=void 0,Pe("uponSanitizeAttribute",e,n),h=n.attrValue,Y&&Go(/((--!?|])>)|<\/(style|title)/i,h)){De(o,e);continue}if(n.forceKeepAttr)continue;if(De(o,e),!n.keepAttr)continue;if(!$&&Go(/\/>/i,h)){De(o,e);continue}K&&zo([E,N,B],(e=>{h=Qo(h,e," ")}));const d=Ce(e.nodeName);if(Ue(d,l,h)){if(!re||"id"!==l&&"name"!==l||(De(o,e),h="user-content-"+h),y&&"object"==typeof p&&"function"==typeof p.getAttributeType)if(a);else switch(p.getAttributeType(d,l)){case"TrustedHTML":h=y.createHTML(h);break;case"TrustedScriptURL":h=y.createScriptURL(h)}try{a?e.setAttributeNS(a,o,h):e.setAttribute(o,h),ze(e)?Re(e):Ho(i.removed)}catch(e){}}}Pe("afterSanitizeAttributes",e,null)},Ve=function e(t){let i=null;const n=Le(t);for(Pe("beforeSanitizeShadowDOM",t,null);i=n.nextNode();)Pe("uponSanitizeShadowNode",i,null),Oe(i)||(i.content instanceof o&&e(i.content),Qe(i));Pe("afterSanitizeShadowDOM",t,null)};return i.sanitize=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=null,s=null,a=null,l=null;if(be=!e,be&&(e="\x3c!--\x3e"),"string"!=typeof e&&!He(e)){if("function"!=typeof e.toString)throw $o("toString is not a function");if("string"!=typeof(e=e.toString()))throw $o("dirty is not a string, aborting")}if(!i.isSupported)return e;if(Z||Ie(t),i.removed=[],"string"==typeof e&&(oe=!1),oe){if(e.nodeName){const t=Ce(e.nodeName);if(!H[t]||Q[t])throw $o("root node is forbidden and cannot be sanitized in-place")}}else if(e instanceof c)n=Te("\x3c!----\x3e"),s=n.ownerDocument.importNode(e,!0),s.nodeType===Ca&&"BODY"===s.nodeName||"HTML"===s.nodeName?n=s:n.appendChild(s);else{if(!ee&&!K&&!X&&-1===e.indexOf("<"))return y&&ie?y.createHTML(e):e;if(n=Te(e),!n)return ee?null:ie?A:""}n&&J&&Re(n.firstChild);const h=Le(oe?e:n);for(;a=h.nextNode();)Oe(a)||(a.content instanceof o&&Ve(a.content),Qe(a));if(oe)return e;if(ee){if(te)for(l=x.call(n.ownerDocument);n.firstChild;)l.appendChild(n.firstChild);else l=n;return(O.shadowroot||O.shadowrootmode)&&(l=I.call(r,l,!0)),l}let d=X?n.outerHTML:n.innerHTML;return X&&H["!doctype"]&&n.ownerDocument&&n.ownerDocument.doctype&&n.ownerDocument.doctype.name&&Go(va,n.ownerDocument.doctype.name)&&(d="<!DOCTYPE "+n.ownerDocument.doctype.name+">\n"+d),K&&zo([E,N,B],(e=>{d=Qo(d,e," ")})),y&&ie?y.createHTML(d):d},i.setConfig=function(){Ie(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}),Z=!0},i.clearConfig=function(){_e=null,Z=!1},i.isValidAttribute=function(e,t,i){_e||Ie({});const n=Ce(e),r=Ce(t);return Ue(n,r,i)},i.addHook=function(e,t){"function"==typeof t&&(S[e]=S[e]||[],Po(S[e],t))},i.removeHook=function(e){if(S[e])return Ho(S[e])},i.removeHooks=function(e){S[e]&&(S[e]=[])},i.removeAllHooks=function(){S={}},i}();class Na{constructor(t){this.parent=t,this.container=e({class:"igv-ui-generic-dialog-container"}),t.appendChild(this.container);const n=e({class:"igv-ui-generic-dialog-header"});this.container.appendChild(n),this.label=e({class:"igv-ui-generic-dialog-one-liner"}),this.container.appendChild(this.label),this.label.text="Unlabeled",this.input_container=e({class:"igv-ui-generic-dialog-input"}),this.container.appendChild(this.input_container);let r='<input type="range" id="igv-slider-dialog-input" name="igv-slider-dialog-input" />';this._input=document.createRange().createContextualFragment(r).firstChild,this.input_container.appendChild(this._input),r='<output id="igv-slider-dialog-output" name="igv-slider-dialog-output" for="igv-slider-dialog-input"></output>',this._output=document.createRange().createContextualFragment(r).firstChild,this.input_container.appendChild(this._output);const s=e({class:"igv-ui-generic-dialog-ok-cancel"});this.container.appendChild(s),this.ok=e(),s.appendChild(this.ok),this.ok.textContent="OK",this.cancel=e(),s.appendChild(this.cancel),this.cancel.textContent="Cancel",i(this.container),this._input.addEventListener("input",(()=>{const e=parseFloat(this._input.value)/this._scaleFactor;this.callback(e),this._output.value=`${e.toFixed(2)}`}),!1),this.ok.addEventListener("click",(()=>{if("function"==typeof this.callback){const e=parseFloat(this._input.value)/this._scaleFactor;this.callback(e),this.callback=void 0}this._input.value=void 0,i(this.container)}));const o=()=>{this._input.value=void 0,i(this.container)};this.cancel.addEventListener("click",o),u(n,o),p(this.container,n)}get value(){return Ea.sanitize(this._input.value)}present(e,t){this.label.textContent=e.label,this._scaleFactor=e.scaleFactor;const[i,r,s]=[e.min,e.max,e.value].map((e=>Math.floor(this._scaleFactor*e).toString()));this._input.min=i,this._input.max=r,this._input.value=s;const o=parseFloat(s)/this._scaleFactor;this._output.value=`${o.toFixed(2)}`,this.callback=e.callback||e.click,n(this.container),this.clampLocation(t.clientX,t.clientY)}clampLocation(e,t){const{width:i,height:n}=this.container.getBoundingClientRect(),r=window.innerHeight,s=window.innerWidth,o=Math.min(r-n,t),a=Math.min(s-i,e);this.container.style.left=`${a}px`,this.container.style.top=`${o}px`}}class Ba{constructor(t){this.parent=t,this.container=e({class:"igv-ui-generic-dialog-container"}),t.appendChild(this.container);const n=e({class:"igv-ui-generic-dialog-header"});this.container.appendChild(n),this.label=e({class:"igv-ui-generic-dialog-one-liner"}),this.container.appendChild(this.label),this.label.text="Unlabeled",this.input_container=e({class:"igv-ui-generic-dialog-input"}),this.container.appendChild(this.input_container),this._input=document.createElement("input"),this.input_container.appendChild(this._input);const r=e({class:"igv-ui-generic-dialog-ok-cancel"});this.container.appendChild(r),this.ok=e(),r.appendChild(this.ok),this.ok.textContent="OK",this.cancel=e(),r.appendChild(this.cancel),this.cancel.textContent="Cancel",i(this.container),this._input.addEventListener("keyup",(e=>{"Enter"===e.code&&("function"==typeof this.callback&&(this.callback(this._input.value),this.callback=void 0),this._input.value=void 0,i(this.container)),e.stopImmediatePropagation()})),this.ok.addEventListener("click",(()=>{"function"==typeof this.callback&&(this.callback(this._input.value),this.callback=void 0),this._input.value=void 0,i(this.container)}));const s=()=>{this._input.value="",i(this.container)};this.cancel.addEventListener("click",s),u(n,s),p(this.container,n)}get value(){return Ea.sanitize(this._input.value)}present(e,t){this.label.textContent=e.label,this._input.value=e.value,this.callback=e.callback||e.click,n(this.container),this.clampLocation(t.clientX,t.clientY)}clampLocation(e,t){const{width:i,height:n}=this.container.getBoundingClientRect(),r=window.innerHeight,s=window.innerWidth,o=Math.min(r-n,t),a=Math.min(s-i,e);this.container.style.left=`${a}px`,this.container.style.top=`${o}px`}}const Ma={licorice:"#000000",lead:"#1e1e1e",tungsten:"#3a3a3a",iron:"#545453",steel:"#6e6e6e",tin:"#878687",nickel:"#888787",aluminum:"#a09fa0",magnesium:"#b8b8b8",silver:"#d0d0d0",mercury:"#e8e8e8",snow:"#ffffff",cayenne:"#891100",mocha:"#894800",aspargus:"#888501",fern:"#458401",clover:"#028401",moss:"#018448",teal:"#008688",ocean:"#004a88",midnight:"#001888",eggplant:"#491a88",plum:"#891e88",maroon:"#891648",maraschino:"#ff2101",tangerine:"#ff8802",lemon:"#fffa03",lime:"#83f902",spring:"#05f802",seam_foam:"#03f987",turquoise:"#00fdff",aqua:"#008cff",blueberry:"#002eff",grape:"#8931ff",magenta:"#ff39ff",strawberry:"#ff2987",salmon:"#ff726e",cantaloupe:"#ffce6e",banana:"#fffb6d",honeydew:"#cefa6e",flora:"#68f96e",spindrift:"#68fbd0",ice:"#68fdff",sky:"#6acfff",orchid:"#6e76ff",lavender:"#d278ff",bubblegum:"#ff7aff",carnation:"#ff7fd3"};class Ra{constructor({parent:t,top:n,left:r,width:s,height:o,border:a,closeHandler:c}){let l=e({class:"igv-ui-generic-container"});t.appendChild(l),i(l),this.container=l,void 0!==n&&(this.container.style.top=`${n}px`),void 0!==r&&(this.container.style.left=`${r}px`),void 0!==s&&(this.container.style.width=`${s}px`),void 0!==o&&(this.container.style.height=`${o}px`),a&&(this.container.style.border=a);const h=e();this.container.appendChild(h),u(h,(e=>{i(this.container),"function"==typeof c&&c(e)})),p(this.container,h)}show(){n(this.container)}hide(){i(this.container)}dispose(){this.container.parent&&this.container.parent.removeChild(this.container)}}class Da extends Ra{constructor({parent:e,width:t}){super({parent:e,width:t,border:"1px solid gray"})}configure(e,t){this.colorHandlers=t,this.setActiveColorHandler("color"),this.createSwatches(e)}setActiveColorHandler(e){this.activeColorHandler=this.colorHandlers[e]}createSwatches(t){this.container.querySelectorAll(".igv-ui-color-swatch").forEach((e=>e.remove()));const i=Object.values(Ma);for(let t of i){const i=e({class:"igv-ui-color-swatch"});this.container.appendChild(i),this.decorateSwatch(i,t)}if(t)for(let i of t){const t=e({class:"igv-ui-color-swatch"});this.container.appendChild(t),this.decorateSwatch(t,i)}}decorateSwatch(e,t){e.style.backgroundColor=t,e.addEventListener("mouseenter",(()=>e.style.borderColor=t)),e.addEventListener("mouseleave",(()=>e.style.borderColor="white")),e.addEventListener("click",(e=>{e.stopPropagation(),this.activeColorHandler(t)})),e.addEventListener("touchend",(e=>{e.stopPropagation(),this.activeColorHandler(t)}))}}const Ta={401:"Access unauthorized",403:"Access forbidden",404:"Not found"};class La{constructor(t,n){this.alertProps=Object.assign({shouldFocus:!0,preventScroll:!1},n),this.container=e({class:"igv-ui-alert-dialog-container"}),t.appendChild(this.container),this.container.setAttribute("tabIndex","-1");const r=e();this.container.appendChild(r),this.errorHeadline=e(),r.appendChild(this.errorHeadline),this.errorHeadline.textContent="";let s=e({class:"igv-ui-alert-dialog-body"});this.container.appendChild(s),this.body=e({class:"igv-ui-alert-dialog-body-copy"}),s.appendChild(this.body);let o=e();this.container.appendChild(o),this.ok=e(),o.appendChild(this.ok),this.ok.textContent="OK";const a=()=>{"function"==typeof this.callback&&(this.callback("OK"),this.callback=void 0),this.body.innerHTML="",i(this.container)};this.ok.addEventListener("click",(e=>{e.stopPropagation(),a()})),this.container.addEventListener("keypress",(e=>{e.stopPropagation(),"Enter"===e.key&&a()})),p(this.container,r),i(this.container)}present(e,t){this.errorHeadline.textContent=e.message?"ERROR":"";let i=e.message||e;Ta.hasOwnProperty(i)&&(i=Ta[i]);const r=Ea.sanitize(i);this.body.innerHTML=r,this.callback=t,n(this.container),this.alertProps.shouldFocus&&this.container.focus({preventScroll:this.alertProps.preventScroll})}}class za{constructor(e){this.dialog=new La(e)}present(e,t){this.dialog.present(e,t)}}function Ha(e){if(e)switch(e.toLowerCase()){case"bw":case"bigwig":case"wig":case"bedgraph":case"tdf":return"wig";case"vcf":return"variant";case"seg":return"seg";case"mut":case"maf":return"mut";case"bam":case"cram":return"alignment";case"hiccups":case"bedpe":case"bedpe-loop":case"biginteract":return"interact";case"bp":return"arc";case"gwas":return"gwas";case"bed":case"bigbed":case"bb":case"biggenepred":case"bignarrowpeak":return"bedtype";case"fasta":return"sequence";case"pytor":return"cnvpytor";case"qtl":return"qtl";default:return"annotation"}}function Pa(e){e.featureType&&(e.type=e.type||e.featureType,e.featureType=void 0),"junctions"===e.type?e.type="junction":"bed"===e.type?(e.type="annotation",e.format=e.format||"bed"):"annotations"===e.type?e.type="annotation":"alignments"===e.type?e.type="alignment":"bam"===e.type?(e.type="alignment",e.format="bam"):"vcf"===e.type?(e.type="variant",e.format="vcf"):"t2d"===e.type?e.type="gwas":"FusionJuncSpan"!==e.type||e.format?"aed"===e.type&&(e.type="annotation",e.format=e.format||"aed"):e.format="fusionjuncspan"}var Oa=Object.freeze({__proto__:null,inferTrackType:Ha,translateDeprecatedTypes:Pa});function Ua(e){const t=new Set(["boolean","number","string","symbol"]),i=typeof e;return void 0!==e&&(t.has(i)||e.substring||e.toFixed)}function qa(e,t){var i={oauthToken:e.oauthToken,headers:e.headers,withCredentials:e.withCredentials,filename:e.filename};return Object.assign(i,t)}const Qa=function(e){var t,i;if(e&&e.length>0){t=Number.MAX_VALUE,i=-Number.MAX_VALUE;for(let n of e)Number.isNaN(n.value)||(t=Math.min(t,n.value),i=Math.max(i,n.value));i>0&&(t=Math.min(0,t)),i<0&&(i=0)}else t=0,i=100;return{min:t,max:i}},Va=function(e,t,i){let n=t.start,r=t.end;if(void 0===r)n-=i/2,r=n+i,r>e?(r=e,n=r-i):n<0&&(n=0,r=i);else if(r-n<i){const t=(r+n)/2;t-i/2<0?(n=0,r=n+i):t+i/2>e?(r=e,n=r-i):(n=t-i/2,r=n+i)}t.start=Math.ceil(n),t.end=Math.floor(r)},ja=function(e){return"number"==typeof e?e-e==0:"string"==typeof e&&""!==e.trim()&&Number.isFinite(+e)};async function Wa(e){if(Mt(e)&&e.startsWith("https://drive.google.com")){if(void 0===zs())throw Error("Google drive is referenced, but API key is not defined.  An API key is required for Google Drive access");const t=await async function(e){let t="https://www.googleapis.com/drive/v3/files/"+Ps(e)+"?supportsTeamDrives=true";const i=zs();i&&(t+="&key="+i);const n=await fetch(t);let r=await n.json();if(r.error&&404===r.error.code){let e="https://www.googleapis.com/auth/drive.readonly";const i=await Ls(e);if(!i)throw Error(r.error);{const e=await fetch(t,{headers:{Authorization:`Bearer ${i}`}});if(r=await e.json(),r.error)throw Error(r.error)}}return r}(e);return t.originalFileName||t.name}return zt(e)}function Ga(e){var t,i;return e>1e7?(t=" mb",i=e/1e6,Math.floor(i).toString()+t):e>1e4?(t=" kb",i=e/1e3,Rt(Math.floor(i))+t):Rt(e)+" bp"}function $a(e){return Mt(e)&&e.startsWith("data:")}function Ka(t,i){const n=e({class:i});t.appendChild(n)}function Ya(e,t){t.parentNode.insertBefore(e,t)}function Xa(e,t){t.parentNode.insertBefore(e,t.nextSibling)}function Za(){return"https:"===window.location.protocol||"localhost"===window.location.hostname}class Ja extends Ra{constructor({parent:e,top:t,left:i,width:n,height:r,defaultColors:s,colorHandler:o}){super({parent:e,top:t,left:i,width:n,height:r,border:"1px solid gray"}),ec(this.container,o,s)}}const ec=(t,i,n)=>{const r=Object.values(Ma);for(let n of r){const r=e({class:"igv-ui-color-swatch"});t.appendChild(r),tc(r,n,i)}if(n)for(let r of n){const n=e({class:"igv-ui-color-swatch"});t.appendChild(n),tc(n,r,i)}},tc=(e,t,i)=>{e.style.backgroundColor=t,e.addEventListener("mouseenter",(i=>e.style.borderColor=t)),e.addEventListener("mouseleave",(t=>e.style.borderColor="white")),e.addEventListener("click",(e=>{e.stopPropagation(),i(t)})),e.addEventListener("touchend",(e=>{e.stopPropagation(),i(t)}))};class ic{constructor(t,i,n,r){this.parent=t,this.popover=e({class:"igv-ui-popover"}),t.appendChild(this.popover),this.popoverHeader=e(),this.popover.appendChild(this.popoverHeader);const s=e();this.popoverHeader.appendChild(s),n&&(s.textContent=n);const o=e();this.popoverHeader.appendChild(o),o.appendChild(l("times")),o.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),r?r():this.dismiss()})),!0===i&&p(this.popover,this.popoverHeader,{minX:0,minY:0}),this.popoverContent=e(),this.popover.appendChild(this.popoverContent),this.popover.style.display="none"}configure(e){if(0===e.length)return;const t=rc(e,this.popover);for(const{object:e}of t)this.popoverContent.appendChild(e)}present(e){this.popover.style.display="block";const t=this.popover.parentNode,{x:i,y:n,width:r}=a(e,t);this.popover.style.top=`${n}px`;const{width:s}=this.popover.getBoundingClientRect(),o=i+s,c=o-r;this.popover.style.left=`${o>r?i-c:i}px`,this.popoverContent.style.maxWidth=`${Math.min(s,r)}px`}presentContentWithEvent(e,t){this.popover.style.display="block",this.popoverContent.innerHTML=t,nc(e,this.popover,this.popoverContent)}presentMenu(e,t){if(0===t.length)return;this.popover.style.display="block";const i=rc(t,this.popover);for(let e of i)this.popoverContent.appendChild(e.object);nc(e,this.popover,this.popoverContent)}dismiss(){this.popover.style.display="none"}hide(){this.popover.style.display="none",this.dispose()}dispose(){this.popover&&this.popover.parentNode.removeChild(this.popover);const e=Object.keys(this);for(let t of e)this[t]=void 0}}function nc(e,t,i){const{x:n,y:r,width:s}=a(e,t.parentNode);t.style.top=`${r}px`;const{width:o}=t.getBoundingClientRect(),c=n+o,l=c-s;t.style.left=`${c>s?n-l:n}px`,i.style.maxWidth=`${Math.min(o,s)}px`}function rc(t,n){const r=t.map((function(t,r){let s;if("string"==typeof t)s=e(),s.innerHTML=t;else if("Node"==typeof t)s=t;else{if("function"==typeof t.init&&t.init(),"checkbox"===t.type)s=function(t,i){const n=e({class:"igv-ui-trackgear-popover-check-container"}),r=h("check",!0===i?"#444":"transparent");r.style.borderColor="gray",r.style.borderWidth="1px",r.style.borderStyle="solid",n.appendChild(r);let s=e();return s.textContent=t,n.appendChild(s),n}("Show all bases",t.value);else if("color"===t.type){const o=new Ja({parent:n.parentElement,width:364,colorHandler:e=>t.click(e)});s=e(),"string"==typeof t.label&&(s.innerHTML=t.label);const a=e=>{o.show(),i(n),e.preventDefault(),e.stopPropagation()};s.addEventListener("click",a),s.addEventListener("touchend",a),s.addEventListener("mouseup",(function(e){e.preventDefault(),e.stopPropagation()}))}else s=e(),"string"==typeof t.label&&(s.innerHTML=t.label);if(t.click&&"color"!==t.type){function c(e){t.click(),i(n),e.preventDefault(),e.stopPropagation()}s.addEventListener("click",c),s.addEventListener("touchend",c),s.addEventListener("mouseup",(function(e){e.preventDefault(),e.stopPropagation()}))}}return{object:s,init:t.init}}));return r}const sc=[["A","T"],["G","C"],["Y","R"],["W","S"],["K","M"],["D","H"],["B","V"]],oc=new Map;for(let yA of sc){const AA=yA[0],CA=yA[1];oc.set(AA,CA),oc.set(CA,AA),oc.set(AA.toLowerCase(),CA.toLowerCase()),oc.set(CA.toLowerCase(),AA.toLowerCase())}function ac(e){return oc.has(e)?oc.get(e):e}function cc(e){let t="";for(let i of e)t+=oc.has(i)?oc.get(i):i;return t}function lc(e){let t="",i=e.length;for(;i-- >0;){const n=e[i];t+=oc.has(n)?oc.get(n):n}return t}class hc{constructor(e,t,i,n){this.name=e,this.order=t,this.bpLength=i,this.altNames=n}getAltName(e){return this.altNames&&this.altNames.has(e)?this.altNames.get(e):this.name}}class dc{constructor(e,t,i,n){this.chr=e,this.start=t,this.end=i,this.features=n}contains(e,t,i){return this.chr===e&&this.start<=t&&this.end>=i}containsRange(e){return this.chr===e.chr&&this.start<=e.start&&this.end>=e.end}get locusString(){return`${this.chr}:${this.start+1}-${this.end}`}}class uc extends dc{constructor(e,t,i,n){super(e,t,i,n)}getSequence(e,t){if(e<this.start||t>this.end)return null;const i=e-this.start,n=t-e;return this.features?this.features.substring(i,i+n):null}hasSequence(e,t){return e>=this.start&&t<=this.end}}const fc=Dt,pc=new Set(["fastaURL","indexURL","cytobandURL","indexed"]);class gc{#e;chromosomes=new Map;sequences=new Map;constructor(e){this.fastaURL=e.fastaURL,this.withCredentials=e.withCredentials;const t={};for(let i in e)e.hasOwnProperty(i)&&!pc.has(i)&&(t[i]=e[i]);this.config=t}async init(){return this.loadAll()}getSequenceRecord(e){return this.chromosomes.get(e)}get chromosomeNames(){return this.#e||(this.#e=Array.from(this.chromosomes.keys())),this.#e}getFirstChromosomeName(){return this.chromosomeNames[0]}async getSequence(e,t,i){if(0===this.sequences.size&&await this.loadAll(),!this.sequences.has(e))return;let n=this.sequences.get(e).find((e=>e.contains(t,i)));if(!n&&(n=this.sequences.get(e).find((e=>e.overlaps(t,i))),!n))return;t-=n.offset,i-=n.offset;let r="";if(t<0)for(let e=t;e<Math.min(i,0);e++)r+="*";if(i<=0)return r;const s=n.sequence,o=Math.min(i,s.length);return r+s.substring(t,o)}async loadAll(){let e;if($a(this.fastaURL)){let t=vs(this.fastaURL);e="";for(let i of t)e+=String.fromCharCode(i)}else e=await Qs.load(this.fastaURL,qa(this.config));const t=new Set,i=fc(e),n=i.length;let r,s=0,o=0,a={};for(;s<n;){if(r=i[s++].trim(),r.startsWith("#")||0===r.length);else if(r.startsWith(">")){a&&a.seq&&c.call(this,a,o++);const e=r.substr(1).split(/\s+/),t=e[0].split(":");if(a.chr=t[0],a.seq="",a.offset=0,t.length>1&&t[1].indexOf("-")>0){const i=t[1].split("-");2===i.length&&/^[0-9]+$/.test(i[0])&&/^[0-9]+$/.test(i[1]);const n=Number.parseInt(i[0]);if(Number.parseInt(i[1])>n&&(a.offset=n-1),e.length>1&&e[1].startsWith("@len="))try{a.length=parseInt(e[1].trim().substring(5))}catch(e){a.length=void 0,console.error(`Error parsing sequence length for ${r}`)}else a.length=void 0}}else a.seq+=r;a&&a.seq&&c.call(this,a,o)}function c(e,i){const n=e.length||e.offset+e.seq.length;if(t.has(e.chr)){const t=this.chromosomes.get(e.chr);t.bpLength=Math.max(t.bpLength,n)}else this.sequences.set(e.chr,[]),this.chromosomes.set(e.chr,new hc(e.chr,i,n)),t.add(e.chr);this.sequences.get(e.chr).push(new mc(e.offset,e.seq))}}getSequenceInterval(e,t,i){const n=this.sequences.get(e);if(n)for(let r of n){const n=r.sequence,s=r.offset,o=s+n.length;if(s<=t&&o>=i)return new uc(e,s,o,n)}}}class mc{constructor(e,t){this.offset=e,this.sequence=t}contains(e,t){return this.offset<=e&&this.end>=t}overlaps(e,t){return this.offset<t&&this.end>e}get end(){return this.offset+this.sequence.length}}const wc=Dt,bc=new Set(["fastaURL","indexURL","compressedIndexURL","cytobandURL","indexed"]);class Fc{#e;chromosomes=new Map;constructor(e){this.file=e.fastaURL,this.indexFile=e.indexURL,this.compressedIndexFile=e.compressedIndexURL,this.withCredentials=e.withCredentials;const t={};for(let i in e)e.hasOwnProperty(i)&&!bc.has(i)&&(t[i]=e[i]);this.config=t}getSequenceRecord(e){return this.chromosomes.get(e)}async init(){return this.getIndex()}get chromosomeNames(){return this.#e||(this.#e=Array.from(this.chromosomes.keys())),this.#e}getFirstChromosomeName(){return this.chromosomeNames[0]}async getIndex(){if(this.index)return this.index;{const e=await Qs.load(this.indexFile,qa(this.config)),t=wc(e),i=t.length;let n=0,r=0;for(this.index={};n<i;){const e=t[n++].split("\t");if(5===e.length){const t=e[0],i=parseInt(e[1]),n={size:i,position:parseInt(e[2]),basesPerLine:parseInt(e[3]),bytesPerLine:parseInt(e[4])};this.index[t]=n,this.chromosomes.set(t,new hc(t,r++,i))}}return this.index}}async getCompressedIndex(){if(this.compressedIndex)return this.compressedIndex;if(!this.compressedIndexFile)return this.compressedIndex=[],this.compressedIndex;this.compressedIndex=[];const e=await Qs.loadArrayBuffer(this.compressedIndexFile,qa(this.config)),t=e.byteLength;if(t<8)return console.log("Cannot parse GZI index file: length ("+t+" bytes) is insufficient to determine content of index."),this.compressedIndex;const i=e.slice(0,8),n=Number(new DataView(i).getBigUint64(0,!0)),r=8+2*n*8;if(t!=r)return console.log("Incorrect file size of reference genome index. Expected : "+r+". Received : "+t),this.compressedIndex;this.compressedIndex.push([0,0]);for(let t=0;t<n;t++){const i=8+2*t*8,n=8+2*t*8+16,r=e.slice(i,n),s=new DataView(r),o=Number(s.getBigUint64(0,!0)),a=Number(s.getBigUint64(8,!0));this.compressedIndex.push([o,a])}return this.compressedIndex}async getRelevantCompressedBlockNumbers(e,t){if(e<0||t<0||t<e)return console.log("Incompatible query positions for reference-genome. Start:"+e+" | End:"+t),[];await this.getCompressedIndex();let i=[];const n=this.compressedIndex.length-1;if(0==this.compressedIndex.length)return console.log("Compressed index does not contain any content"),[];if(e>this.compressedIndex[n][1])return[n];let r=0,s=n,o=Math.floor(this.compressedIndex.length/2),a=this.compressedIndex.length+1,c=!1;for(let t=0;t<a;t++){const t=this.compressedIndex[o][1],i=o<this.compressedIndex.length-1?this.compressedIndex[o+1][1]:1/0;if(t<=e&&i>e){c=!0;break}t<e?r=o+1:s=o-1,o=Math.ceil((s-r)/2)+r}if(!c)return console.log("No blocks within compressed index found that correspond with query positions "+e+","+t),console.log(this.compressedIndex),[];i.push(o);for(let e=o+1;e<this.compressedIndex.length;e++){i.push(e);if(this.compressedIndex[e][1]>=t)break}const l=i[i.length-1];return l===this.compressedIndex.length-1&&this.compressedIndex[l][1]<t&&i.push(-1),i}async loadAndUncompressBlocks(e,t){if(await this.getCompressedIndex(),0==e.length)return"";let i=Array(e.length-1);for(let t=0;t<e.length-1;t++){const n=e[t],r=this.compressedIndex[n][0],s=e[t+1];let o=[];if(-1!=s){const e=this.compressedIndex[s][0]-r;o=await Qs.loadArrayBuffer(this.file,qa(this.config,{range:{start:r,size:e}}))}else o=await Qs.loadArrayBuffer(this.file,qa(this.config,{range:{start:r}}));const a=await gs(o);i[t]=a}let n="";for(let e=0;e<i.length;e++)for(let t=0;t<i[e].length;t++){n+=String.fromCharCode(i[e][t])}const r=t-this.compressedIndex[e[0]][1];return n=n.substring(r),n}async readSequence(e,t,i){await this.getIndex(),await this.getCompressedIndex();const n=this.index[e];if(!n)return console.log("No index entry for chr: "+e),this.index[e]=null,null;const r=Math.max(0,t),s=Math.min(n.size,i),o=n.bytesPerLine,a=n.basesPerLine,c=n.position,l=o-a,h=Math.floor(r/a),d=Math.floor(s/a),u=r-h*a,f=c+h*o+u,p=c+d*o+(s-d*a)-1,g=p-f+1;if(g<=0)return console.error("No sequence for "+e+":"+t+"-"+i),null;let m;if(this.compressedIndexFile){let e=await this.getRelevantCompressedBlockNumbers(f,p);if(0===e.length)return console.log("No blocks in the compressed index that correspond with the requested byte positions ("+f+","+p+")"),null;m=await this.loadAndUncompressBlocks(e,f)}else m=await Qs.load(this.file,qa(this.config,{range:{start:f,size:g}}));if(!m)return null;let w,b="",F=0,v=m.length;for(u>0&&(w=Math.min(s-r,a-u),b+=m.substr(F,w),F+=w+l);F<v;)w=Math.min(a,v-F),b+=m.substr(F,w),F+=w+l;return b}}const vc=Dt;class yc{#e;chromosomes=new Map;constructor(e){this.url=e}async init(){return this.loadAll()}getSequenceRecord(e){return this.chromosomes.get(e)}get chromosomeNames(){this.#e||(this.#e=Array.from(this.chromosomes.keys()))}async getSequence(e,t,i){return null}async loadAll(){let e;if($a(this.url)){let t=vs(this.fastaURL);e="";for(let i of t)e+=String.fromCharCode(i)}else e=await Qs.load(this.url,{});const t=vc(e);let i=0;for(let e of t){const t=e.split("\t");if(t.length>1){const e=Number.parseInt(t[1]),n=new hc(t[0],i++,e);this.chromosomes.set(t[0],n)}}}}class Ac{constructor(e,t=!0){this.littleEndian=t,this.position=0,this.view=e,this.length=e.byteLength}setPosition(e){this.position=e}available(){return this.length-this.position}remLength(){return this.length-this.position}hasNext(){return this.position<this.length-1}getByte(){const e=this.view.getUint8(this.position,this.littleEndian);return this.position++,e}getShort(){const e=this.view.getInt16(this.position,this.littleEndian);return this.position+=2,e}getUShort(){const e=this.view.getUint16(this.position,this.littleEndian);return this.position+=2,e}getInt(){const e=this.view.getInt32(this.position,this.littleEndian);return this.position+=4,e}getUInt(){const e=this.view.getUint32(this.position,this.littleEndian);return this.position+=4,e}getLong(){var e=[];e[0]=this.view.getUint8(this.position),e[1]=this.view.getUint8(this.position+1),e[2]=this.view.getUint8(this.position+2),e[3]=this.view.getUint8(this.position+3),e[4]=this.view.getUint8(this.position+4),e[5]=this.view.getUint8(this.position+5),e[6]=this.view.getUint8(this.position+6),e[7]=this.view.getUint8(this.position+7);let t=0;if(this.littleEndian)for(let i=e.length-1;i>=0;i--)t=256*t+e[i];else for(let i=0;i<e.length;i++)t=256*t+e[i];return this.position+=8,t}getString(e){let t,i="";for(;0!==(t=this.view.getUint8(this.position++))&&(i+=String.fromCharCode(t),!e||i.length!==e););return i}getFixedLengthString(e){let t="";for(let i=0;i<e;i++){const e=this.view.getUint8(this.position++);e>0&&(t+=String.fromCharCode(e))}return t}getFloat(){var e=this.view.getFloat32(this.position,this.littleEndian);return this.position+=4,e}getDouble(){var e=this.view.getFloat64(this.position,this.littleEndian);return this.position+=8,e}skip(e){return this.position+=e,this.position}getVPointer(){var e=this.position,t=this.view.getUint8(e+1)<<8|this.view.getUint8(e),i=4294967296*(255&this.view.getUint8(e+6))+16777216*(255&this.view.getUint8(e+5))+65536*(255&this.view.getUint8(e+4))+256*(255&this.view.getUint8(e+3))+(255&this.view.getUint8(e+2));return this.position+=8,new Cc(i,t)}}class Cc{constructor(e,t){this.block=e,this.offset=t}isLessThan(e){return this.block<e.block||this.block===e.block&&this.offset<e.offset}isGreaterThan(e){return this.block>e.block||this.block===e.block&&this.offset>e.offset}isEqualTo(e){return this.block===e.block&&this.offset===e.offset}print(){return this.block+":"+this.offset}}class _c{static magic=2026540177;littleEndian=!0;nodeCache=new Map;static async loadBpTree(e,t,i){return new _c(e,t,i).init()}constructor(e,t,i){this.path=e,this.config=t,this.startOffset=i}async init(){const e=await this.#t(this.startOffset,32);let t=e.getInt();if(t!==_c.magic&&(e.setPosition(0),this.littleEndian=!this.littleEndian,e.littleEndian=this.littleEndian,t=e.getInt(),t!==_c.magic))throw Error(`Bad magic number ${t}`);const i=e.getInt(),n=e.getInt(),r=e.getInt(),s=e.getLong(),o=e.getLong(),a=this.startOffset+32;return this.header={magic:t,blockSize:i,keySize:n,valSize:r,itemCount:s,reserved:o,nodeOffset:a},this}async search(e){this.header||await this.init();const{keySize:t,valSize:i}=this.header;if(16!==i&&8!==i)throw Error(`Unexpected valSize ${i}`);const n=async e=>{if(this.nodeCache.has(e))return this.nodeCache.get(e);{let n=await this.#t(e,4);const r=n.getByte();n.getByte();const s=n.getUShort(),o=[];if(1===r){const r=s*(t+i);n=await this.#t(e+4,r);for(let e=0;e<s;e++){const e=n.getFixedLengthString(t),r=n.getLong();let s;if(16===i){const e=n.getInt();n.getInt(),s={offset:r,length:e}}else s={offset:r};o.push({key:e,value:s})}}else{const i=s*(t+8);n=await this.#t(e+4,i);for(let e=0;e<s;e++){const e=n.getFixedLengthString(t),i=n.getLong();o.push({key:e,offset:i})}}const a={type:r,count:s,items:o};return this.nodeCache.set(e,a),a}},r=async t=>{const i=await n(t);if(1!==i.type){let t=i.items[0].offset;for(let n=1;n<i.items.length;n++){const r=i.items[n].key;if(e.localeCompare(r)<0)break;t=i.items[n].offset}return r(t)}for(let t of i.items)if(e===t.key)return t.value};return r(this.header.nodeOffset)}async#t(e,t){const i=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:e,size:t}}));return new Ac(new DataView(i),this.littleEndian)}}
/**
     * Note: Some portions of this code adapated from the GMOD two-bit.js project, @Copyright (c) 2017 Robert Buels
     * * https://github.com/GMOD/twobit-js/blob/master/src/twoBitFile.ts*
     */const xc=["T","C","A","G"],kc=[];for(let _A=0;_A<256;_A++)kc.push(xc[_A>>6&3]+xc[_A>>4&3]+xc[_A>>2&3]+xc[3&_A]);const Ic=kc.map((e=>e.toLowerCase()));class Sc{littleEndian;metaIndex=new Map;constructor(e){this.url=e.twoBitURL||e.fastaURL,this.config=e,e.twoBitBptURL&&(this.bptURL=e.twoBitBptURL)}async init(){if(this.bptURL)this.index=await _c.loadBpTree(this.bptURL,this.config,0);else{const e=await this._readIndex();this.index={search:async t=>e.has(t)?{offset:e.get(t)}:void 0}}}async readSequence(e,t,i){this.index||await this.init();const n=await this.getSequenceRecord(e);if(!n)return null;if(t<0)throw new TypeError("regionStart cannot be less than 0");(void 0===i||i>n.dnaSize)&&(i=n.dnaSize);const r=this._getOverlappingBlocks(t,i,n.nBlocks),s=this._getOverlappingBlocks(t,i,n.maskBlocks),o=Math.floor(t/4),a=n.packedPos+o,c=Math.floor(i/4)-o+1,l=await Qs.loadArrayBuffer(this.url,{range:{start:a,size:c}}),h=new Uint8Array(l);let d="";for(let e=t;e<i;e+=1){for(;s.length&&s[0].end<=e;)s.shift();const t=s[0]&&s[0].start<=e&&s[0].end>e;if(r[0]&&e>=r[0].start&&e<r[0].end){const t=r.shift();for(;e<t.end&&e<i;)d+="N",e++;e--}else{const i=e%4,n=h[Math.floor(e/4)-o];d+=t?Ic[n][i]:kc[n][i]}}return d}async _readIndex(){const e=new Map;let t=await Qs.loadArrayBuffer(this.url,{range:{start:0,size:64}}),i=new DataView(t),n=0;const r=i.getUint32(n,!0),s=i.getUint32(n,!1);n+=4;const o=440477507;if(r===o)this.littleEndian=!0;else{if(s!==o)throw Error(`Bad magic number ${o}`);this.littleEndian=!1}let a,c;this.version=i.getUint32(n,this.littleEndian),n+=4,this.sequenceCount=i.getUint32(n,this.littleEndian),n+=4,this.reserved=i.getUint32(n,this.littleEndian),n+=4;let l=20;for(let t=0;t<this.sequenceCount;t++){(!c||c.available()<1)&&(a=(this.sequenceCount-t)*l,c=await this._loadBinaryBuffer(n,a));const i=c.getByte();n+=1,c.available()<i+5&&(a=(this.sequenceCount-t)*l+100,c=await this._loadBinaryBuffer(n,a));const r=c.getString(i),s=c.getUInt();n+=i+4,e.set(r,s),l=Math.floor(l*(t/(t+1))+r.length/(t+1))}return e}async getSequenceRecord(e){if(!this.metaIndex.has(e)){if(!this.index)throw Error("TwobitSequence object must be initialized before accessing sequence");let t=await this.index.search(e);if(!t)return;let i=t.offset,n=8,r=await this._loadBinaryBuffer(i,n);const s=r.getUInt(),o=r.getUInt();i+=n,n=8*o+4,r=await this._loadBinaryBuffer(i,n);const a=[];for(let e=0;e<o;e++)a.push(r.getUInt());const c=[];for(let e=0;e<o;e++)c.push(r.getUInt());const l=r.getUInt();i+=n,n=8*l+4,r=await this._loadBinaryBuffer(i,n);const h=[];for(let e=0;e<l;e++)h.push(r.getUInt());const d=[];for(let e=0;e<l;e++)d.push(r.getUInt());const u=[];for(let e=0;e<o;e++)u.push(new Ec(a[e],c[e]));const f=[];for(let e=0;e<l;e++)f.push(new Ec(h[e],d[e]));if(0!=r.getUInt())throw Error("Bad 2-bit file");i+=n;const p={dnaSize:s,nBlocks:u,maskBlocks:f,packedPos:i,bpLength:s};this.metaIndex.set(e,p)}return this.metaIndex.get(e)}_getOverlappingBlocks(e,t,i){const n=[];for(let r of i){if(r.start>t)break;r.end<e||n.push(r)}return n}async _loadBinaryBuffer(e,t){const i=await Qs.loadArrayBuffer(this.url,{range:{start:e,size:t}});return new Ac(new DataView(i),this.littleEndian)}}class Ec{constructor(e,t){this.start=e,this.size=t}get end(){return this.start+this.size}}class Nc{static#i=1e5;#n;#r=[];#s=10;constructor(e,t){this.sequenceReader=e,this.browser=t}get chromosomes(){return this.sequenceReader.chromosomes}async getSequenceRecord(e){return this.sequenceReader.getSequenceRecord(e)}async getSequence(e,t,i){let n=this.#r.find((n=>n.contains(e,t,i)));if(n||(n=await this.#o(e,t,i),this.#a(n),this.#r.push(n)),n){const e=t-n.start,r=i-t;return n.features?n.features.substring(e,e+r):null}}#a(e){this.#r=this.#r.filter((t=>!e.contains(t))),this.#r.length===this.#s&&this.#r.shift(),this.browser&&this.browser.referenceFrameList.length<100&&(this.#r=this.#r.filter((e=>void 0!==this.browser.referenceFrameList.find((t=>t.overlaps(e))))))}getSequenceInterval(e,t,i){return this.#r.find((n=>n.contains(e,t,i)))}async#o(e,t,i){let n=t,r=i;if(i-t<Nc.#i){const e=i-t,s=Math.round(t+e/2);n=Math.max(0,s-Nc.#i/2),r=n+Nc.#i}const s=new uc(e,n,r);if(this.#n&&this.#n[0].contains(e,t,i))return this.#n[1];{const t=new Promise((async(t,i)=>{s.features=await this.sequenceReader.readSequence(e,n,r),t(s)}));return this.#n=[s,t],t}}async init(){return this.sequenceReader.init()}get chromosomeNames(){return this.sequenceReader.chromosomeNames}getFirstChromosomeName(){return"function"==typeof this.sequenceReader.getFirstChromosomeName?this.sequenceReader.getFirstChromosomeName():void 0}#c(e){this.browser.referenceFrameList}}async function Bc(e,t){let i;return"chromsizes"===e.format?i=new yc(e.fastaURL||e.url):"2bit"===e.format||e.twoBitURL?i=new Nc(new Sc(e),t):$a(e.fastaURL)||!e.indexURL?i=new gc(e):"gbk"===e.format||e.gbkURL||(i=new Nc(new Fc(e),t)),await i.init(),i}const Mc={A:"rgb(  0, 200,   0)",C:"rgb(  0,0,200)",T:"rgb(255,0,0)",G:"rgb(209,113,  5)",N:"rgb(80,80,80)"};function Rc(e,t){if(e.length<6)return void console.log("Skipping line: "+e.join(" "));var i={chr1:e[0],start1:Number.parseInt(e[1]),end1:Number.parseInt(e[2]),chr2:e[3],start2:Number.parseInt(e[4]),end2:Number.parseInt(e[5])};if(isNaN(i.start1)||isNaN(i.end1)||isNaN(i.start2)||isNaN(i.end2))return;t&&void 0===t.hiccups&&(t.hiccups=!!t.columnNames&&Tc(t.columnNames));const n=t&&t.hiccups,r=n?6:10;if(n||(e.length>6&&"."!==e[6]&&(i.name=e[6]),e.length>7&&"."!==e[7]&&(i.score=Number(e[7])),e.length>8&&"."!==e[8]&&(i.strand1=e[8]),e.length>9&&"."!==e[9]&&(i.strand2=e[9])),t){const n=t.colorColumn;n&&n<e.length&&(i.color=_s.createColorString(e[n]));const s=t.thicknessColumn;s&&s<e.length&&(i.thickness=e[s]),e.length>r&&t.columnNames&&t.columnNames.length===e.length&&(i.extras=e.slice(r))}return i.chr1===i.chr2&&(i.chr=i.chr1,i.start=Math.min(i.start1,i.start2),i.end=Math.max(i.end1,i.end2)),i}function Dc(e,t){if(!(e.length<8))return{chr:e[0],start:Number.parseInt(e[1]),end:Number.parseInt(e[2]),color:_s.createColorString(e[6]),value:Number(e[7])}}function Tc(e){return e&&(e.includes("fdrDonut")||e.includes("fdr_donut"))}function Lc(e,t){if(!(e.length<6))return{chr:e[0],start:Number.parseInt(e[1]),end:Number.parseInt(e[2]),chr1:e[8],start1:Number.parseInt(e[9]),end1:Number.parseInt(e[10]),chr2:e[13],start2:Number.parseInt(e[14]),end2:Number.parseInt(e[15]),name:e[3],score:Number(e[4]),value:Number(e[5]),color:"."===e[7]?void 0:"0"===e[7]?"rgb(0,0,0)":e[7]};console.log("Skipping line: "+e.join(" "))}class zc{constructor(e){this.message=e}}const Hc=new Map([["%09","\t"],["%0A","\n"],["%0D","\r"],["%25","%"],["%3B",";"],["%3D","="],["%26","&"],["%2C",","]]);function Pc(e){if(!e.includes("%"))return e;let t="";for(let i=0;i<e.length;i++)if(37===e.charCodeAt(i)&&i<e.length-2){const n=e.substring(i,i+3);Hc.has(n)?t+=Hc.get(n):t+=n,i+=2}else t+=e.charAt(i);return t}function Oc(e,t="="){const i="="===t;var n=[];for(let r of e.split(";")){r=r.trim();const e=r.indexOf(t);if(e>0&&e<r.length-1){let t=Pc(r.substring(0,e).trim()),s=Pc(r.substring(e+1).trim());i||(t=Uc(t),s=Uc(s)),n.push([t,s])}}return n}function Uc(e){return e.startsWith('"')&&e.endsWith('"')&&(e=e.substr(1,e.length-2)),e}function qc(e,t,i=Number.MAX_SAFE_INTEGER){if(e.length<3)return;t&&t.gffTags;const n=e[0],r=parseInt(e[1]),s=e.length>2?parseInt(e[2]):r+1;if(isNaN(r)||isNaN(s))return new zc("Unparsable bed record.");const o=new nl({chr:n,start:r,end:s,score:1e3});let a=3;try{if(e.length>3&&a++<i){if(e[3].indexOf(";")>0&&e[3].indexOf("=")>0){const i=Oc(e[3],"=");o.attributes={};for(let e of i)o.attributes[e[0]]=e[1],null!=t.nameField&&e[0]===t.nameField&&(o.name=e[1])}o.name||(o.name="."===e[3]?"":e[3])}if(e.length>4&&a++<i&&(o.score="."===e[4]?0:Number(e[4]),isNaN(o.score)))return o;if(e.length>5&&a++<i&&(o.strand=e[5],"."!==o.strand&&"+"!==o.strand&&"-"!==o.strand))return o;if(e.length>6&&a++<i&&(o.cdStart=parseInt(e[6]),isNaN(o.cdStart)))return o;if(e.length>7&&a++<i&&(o.cdEnd=parseInt(e[7]),isNaN(o.cdEnd)))return o;if(e.length>8&&a++<i&&"."!==e[8]&&"0"!==e[8]&&(o.color=_s.createColorString(e[8])),e.length>11&&a++<i){const t=parseInt(e[9]);if(t>1e3)return o;const i=e[10].replace(/,$/,"").split(","),n=e[11].replace(/,$/,"").split(",");if(i.length!==n.length||t!==i.length)return o;const s=[];for(let e=0;e<t;e++){const t=r+parseInt(n[e]),o=t+parseInt(i[e]);s.push({start:t,end:o})}s.length>0&&(Xc(s,o.cdStart,o.cdEnd),o.exons=s)}if(t){let i=t.thicknessColumn,n=t.colorColumn;n&&n<e.length&&(o.color=_s.createColorString(e[n])),i&&i<e.length&&(o.thickness=e[i])}}catch(e){}return o}function Qc(e,t){const i=qc(e,t);return i&&e.length>14&&(i.signal=Number(e[12]),i.pValue=Number(e[13]),i.qValue=Number(e[14])),i}function Vc(e,t){const i=qc(e,t,9);if(i){const t=["Coverage","% Showing Methylation","N-mod","N-canonical","N-other mod","N-delete","N-fail","N-dff","N-nocall"];for(let n=9;n<e.length;n++){i[t[n-9]]=e[n]}}return i}function jc(e,t){if(e.length<=15)return;return{swScore:Number.parseInt(e[1]),milliDiv:Number.parseInt(e[2]),milliDel:Number.parseInt(e[3]),milliIns:Number.parseInt(e[4]),chr:e[5],start:Number.parseInt(e[6]),end:Number.parseInt(e[7]),strand:e[9],repName:e[10],repClass:e[11],repFamily:e[12],repStart:Number.parseInt(e[13]),repEnd:Number.parseInt(e[14]),repLeft:Number.parseInt(e[15])}}function Wc(e,t){var i=void 0===t.shift?0:1;if(e.length<=9+i)return;const n=parseInt(e[5+i]),r=parseInt(e[6+i]);var s={name:e[0+i],chr:e[1+i],strand:e[2+i],start:parseInt(e[3+i]),end:parseInt(e[4+i]),cdStart:n,cdEnd:r,id:e[0+i]};const o=Yc(parseInt(e[7+i]),e[8+i],e[9+i]);return Xc(o,n,r),s.exons=o,s}function Gc(e,t){var i=void 0===t.shift?0:1;if(e.length<=11+i)return;const n=parseInt(e[5+i]),r=parseInt(e[6+i]),s={name:e[11+i],chr:e[1+i],strand:e[2+i],start:parseInt(e[3+i]),end:parseInt(e[4+i]),cdStart:n,cdEnd:r,id:e[0+i]},o=Yc(parseInt(e[7+i]),e[8+i],e[9+i],e[14+i]);return Xc(o,n,r),s.exons=o,s}function $c(e,t){var i=void 0===t.shift?0:1;if(e.length<=10+i)return;const n=parseInt(e[6+i]),r=parseInt(e[7+i]);var s={name:e[0+i],id:e[1+i],chr:e[2+i],strand:e[3+i],start:parseInt(e[4+i]),end:parseInt(e[5+i]),cdStart:n,cdEnd:r};const o=Yc(parseInt(e[8+i]),e[9+i],e[10+i]);return Xc(o,n,r),s.exons=o,s}function Kc(e,t){if(e.length<21)return;const i=e[13],n=parseInt(e[15]),r=parseInt(e[16]),s=e[8].charAt(0),o=parseInt(e[17]),a=[],c=e[20].replace(/,$/,"").split(","),l=e[18].replace(/,$/,"").split(",");for(let e=0;e<o;e++){const t=parseInt(c[e]),i=t+parseInt(l[e]);a.push({start:t,end:i})}return new rl({chr:i,start:n,end:r,strand:s,exons:a,tokens:e})}function Yc(e,t,i,n){const r=t.replace(/,$/,"").split(","),s=i.replace(/,$/,"").split(","),o=n?n.replace(/,$/,"").split(","):void 0,a=[];for(let t=0;t<e;t++){const e={start:parseInt(r[t]),end:parseInt(s[t])};if(o){const i=parseInt(o[t]);-1!=i&&(e.readingFrame=i)}a.push(e)}return a}function Xc(e,t,i){for(let n of e){const e=n.end,r=n.start;e<t||r>i?n.utr=!0:(t>=r&&t<=e&&(n.cdStart=t),i>=r&&i<=e&&(n.cdEnd=i))}}function Zc(e,t){var i,n,r,s,o,a,c;if(!(e.length<9))return i=e[0],n=parseInt(e[1]),r=parseInt(e[2]),o=e[3],a=Number(e[4]),s=e[5].trim(),c=Number(e[6]),0===a&&(a=c),{chr:i,start:n,end:r,name:o,score:a,strand:s,signal:c,pValue:Number(e[7]),qValue:Number(e[8])}}function Jc(e,t){const i=Zc(e);return e.length>9&&(i.peak=Number(e[9])),i}function el(e,t){if(e.length<=3)return;const i={chr:e[0],start:parseInt(e[1]),end:parseInt(e[2]),value:Number(e[3])};if(t){let n=t.colorColumn;n&&n<e.length&&(i.color=_s.createColorString(e[n]))}return i}function tl(e,t){const i=t.wig;if(i&&"fixedStep"===i.format){const t=i.index*i.step+i.start,n=t+i.span,r=Number(e[0]);return++i.index,isNaN(r)?null:{chr:i.chrom,start:t,end:n,value:r}}if(i&&"variableStep"===i.format){if(e.length<2)return null;const t=parseInt(e[0],10)-1,n=t+i.span,r=Number(e[1]);return isNaN(r)?null:{chr:i.chrom,start:t,end:n,value:r}}return el(e)}function il(e,t){if(e.length<6)return;const i=["bin","chr","start","end","name","score","strand","refNCBI","refUCSC","observed","molType","class","valid","avHet","avHetSE","func","locType","weight","exceptions","submitterCount","submitters","alleleFreqCount","alleles","alleleNs","alleleFreqs","bitfields"],n={chr:e[1],start:Number.parseInt(e[2]),end:Number.parseInt(e[3]),name:e[4],score:Number.parseInt(e[5])},r=Math.min(e.length,i.length);for(let t=6;t<r;t++)n[i[t]]=e[t];return n}class nl{constructor(e){Object.assign(this,e)}getAttributeValue(e){return this.hasOwnProperty(e)?this[e]:this.attributes?this.attributes[e]:void 0}}class rl{constructor(e){Object.assign(this,e)}get score(){const e=this.tokens,t=parseInt(e[0]),i=parseInt(e[2]),n=parseInt(e[1]),r=parseInt(e[4]),s=parseInt(e[6]),o=parseInt(e[10]);return Math.floor(1e3*(t+i-n-r-s)/o)}get matches(){return this.tokens[0]}get misMatches(){return this.tokens[1]}get repMatches(){return this.tokens[2]}get nCount(){return this.tokens[3]}get qNumInsert(){return this.tokens[4]}get qBaseInsert(){return this.tokens[5]}get tNumInsert(){return this.tokens[6]}get tBaseInsert(){return this.tokens[7]}popupData(){return[{name:"chr",value:this.chr},{name:"start",value:this.start+1},{name:"end",value:this.end},{name:"strand",value:this.strand},{name:"score",value:this.score},{name:"match",value:this.matches},{name:"mis-match",value:this.misMatches},{name:"rep. match",value:this.repMatches},{name:"N's",value:this.nCount},{name:"Q gap count",value:this.qNumInsert},{name:"Q gap bases",value:this.qBaseInsert},{name:"T gap count",value:this.tNumInsert},{name:"T gap bases",value:this.tBaseInsert}]}}const sl=new Set(["transcript","primary_transcript","processed_transcript","mRNA","mrna","lnc_RNA","miRNA","ncRNA","rRNA","scRNA","snRNA","snoRNA","tRNA"]),ol=new Set(["CDS","cds"]),al=new Set(["start_codon","stop_codon"]),cl=new Set(["5UTR","3UTR","UTR","five_prime_UTR","three_prime_UTR","3'-UTR","5'-UTR"]),ll=new Set(["exon","coding-exon"]),hl=new Set;for(let xA of[ol,al,cl,ll])for(let kA of xA)hl.add(kA);function dl(e){return e.includes("intron")}function ul(e){return ol.has(e)||al.has(e)}function fl(e){return cl.has(e)}function pl(e){return sl.has(e)||e.endsWith("RNA")||e.endsWith("transcript")}function gl(e){return hl.has(e)||e.endsWith("RNA")||dl(e)}const ml=new Set(["id","parent","name"]);class wl{constructor(e){Object.assign(this,e),void 0!==e.phase&&"."!==e.phase&&(this.readingFrame=(3-parseInt(e.phase))%3)}popupData(e){const t=this.geneObject?this.geneObject.popupData():[];if(this.geneObject&&t.push("<hr/>"),this.name&&t.push({name:"Name",value:this.name}),t.push({name:"Type",value:this.type}),t.push({name:"Source",value:this.source}),void 0!==this.score&&t.push({name:"Score",value:this.score}),t.push({name:"Phase",value:this.phase}),this.attributeString){const e=Oc(this.attributeString,this.delim);for(let[i,n]of e)void 0!==n&&n.length>0&&!ml.has(i.toLowerCase())&&t.push({name:i+":",value:n})}return t.push({name:"Location",value:`${this.chr}:${Rt(this.start+1)}-${Rt(this.end)}`}),t}getAttributeValue(e){if(this.hasOwnProperty(e))return this[e];if(this._attributeCache||(this._attributeCache=new Map),this._attributeCache.has(e))return this._attributeCache.get(e);{const t=Oc(this.attributeString,this.delim);let i;for(let[n,r]of t)if(n===e){i=r;break}return this._attributeCache.set(e,i),i}}}class bl extends wl{constructor(e){super(e),this.exons=[],this.parts=[]}addExon(e){this.exons.push(e),this.start=Math.min(this.start,e.start),this.end=Math.max(this.end,e.end)}addPart(e){this.parts.push(e)}assembleParts(){if(0===this.parts.length)return;this.parts.sort((function(e,t){return e.start-t.start}));let e=this.parts[0].start,t=this.parts[0].end;for(let i=1;i<this.parts.length;i++){const n=this.parts[i];if(!dl(n.type))if(n.start<=t)t=Math.max(t,n.end);else{this.findExonContaining({start:e,end:t})||this.exons.push({start:e,end:t,psuedo:!0}),e=n.start,t=n.end}}this.findExonContaining({start:e,end:t})||(this.exons.push({start:e,end:t,psuedo:!0}),this.start=Math.min(this.start,e),this.end=Math.max(this.end,t));for(let e of this.parts){const t=e.type;ul(t)?this.addCDS(e):fl(t)&&this.addUTR(e)}}findExonContaining({start:e,end:t}){for(let i of this.exons)if(i.end>=t&&i.start<=e)return i}addCDS(e){let t;const i=this.exons;for(let n of i)if(n.start<=e.start&&n.end>=e.end){t=n;break}t?(t.cdStart=t.cdStart?Math.min(e.start,t.cdStart):e.start,t.cdEnd=t.cdEnd?Math.max(e.end,t.cdEnd):e.end,t.readingFrame=e.readingFrame):console.error("No exon found spanning "+e.start+"-"+e.end),this.cdStart=this.cdStart?Math.min(e.start,this.cdStart):e.start,this.cdEnd=this.cdEnd?Math.max(e.end,this.cdEnd):e.end}addUTR(e){let t;const i=this.exons;for(let n=0;n<i.length;n++)if(i[n].start<=e.start&&i[n].end>=e.end){t=i[n];break}t?e.start===t.start&&e.end===t.end?t.utr=!0:(e.end<t.end&&(t.cdStart=e.end),e.start>t.start&&(t.cdEnd=e.start)):console.error("No exon found spanning "+cds.start+"-"+cds.end)}finish(){this.assembleParts();var e=this.cdStart,t=this.cdEnd;this.exons.sort((function(e,t){return e.start-t.start})),e&&this.exons.forEach((function(i){(i.end<e||i.start>t)&&(i.utr=!0)}))}popupData(e){const t=super.popupData(e);for(let i of this.exons)if(!i.pseudo&&e>=i.start&&e<i.end&&"function"==typeof i.popupData){t.push("<hr/>");const n=i.popupData(e);for(let e of n)t.push(e)}for(let i of this.parts)if(e>=i.start&&e<i.end&&"function"==typeof i.popupData){t.push("<hr/>");const n=i.popupData(e);for(let e of n)t.push(e)}return t}}function Fl(e,t){const i=t.format;if(e.length<9)return;const n="gff3"===i?"=":" ";return new wl({source:Pc(e[1]),type:e[2],chr:e[0],start:parseInt(e[3])-1,end:parseInt(e[4]),score:"."===e[5]?void 0:Number(e[5]),strand:e[6],phase:"."===e[7]?".":parseInt(e[7]),attributeString:e[8],delim:n})}function vl(e,t){const i=Fl(e,t);if(!i)return;const n=Oc(i.attributeString,i.delim);for(let[e,t]of n){const n=e.toLowerCase();"color"===n||"colour"===n?i.color=_s.createColorString(t):"ID"===e?i.id=t:"Parent"===e&&(i.parent=t)}return i}function yl(e,t){const i=Fl(e,t);if(!i)return;const n=Oc(i.attributeString,i.delim);let r,s;switch(i.type){case"gene":r="gene_id";break;case"transcript":r="transcript_id",s="gene_id";break;default:s="transcript_id"}for(let[e,t]of n){const n=e.toLowerCase();"color"===n||"colour"===n?i.color=_s.createColorString(t):e===r?i.id=t:e===s&&(i.parent=t)}return i}function Al(e,t){if(!(e.length<7)){var i=e[0],n=e[1],r=parseInt(e[2]),s=parseInt(e[3]),o=parseInt(e[4]),a=parseInt(e[5]),c=e[6],l={chr:i,name:n,junction_left:r,junction_right:s,num_junction_reads:o,num_spanning_frags:a,spanning_frag_coords:[],start:-1,end:-1},h=r,d=s;if(a>0)for(var u=c.split(","),f=0;f<u.length;f++){var p=u[f].split("-"),g=p[0],m=p[1];g<h&&(h=g),m>d&&(d=m),l.spanning_frag_coords.push({left:g,right:m})}return l.start=h,l.end=d,l}}function Cl(e,t){if(e.length<7)return null;const i={chr:e[0],start:parseInt(e[1])-1,end:parseInt(e[2]),"Strongest SNP-risk allele":e[3],"Disease/Phenotype":e[4],"P-value":e[5],"Odds ratio or beta":e[6]};return e.length>6&&(i.PUBMEDID=`<a target = "blank" href = "https://www.ncbi.nlm.nih.gov/pubmed/${e[7]}">${e[7]}</a>`),i}function _l(e,t){const i=t.customFormat;if(e.length<i.fields.length)return;const n=i.coords||0,r=e[i.chr],s=parseInt(e[i.start])-n,o={chr:r,start:s,end:void 0!==i.end?parseInt(e[i.end]):s+1};return i.fields&&i.fields.forEach((function(t,n){n!==i.chr&&n!==i.start&&n!==i.end&&(o[t]=e[n])})),o}function xl(e,t){const i=t.columnNames;if(!i)throw Error("Sample names are not defined.   Missing column headers?");const n=i.length-3,r=e[0],s=parseInt(e[1]),o=parseInt(e[2]),a=e.slice(3).map(Number);return a.length==n?{chr:r,start:s,end:o,values:a}:void console.warn(`${r}:${s}-${o} row contains ${a.length} sample columns instead of the expected ${n} columns. Skipping...`)}const kl=["Name","transcript_id","gene_name","gene","gene_id","alias","locus","name"];class Il{constructor(e){this.format=e.format,this.nameField=e.nameField,this.filterTypes=void 0===e.filterTypes?new Set(["chromosome"]):new Set(e.filterTypes)}combineFeatures(e,t){let i;const n=this.filterTypes;if(e=e.filter((e=>void 0===n||!n.has(e.type))),"gff3"===this.format){const t=this.combineFeaturesById(e);i=this.combineFeaturesByType(t)}else i=this.combineFeaturesByType(e);return i.sort((function(e,t){return e.start-t.start})),this.numberExons(i,t),this.nameFeatures(i),i}combineFeaturesById(e){const t=new Map,i=[];for(let n of e)if(gl(n.type)||pl(n.type)||!n.id)i.push(n);else{let e=t.get(n.chr);e||(e=new Map,t.set(n.chr,e));let i=e.get(n.id);i?i.push(n):e.set(n.id,[n])}for(let e of t.values())for(let t of e.values())if(t.length>1){const e=t[0];e.exons=[];for(let i of t)e.start=Math.min(e.start,i.start),e.end=Math.max(e.end,i.end),e.exons.push({start:i.start,end:i.end});i.push(e)}else i.push(t[0]);return i}combineFeaturesByType(e){const t=e.filter((e=>"gene"===e.type||e.type.endsWith("_gene"))),i=Object.create(null);for(let e of t)i[e.id]=e;const n=Object.create(null),r=[],s=new Set,o=this.filterTypes;e=e.filter((e=>void 0===o||!o.has(e.type)));for(let t of e)if(pl(t.type)){const e=t.id;if(void 0!==e){const o=new bl(t);n[e]=o,r.push(o),s.add(t);const a=i[t.parent];a&&(o.geneObject=a,s.add(a))}}for(let t of e)if(gl(t.type)){const e=l(t);if(e)for(let i of e){let o=n[i];if(!o&&"gtf"===this.format){const e=Object.assign({},t);e.type="transcript",o=new bl(e),n[i]=o,r.push(o)}if(void 0!==o){if(a=t.type,ll.has(a))if(e.length>1){const e=new wl(t);o.addExon(e)}else o.addExon(t);else o.addPart(t);s.add(t)}}}var a;r.forEach((function(e){"function"==typeof e.finish&&e.finish()}));const c=e.filter((e=>!s.has(e)));for(let e of c)r.push(e);return r;function l(e){return e.parent&&""!==e.parent.trim()?e.parent.trim().split(","):null}}numberExons(e,t){for(let i of e)if(i.exons&&(!t||i.end<=t.end&&i.start>t.start))for(let e=0;e<i.exons.length;e++){i.exons[e].number="-"===i.strand?i.exons.length-e:e+1}}nameFeatures(e){for(let t of e)if("function"==typeof t.getAttributeValue)if(this.nameField)t.name=t.getAttributeValue(this.nameField);else for(let e of kl){const i=t.getAttributeValue(e);if(i){t.name=i;break}}}}const Sl={gwascatalog:{fields:["bin","chr","start","end","name","pubMedID","author","pubDate","journal","title","trait","initSample","replSample","region","genes","riskAllele","riskAlFreq","pValue","pValueDesc","orOrBeta","ci95","platform","cnv"]},wgrna:{fields:["bin","chr","start","end","name","score","strand","thickStart","thickEnd","type"]},cpgislandext:{fields:["bin","chr","start","end","name","length","cpgNum","gcNum","perCpg","perGc","obsExp"]},clinVarMain:{fields:["chr1","start","end","name","score","strand","thickStart","thickEnd","reserved","blockCount","blockSizes","chromStarts","origName","clinSign","reviewStatus","type","geneId","snpId","nsvId","rcvAcc","testedInGtr","phenotypeList","phenotype","origin","assembly","cytogenetic","hgvsCod","hgvsProt","numSubmit","lastEval","guidelines","otherIds"]}};class El{constructor(e){this.config=e,this.header={},e.nameField&&(this.header.nameField=e.nameField),this.skipRows=0,e.decode?(this.decode=e.decode,this.delimiter=e.delimiter||"\t"):e.format&&(this.header.format=e.format.toLowerCase(),this.setDecoder(this.header.format)),this.delimiter||(this.delimiter="\t")}async parseHeader(e){let t,i,n=this.header;for(;void 0!==(i=await e.nextLine());)if(i.startsWith("track")||i.startsWith("#track")){let e=Nl(i);Object.assign(n,e)}else if(i.startsWith("browser"));else if(i.startsWith("#columns")){let e=Bl(i);Object.assign(n,e)}else if(i.startsWith("##gff-version 3"))n.format="gff3";else if(i.startsWith("#gffTags"))n.gffTags=!0;else{if(i.startsWith("fixedStep")||i.startsWith("variableStep"))break;if(i.startsWith("#")){const e=i.split(this.delimiter||"\t");e.length>1&&(t=e)}else{this.setDecoder(n.format);const e=i.split(this.delimiter||"\t");try{const i=Object.assign({columnNames:t},n);if(this.decode(e,i))break;e.length>1&&(t=e)}catch(i){e.length>1&&(t=e)}}}if(t){n.columnNames=t;for(let e=0;e<t.length;e++)"color"===t[e]||"colour"===t[e]?n.colorColumn=e:"thickness"===t[e]&&(n.thicknessColumn=e)}return this.header=n,n}async parseFeatures(e){const t=[],i=this.decode,n=this.header.format,r=this.delimiter||"\t";let s,o=0,a=0;for(;void 0!==(s=await e.nextLine());){if(o++,o<=this.skipRows)continue;if(!s||s.startsWith("track")||s.startsWith("#")||s.startsWith("browser"))continue;if("wig"===n&&s.startsWith("fixedStep")){this.header.wig=Ml(s);continue}if("wig"===n&&s.startsWith("variableStep")){this.header.wig=Rl(s);continue}const e=s.split(r);if(e.length<1)continue;const c=i(e,this.header);c instanceof zc?(a++,a>0&&console.error(`Error parsing line '${s}': ${c.message}`)):c&&t.push(c)}return i===Rc&&function(e){if(0==e.length)return;const t=e[0];if(void 0===t.score&&void 0!==t.name){for(let t of e)if(!ja(t.name)&&"."!==t.name)return;for(let t of e)t.score=Number(t.name),delete t.name}const i=e.filter((e=>e.chr1!==e.chr2));for(let t of i){const i=Object.assign({},t);i.dup=!0,e.push(i),t.chr=t.chr1,t.start=t.start1,t.end=t.end1,i.chr=i.chr2,i.start=i.start2,i.end=i.end2}}(t),"gtf"!==this.config.format&&"gff3"!==this.config.format&&"gff"!==this.config.format||!1===this.config.assembleGFF?t:new Il(this.config).combineFeatures(t)}setDecoder(e){switch(e){case"broadpeak":case"regionpeak":case"peaks":this.decode=Zc,this.delimiter=this.config.delimiter||/\s+/;break;case"narrowpeak":this.decode=Jc,this.delimiter=this.config.delimiter||/\s+/;break;case"bedgraph":this.decode=el,this.delimiter=/\s+/;break;case"wig":this.decode=tl,this.delimiter=this.config.delimiter||/\s+/;break;case"gff3":case"gff":this.decode=vl,this.delimiter="\t";break;case"gtf":this.decode=yl,this.delimiter="\t";break;case"fusionjuncspan":this.decode=Al,this.delimiter=this.config.delimiter||/\s+/;break;case"gtexgwas":this.skipRows=1,this.decode=Cl,this.delimiter="\t";break;case"refflat":this.decode=$c,this.delimiter=this.config.delimiter||/\s+/;break;case"genepred":this.decode=Wc,this.delimiter=this.config.delimiter||/\s+/;break;case"genepredext":this.decode=Gc,this.delimiter=this.config.delimiter||/\s+/;break;case"ensgene":this.decode=Wc,this.header.shift=1,this.delimiter=this.config.delimiter||/\s+/;break;case"refgene":this.decode=Gc,this.delimiter=this.config.delimiter||/\s+/,this.header.shift=1;break;case"bed":this.decode=qc,this.delimiter=this.config.delimiter||/\s+/;break;case"gappedpeak":this.decode=Qc,this.delimiter=this.config.delimiter||/\s+/;break;case"bedmethyl":this.decode=Vc,this.delimiter=this.config.delimiter||/\s+/;break;case"bedpe":case"hiccups":this.decode=Rc,this.delimiter=this.config.delimiter||"\t";break;case"bedpe-domain":this.decode=Dc,this.headerLine=!0,this.delimiter=this.config.delimiter||"\t";break;case"bedpe-loop":this.decode=Rc,this.delimiter=this.config.delimiter||"\t",this.header={colorColumn:7};break;case"interact":this.decode=Lc,this.delimiter=this.config.delimiter||/\s+/;break;case"snp":this.decode=il,this.delimiter="\t";break;case"rmsk":this.decode=jc,this.delimiter="\t";break;case"gcnv":this.decode=xl,this.delimiter="\t";break;default:const t=function(e){return Sl&&Sl[e]?function(e){const t=e.fields,i=["chr","start","end"];for(let n=0;n<t.length;n++)for(let r of i)r===t[n]&&(e[r]=n);return e}(Sl[e]):void 0}(e);void 0!==t?(this.decode=_l,this.header.customFormat=t,this.delimiter=t.delimiter||"\t"):(this.decode=qc,this.delimiter=this.config.delimiter||/\s+/)}}}function Nl(e){const t={},i=e.split(/(?:")([^"]+)(?:")|([^\s"]+)(?=\s+|$)/g);let n;const r=[];for(let e of i)e&&0!==e.trim().length&&(e.endsWith("=")?n=e:n?(r.push(n+e),n=void 0):r.push(e));for(let e of r){if(!e)return;var s=e.split("=",2);if(2===s.length){const e=s[0].trim(),i=s[1].trim();if(t.hasOwnProperty(e)){let n=t[e];Array.isArray(n)?n.push(i):t[e]=[n,i]}else t[e]=i}}return"interact"==t.type?t.format="interact":"gcnv"===t.type&&(t.format="gcnv"),t}function Bl(e){let t={},i=e.split(/\s+/);if(2===i.length){i[1].split(";").forEach((function(e){let i=e.split("=");"color"===i[0]?t.colorColumn=Number.parseInt(i[1])-1:"thickness"===i[0]&&(t.thicknessColumn=Number.parseInt(i[1])-1)}))}return t}function Ml(e){const t=e.split(/\s+/);return{format:"fixedStep",chrom:t[1].split("=")[1],start:parseInt(t[2].split("=")[1],10)-1,step:parseInt(t[3].split("=")[1],10),span:t.length>4?parseInt(t[4].split("=")[1],10):1,index:0}}function Rl(e){const t=e.split(/\s+/);return{format:"variableStep",chrom:t[1].split("=")[1],span:t.length>2?parseInt(t[2].split("=")[1],10):1}}function Dl(t,i){const n=e({class:"igv-menu-popup-check-container"}),r=e();n.appendChild(r);const s=l("check",!0===i?"#444":"transparent");r.appendChild(s);const o=e();return o.innerText=t,n.appendChild(o),n}function Tl(e,t){t=t||Number.MAX_SAFE_INTEGER;const i=[];e.sort((function(e,t){return e.start-t.start})),i.push(-1e3);for(let n of e){let e=0;const r=Math.min(i.length,t);for(e=0;e<r;e++)if(n.start>=i[e]){n.row=e,i[e]=n.end;break}n.row=e,i[e]=n.end}}async function Ll(e,t,i){const n=e=>{const i=Object.assign({},e);return i.chr="all",i.start=t.getGenomeCoordinate(e.chr,e.start),i.end=t.getGenomeCoordinate(e.chr,e.end),i._f=e,i.exons&&delete i.exons,i},r=new Set(t.wgChromosomeNames),s=[];let o=0;for(let a of t.wgChromosomeNames){if(Array.isArray(e)){const i={};for(let n of e){const e=t.getChromosomeName(n.chr);i.hasOwnProperty(e)||(i[e]=[]),i[e].push(n)}e=i}const c=e[a];if(c){const e=i||1e4;for(let i of c){let a=t.getChromosomeName(i.chr);if(r.has(a))if(s.length<e)s.push(n(i));else{const t=e/(o+1);if(Math.random()<t){s[Math.floor(Math.random()*(e-1))]=n(i)}}o++}}}return s.sort((function(e,t){return e.start-t.start})),s}function zl(e,t){if(t=t||1e3,null==e||0===e.length)return;const i={},n=[];for(let t of e){const e=t.chr;let r=i[e];r||(r=[],i[e]=r,n.push(e)),r.push(t)}for(let e of n)Tl(i[e],t)}class Hl{static defaults={height:50,autoHeight:!1,visibilityWindow:void 0,color:void 0,altColor:void 0,supportHiDPI:!0,selected:!1};constructor(e,t){this.browser=t,this.init(e)}init(e){this.config=e,e.displayMode&&(e.displayMode=e.displayMode.toUpperCase());const t=Object.assign({},Hl.defaults);if(this.constructor.defaults)for(let e of Object.keys(this.constructor.defaults))t[e]=this.constructor.defaults[e];for(let n of Object.keys(t))this[n]=e.hasOwnProperty(n)?e[n]:t[n],"color"!==n&&"altColor"!==n||!this[n]||(this[n]=Mt(i=this[n])&&i.indexOf(",")>0&&!i.startsWith("rgb(")&&!i.startsWith("rgba(")?`rgb(${i})`:i);var i;e.name||e.label?this.name=e.name||e.label:Ht(e.url)?this.name=e.url.name:Mt(e.url)&&!e.url.startsWith("data:")&&(this.name=zt(e.url)),this.url=e.url,this.config.type&&(this.type=this.config.type),this.id=void 0===this.config.id?this.name:this.config.id,this.order=e.order,this.autoscaleGroup=e.autoscaleGroup,this.removable=void 0===e.removable||e.removable,this.minHeight=e.minHeight||Math.min(25,this.height),this.maxHeight=e.maxHeight||Math.max(1e3,this.height),e.onclick&&(this.onclick=e.onclick,e.onclick=void 0),e.description&&("function"==typeof e.description?this.description=e.description:this.description=()=>e.description),e.hoverTextFields?this.hoverText=Pl.bind(this):"function"==typeof this.config.hoverText&&(this.hoverText=this.config.hoverText)}get name(){return this._name}set name(e){this._name=e,this.trackView&&this.trackView.setTrackLabelName(e)}clearCachedFeatures(){this.trackView&&this.trackView.clearCachedFeatures()}updateViews(){this.trackView&&this.trackView.updateViews()}repaintViews(){this.trackView&&this.trackView.repaintViews()}getState(){const e={},t=Object.keys(this.config).filter((e=>{return!(void 0===(t=this.config[e])||"function"==typeof t||t instanceof Promise);var t}));for(const i of t)i.startsWith("_")||(e[i]=this.config[i]);for(let t of Object.keys(e)){if(t.startsWith("_"))continue;const i=this[t];void 0===i||!Ua(i)&&"boolean"!=typeof i&&"metadata"!==t||(e[t]=i)}const i=Object.assign({},Hl.defaults);if(this.constructor.defaults)for(let e of Object.keys(this.constructor.defaults))i[e]=this.constructor.defaults[e];for(let t of Object.keys(i))void 0!==this[t]&&i[t]!==this[t]&&(e[t]=this[t]);return!this.autoscale&&this.dataRange&&(e.min=this.dataRange.min,e.max=this.dataRange.max),this.autoscaleGroup&&(e.autoscaleGroup=this.autoscaleGroup),e}get supportsWholeGenome(){return!0===this.config.supportsWholeGenome}hasSamples(){return!1}getGenomeId(){return this.browser.genome?this.browser.genome.id:void 0}setTrackProperties(e){if(this.disposed)return;const t={};let i;for(let n of Object.keys(e))switch(n.toLowerCase()){case"usescore":t.useScore=1===e[n]||"1"===e[n]||"on"===e[n]||!0===e[n];break;case"visibility":switch(e[n]){case"2":case"3":case"pack":case"full":t.displayMode="EXPANDED";break;case"4":case"squish":t.displayMode="SQUISHED";break;case"1":case"dense":t.displayMode="COLLAPSED"}break;case"color":case"altcolor":t[n]=e[n].startsWith("rgb(")?e[n]:"rgb("+e[n]+")";break;case"featurevisiblitywindow":case"visibilitywindow":t.visibilityWindow=Number.parseInt(e[n]);break;case"maxheightpixels":i=e[n].split(":"),3===i.length&&(t.minHeight=Number.parseInt(i[2]),t.height=Number.parseInt(i[1]),t.maxHeight=Number.parseInt(i[0]));break;case"viewlimits":if(!this.config.autoscale){i=e[n].split(":");let r,s=0;1==i.length?r=Number(i[0]):2==i.length&&(s=Number(i[0]),r=Number(i[1])),Number.isNaN(r)||Number.isNaN(s)?console.warn(`Unexpected viewLimits value in track line: ${e.viewLimits}`):(t.autoscale=!1,t.dataRange={min:s,max:r},this.viewLimitMin=s,this.viewLimitMax=r)}case"name":t[n]=e[n];break;case"url":t.infoURL=e[n];break;case"type":const r=e[n];Ol.has(r)?t[n]=Ol.get(r):t[n]=r;break;case"graphtype":t.graphType=e[n];break;default:t[n]=e[n]}for(let e of Object.keys(t))if(!this.config.hasOwnProperty(e)||"name"===e&&this.config._derivedName){let i=t[e];if("true"===i&&(i=!0),"false"===i&&(i=!1),this[e]=i,"height"===e&&this.trackView)try{const e=Number.parseInt(i);this.trackView.setTrackHeight(e)}catch(e){console.error(e)}}}clickedFeatures(e){const t=e.viewport.cachedFeatures;if(!t||!Array.isArray(t)||0===t.length)return[];const i=e.genomicLocation,n=e.referenceFrame.bpPerPixel>.2?3*e.referenceFrame.bpPerPixel:.2;return to(t,i-n,i+n)}extractPopupData(e,t){const i=new Set(["row","color","chr","start","end","cdStart","cdEnd","strand","alpha"]),n=[];let r,s;for(let t in e)if(e.hasOwnProperty(t)&&!i.has(t)&&Ua(e[t])){let i=e[t];n.push({name:Lt(t),value:i}),"alleles"===t?r=e[t]:"alleleFreqs"===t&&(s=e[t])}if(r&&s){r.endsWith(",")&&(r=r.substr(0,r.length-1)),s.endsWith(",")&&(s=s.substr(0,s.length-1));let i=r.split(","),o=s.split(",");if(o.length>1){let r=[];for(let e=0;e<o.length;e++)r.push({a:i[e],af:Number(o[e])});r.sort((function(e,t){return e.af-t.af}));let s=r[r.length-1].a;if(1===s.length)for(let i=r.length-2;i>=0;i--){let o=r[i].a;if(1===o.length){t||(t=this.getGenomeId());const i=Hl.getCravatLink(e.chr,e.start+1,s,o,t);console.log(i),i&&(n.push("<hr/>"),n.push({html:i}),n.push("<hr/>"))}}}}if(e.attributes)for(let t of Object.keys(e.attributes))n.push({name:t,value:e.attributes[t]});let o=`${e.chr}:${Rt(e.start+1)}-${Rt(e.end)}`;return e.strand&&(o+=` (${e.strand})`),n.push({name:"Location",value:o}),n}description(){const e=(e,t)=>`<div class="igv-track-label-popup-shim"><b>${e}: </b>${t}</div>`;let t='<div class="igv-track-label-popup">';if(this.url?Ht(this.url)?t+=e("Filename",this.url.name):t+=e("URL",this.url):t=this.name,this.config){if(this.config.metadata)for(let i of Object.keys(this.config.metadata)){t+=e(i,this.config.metadata[i])}for(let i of Object.keys(this.config)){if(i.startsWith("_"))continue;let n=i.substr(0,1);if(n!==n.toLowerCase()){const n=this.config[i];n&&Ua(n)&&(t+=e(i,n))}}}return t+="</div>",t}getColorForFeature(e){return"function"==typeof this.color?this.color(feature):this.color}numericDataMenuItems(){const e=[];e.push("<hr/>");let t=Bt("<div>");if(t.text("Set data range"),e.push({object:t,dialog:function(){this.trackView.track.selected?this.browser.dataRangeDialog.configure(this.trackView.browser.getSelectedTrackViews()):this.browser.dataRangeDialog.configure(this.trackView),this.browser.dataRangeDialog.present(Bt(this.browser.columnContainer))}}),void 0!==this.logScale){function i(){this.logScale=!this.logScale,this.trackView.repaintViews()}t=Bt(Dl("Log scale",this.logScale)),e.push({object:t,click:i})}return t=Bt(Dl("Autoscale",this.autoscale)),e.push({object:t,click:function(){this.autoscaleGroup=void 0,this.autoscale=!this.autoscale,this.browser.updateViews()}}),e}setDataRange({min:e,max:t}){this.dataRange={min:e,max:t},this.autoscale=!1,this.autoscaleGroup=void 0,this.trackView.repaintViews()}async nextFeatureAfter(e,t,i){let n=this.trackView.viewports[0].cachedFeatures;if(n&&Array.isArray(n)&&n.length>0){if(this.browser.genome.getChromosomeName(n[0].chr)===e){const e=function(e,t,i=!0){const n=e=>(e.start+e.end)/2,r=i?(e,t)=>e.start-t.start+e.end-t.end:(e,t)=>t.start-e.start+t.end-e.end,s=Array.from(e);s.sort(r);let o=0,a=s.length;for(;o<a;){let e=Math.floor((o+a)/2);i?n(s[e])<=t?o=e+1:a=e:n(s[e])>=t?o=e+1:a=e}return s[o]}(n,t,i);if(e)return e}}if("function"==typeof this.featureSource.nextFeature)return this.featureSource.nextFeature(e,t,i,this.visibilityWindow)}dispose(){this.disposed=!0;for(let e of Object.keys(this))this[e]=void 0}static getCravatLink(e,t,i,n,r){if("hg38"===r||"GRCh38"===r){return`<a target="_blank" href="https://run.opencravat.org/result/nocache/variant.html?chrom=${e.startsWith("chr")?e:"chr"+e}&pos=${t}&ref_base=${i}&alt_base=${n}"><b>Cravat ${i}->${n}</b></a>`}}static localFileInspection(e){const t=Object.assign({},e),i={url:"file",indexURL:"indexFile"};for(const e of["url","indexURL"])t[e]&&t[e]instanceof File&&(t[i[e]]=t[e].name,delete t[e]);return t}}function Pl(e){if(!this.hoverTextFields)return;const t=this.clickedFeatures(e);if(t&&t.length>0){let e="";for(let i=0;i<t.length;i++){if(10===i){e+="; ...";break}if(!t[i])continue;const n=t[i]._f||t[i];e.length>0&&(e+="\n"),e="";for(let t of this.hoverTextFields)e.length>0&&(e+="\n"),n.hasOwnProperty(t)?e+=n[t]:"function"==typeof n.getAttribute&&(e+=n.getAttribute(t))}return e}}const Ol=new Map([["wiggle_0","wig"],["bed","bed"],["bigBed","bigBed"],["bigWig","bigWig"]]);class Ul{constructor(e){switch(this.type=e||"seg",this.type){case"mut":this.sampleColumn=3,this.chrColumn=0,this.startColumn=1,this.endColumn=2,this.dataColumn=4;break;case"maf":this.sampleColumn=15,this.chrColumn=4,this.startColumn=5,this.endColumn=6,this.dataColumn=8;break;default:this.sampleColumn=0,this.chrColumn=1,this.startColumn=2,this.endColumn=3}}async parseHeader(e){let t;for(;void 0!==(t=await e.nextLine());)if(!t.startsWith("#")){const e=t.split("\t");this.header={headings:e};break}return this.header}async parseFeatures(e){const t=[];let i;this.header||(this.header=await this.parseHeader(e)),"seg"===this.type&&(this.dataColumn=this.header.headings.length-1),this.header.headings.length>5&&(i=this.extractExtraColumns(this.header.headings));const n=this.header.headings[this.dataColumn];let r;for(;void 0!==(r=await e.nextLine());){const e=r.split("\t"),s="seg"===this.type?Number(e[this.dataColumn]):e[this.dataColumn];if(e.length>this.dataColumn){const r=new ql({sample:e[this.sampleColumn],chr:e[this.chrColumn],start:parseInt(e[this.startColumn])-1,end:parseInt(e[this.endColumn]),value:s,valueColumnName:n});if(i){const t=this.extractExtraColumns(e);r.setAttributes({names:i,values:t})}t.push(r)}}return t}extractExtraColumns(e){const t=[];for(let i=0;i<e.length;i++)i!==this.chrColumn&&i!==this.startColumn&&i!==this.endColumn&&i!==this.sampleColumn&&t.push(e[i]);return t}}class ql{constructor({sample:e,chr:t,start:i,end:n,value:r,valueColumnName:s}){this.sample=e,this.chr=t,this.start=i,this.end=n,this.value=r,this.valueColumnName=s}setAttributes({names:e,values:t}){this.attributeNames=e,this.attributeValues=t}getAttribute(e){if(this.attributeNames){const t=this.attributeNames.indexOf(e);if(t>=0)return this.attributeValues[t]}}popupData(e,t){const i=new Set(["chr","start","end","sample","value","row","color","sampleKey","uniqueSampleKey","sampleId","chromosome","uniquePatientKey"]),n=this.chr+":"+Rt(this.start+1)+"-"+Rt(this.end),r=[{name:"Sample",value:this.sample},{name:"Location",value:n},{name:this.valueColumnName?Lt(this.valueColumnName):"Value",value:this.value}];if("mut"===e&&"hg38"===t){const e=this.extractCravatLink(t);e&&(r.push("<hr/>"),r.push({html:e}),r.push("<hr/>"))}if(this.attributeNames&&this.attributeNames.length>0)for(let e=0;e<this.attributeNames.length;e++)!i.has(this.attributeNames[e])&this.valueColumnName!==this.attributeNames[e]&&r.push({name:Lt(this.attributeNames[e]),value:this.attributeValues[e]});return r}extractCravatLink(e){let t,i;if(this.attributeNames&&this.attributeNames.length>0)for(let n=0;n<this.attributeNames.length;n++)if(t||"Reference_Allele"!==this.attributeNames[n]||(t=this.attributeValues[n]),!i&&this.attributeNames[n].startsWith("Tumor_Seq_Allele")&&this.attributeValues[n]!==t&&(i=this.attributeValues[n]),t&&i)return Hl.getCravatLink(this.chr,this.start+1,t,i,e)}}const Ql=new Map([["REF","referenceBases"],["ALT","alternateBases"],["QUAL","quality"],["FILTER","filter"]]);class Vl{constructor(e){this.chr=e[0],this.pos=parseInt(e[1]),this.names=e[2],this.referenceBases=e[3],this.alternateBases=e[4],this.quality=e[5],this.filter=e[6],this.info={};const t=e[7];if(t&&"."!==t)for(let e of t.split(";")){var i=e.split("=");this.info[i[0]]=i[1]}this.init()}getAttributeValue(e){return Ql.has(e)&&(e=Ql.get(e)),this.hasOwnProperty(e)?this[e]:this.info[e]}init(){const e=this.referenceBases,t=this.alternateBases;if(this.info&&(this.info.VT?this.type=this.info.VT:this.info.SVTYPE?this.type="SV":this.info.PERIOD&&(this.type="STR")),void 0===this.type&&(this.type=function(e,t){const i=e.length;if(void 0===t)return"UNKNOWN";if(0===t.trim().length||"<NON_REF>"===t||"<*>"===t||"."===t)return"NONVARIANT";{const e=t.split(",").map((function(e){return 1===i&&1===e.length?"SNP":"<NON_REF>"===e?"NONVARIANT":e.length>i&&$l(e)?"INSERTION":e.length<i&&$l(e)?"DELETION":"OTHER"}));let n=e[0];for(let t of e)if(t!==n)return"MIXED";return n}}(e,t)),this.info.END)this.start=this.pos-1,this.info.CHR2&&this.info.CHR2!==this.chr?this.end=this.start+1:this.end=Number.parseInt(this.info.END);else if("NONVARIANT"===this.type)this.start=this.pos-1,this.end=this.start+e.length;else{const i=t.split(",").filter((e=>e.length>0));this.alleles=[],this.start=void 0,this.end=void 0;for(let t of i)if(this.alleles.push(t),"SV"!==this.type&&$l(t)){let i=t.length,n=e.length;const r=Math.min(i,n);let s=0;for(;s<r&&e.charCodeAt(s)===t.charCodeAt(s);)s++,i--,n--;for(;i>0&&n>0;){const r=s+i-1,o=s+n-1;if(t.charCodeAt(r)!==e.charCodeAt(o))break;i--,n--}for(;i>0&&n>0;){const r=s,o=s;if(t.charCodeAt(r)!==e.charCodeAt(o))break;s++,i--,n--}const o=this.pos+s-1,a=o+n;this.start=void 0===this.start?o:Math.min(this.start,o),this.end=void 0===this.end?a:Math.max(this.end,a)}void 0===this.start&&(this.start=this.pos-1,this.end=this.pos),this.start===this.end&&(this.start-=.5,this.end+=.5)}}popupData(e,t){const i=`${Rt(this.pos)}`,n=this.start===this.end?`${Rt(this.start)} | ${Rt(this.start+1)}`:`${Rt(this.start+1)}-${Rt(this.end)}`,r=[{name:"Chr",value:this.chr},{name:"Pos",value:i},{name:"Loc",value:n},{name:"ID",value:this.names?this.names:""},{name:"Ref",value:this.referenceBases},{name:"Alt",value:this.alternateBases.replace("<","&lt;")},{name:"Qual",value:this.quality},{name:"Filter",value:this.filter}];if(this.type&&r.push({name:"Type",value:this.type}),"SNP"===this.type){let e=this.referenceBases;if(1===e.length){let i=this.alternateBases.split(",");for(let n of i)if(1===n.length){let i=Hl.getCravatLink(this.chr,this.pos,e,n,t);i&&(r.push("<hr/>"),r.push({html:i}))}}}const s=Object.keys(this.info);if(this.info&&s.length>0){r.push({html:'<hr style="border-top: dotted 1px;border-color: #c9c3ba" />'});for(let e of s)r.push({name:e,value:Kl(decodeURIComponent(this.info[e]))})}return r}getInfo(e){return this.info?this.info[e]:void 0}isRefBlock(){return"NONVARIANT"===this.type}isFiltered(){return!("."===this.filter||"PASS"===this.filter)}alleleFreq(){return this.info?this.info.AF:void 0}}class jl{constructor(e){this.mate=e,this.chr=e.info.CHR2,this.pos=Number.parseInt(e.info.END),this.start=this.pos-1,this.end=this.pos}get info(){return this.mate.info}get names(){return this.mate.names}get referenceBases(){return this.mate.referenceBases}get alternateBases(){return this.mate.alternateBases}get quality(){return this.mate.quality}get filter(){return this.mate.filter}get calls(){return this.mate.calls}getAttributeValue(e){return this.mate.getAttributeValue(e)}getInfo(e){this.mate.getInfo(e)}isFiltered(){return this.mate.isFiltered()}alleleFreq(){return this.mate.alleleFreq()}popupData(e,t){const i=[];return i.push("SV Breakpoint"),i.push({name:"Chr",value:this.chr}),i.push({name:"Pos",value:`${Rt(this.pos)}`}),i.push({html:'<hr style="border-top: dotted 1px;border-color: #c9c3ba" />'}),i.push("SV"),i.push(...this.mate.popupData(e,t)),i}}class Wl{constructor({formatFields:e,sample:t,token:i}){this.info={},this.sample=t;const n=i.split(":");for(let t=0;t<n.length;t++){const i=n[t];if(t==e.genotypeIndex){this.genotype=[];for(let e of i.split(/[\|\/]/))this.genotype.push("."===e?e:parseInt(e))}else this.info[e.fields[t]]=i}}get zygosity(){if(!this._zygosity)if(this.genotype){let e=!0,t=!0,i=!1;for(let n of this.genotype){if("."===n){i=!0;break}0!==n&&(t=!1),0===n&&(e=!1)}this._zygosity=i?"nocall":t?"homref":e?"homvar":"hetvar"}else this._zygosity="unknown";return this._zygosity}zygosityScore(){switch(this.zygosity){case"homvar":return 4;case"hetvar":return 3;case"homref":return 2;case"nocall":return 1;default:return 0}}#l(){switch(this.zygosity){case"homref":return"Homozygous reference";case"homvar":return"Homozygous variant";case"hetvar":return"Heterozygous";default:return""}}popupData(e,t){const i=[];void 0!==this.sample&&i.push({name:"Sample",value:this.sample}),this.genotypeString&&i.push({name:"Genotype",value:this.genotypeString});const n=this.#l();n&&i.push({name:"Zygosity",value:n});var r=Object.keys(this.info);r.length&&i.push("<hr/>");for(let e of r)i.push({name:e,value:decodeURIComponent(this.info[e])});return i}}const Gl=new Set(["A","C","T","G"].map((e=>e.charCodeAt(0))));function $l(e){for(let t=0;t<e.length;t++)if(!Gl.has(e.charCodeAt(t)))return!1;return!0}function Kl(e,t){return void 0===t&&(t=","),Array.isArray(e)?e.join(t):e}class Yl{construtor(){}async parseHeader(e,t){const i={};i.chrAliasTable=new Map;let n=await e.nextLine();if(!n.startsWith("##fileformat"))throw new Error("Invalid VCF file: missing fileformat line");for(i.version=n.substr(13);void 0!==(n=await e.nextLine())&&n.startsWith("#");){let e;const s={};if(n.startsWith("##")){if(n.startsWith("##INFO")||n.startsWith("##FILTER")||n.startsWith("##FORMAT")){const t=n.indexOf("<"),o=n.lastIndexOf(">");if(!(t>2&&o>0)){console.log("Malformed VCF header line: "+n);continue}const a=n.substring(2,t-1);i[a]||(i[a]={});const c=Tt(n.substring(t+1,o-1),",");for(let t of c){var r=t.split("=");r.length>1&&("ID"===r[0]?e=r[1]:s[r[0]]=r[1])}e&&(i[a][e]=s)}else if(n.startsWith("##contig")&&t){const e=n.indexOf("<ID=");let r=n.indexOf(",",e);-1==r&&(r=n.indexOf(">",e));const s=n.substring(e+4,r),o=t.getChromosomeName(s);i.chrAliasTable.set(o,s)}}else if(n.startsWith("#CHROM")){const e=n.split("\t");if(e.length>8){i.sampleNameMap=new Map;for(let t=9;t<e.length;t++)i.sampleNameMap.set(e[t],t-9)}}}return this.header=i,i}async parseFeatures(e){const t=[],i=this.header.sampleNameMap?Array.from(this.header.sampleNameMap.keys()):void 0,n=8+(i?i.length+1:0);let r;for(;void 0!==(r=await e.nextLine());)if(r&&!r.startsWith("#")){const e=r.split("\t");if(e.length===n){const n=new Vl(e);if(n.header=this.header,t.push(n),e.length>9){const r=Xl(e[8].split(":"));n.calls=[];for(let t=9;t<e.length;t++){const s=i[t-9],o=e[t],a=new Wl({formatFields:r,sample:s,token:o});n.calls.push(a)}n.info&&n.info.CHR2&&n.info.END&&t.push(new jl(n))}}}return t}}function Xl(e){const t={genotypeIndex:-1,fields:e};for(let i=0;i<e.length;i++)"GT"===e[i]&&(t.genotypeIndex=i);return t}const Zl=Math.log10(Number.MIN_VALUE);class Jl{constructor(e){if(this.config=e,e.columns){if(void 0===e.columns.chromosome||void 0===e.columns.position||void 0===e.columns.value)throw Error("columns property must define chrCol, posCol, and valueCol");this.posCol=e.columns.position-1,this.chrCol=e.columns.chromosome-1,this.valueCol=e.columns.value-1}else this.posCol=2,this.chrCol=1,this.valueCol=3}async parseHeader(e){const t=await e.nextLine();return this.parseHeaderLine(t)}parseHeaderLine(e){if(this.columns=e.split(/\t/),!this.config.columns)for(let e=0;e<this.columns.length;e++){switch(this.columns[e].toLowerCase()){case"chr":case"chromosome":case"chr_id":this.chrCol=e;break;case"bp":case"pos":case"position":case"chr_pos":this.posCol=e;break;case"p":case"pval":case"pvalue":case"p-value":case"p.value":this.valueCol=e}}return this.columns}async parseFeatures(e){const t=[],i=e.nextLine();let n;this.columns||this.parseHeaderLine(i);const r=e=>{const t=e.indexOf("E");if(t>0){if(Number.parseInt(e.substring(t+1))<Zl)return Number.MIN_VALUE}return Number(e)};for(;void 0!==(n=e.nextLine());){const e=n.split(/\t/);if(e.length===this.columns.length){const i=e[this.posCol];if(i.indexOf(";")>0||0==i.length||i.indexOf("x")>0)continue;const s=e[this.chrCol],o=r(e[this.valueCol]),a=parseInt(i)-1,c=a+1;t.push(new eh({chr:s,start:a,end:c,value:o,line:n,columns:this.columns}))}}return t}static isGWAS(e){const t=e.split("\t");if(t.length<5)return!1;const i=[["chr","chromosome","chr_id","chrom"],["bp","pos","position","chr_pos","chromEnd"],["p","pval","p-value","p.value"]];for(let e of i)if(!t.some((t=>e.includes(t.toLowerCase()))))return!1;return!0}}class eh{constructor({chr:e,start:t,end:i,value:n,line:r,columns:s}){this.chr=e,this.start=t,this.end=i,this.value=n,this.line=r,this.columns=s}popupData(){const e=this.line.split(/\t/);return this.columns.map((function(t,i){return{name:t,value:e[i]}}))}getAttribute(e){const t=this.line.split(/\t/);for(let i=0;i<this.columns.length;i++)if(this.columns[i]===e)return t[i]}}var th=new RegExp("([^:]*)\\(([^)]*)\\)"),ih=new RegExp("([^:]*):([^(]*)\\(([^)]*)\\)");class nh{constructor(e){const t=e?e.decode:void 0;this.nameField=e?e.nameField:void 0,this.skipRows=0,this.decode=t||lh,this.delimiter="\t"}async parseHeader(e){let t,i;for(;(t=await e.nextLine())&&(t.startsWith("track")||t.startsWith("#")||t.startsWith("browser"));)if(t.startsWith("track")||t.startsWith("#track")){let e=oh(t);i?Object.assign(i,e):i=e}else if(t.startsWith("#columns")){let e=ah(t);i?Object.assign(i,e):i=e}else t.startsWith("##gff-version 3")&&(this.format="gff3",i||(i={}),i.format="gff3");return this.header=i,i}async parseFeatures(e){const t=[],i=this.decode,n=this.delimiter||"\t";let r,s=0;for(;void 0!==(r=e.nextLine());){if(s++,s<=this.skipRows||r.startsWith("track")||r.startsWith("#")||r.startsWith("browser"))continue;let e=o();if(e.length<1)continue;if(!this.aed){this.aed=sh(e);continue}const n=i.call(this,e,undefined);n&&t.push(n)}return t;function o(){for(var e,t,i=[],s="",o=!1;r||""===r;){for(e=0;e<r.length;e++)(t=r.charAt(e))===n?o?s+=t:(i.push(s),s=""):'"'===t?e+1<r.length&&'"'===r.charAt(e+1)?(o&&(s+='"'),e++):o=!o:s+=t;if(!o)break;s+="\n",r=nextLine()}return i.push(s),i}}}function rh(e){var t=ih.exec(e);if(t)return{namespace:t[1],name:t[2],type:t[3]};if(t=th.exec(e))return{namespace:"?",name:t[1],type:t[2]};throw new Error("Error parsing the header row of AED file - column not in ns:name(ns:type) format")}function sh(e){var t,i,n;for(t={columns:[],metadata:{}},i=0;i<e.length;i++)n=rh(e[i]),t.columns.push(n);return t}function oh(e){const t={},i=e.split(/(?:")([^"]+)(?:")|([^\s"]+)(?=\s+|$)/g);let n;const r=[];for(let e of i)e&&0!==e.trim().length&&(e.endsWith("=")>0?n=e:n?(r.push(n+e),n=void 0):r.push(e));for(let e of r){if(!e)return;var s=e.split("=",2);if(2===s.length){const e=s[0].trim(),i=s[1].trim();t[e]=i}}return t}function ah(e){let t={},i=e.split(/\s+/);if(2===i.length){i[1].split(";").forEach((function(e){let i=e.split("=");"color"===i[0]?t.colorColumn=Number.parseInt(i[1])-1:"thickness"===i[0]&&(t.thicknessColumn=Number.parseInt(i[1])-1)}))}return t}function ch(e,t){var i,n,r=e.columns;this.aed=e,this.allColumns=t,this.chr=null,this.start=null,this.end=null,this.score=1e3,this.strand=".",this.cdStart=null,this.cdEnd=null,this.name=null,this.color=null;for(let e=0;e<t.length;e++)if(i=t[e]){"aed:Integer"===(n=r[e]).type&&(i=parseInt(i));var s=[];if(n.namespace.length>0)for(let e=0;e<n.namespace.length;e++)s.push(n.namespace.charCodeAt(e));"bio"===n.namespace.trim()?"sequence"===n.name?this.chr=i:"start"===n.name?this.start=i:"end"===n.name?this.end=i:"cdsMin"===n.name?this.cdStart=i:"cdsMax"===n.name?this.cdEnd=i:"strand"===n.name&&(this.strand=i):"aed"===n.namespace?"name"===n.name&&(this.name=i):"style"===n.namespace&&"color"===n.name&&(this.color=_s.createColorString(i))}}function lh(e,t){var i,n,r,s,o,a,c=0,l=this.aed.columns;if(e.length===l.length){for(a=0;a<e.length;a++)s=l[a],""!==(r=e[a])&&c++,"name"===s.name&&"aed"===s.namespace?i=r:"value"===s.name&&"aed"===s.namespace&&(n=r);if(2===c&&i&&n)return o=rh(i),this.aed.metadata[o.namespace]||(this.aed.metadata[o.namespace]={}),void(this.aed.metadata[o.namespace][o.name]||(this.aed.metadata[o.namespace][o.name]={type:o.type,value:n}));var h=new ch(this.aed,e);if(h.chr&&(h.start||0===h.start)&&h.end)return h;console.log("Cannot parse feature: "+e.join(","))}else console.log("Corrupted AED file row: "+e.join(","))}function hh(e,t){if(0===e.length)return e;if(e.sort((function(e,t){const i=e.minv.block-t.minv.block;return 0!==i?i:e.minv.offset-t.minv.offset})),e.length<=1)return e;t&&(e=e.filter((e=>e.maxv.isGreaterThan(t))));const i=[];let n;for(let t of e)n&&dh(n,t)?t.maxv.isGreaterThan(n.maxv)&&(n.maxv=t.maxv):(i.push(t),n=t);return i}function dh(e,t){const i=t.minv.block-e.maxv.block;return t.maxv.block-e.minv.block<5e6&&i<65e3}ch.prototype.popupData=function(){for(var e=[],t=this.aed,i=0;i<this.allColumns.length;i++){var n=this.allColumns[i],r=t.columns[i].name;"sequence"!==r&&"color"!==r&&n&&e.push({name:r,value:n})}return e};class uh{constructor(){this.tabix=!0}parse(e){const t=new Ac(new DataView(e)),i=t.getInt();if(21582659!==i)throw 38359875===i?Error("CSI version 2 is not supported.  Please enter an issue at https://github.com/igvteam/igv.js"):Error("Not a CSI index");this.indices=[],this.blockMin=Number.MAX_SAFE_INTEGER,this.lastBlockPosition=[],this.sequenceIndexMap={},this.minShift=t.getInt(),this.depth=t.getInt();const n=[];let r=0;if(t.getInt()>=28){t.getInt(),t.getInt(),t.getInt(),t.getInt(),t.getInt(),t.getInt();const e=t.getInt(),i=t.position+e;let r=0;for(;t.position<i;){let e=t.getString();this.sequenceIndexMap[e]=r,n[r]=e,r++}}const s=this.bin_limit()+1,o=t.getInt();for(let e=0;e<o;e++){const i=[],n=[],o=t.getInt();for(let e=0;e<o;e++){const e=t.getInt();if(n[e]=t.getVPointer(),e>s)t.getInt(),t.getVPointer(),t.getVPointer(),t.getLong(),t.getLong();else{i[e]=[];const n=t.getInt();for(let s=0;s<n;s++){const n=t.getVPointer(),s=t.getVPointer();n&&s&&(n.block<this.blockMin&&(this.blockMin=n.block),s.block>r&&(r=s.block),i[e].push([n,s]))}}}o>0&&(this.indices[e]={binIndex:i,loffset:n})}this.lastBlockPosition=r}get sequenceNames(){return Object.keys(this.sequenceIndexMap)}chunksForRange(e,t,i){const n=this.indices[e];if(n){const e=this.reg2bins(t,i);if(0==e.length)return[];const r=[];for(let t of e)for(let e=t[0];e<=t[1];e++)if(n.binIndex[e]){const t=n.binIndex[e];for(let i of t){const t=i[0],n=i[1];r.push({minv:t,maxv:n,bin:e})}}let s=e[this.depth][0];do{if(n.binIndex[s])break;s>1+(this.getParentBin(s)<<3)?s--:s=this.getParentBin(s)}while(0!=s);return hh(r,n.loffset[s])}return[]}getParentBin(e){return 0==e?0:e-1>>3}reg2bins(e,t){(e-=1)<1&&(e=1),t>2**34&&(t=2**34),t-=1;let i=0,n=0,r=this.minShift+3*this.depth;const s=[];for(;i<=this.depth;r-=3,n+=1<<3*i,i+=1){const i=n+(e>>r),o=n+(t>>r);s.push([i,o])}return s}bin_limit(){return((1<<3*(this.depth+1))-1)/7}}class fh{constructor(){}async parse(e,t){const i=[];let n=Number.MAX_SAFE_INTEGER,r=0;const s=new Ac(new DataView(e)),o=s.getInt(),a={};if(!(21578050===o||t&&21578324===o))throw new Error(indexURL+" is not a "+(t?"tabix":"bai")+" file");{const e=s.getInt();if(t){s.getInt(),s.getInt(),s.getInt(),s.getInt(),s.getInt(),s.getInt(),s.getInt();for(let t=0;t<e;t++){a[s.getString()]=t}}for(let t=0;t<e;t++){const e={},o=[],a=s.getInt();for(let t=0;t<a;t++){const t=s.getInt();if(37450===t)s.getInt(),s.getVPointer(),s.getVPointer(),s.getLong(),s.getLong();else{e[t]=[];const i=s.getInt();for(let o=0;o<i;o++){const i=s.getVPointer(),o=s.getVPointer();i&&o&&(i.block<n&&(n=i.block),o.block>r&&(r=o.block),e[t].push([i,o]))}}}const c=s.getInt();for(let e=0;e<c;e++){const e=s.getVPointer();o.push(e)}a>0&&(i[t]={binIndex:e,linearIndex:o})}this.firstBlockPosition=n,this.lastBlockPosition=r,this.indices=i,this.sequenceIndexMap=a,this.tabix=t}}get sequenceNames(){return Object.keys(this.sequenceIndexMap)}chunksForRange(e,t,i){const n=this.indices[e];if(n){const e=function(e,t){const i=[];t>=1<<29&&(t=1<<29);return--t,i.push([0,0]),i.push([1+(e>>26),1+(t>>26)]),i.push([9+(e>>23),9+(t>>23)]),i.push([73+(e>>20),73+(t>>20)]),i.push([585+(e>>17),585+(t>>17)]),i.push([4681+(e>>14),4681+(t>>14)]),i}(t,i),r=[];for(let t of e)for(let e=t[0];e<=t[1];e++)if(n.binIndex[e]){const t=n.binIndex[e];for(let e of t){const t=e[0],i=e[1];r.push({minv:t,maxv:i})}}const s=n.linearIndex.length;let o;const a=Math.min(t>>14,s-1),c=Math.min(i>>14,s-1);for(let e=a;e<=c;e++){const t=n.linearIndex[e];if(t){o=t;break}}return hh(r,o)}return[]}}class ph{constructor(){this.tribble=!0}async parse(e){let t=0;this.chrIndex={},this.lastBlockPosition=[];const i=new Ac(new DataView(e));!function(e){e.getInt(),e.getInt();const t=e.getInt();if(e.getString(),e.getLong(),e.getLong(),e.getString(),e.getInt(),t>=3){let t=e.getInt();for(;t-- >0;)e.getString(),e.getString()}}(i);let n=i.getInt();for(;n-- >0;){let e=i.getString();const n=i.getInt(),r=i.getInt(),s=i.getInt();i.getInt(),i.getInt();let o=i.getLong();const a=[];for(let e=0;e<r;e++){const e=i.getLong();a.push({min:o,max:e}),o=e,e>t&&(t=e)}this.chrIndex[e]={chr:e,blocks:a,longestFeature:s,binWidth:n}}this.lastBlockPosition=t}get sequenceNames(){return Object.keys(this.chrIndex)}chunksForRange(e,t,i){const n=this.chrIndex[e];if(n){const e=n.blocks,r=n.longestFeature,s=n.binWidth,o=Math.max(t-r,0),a=Math.floor(o/s);if(a>=e.length)return[];{const t=Math.min(Math.floor((i-1)/s),e.length-1),n=e[a].min,r=e[t].max;if(0===r-n)return[];return[{minv:{block:n,offset:0},maxv:{block:r,offset:0}}]}}}}async function gh(e,t){let i=await Qs.loadArrayBuffer(e,qa(t)),n=new DataView(i);if(31===n.getUint8(0)&&139===n.getUint8(1)){i=gs(i).buffer,n=new DataView(i)}switch(n.getInt32(0,!0)){case 21578050:return async function(e){const t=new fh;return await t.parse(e,!1),t}(i);case 21578324:return async function(e){const t=new fh;return await t.parse(e,!0),t}(i);case 21582659:return async function(e){const t=new uh;return t.parse(e),t}(i);case 1480870228:return async function(e){const t=new ph;return t.parse(e),t}(i);case 38359875:throw Error("CSI version 2 is not supported.");default:throw Error(`Unrecognized index type: ${e}`)}}function mh(e){return"string"==typeof e||e instanceof String?new wh(e):new bh(e)}class wh{constructor(e){this.data=e,this.ptr=0}nextLine(){var e=this.ptr,t=this.data.indexOf("\n",e),i=this.data;if(t>0)return this.ptr=t+1,t>e&&"\r"===i.charAt(t-1)?i.substring(e,t-1):i.substring(e,t);var n=i.length;return this.ptr=n,e>=n?void 0:i.substring(e)}}class bh{constructor(e){this.data=e,this.length=this.data.length,this.ptr=0}nextLine(){if(this.ptr>=this.data.length)return;let e=this.ptr;const t=this.data;let i="",n=!1;for(;e<t.length;){var r=t[e],s=0,o=0;if(r<=127?(s=0,o=255&r):r<=223?(s=1,o=31&r):r<=239?(s=2,o=15&r):r<=244&&(s=3,o=7&r),t.length-e-s>0)for(var a=0;a<s;)o=o<<6|63&(r=t[e+a+1]),a+=1;else o=65533,s=t.length-e;e+=s+1;const c=String.fromCodePoint(o);if("\r"===c)n=!0;else{if("\n"===c)break;n&&(i+="\r",n=!1),i+=c}}return this.ptr=e,i}}class Fh{constructor(e){this.config=e,this.filePtr=0,this.bufferPtr=0,this.buffer}async nextLine(){let e;try{for(;;){const t=this.buffer?this.buffer.length:0;for(;this.bufferPtr<t;){const t=String.fromCharCode(this.buffer[this.bufferPtr++]);if("\r"!==t){if("\n"===t)return e;e=e?e+t:t}}if(this.eof)return e;await this.readNextBlock()}}catch(t){return console.warn(t),this.eof=!0,e}}async readNextBlock(){const e=qa(this.config,{range:{start:this.filePtr,size:26}}),t=ms(await Qs.loadArrayBuffer(this.config.url,e));if(0===t)this.eof=!0,this.buffer=void 0;else{const e=qa(this.config,{range:{start:this.filePtr,size:t}}),i=await Qs.loadArrayBuffer(this.config.url,e);i.byteLength<t&&(this.eof=!0),this.buffer=gs(i),0==this.buffer.byteLength&&(this.eof=!0),this.bufferPtr=0,this.filePtr+=i.byteLength}}}const vh=e=>{const t=ArrayBuffer.isView(e)?e:new Uint8Array(e);return 1+(t[17]<<8|t[16])};class yh{constructor(e){this.config=e,this.cacheBlocks=0!=e.cacheBlocks,this.cache=void 0}async getData(e,t){const i=e.block,n=t.block,r=0===t.offset,s=await this.getInflatedBlocks(i,n,r);if(1===s.length)return s[0];let o=0;for(const e of s)o+=e.byteLength;const a=new Uint8Array(o);let c=0;for(const e of s)a.set(e,c),c+=e.byteLength;return a}async getInflatedBlocks(e,t,i){if(this.cacheBlocks){const n=this.cache;if(n&&n.startBlock<=e&&(n.endBlock>=t||i&&n.nextEndBlock===t)){const i=e-n.startBlock,r=t-n.startBlock;return Ch(n.buffer,i,r)}{let r;if(!n||n.startBlock>t||n.endBlock<e)r=await this.loadBLockData(e,t,{skipEnd:i});else{const s=[];if(e<n.startBlock){const t=await this.loadBLockData(e,n.startBlock,{skipEnd:!0});s.push(t)}let o;if(e<=n.startBlock&&t>=n.endBlock)o=n.buffer;else{const i=Math.max(0,e-n.startBlock);let r;if(t>=n.endBlock)r=n.buffer.byteLength;else{const e=Ah(n.buffer);for(let i=0;i<e.length-1;i++)if(n.startBlock+e[i]===t){r=e[i+1];break}}o=n.buffer.slice(i,r)}if(s.push(o),t>n.endBlock){const e=await this.loadBLockData(n.endBlock,t,{skipStart:!0,skipEnd:i});s.push(e)}r=function(e){if(1===e.length)return e[0];let t=0;for(const i of e)t+=i.byteLength;const i=new Uint8Array(t);let n=0;for(const t of e)i.set(new Uint8Array(t),n),n+=t.byteLength;return i.buffer}(s)}let s=t;if(i){const e=Ah(r);t=e[e.length-1]}return this.cache={startBlock:e,endBlock:t,nextEndBlock:s,buffer:r},Ch(r)}}return Ch(await this.loadBLockData(e,t,{skipEnd:i}))}async loadBLockData(e,t,i){const n=this.config,r=i&&i.skipStart;let s=0;if(!(i&&i.skipEnd)){const e=qa(n,{range:{start:t,size:26}}),i=await Qs.loadArrayBuffer(n.url,e);s=vh(i)}if(r){const t=qa(n,{range:{start:e,size:26}}),i=await Qs.loadArrayBuffer(n.url,t);e+=vh(i)}const o=qa(n,{range:{start:e,size:t+s-e}});return Qs.loadArrayBuffer(n.url,o)}}function Ah(e){const t=e.byteLength;let i=0;const n=[0];for(;i<t;){const r=new Uint8Array(e,i);i+=1+(r[17]<<8|r[16]),i<t&&n.push(i)}return n}function Ch(e,t,i){const n=[];let r=t=t||0;const s=e.byteLength-18;for(;r<s;)try{const t=new Uint8Array(e,r,18),s=t[11]<<8|t[10],o=t[17]<<8|t[16],a=12+s+r,c=e.byteLength-a,l=o-s-18;if(c<l||l<=0)break;const h=new Uint8Array(e,a,l),d=hs(h);if(n.push(d),i===r)break;r+=o+1}catch(e){console.error(e);break}return n}const _h=Math.log10(Number.MIN_VALUE);class xh{chrCol=-1;snpCol=-1;posCol=-1;pValueCol=-1;phenotypeColumn=-1;delimiter="\t";constructor(e){this.config=e}async parseHeader(e){const t=this.config;t.delimiter&&(this.delimiter=t.delimiter);const i=await e.nextLine(),n=this.parseHeaderLine(i);return t.chrColumn&&(this.chrColumn=t.chrColumn-1),t.snpColumn&&(this.snpColumn=t.snpColumn-1),t.posColumn&&(this.posColumn=t.posColumn-1),t.pValueColumn&&(this.pValueColumn=t.pValueColumn-1),t.phenotypeColumn&&(this.phenotypeColumn=t.phenotypeColumn-1),n}parseHeaderLine(e){this.columns=e.split(this.delimiter);for(let e=0;e<this.columns.length;e++){switch(this.columns[e].toLowerCase()){case"chr":case"chromosome":case"chr_id":case"chrom":this.chrColumn=e;break;case"bp":case"pos":case"position":case"chr_pos":case"chromEnd":this.posColumn=e;break;case"p":case"pval":case"pvalue":case"p-value":case"p.value":this.pValueColumn=e;break;case"rsid":case"variant":case"snp":this.snpColumn=e;break;case"phenotype":case"gene":case"gene_id":case"molecular_trait_id":this.phenotypeColumn=e}}return this.columns}async parseFeatures(e){const t=[],i=e.nextLine();let n;this.columns||this.parseHeaderLine(i);const r=e=>{const t=e.indexOf("E");if(t>0){if(Number.parseInt(e.substring(t+1))<_h)return Number.MIN_VALUE}return Number(e)};for(;void 0!==(n=e.nextLine());){const e=n.split(this.delimiter);if(e.length===this.columns.length){const i=e[this.posColumn];if(i.indexOf(";")>0||0==i.length||i.indexOf("x")>0)continue;const n=e[this.chrColumn],s=r(e[this.pValueColumn]),o=parseInt(i)-1,a=o+1,c=e[this.snpColumn],l=e[this.phenotypeColumn],h=new kh({chr:n,start:o,end:a,pValue:s,snp:c,phenotype:l},this.columns,e);t.push(h)}}return t}static isQTL(e){const t=e.split("\t");if(t.length<5)return!1;const i=[["chr","chromosome","chr_id","chrom"],["bp","pos","position","chr_pos","chromEnd"],["p","pval","p-value","p.value"],["rsid","variant","snp"],["phenotype","gene","gene_id","molecular_trait_id"]];for(let e of i)if(!t.some((t=>e.includes(t.toLowerCase()))))return!1;return!0}}class kh{constructor({chr:e,start:t,end:i,pValue:n,snp:r,phenotype:s},o,a){this.chr=e,this.start=t,this.end=i,this.pValue=n,this.snp=r,this.phenotype=s,this.headers=o,this.tokens=a}popupData(){const e=[];for(let t=0;t<this.headers.length;t++)e.push({name:this.headers[t],value:this.tokens[t]});return e}}class Ih{sequenceNames;constructor(e,t){if(this.config=e||{},this.genome=t,this.indexURL=e.indexURL,this.indexed=e.indexed||void 0!==this.indexURL,this.queryable=this.indexed,Ht(this.config.url))this.filename=this.config.url.name;else if($a(this.config.url))this.indexed=!1,this.dataURI=e.url;else{const t=Ot(this.config.url);this.filename=e.filename||t.file}this.parser=this.getParser(this.config),"vcf"!==this.config.format||this.config.indexURL||console.warn("Warning: index file not specified.  The entire vcf file will be loaded.")}async defaultVisibilityWindow(){if(this.config.indexURL){const e=await this.getIndex();if(e&&e.lastBlockPosition){let t=0;const i=1e4;for(let i of e.sequenceNames){const e=this.genome.getChromosome(i);e&&(t+=e.bpLength)}return Math.round(t/e.lastBlockPosition*i)}}}async readFeatures(e,t,i){this.dataURI||this.header||await this.readHeader();return await this.getIndex()?(this.indexed=!0,this.loadFeaturesWithIndex(e,t,i)):this.dataURI?(this.indexed=!1,this.loadFeaturesFromDataURI()):"service"===this.config.sourceType?this.loadFeaturesFromService(e,t,i):(this.indexed=!1,this.loadFeaturesNoIndex())}async readHeader(){if(this.dataURI)return await this.loadFeaturesFromDataURI(this.dataURI),this.header;if(this.config.indexURL){const e=await this.getIndex();if(!e)throw new Error("Unable to load index: "+this.config.indexURL);let t;if(this.sequenceNames=new Set(e.sequenceNames),e.tabix)this._blockLoader=new yh(this.config),t=new Fh(this.config);else{const i=Object.values(e.chrIndex).flatMap((e=>e.blocks)).map((e=>e.max)).reduce(((e,t)=>Math.min(e,t)),Number.MAX_SAFE_INTEGER),n=qa(this.config,{bgz:e.tabix,range:{start:0,size:i}});t=mh(await Qs.loadString(this.config.url,n))}return this.header=await this.parser.parseHeader(t),this.header}if("service"!==this.config.sourceType){let e;if(this.config._filecontents)e=this.config._filecontents,delete this.config._filecontents;else{const t=qa(this.config);e=await Qs.loadByteArray(this.config.url,t)}e.length<5e8&&(e=(new TextDecoder).decode(e));let t=mh(e);this.header=await this.parser.parseHeader(t),t=mh(e),this.features=await this.parser.parseFeatures(t),this.sequenceNames=new Set;for(let e of this.features)this.sequenceNames.add(e.chr);return this.header}if(this.config.seqnamesURL){const e=qa(this.config,{}),t=await Qs.loadString(this.config.seqnamesURL,e);t&&(this.sequenceNames=new Set(t.split(",").map((e=>e.trim())).filter((e=>e))))}if(this.config.headerURL){const e=qa(this.config,{}),t=mh(await Qs.loadString(this.config.headerURL,e));return this.header=await this.parser.parseHeader(t),this.header}}getParser(e){switch(e.format){case"vcf":return new Yl(e);case"seg":return new Ul("seg");case"mut":return new Ul("mut");case"maf":return new Ul("maf");case"gwas":return new Jl(e);case"qtl":return new xh(e);case"aed":return new nh(e);default:return new El(e)}}async loadFeaturesNoIndex(){if(this.features){const e=this.features;return delete this.features,e}{const e=qa(this.config),t=await Qs.loadByteArray(this.config.url,e);if(!this.header){const e=mh(t);this.header=await this.parser.parseHeader(e)}const i=mh(t),n=[];return await this._parse(n,i),n}}async loadFeaturesWithIndex(e,t,i){const n=this.config;this.parser;const r=this.index.tabix,s=r?this.index.sequenceIndexMap[e]:e;if(void 0===s)return[];const o=this.index.chunksForRange(s,t,i);if(o&&0!==o.length){const s=[];for(let a of o){let o;if(r)o=await this._blockLoader.getData(a.minv,a.maxv);else{const e=qa(n,{range:{start:a.minv.block,size:a.maxv.block-a.minv.block+1}});o=await Qs.loadString(n.url,e)}const c=mh(a.minv.offset?o.slice(a.minv.offset):o);await this._parse(s,c,e,i,t)}return s.sort((function(e,t){return e.start-t.start})),s}return[]}async loadFeaturesFromService(e,t,i){let n;n="function"==typeof this.config.url?this.config.url({chr:e,start:t,end:i}):this.config.url.replace("$CHR",e).replace("$START",t).replace("$END",i);const r=qa(this.config),s=mh(await Qs.loadString(n,r)),o=[];return await this._parse(o,s),o}async _parse(e,t,i,n,r){let s=await this.parser.parseFeatures(t);if(void 0===i)for(let t of s)e.push(t);else{let t=!1;for(let o=0;o<s.length;o++){const a=s[o];if(a.chr!==i){if(0===e.length)continue;break}if(a.start>n){e.push(a);break}a.end>=r&&a.start<=n&&(t||(t=!0,o>0&&e.push(s[o-1])),e.push(a))}}}async getIndex(){return this.index?this.index:this.config.indexURL?(this.index=await this.loadIndex(),this.index):void 0}async loadIndex(){return gh(this.config.indexURL,this.config)}async loadFeaturesFromDataURI(){if(this.features){const e=this.features;return delete this.features,e}{const e=vs(this.dataURI);let t=mh(e);this.header=await this.parser.parseHeader(t),this.header instanceof String&&this.header.startsWith("##gff-version 3")&&(this.format="gff3"),t=mh(e);const i=[];return await this._parse(i,t),i}}}const Sh=Mt;class Eh{constructor(e){this.config=e}async readFeatures(e,t,i){let n;n="function"==typeof this.config.url?this.config.url({chr:e,start:t,end:i}):this.config.url.replace("$CHR",e).replace("$START",t).replace("$END",i);let r,s=Object.assign({},this.config);void 0!==this.config.body&&("function"==typeof this.config.body?s.body=this.config.body({chr:e,start:t,end:i}):s.body=this.config.body.replace("$CHR",e).replace("$START",t).replace("$END",i));const o=await Qs.load(n,s);if(o&&(r="function"==typeof this.config.parser?this.config.parser(o):Sh(o)?JSON.parse(o):o),this.config.mappings){let e=Object.keys(this.config.mappings);for(let t of r)for(let i of e)t[i]=t[this.config.mappings[i]]}return r}}const Nh=function(e,t){this.config=e,this.genome=t,this.expandQueryInterval=!1};Nh.prototype.readFeatures=function(e,t,i){const n=Math.max(0,Math.floor(t));let r=Math.ceil(i);if(this.genome){const t=this.genome.getChromosome(e);t&&r>t.bpLength&&(r=t.bpLength)}const s=this.config.url+"?db="+this.config.db+"&table="+this.config.tableName+"&chr="+e+"&start="+n+"&end="+r;return Qs.loadJson(s,this.config).then((function(e){return e?(e.forEach((function(e){e.hasOwnProperty("exonStarts")&&e.hasOwnProperty("exonEnds")&&e.hasOwnProperty("exonCount")&&e.hasOwnProperty("cdsStart")&&e.hasOwnProperty("cdsEnd")&&function(e){var t,i,n,r,s,o;t=e.exonCount,i=e.exonStarts.split(","),n=e.exonEnds.split(","),r=[];for(var a=0;a<t;a++){var c={start:s=parseInt(i[a]),end:o=parseInt(n[a])};(e.cdsStart>o||e.cdsEnd<e.cdsStart)&&(c.utr=!0),e.cdsStart>=s&&e.cdsStart<=o&&(c.cdStart=e.cdsStart),e.cdsEnd>=s&&e.cdsEnd<=o&&(c.cdEnd=e.cdsEnd),r.push(c)}e.exons=r}(e)})),e):null}))};class Bh{featureCaches=[];gtexChrs=new Set(["chr1","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr2","chr20","chr21","chr22","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chrM","chrX","chrY"]);constructor(e){this.config=e,this.url=e.url,this.tissueId=e.tissueSiteDetailId,this.datasetId=e.datasetId||"gtex_v8"}async readFeatures(e,t,i){const n=e.startsWith("chr")?e:"MT"===e?"chrM":"chr"+e;if(!this.gtexChrs.has(n))return[];const r=Math.floor(t),s=Math.ceil(i),o=this.datasetId,a=this.url+"?chromosome="+n+"&start="+r+"&end="+s+"&tissueSiteDetailId="+this.tissueId+"&datasetId="+o,c=await Qs.loadJson(a,{withCredentials:this.config.withCredentials});return c&&c.singleTissueEqtl?c.singleTissueEqtl.map((e=>new Mh(e))):[]}}class Mh{constructor(e){this.chr=e.chromosome,this.start=e.pos-1,this.end=this.start+1,this.snp=e.snpId,this.phenotype=e.geneSymbol,this.pValue=e.pValue,this.json=e}popupData(){return Object.keys(this.json).map((e=>({name:e,value:this.json[e]})))}}class Rh{constructor(e,t){if(this.config=e,this.genome=t,!e.format)throw Error('Format is required, and must be either "bam" or "cram"');if(this.format=e.format.toUpperCase(),"BAM"!==this.format&&"VCF"!==this.format)throw Error(`htsget format ${e.format} is not supported`)}async readHeaderData(){const e=`${Dh(this.config)}?class=header&format=${this.format}`,t=await Qs.loadJson(e,qa(this.config));return await this.loadUrls(t.htsget.urls)}async readData(e,t,i){const n=`${Dh(this.config)}?format=${this.format}&referenceName=${e}&start=${Math.floor(t)}&end=${Math.ceil(i)}`,r=await Qs.loadJson(n,qa(this.config));return this.loadUrls(r.htsget.urls)}async loadUrls(e){const t=[];for(let i of e)if(i.url.startsWith("data:"))t.push(Promise.resolve(Th(i.url)));else{const e=qa(this.config||{});i.headers&&(e.headers=Object.assign(e.headers||{},i.headers)),t.push(Qs.loadArrayBuffer(i.url,e))}return function(e){let t=0;for(let i of e)t+=i.byteLength;let i=0;const n=new Uint8Array(t);for(let t of e){const e=new Uint8Array(t);n.set(e,i),i+=e.length}return n}(await Promise.all(t))}static async inferFormat(e){try{const t=Dh(e),i=`${t}${t.includes("?")?"&":"?"}class=header`,n=await Qs.loadJson(i,qa(e));if(n.htsget){const t=n.htsget.format;if("BAM"!==t&&"VCF"!==t)throw Error(`htsget format ${t} is not supported`);e.format=t.toLowerCase(),e.sourceType="htsget",e.name||(e.name=await Wa(e.url))}}catch(e){}}}function Dh(e){if(e.url&&e.endpoint&&e.id)return e.url+e.endpoint+e.id;if(e.endpoint&&e.id)return e.endpoint+e.id;if(e.url)return e.url.startsWith("htsget://")?e.url.replace("htsget://","https://"):e.url;throw Error("Must specify either 'url', or 'endpoint' and 'id")}function Th(e){const t=e.split(","),i=t[0].split(":")[1];let n=t[1];n=i.indexOf("base64")>=0?atob(n):decodeURI(n);const r=new Uint8Array(n.length);for(var s=0;s<n.length;s++)r[s]=n.charCodeAt(s);return r}class Lh extends Rh{constructor(e,t){super(e,t),this.parser=new Yl}async readHeader(){if(!this.header){let e=await this.readHeaderData();fs(e)&&(e=ps(e));const t=mh(e);this.header=await this.parser.parseHeader(t,this.genome),this.chrAliasTable=this.header.chrAliasTable}return this.header}async readFeatures(e,t,i){if(this.config.format&&"VCF"!==this.config.format.toUpperCase())throw Error(`htsget format ${this.config.format} is not supported`);this.chrAliasTable||await this.readHeader();let n=this.chrAliasTable.has(e)?this.chrAliasTable.get(e):e,r=await this.readData(n,t,i);fs(r)&&(r=ps(r));const s=mh(r);return this.parser.parseFeatures(s)}}class zh{chrAliasTable=new Map;constructor(e,t){this.sequenceNames=new Set(e),this.genome=t}async getAliasName(e){if(!this.genome)return e;if(!this.chrAliasTable.has(e)){const t=await this.genome.getAliasRecord(e);if(t){let i;const n=Object.keys(t).filter((e=>"start"!==e&&"end"!==e)).map((e=>t[e])).filter((e=>this.sequenceNames.has(e)));n.length>0&&(i=n[0]),this.chrAliasTable.set(e,i)}else this.chrAliasTable.set(e,void 0)}return this.chrAliasTable.get(e)}}class Hh{constructor(e){this.genome=e}async nextFeature(e,t,i,n){let r=this.genome.chromosomeNames||[e],s=r.indexOf(e);if(s<0)return;const o=Math.min(1e4,n||1e4);let a=i?t:Math.max(t-o,0);for(;s<r.length&&s>=0;){e=r[s];const c=this.genome.getChromosome(e).bpLength;for(;a<c&&a>=0;){let r=i?a+o:Math.min(t,a+o);const s=await this.getFeatures({chr:e,start:a,end:r,visibilityWindow:n});if(s){const e=(e,t)=>e.start-t.start+e.end-t.end,n=Array.from(s);n.sort(e);let r=i?0:n.length-1;for(;r>=0&&r<n.length;){const e=n[r],s=(e.start+e.end)/2;if(i){if(s>t)return e;r++}else{if(s<t)return e;r--}}}a=i?r:a-o}if(i)s++,a=0,t=0;else{if(s--,s<0)break;a=(t=this.genome.getChromosome(r[s]).bpLength)-o}}}async previousFeature(e,t,i,n){let r=this.genome.chromosomeNames||[e],s=r.indexOf(e);if(s<0)return;const o=Math.min(1e4,n||1e4);let a=i?t:Math.max(t-o,0);for(;s<r.length&&s>=0;){e=r[s];const c=this.genome.getChromosome(e).bpLength;for(;a<c&&a>=0;){let r=Math.min(t,a+o);const s=await this.getFeatures({chr:e,start:a,end:r,visibilityWindow:n});if(s){const e=(e,t)=>e.start-t.start+e.end-t.end,n=Array.from(s);n.sort(e);let r=i?0:n.length-1;for(;r>=0&&r<n.length;){const e=n[r],s=(e.start+e.end)/2;if(i){if(s>t)return e;r++}else{if(s<t)return e;r--}}}a=i?r:a-o}if(i)s++,a=0,t=0;else{if(s--,s<0)break;a=(t=this.genome.getChromosome(r[s]).bpLength)-o}}}}class Ph extends Hh{constructor(e,t){super(t),this.config=e||{},this.genome=t,this.sourceType=void 0===e.sourceType?"file":e.sourceType,this.maxWGCount=e.maxWGCount||1e4,this.windowFunctions=["mean","min","max","none"];const i=new Set(["bigwig","bw","bigbed","bb","biginteract","biggenepred","bignarrowpeak","tdf"]);if(this.queryable=e.indexURL||!0===e.queryable,e.reader)this.reader=e.reader,this.queryable=!1!==e.queryable;else{if("ga4gh"===e.sourceType)throw Error("Unsupported source type 'ga4gh'");"eqtl"!==e.type&&"qtl"!==e.type||"gtex-ws"!==e.sourceType?"htsget"===e.sourceType?(this.reader=new Lh(e,t),this.queryable=!0):"ucscservice"===e.sourceType?(this.reader=new Nh(e.source),this.queryable=!0):"custom"===e.sourceType?(this.reader=new Eh(e.source),this.queryable=!1!==e.source.queryable):"service"===e.sourceType?(this.reader=new Ih(e,t),this.queryable=!0):(this.reader=new Ih(e,t),void 0!==e.queryable?this.queryable=e.queryable:(i.has(e.format)||this.reader.indexed)&&(this.queryable=!0)):(this.reader=new Bh(e),this.queryable=!0)}this.searchable=!1!==e.searchable}async defaultVisibilityWindow(){if(this.reader&&"function"==typeof this.reader.defaultVisibilityWindow)return this.reader.defaultVisibilityWindow()}async trackType(){const e=await this.getHeader();return e?e.type:void 0}async getHeader(){if(!this.header)if(this.reader&&"function"==typeof this.reader.readHeader){const e=await this.reader.readHeader();e?(this.header=e,e.format&&(this.config.format=e.format)):this.header={}}else this.header={};return this.header}async getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:r}){const s="all"===e.toLowerCase();return t=t||0,i=i||Number.MAX_SAFE_INTEGER,(s&&!this.wgFeatures&&this.supportsWholeGenome()||this.config.disableCache||!this.featureCache||!this.featureCache.containsRange(new dc(e,t,i)))&&await this.loadFeatures(e,t,i,r),s?(this.wgFeatures||(this.supportsWholeGenome()?this.wgFeatures=await Ll(this.featureCache.getAllFeatures(),this.genome,this.maxWGCount):this.wgFeatures=[]),this.wgFeatures):this.featureCache.queryFeatures(e,t,i)}async findFeatures(e){return this.featureCache?this.featureCache.findFeatures(e):[]}supportsWholeGenome(){return!this.queryable}getAllFeatures(){return this.queryable||!this.featureCache?[]:this.featureCache.getAllFeatures()}async loadFeatures(e,t,i,n){await this.getHeader();const r=this.reader;let s=t,o=i,a=e;if(!this.chrAliasManager&&this.reader&&this.reader.sequenceNames&&(this.chrAliasManager=new zh(this.reader.sequenceNames,this.genome)),this.chrAliasManager&&(a=await this.chrAliasManager.getAliasName(e)),(!n||n<=0)&&!1!==this.config.expandQuery){const e=this.genome?this.genome.getChromosome(a):void 0;s=0,o=Math.max(e?e.bpLength:Number.MAX_SAFE_INTEGER,i)}else if(n>i-t&&!1!==this.config.expandQuery){let e=Math.min(4.1*(i-t),n);this.config.minQuerySize&&e<this.config.minQuerySize&&(e=this.config.minQuerySize),s=Math.max(0,(t+i-e)/2),o=s+e}let c=await r.readFeatures(a,s,o);void 0===this.queryable&&(this.queryable=r.indexed);const l=this.queryable?new dc(e,s,o):void 0;if(c){if("wig"!==this.config.format&&"junctions"!==this.config.type){zl(c,this.config.maxRows||Number.MAX_SAFE_INTEGER)}this.featureCache=new Zs(c,this.genome,l),this.searchable&&this.addFeaturesToDB(c,this.config)}else this.featureCache=new Zs([],l)}addFeaturesToDB(e,t){this.featureMap||(this.featureMap=new Map);const i=t.searchableFields||["name","transcript_id","gene_id","gene_name","id"];for(let t of e)for(let e of i){let i;if("function"==typeof t.getAttributeValue&&(i=t.getAttributeValue(e)),i){if(i=i.replaceAll(" ","+").toUpperCase(),this.featureMap.has(i)){const e=this.featureMap.get(i);if(t.end-t.start<e.end-e.start)continue}this.featureMap.set(i,t)}}}search(e){if(this.featureMap)return this.featureMap.get(e.toUpperCase())}}class Oh{constructor(e,t,i,n){this.header=e,this.nameToId=t,this.idToName=i,this.sumLengths=n}static parseTree(e,t,i=!1){{const n=e.getInt(),r=e.getInt(),s=e.getInt(),o=e.getInt(),a=e.getLong(),c=e.getLong(),l={magic:n,blockSize:r,keySize:s,valSize:o,itemCount:a,reserved:c},h=new Map,d=[];let u=0;const f=n=>{n>=0&&(e.position=n);const r=e.getByte();e.getByte();const a=e.getUShort();if(1===r)for(let t=0;t<a;t++){let t,n=e.getFixedLengthString(s);if(8!==o)throw Error(`Unexpected "valSize" value in chromosome tree.  Expected 8, actual value is ${o}`);{t=e.getInt();const r=e.getInt();u+=r,i&&(n=i.getChromosomeName(n)),h.set(n,t),d[t]=n}}else for(let i=0;i<a;i++){e.getFixedLengthString(s);const i=e.getLong()-t,n=e.position;f(i),e.position=n}};return f(e),new Oh(l,h,d,u)}}}class Uh{static magic=610839776;littleEndian=!0;nodeCache=new Map;constructor(e,t,i){this.path=e,this.config=t,this.startOffset=i}async init(){const e=await this.#t(this.startOffset,48);let t=e.getInt();if(t!==Uh.magic&&(e.setPosition(0),this.littleEndian=!this.littleEndian,e.littleEndian=this.littleEndian,t=e.getInt(),t!==Uh.magic))throw Error(`Bad magic number ${t}`);const i=e.getUInt(),n=e.getLong(),r=e.getUInt(),s=e.getUInt(),o=e.getUInt(),a=e.getUInt(),c=e.getLong(),l=e.getUInt(),h=e.getUInt(),d=this.startOffset+48;return this.header={magic:t,blockSize:i,itemCount:n,startChromIx:r,startBase:s,endChromIx:o,endBase:a,endFileOffset:c,itemsPerSlot:l,reserved:h,rootNodeOffset:d},this}async#t(e,t){const i=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:e,size:t}}));return new Ac(new DataView(i),this.littleEndian)}async findLeafItemsOverlapping(e,t,i,n){const r=[],s=async o=>{const a=await this.readNode(o);for(let o of a.items)qh(o,e,t,i,n)&&(1===a.type?r.push(o):await s(o.childOffset))};return await s(this.header.rootNodeOffset),r}async readNode(e){const t=e;if(this.nodeCache.has(t))return this.nodeCache.get(t);let i=await this.#t(e,4);const n=i.getByte(),r=1===n;i.getByte();const s=i.getUShort();let o=s*(r?32:24);i=await this.#t(e+4,o);const a=[];for(let e=0;e<s;e++){let e={isLeaf:r,startChrom:i.getInt(),startBase:i.getInt(),endChrom:i.getInt(),endBase:i.getInt(),childOffset:i.getLong()};r&&(e.dataSize=i.getLong(),e.dataOffset=e.childOffset),a.push(e)}const c={type:n,items:a};return this.nodeCache.set(t,c),c}}function qh(e,t,i,n,r){return e?(n>e.startChrom||n===e.startChrom&&r>=e.startBase)&&(t<e.endChrom||t===e.endChrom&&i<=e.endBase):(console.log("null item for "+t+" "+i+" "+r),!1)}class Qh{ixFile;ixxFile;bufferCache=new Map;constructor(e,t){this.ixFile=t,this.ixxFile=e}async search(e,t){const i=e.split(" ")[0].toLowerCase(),n=await this._getBuffer(i,t);if(!n)return;const r=n.slice(0,n.lastIndexOf("\n")).split("\n").filter((e=>!!e)),s=[];for(let e of r){const t=e.split(" ")[0];if(t.startsWith(i)&&s.push(e),t.slice(0,i.length)>i)break}if(0!==s.length){const e=new Map;for(let t of s){const[i,...n]=t.split(" ");e.set(i,n.map((e=>e.split(",")[0])))}return e}}async getIndex(e){return this.index||(this.index=await this._readIndex()),this.index}async _readIndex(e){return(await Qs.loadString(this.ixxFile)).split("\n").filter((e=>!!e)).map((e=>{const t=e.length-10,i=e.slice(0,t),n=e.slice(t);return[i,Number.parseInt(n,16)]}))}async _getBuffer(e,t){let i=0,n=65536;const r=await this.getIndex(t);for(let t=0;t<r.length;t++){const[s,o]=r[t],a=Math.min(s.length,e.length);s.slice(0,a)<e&&(i=o,n=o+65536)}const s=n-i;if(!(s<0)){if(this.bufferCache.has(i))return this.bufferCache.get(i);{const e=await Qs.loadString(this.ixFile,{range:{start:i,size:s}});return this.bufferCache.set(i,e),e}}}}class Vh{chrAliasTable=new Map;rpTreeCache=new Map;constructor(e,t){this.path=e.url,this.format=e.format||"bigwig",this.genome=t,this.config=e,this.bufferSize=512e3,this.loader=$a(this.path)?new Xh(this.path):Qs,e.searchTrix&&(this._trix=new Qh(`${e.searchTrix}x`,e.searchTrix))}async readWGFeatures(e,t){await this.loadHeader();const i=this.chromTree.idToName.length-1,n=this.chromTree.idToName[0],r=this.chromTree.idToName[i];return this.readFeatures(n,0,r,Number.MAX_VALUE,e,t)}async readFeatures(e,t,i,n,r,s="mean"){t||(t=0),n||(n=Number.MAX_SAFE_INTEGER),await this.loadHeader();let o,a,c=await this.#h(e),l=await this.#h(i);if(void 0===c||void 0===l)return[];if("bigwig"===this.type){const e=await this.getZoomHeaders();let t=r?function(e,t){let i;for(let n=0;n<t.length;n++){const r=t[n];if(r.reductionLevel<e){i=r;break}}return i}(r,e):void 0;t?(o=t.indexOffset,a=Yh):(o=this.header.fullIndexOffset,a=$h)}else o=this.header.fullIndexOffset,a=Kh.call(this);const h=await this.loadRPTree(o),d=await h.findLeafItemsOverlapping(c,t,l,n);if(d&&0!==d.length){let e=Number.MAX_VALUE,i=0;for(let t of d)e=Math.min(e,t.dataOffset),i=Math.max(i,t.dataOffset+t.dataSize);const r=i-e,o=await this.loader.loadArrayBuffer(this.config.url,qa(this.config,{range:{start:e,size:r}})),h=[];for(let i of d){const r=new Uint8Array(o,i.dataOffset-e,i.dataSize);let d;d=this.header.uncompressBuffSize>0?ls(r):r,a.call(this,new DataView(d.buffer),c,t,l,n,h,this.chromTree.idToName,s,this.littleEndian)}return h.sort((function(e,t){return e.start-t.start})),h}return[]}async#h(e){if(this.chrAliasTable.has(e)&&void 0===(e=this.chrAliasTable.get(e)))return;let t=this.chromTree.nameToId.get(e);if(void 0===t&&this.genome){const i=await this.genome.getAliasRecord(e);let n;if(i){const e=Object.keys(i).filter((e=>"start"!==e&&"end"!==e)).map((e=>i[e])).filter((e=>this.chromTree.nameToId.has(e)));e.length>0&&(n=e[0],t=this.chromTree.nameToId.get(e[0]))}this.chrAliasTable.set(e,n)}return t}get searchable(){return"bigbed"===this.type}async search(e){if(this.header||await this.loadHeader(),!this.header||!this.header.extraIndexCount)return;const t=await this._searchForRegions(e);if(t){const i=await this._loadFeaturesForRange(t.offset,t.length);if(i){const t=i.filter((t=>{for(let i of Object.keys(t)){const n=t[i];if(Mt(n)&&n.toLowerCase()===e.toLowerCase())return!0}return!1}));return t.length>0?t.reduce(((e,t)=>e.end-e.start>t.end-t.start?e:t),i[0]):void 0}}}async _searchForRegions(e){const t=await this.#d();if(t){if(this._trix){const t=e.toLowerCase(),i=await this._trix.search(t);i&&i.has(t)&&(e=i.get(t)[0])}for(let i of t){const t=await i.search(e);if(t)return t}}}async#d(){if(void 0===this._searchTrees&&this.header.extraIndexOffsets&&this.header.extraIndexOffsets.length>0){this._searchTrees=[];for(let e of this.header.extraIndexOffsets){const t=await _c.loadBpTree(this.path,this.config,e);this._searchTrees.push(t)}}return this._searchTrees}async getZoomHeaders(){return this.zoomLevelHeaders||await this.loadHeader(),this.zoomLevelHeaders}async loadHeader(){if(this.header)return this.header;{let e,t=await this.loader.loadArrayBuffer(this.path,qa(this.config,{range:{start:0,size:64}}));this.littleEndian=!0;let i=new Ac(new DataView(t),this.littleEndian),n=i.getUInt();if(2291137574===n)this.type="bigwig";else if(2273964779===n)this.type="bigbed";else{this.littleEndian=!1,i.littleEndian=!1,i.position=0;let e=i.getUInt();654085990===e?this.type="bigwig":3958540679===e&&(this.type="bigbed")}e={bwVersion:i.getUShort(),nZoomLevels:i.getUShort(),chromTreeOffset:i.getLong(),fullDataOffset:i.getLong(),fullIndexOffset:i.getLong(),fieldCount:i.getUShort(),definedFieldCount:i.getUShort(),autoSqlOffset:i.getLong(),totalSummaryOffset:i.getLong(),uncompressBuffSize:i.getInt(),extensionOffset:i.getLong()};const r=64;let s={start:r,size:e.fullDataOffset-r+4};t=await this.loader.loadArrayBuffer(this.path,qa(this.config,{range:s}));const o=e.nZoomLevels;i=new Ac(new DataView(t),this.littleEndian),this.zoomLevelHeaders=[],this.firstZoomDataOffset=Number.MAX_SAFE_INTEGER;for(let e=1;e<=o;e++){const t=o-e,n=new jh(t,i);this.firstZoomDataOffset=Math.min(n.dataOffset,this.firstZoomDataOffset),this.zoomLevelHeaders[t]=n}if(e.autoSqlOffset>0){i.position=e.autoSqlOffset-r;const t=i.getString();t&&(this.autoSql=function(e){let t;const i=[];let n=!1;const r=e.trim().split(/\s*[\r\n]+\s*/g);for(let e of r)if(e.startsWith("table"))t=e.split(/\s+/)[1].trim();else if(e.startsWith("("))n=!0;else if(e.startsWith(")"));else if(n&&e.length>0){const t=e.indexOf(";"),n=e.substr(0,t).split(/\s+/),r=e.substr(t+1).replace(/"/g,"").trim();i.push({type:n[0],name:n[1],description:r})}return{table:t,fields:i}}(t))}if(e.totalSummaryOffset>0&&(i.position=e.totalSummaryOffset-r,this.totalSummary=new Wh(i)),!(e.chromTreeOffset>0))throw"BigWig chromosome tree offset <= 0";return i.position=e.chromTreeOffset-r,this.chromTree=await Oh.parseTree(i,r,this.genome),this.chrNames=new Set(this.chromTree.idToName),i.position=e.fullDataOffset-r,e.dataCount=i.getInt(),this.featureDensity=e.dataCount/this.chromTree.sumLengths,this.header=e,e.extensionOffset>0&&await this.loadExtendedHeader(e.extensionOffset),this.header}}async loadExtendedHeader(e){let t=await this.loader.loadArrayBuffer(this.path,qa(this.config,{range:{start:e,size:64}})),i=new Ac(new DataView(t),this.littleEndian);i.getUShort();const n=i.getUShort(),r=i.getLong();if(0===n)return;let s=56*n;t=await this.loader.loadArrayBuffer(this.path,qa(this.config,{range:{start:r,size:s}})),i=new Ac(new DataView(t),this.littleEndian);const o=[],a=[],c=[];for(let e=0;e<n;e++){o.push(i.getUShort());const e=i.getUShort();c.push(i.getLong()),a.push(i.getInt());for(let t=0;t<e;t++)i.getUShort(),a.push(i.getUShort())}this.header.extraIndexCount=n,this.header.extraIndexOffsets=c}async loadRPTree(e){let t=this.rpTreeCache.get(e);return t||(t=new Uh(this.path,this.config,e),await t.init(),this.rpTreeCache.set(e,t),t)}async getType(){return await this.loadHeader(),this.type}async getTrackType(){return await this.loadHeader(),"bigwig"===this.type?"wig":this.autoSql&&"chromatinInteract"===this.autoSql.table?"interact":"annotation"}async _loadFeaturesForRange(e,t){const i=await this.loader.loadArrayBuffer(this.config.url,qa(this.config,{range:{start:e,size:t}})),n=new Uint8Array(i),r=this.header.uncompressBuffSize>0?ls(n):n,s=[];return Kh.call(this).call(this,new DataView(r.buffer),0,0,Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER,s,this.chromTree.idToName),s}}class jh{constructor(e,t){this.index=e,this.reductionLevel=t.getInt(),this.reserved=t.getInt(),this.dataOffset=t.getLong(),this.indexOffset=t.getLong()}}class Wh{constructor(e){e?(this.basesCovered=e.getLong(),this.minVal=e.getDouble(),this.maxVal=e.getDouble(),this.sumData=e.getDouble(),this.sumSquares=e.getDouble(),Gh.call(this)):(this.basesCovered=0,this.minVal=0,this.maxVal=0,this.sumData=0,this.sumSquares=0,this.mean=0,this.stddev=0)}}function Gh(){let e=this.basesCovered;if(e>0){this.mean=this.sumData/e,this.stddev=Math.sqrt(this.sumSquares/(e-1));let t=this.minVal<0?this.mean-2*this.stddev:0,i=this.maxVal>0?this.mean+2*this.stddev:0;this.defaultRange={min:t,max:i}}}function $h(e,t,i,n,r,s,o,a,c){const l=new Ac(e,c),h=l.getInt(),d=l.getInt();let u=d,f=l.getInt();const p=l.getInt(),g=l.getInt(),m=l.getByte();l.getByte();let w=l.getUShort();if(h>=t&&h<=n){let e=0;for(;w-- >0;){let a;switch(m){case 1:u=l.getInt(),f=l.getInt(),a=l.getFloat();break;case 2:u=l.getInt(),a=l.getFloat(),f=u+g;break;case 3:a=l.getFloat(),u=d+e*p,f=u+g,e++}if(!(h<t||h===t&&f<i)){if(h>n||h===n&&u>=r)break;if(Number.isFinite(a)){const e=o[h];s.push({chr:e,start:u,end:f,value:a})}}}}}function Kh(){const e=function(e,t,i,n){if("biginteract"===n||i&&("chromatinInteract"===i.table||"interact"===i.table))return function(e,t){return e.chr1=t[5],e.start1=Number.parseInt(t[6]),e.end1=Number.parseInt(t[7]),e.chr2=t[10],e.start2=Number.parseInt(t[11]),e.end2=Number.parseInt(t[12]),e.name=t[0],e.score=Number(t[1]),e.value=Number(t[2]),e.color="."===t[4]?void 0:"0"===t[4]?"rgb(0,0,0)":t[4],e};{const n=e-3;return function(r,s){if(n>0&&(r.name=s[0]),n>1&&(r.score=Number(s[1])),n>2&&(r.strand=s[2]),n>3&&(r.cdStart=parseInt(s[3])),n>4&&(r.cdEnd=parseInt(s[4])),n>5&&"."!==s[5]&&"0"!==s[5]&&"-1"!==s[5]){const e=_s.createColorString(s[5]);r.color=e.startsWith("rgb")?e:void 0}if(n>8){const e=parseInt(s[6]),t=s[7].split(","),i=s[8].split(","),n=[];for(let s=0;s<e;s++){const e=r.start+parseInt(i[s]),o=e+parseInt(t[s]);n.push({start:e,end:o})}!function(e,t,i){for(let n of e){const e=n.end,r=n.start;e<t||r>i?n.utr=!0:(t>=r&&t<=e&&(n.cdStart=t),i>=r&&i<=e&&(n.cdEnd=i))}}(n,r.cdStart,r.cdEnd),r.exons=n}if(i)for(let n=e;n<t;n++)if(n<i.fields.length){const e=i.fields[n].name,t=s[n-3];r[e]=t}}}}(this.header.definedFieldCount,this.header.fieldCount,this.autoSql,this.format);return function(t,i,n,r,s,o,a,c,l){const h=new Ac(t,l);for(;h.remLength()>=13;){const t=h.getInt(),c=a[t],l=h.getInt(),d=h.getInt(),u=h.getString();if(!(t<i||t===i&&d<n)){if(t>r||t===r&&l>=s)break;if(d>0){const t={chr:c,start:l,end:d};o.push(t);const i=u.split("\t");e(t,i)}}}}}function Yh(e,t,i,n,r,s,o,a,c){const l=new Ac(e,c);for(;l.remLength()>=32;){const e=l.getInt(),c=l.getInt(),h=l.getInt(),d=l.getInt(),u=l.getFloat(),f=l.getFloat(),p=l.getFloat();let g;switch(l.getFloat(),a){case"min":g=u;break;case"max":g=f;break;default:g=0===d?0:p/d}if(!(e<t||e===t&&h<i)){if(e>n||e===n&&c>=r)break;if(Number.isFinite(g)){const t=o[e];s.push({chr:t,start:c,end:h,value:g})}}}}class Xh{constructor(e){this.data=vs(e).buffer}loadArrayBuffer(e,t){const i=t.range;return i?this.data.slice(i.start,i.start+i.size):this.data}async dataViewForRange(e,t){const i=Math.min(this.data.byteLength-e.start,e.size);return t?new Uint8Array(this.data,e.start,i):new DataView(this.data,e.start,i)}}class Zh extends Hh{queryable=!0;wgValues={};windowFunctions=["mean","min","max"];constructor(e,t){super(t),this.reader=new Vh(e,t),this.genome=t,this.format=e.format||"bigwig"}async getFeatures({chr:e,start:t,end:i,bpPerPixel:n,windowFunction:r}){await this.reader.loadHeader();const s="bigwig"===this.reader.type,o="all"===e.toLowerCase()?s?await this.getWGValues(r):[]:await this.reader.readFeatures(e,t,e,i,n,r);return s||Tl(o),o}async getHeader(){return this.reader.loadHeader()}async defaultVisibilityWindow(){return"bigwig"===this.reader.type?-1:this.reader.featureDensity?Math.floor(1e4/this.reader.featureDensity):-1}async getWGValues(e){const t=this.genome;if(this.wgValues[e])return this.wgValues[e];{const i=t.getGenomeLength()/1e3,n=await this.reader.readWGFeatures(i,e);let r=[];for(let e of n){const i=e.chr,n=t.getCumulativeOffset(i),s=Object.assign({},e);s.chr="all",s.start=n+e.start,s.end=n+e.end,s._f=e,r.push(s)}return r.sort(((e,t)=>e.start-t.start)),this.wgValues[e]=r,r}}supportsWholeGenome(){return"bigwig"===this.reader.type}async trackType(){return this.reader.getTrackType()}get searchable(){return this.reader.searchable}async search(e){return this.reader.search(e)}}class Jh{constructor(e,t){this.config=e,this.genome=t,this.path=e.url,this.groupCache={},this.datasetCache={}}async readHeader(){if(void 0!==this.magic)return this;let e=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:0,size:64e3}})),t=new Ac(new DataView(e));if(this.magic=t.getInt(),this.version=t.getInt(),this.indexPos=t.getLong(),this.indexSize=t.getInt(),t.getInt(),this.version>=2){let e=t.getInt();for(this.windowFunctions=[];e-- >0;)this.windowFunctions.push(t.getString())}this.trackType=t.getString(),this.trackLine=t.getString();let i=t.getInt();for(this.trackNames=[];i-- >0;)this.trackNames.push(t.getString());this.genomeID=t.getString(),this.flags=t.getInt(),this.compressed=!!(1&this.flags),e=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:this.indexPos,size:this.indexSize}})),t=new Ac(new DataView(e)),this.datasetIndex={};let n=t.getInt();for(;n-- >0;){const e=t.getString(),i=t.getLong(),n=t.getInt();this.datasetIndex[e]={position:i,size:n}}for(this.groupIndex={},n=t.getInt();n-- >0;){const e=t.getString(),i=t.getLong(),n=t.getInt();this.groupIndex[e]={position:i,size:n}}return this}async readDataset(e,t,i){const n=e+"_"+t+"_"+i;if(this.datasetCache[n])return this.datasetCache[n];{await this.readHeader();const r=this.version<2?"":"/"+t,s="all"===e.toLowerCase()||void 0===i?"0":i.toString();let o;o="raw"===t?"/"+e+"/raw":"/"+e+"/z"+s+r;const a=this.datasetIndex[o];if(void 0===a)return;const c=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:a.position,size:a.size}}));if(!c)return;const l=new Ac(new DataView(c));let h=l.getInt();const d={};for(;h-- >0;)d[l.getString()]=l.getString();const u=l.getString(),f=l.getFloat();let p=l.getInt();const g=[];for(;p-- >0;)g.push({position:l.getLong(),size:l.getInt()});const m={name:o,attributes:d,dataType:u,tileWidth:f,tiles:g};return this.datasetCache[n]=m,m}}async readRootGroup(){const e=this.genome,t=this.groupCache["/"];if(t)return t;{const t=await this.readGroup("/"),i=t.chromosomes,n=t.maxZoom;n&&(this.maxZoom=Number(n));const r=t.totalCount;r&&(t.totalCount=Number(r));const s={};return i&&i.split(",").forEach((function(t){const i=e.getChromosomeName(t);s[i]=t})),this.chrAliasTable=s,this.groupCache["/"]=t,t}}async readGroup(e){const t=this.groupCache[e];if(t)return t;{await this.readHeader();const t=this.groupIndex[e];if(void 0===t)return;const i=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:t.position,size:t.size}}));if(!i)return;const n=new Ac(new DataView(i)),r={name:e};let s=n.getInt();for(;s-- >0;){const e=n.getString(),t=n.getString();r[e]=t}return this.groupCache[e]=r,r}}async readTiles(e,t){if(e.sort((function(e,t){return e.position-t.position})),0===(e=e.filter((function(e){return e.size>0}))).length)return[];e=function(e){const t=[];let i=e[0];for(let n=1;n<e.length;n++){const r=e[n];r.position>i.position+i.size?(t.push(i),i=r):i.size=r.position+r.size-i.position}return t.push(i),t}(e);const i=[];for(let n of e){const e=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:n.position,size:n.size}})),r=this.compressed?ls(e).buffer:e,s=new Ac(new DataView(r)),o=s.getString();let a;switch(o){case"fixedStep":a=ed(s,t);break;case"variableStep":a=td(s,t);break;case"bed":case"bedWithName":a=id(s,t,o);break;default:throw"Unknown tile type: "+o}i.push(a)}return i}async readTile(e,t){let i=await Qs.loadArrayBuffer(this.path,qa(this.config,{range:{start:e.position,size:e.size}}));if(this.compressed){i=ls(i).buffer}const n=new Ac(new DataView(i)),r=n.getString();switch(r){case"fixedStep":return ed(n,t);case"variableStep":return td(n,t);case"bed":case"bedWithName":return id(n,t,r);default:throw"Unknown tile type: "+r}}}function ed(e,t){const i=e.getInt(),n=e.getInt(),r=e.getFloat(),s=[];let o=t;for(;o-- >0;){let t=i;const n=[];for(;t-- >0;)n.push(e.getFloat());s.push(n)}return{type:"fixedStep",start:n,span:r,data:s,nTracks:t,nPositions:i}}function td(e,t){const i=e.getInt(),n=e.getFloat(),r=e.getInt(),s=[];let o=r;for(;o-- >0;)s.push(e.getInt());e.getInt();const a=[];let c=t;for(;c-- >0;){o=r;const t=[];for(;o-- >0;)t.push(e.getFloat());a.push(t)}return{type:"variableStep",tileStart:i,span:n,start:s,data:a,nTracks:t,nPositions:r}}function id(e,t,i){const n=e.getInt();let r=n;const s=[];for(;r-- >0;)s.push(e.getInt());r=n;const o=[];for(;r-- >0;)o.push(e.getInt());e.getInt();const a=[];let c=t;for(;c-- >0;){let t=n;const i=[];for(;t-- >0;)i.push(e.getFloat());a.push(i)}if("bedWithName"===i){r=n;const t=[];for(;r-- >0;)t.push(e.getString())}return{type:i,start:s,end:o,data:a,nTracks:t,nPositions:n}}class nd extends Hh{searchable=!1;constructor(e,t){super(t),this.genome=t,this.reader=new Jh(e,t),this.queryable=!0}async getFeatures({chr:e,start:t,end:i,bpPerPixel:n,windowFunction:r="mean"}){if("all"===e.toLowerCase()){const e=[],t=this.genome;if(this.genome.wgChromosomeNames)for(let i of t.wgChromosomeNames){const s=t.getChromosome(i).bpLength;n=s/1e3;const o=await this._getFeatures(i,0,s,n,r);if(o)for(let i of o){const n=Object.assign({},i);n.chr="all",n.start=t.getGenomeCoordinate(i.chr,i.start),n.end=t.getGenomeCoordinate(i.chr,i.end),n._f=i,e.push(n)}}return e}return this._getFeatures(e,t,i,n,r)}async _getFeatures(e,t,i,n,r){const s=new dc(e,t,i),o=this.genome;if(!this.rootGroup&&(this.rootGroup=await this.reader.readRootGroup(),!this.normalizationFactor)){const e=this.rootGroup.totalCount;e&&(this.normalizationFactor=1e6/e)}s.bpPerPixel=n;const a=function(e,t,i){var n=i.getChromosome(e).bpLength;return Math.ceil(Math.log(Math.max(0,n/(700*t)))/ad)}(e,n,o);let c=this.reader.chrAliasTable[e],l=this.reader.maxZoom;void 0===c&&(c=e),void 0===l&&(l=-1);const h=a>l?"raw":r,d=await this.reader.readDataset(c,h,a);if(null==d)return[];const u=d.tileWidth,f=Math.floor(t/u),p=Math.floor(i/u),g=await this.reader.readTiles(d.tiles.slice(f,p+1),1),m=[];for(let r of g)switch(r.type){case"bed":rd(r,e,t,i,n,m);break;case"variableStep":sd(r,e,t,i,n,m);break;case"fixedStep":od(r,e,t,i,n,m);break;default:throw"Unknown tile type: "+r.type}return m.sort((function(e,t){return e.start-t.start})),m}get supportsWholeGenome(){return!0}get windowFunctions(){return this.reader.windowFunctions}}function rd(e,t,i,n,r,s){const o=e.nPositions,a=e.start,c=e.end,l=e.data[0];for(let e=0;e<o;e++){const r=a[e],o=c[e];if(!(o<i)){if(r>n)break;s.push({chr:t,start:r,end:o,value:l[e]})}}}function sd(e,t,i,n,r,s){const o=e.nPositions,a=e.start,c=e.span,l=e.data[0];for(let e=0;e<o;e++){const r=a[e],o=r+c;if(!(o<i)){if(r>n)break;s.push({chr:t,start:r,end:o,value:l[e]})}}}function od(e,t,i,n,r,s){const o=e.nPositions;let a=e.start;const c=e.span,l=e.data[0];for(let e=0;e<o;e++){const r=a+c;if(a>n)break;r>=i&&(Number.isNaN(l[e])||s.push({chr:t,start:a,end:r,value:l[e]})),a=r}}var ad=Math.log(2);class cd extends Hh{constructor(e,t){super(t),this.config=e,this.genome=t,this.queryable=!1,this.searchable=!1!==e.searchable,this.updateFeatures(e.features)}updateFeatures(e){zl(e=function(e,t){if(t)for(let i of e)i.chr=t.getChromosomeName(i.chr);return e}(e,this.genome)),this.config.mappings&&function(e,t){let i=Object.keys(t);e.forEach((function(e){i.forEach((function(i){e[i]=e[t[i]]}))}))}(e,this.config.mappings),this.featureCache=new Zs(e,this.genome),(this.searchable||this.config.searchableFields)&&this.addFeaturesToDB(e,this.config)}async getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:r}){const s=this.genome,o=s?s.getChromosomeName(e):e;return"all"===o.toLowerCase()?Ll(this.featureCache.getAllFeatures(),this.genome,this.maxWGCount):this.featureCache.queryFeatures(o,t,i)}getAllFeatures(){return this.featureCache.getAllFeatures()}supportsWholeGenome(){return!0}addFeaturesToDB(e,t){this.featureMap||(this.featureMap=new Map);const i=t.searchableFields||["name"];for(let t of e)for(let e of i){let i;if("function"==typeof t.getAttributeValue&&(i=t.getAttributeValue(e)),i||(i=t[e]),i){i=i.replaceAll(" ","+");const e=this.featureMap.get(i.toUpperCase());if(e&&e.end-e.start>t.end-t.start)continue;this.featureMap.set(i.toUpperCase(),t)}}}search(e){if(this.featureMap)return this.featureMap.get(e.toUpperCase())}}class ld{constructor({chr:e,locus:t,accession:i,aliases:n,features:r,sequence:s}){this.chr=e,this.locus=t,this.accession=i,this.aliases=n,this.features=r,this.sequence=s,this.bpLength=s.length}toJSON(){return{gbkURL:this.url}}getSequenceRecord(e){return{chr:this.chr,bpLength:this.bpLength}}get chromosomeNames(){return[this.chr]}getFirstChromosomeName(){return this.chr}get id(){return this.accession}get name(){return this.locus}get initialLocus(){return this.chr}get description(){return this.locus}get infoURL(){return this.url}showWholeGenomeView(){return!1}getHomeChromosomeName(){return this.chr}getChromosomeName(e){return e}getChromosomeDisplayName(e){return this.chr}getChromosome(e){if(e===this.chr)return{name:this.chr,bpLength:this.bpLength}}async loadChromosome(e){return this.getChromosome(e)}async getAliasRecord(e){}getCytobands(e){return[]}getChromosomes(){return[this.getChromosome(this.chr)]}get wgChromosomeNames(){}getGenomeCoordinate(e,t){if(e===this.chr)return t}getChromosomeCoordinate(e){return{chr:this.chr,position:e}}getCumulativeOffset(e){return 0}getGenomeLength(){return this.bpLength}async getSequence(e,t,i){return e===this.chr?this.sequence.substring(t,i):void 0}getSequenceInterval(e,t,i){return e===this.chr?new uc(this.chr,0,this.sequence.length,this.sequence):void 0}}const hd=/\s+/,dd=new Map;async function ud(e){let t=dd.get(e);if(!t){t=function(e){if(!e)return null;const t=mh(e);let i=t.nextLine();const n=i.split(/\s+/);if("LOCUS"!==n[0].toUpperCase())throw Error("Expected `LOCUS` line.  Found: "+i);const r=n[1].trim();let s,o;do{if(i=t.nextLine(),i.startsWith("ACCESSION")){const e=i.split(hd);if(e.length<2)throw Error("Genbank file missing ACCESSION number.");s=e[1].trim()}else if(i.startsWith("ALIASES")){const e=i.split(hd);e.length>1&&(o=e[1].split(","))}}while(i&&!i.startsWith("FEATURES"));const a=s||r,c=function(e,t){const i=[];let n,r,s,o=0;for(;;)if(r=t.nextLine(),""!==r){if(!r||r.startsWith("ORIGIN"))break;if(r.length<6)o<10&&console("Unexpected line in genbank file (skipping): "+r),o++;else if(" "!==r.charAt(5)){let t=r.substring(5,21).trim();s={chr:e,type:t,attributes:{},getAttributeValue:function(e){return this.attributes[e]}},n=r.substring(21),"source"!==t.toLowerCase()&&i.push(s)}else{let t=r.substring(21).trim();if(t.length>0)if(47===t.charCodeAt(0)){if(47===n.charCodeAt(0)){let e=n.split("=",2);if(e.length>1){let t=e[0].length>1?e[0].substring(1):"",i=pd(e[1]);s.attributes[t]=i}}else{const t=n.includes("complement")?"-":"+";s.strand=t;let i=n.replace("join","").replace("order","").replace("complement","").replace("(","").replace(")","");if(i.includes("..")){i=i.replace("<","").replace(">","");const n=fd(i,e,t),r=n[0];s.start=r.start;const o=n[n.length-1];s.end=o.end,n.length>1&&(s.exons=n)}else s.start=parseInt(i)-1,s.end=s.start+1}n=t}else n+=t}}return i}(a,t),l=function(e){let t,i="";for(;(t=e.nextLine())&&!t.startsWith("//");){t=t.trim();const e=t.split(/\s+/);for(let t=1;t<e.length;t++)i+=e[t]}return i}(t);return new ld({chr:a,locus:r,accession:s,aliases:o,features:c,sequence:l})}(await Qs.loadString(e,{})),t.url=e,dd.set(e,t)}return t}function fd(e,t,i){const n=e.split(","),r=[];e.includes("complement");for(const e of n){const n=e.split("..");let s=0;try{s=parseInt(n[0])-1}catch(e){console.error(e)}let o=s+1;n.length>1&&(o=parseInt(n[1])),r.push({chr:t,start:s,end:o,strand:i})}return r.sort((function(e,t){return e.start-t.start})),r}function pd(e){return e.startsWith('"')&&e.endsWith('"')&&(e=e.substring(1,e.length-2)),e}class gd extends Hh{constructor(e,t){super(t),this.config=e,this.searchable=!0}async getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:r}){if(!this.featureSource){const e=await ud(this.config.url);this.featureSource=new cd({genome:this.config.genome,features:e.features,searchableFields:["gene","db_xref","locus_tag","transcript_id"]})}return this.featureSource.getFeatures({chr:e,start:t,end:i})}supportsWholeGenome(){return!1}search(e){return this.featureSource.search(e)}}const md=new Set(["bigwig","bw","bigbed","bb","biginteract","biggenepred","bignarrowpeak"]);function wd(e,t){const i=e.format?e.format.toLowerCase():void 0;return e.features?new cd(e,t):md.has(i)?new Zh(e,t):"tdf"===i?new nd(e,t):"gbk"===i?new gd(e,t):new Ph(e,t)}function bd(e){return(3-e.readingFrame)%3}function Fd(e){return e.cdStart||e.start}function vd(e){return e.cdEnd||e.end}const yd=.25;function Ad(e,t,i){let n=(e.start-t)/i,r=(e.end-t)/i,s=r-n;return s<3&&(s=3,n-=1.5),{px:n,px1:r,pw:s}}function Cd(e,t,i,n,r,s){try{r.save(),r.fillStyle=this.color,r.strokeStyle=this.color;const n=this.getColorForFeature(e);let o,a;r.fillStyle=n,r.strokeStyle=n,"SQUISHED"===this.displayMode&&void 0!==e.row?(o=this.featureHeight/2,a=this.margin+this.squishedRowHeight*e.row):"EXPANDED"===this.displayMode&&void 0!==e.row?(o=this.featureHeight,a=this.margin+this.expandedRowHeight*e.row):(o=this.featureHeight,a=this.margin);const c=s.pixelWidth,l=a+o/2,h=o/2,d=l-h/2,u=e.exons?e.exons.length:0,f=Ad(e,t,i),p=this.arrowSpacing,g="+"===e.strand?1:"-"===e.strand?-1:0;if(0===u){const e=Math.max(0,f.px),t=Math.min(c,f.px1),i=t-e;if(r.fillRect(e,a,i,o),0!==g){r.fillStyle="white",r.strokeStyle="white";for(let i=e+p/2;i<t;i+=p)xo.strokeLine(r,i-2*g,l-2,i,l),xo.strokeLine(r,i-2*g,l+2,i,l);r.fillStyle=n,r.strokeStyle=n}}else{xo.strokeLine(r,f.px+1,l,f.px1-1,l);const u=Math.max(0,f.px)+p/2,m=Math.min(c,f.px1);for(let e=u;e<m;e+=p)xo.strokeLine(r,e-2*g,l-2,e,l),xo.strokeLine(r,e-2*g,l+2,e,l);for(let u=0;u<e.exons.length;u++){const f=e.exons[u];let m,w=Math.round((f.start-t)/i),b=Math.round((f.end-t)/i),F=Math.max(1,b-w);if(!(w+F<0)){if(w>c)break;if(f.utr)r.fillRect(w,d,F,h);else{if(f.cdStart&&(m=Math.round((f.cdStart-t)/i),r.fillRect(w,d,m-w,h),F-=m-w,w=m),f.cdEnd&&(m=Math.round((f.cdEnd-t)/i),r.fillRect(m,d,b-m,h),F-=b-m,b=m),F=Math.max(F,1),r.fillRect(w,a,F,o),void 0!==f.readingFrame&&s.bpPerPixel<yd&&s.sequenceInterval){const i=u>0&&void 0!==e.exons[u-1].readingFrame?e.exons[u-1]:void 0,n=u<e.exons.length-1&&void 0!==e.exons[u+1].readingFrame?e.exons[u+1]:void 0;_d.call(this,r,e.strand,i,f,n,t,s.bpPerPixel,a,o,s.sequenceInterval)}if(F>p+5&&0!==g&&s.bpPerPixel>yd){r.fillStyle="white",r.strokeStyle="white";for(let e=w+p/2;e<b;e+=p)xo.strokeLine(r,e-2*g,l-2,e,l),xo.strokeLine(r,e-2*g,l+2,e,l);r.fillStyle=n,r.strokeStyle=n}}}}}s.drawLabel&&"SQUISHED"!==this.displayMode&&xd.call(this,r,e,f.px,f.px1,a,s.referenceFrame,s)}finally{r.restore()}}function _d(e,t,i,n,r,s,o,a,c,l){const h=["rgb(124,124,204)","rgb(12, 12, 120)"];e.save();const d=(t,i,n,r,d,u)=>{const f=Math.round((i-s)/o),p=Math.round((n-s)/o)-f;let g;if(void 0===r){if(l.hasSequence(i,n)){const e=l.getSequence(i,n);if(e&&3===e.length){const i="+"===t?e:cc(e.split("").reverse().join(""));g=qd[i]}}}else g=r;e.fillStyle="M"===r||"M"===g&&0===u?"#83f902":"STOP"===g?"#ff2101":h[d],e.fillRect(f,a,p,c),g&&(e.save(),((t,i,n,r,s)=>{"STOP"===s&&(s="*");const o=e.measureText(s).width;xo.fillText(e,s,n+(i-o)/2,r-4,{fillStyle:"#ffffff"})})(0,p,f,a+c,g),e.restore());const m=n-i;return m>0&&m<3?{start:i,end:n}:void 0},u=bd(n);let f,p,g,m,w,b=Fd(n),F=vd(n),v=1;if("+"===t){for(u>0&&(b+=u),v=1,w=0,f=b;f<F;w++,f+=3)m=v%2,p=Math.min(F,f+3),g=d(t,f,p,void 0,v%2,w),++v;if(u>0||g){const e=u>0?kd.call(this,t,u,b-u,b,g,i,n,r,l):kd.call(this,t,void 0,void 0,void 0,g,i,n,r,l);if(e){const{left:i,rite:n}=e;i&&d(t,b-u,b,i.aminoAcidLetter,0,void 0),n&&d(t,g.start,g.end,n.aminoAcidLetter,m,void 0)}}}else{for(u>0&&(F-=u),v=1,w=0,w=0,p=F;p>b;w++,p-=3)m=v%2,f=Math.max(b,p-3),g=d(t,f,p,void 0,v%2,w),++v;if(u>0||g){const e=u>0?kd.call(this,t,u,F,F+u,g,i,n,r,l):kd.call(this,t,void 0,void 0,void 0,g,i,n,r,l);if(e){const{left:i,rite:n}=e;n&&d(t,F,F+u,n.aminoAcidLetter,0,void 0),i&&d(t,g.start,g.end,i.aminoAcidLetter,m,void 0)}}}e.restore()}function xd(e,t,i,n,r,s,o){try{e.save();let s=t.name;if(void 0===s&&t.gene&&(s=t.gene.name),void 0===s&&(s=t.id||t.ID),!s||"."===s)return;let a,c=(i+n)/2;"COLLAPSED"===this.displayMode&&"SLANT"===this.labelDisplayMode&&(a={rotate:{angle:45}});const l=function(e,t){return t?e+20:e+25}(r,a);let h=this.getColorForFeature(t),d=this.browser.qtlSelections.hasPhenotype(t.name);const u={textAlign:"SLANT"===this.labelDisplayMode?void 0:"center",fillStyle:h,strokeStyle:h},f=e.measureText(s),p=c-f.width/2,g=c+f.width/2,m=o.rowLastLabelX[t.row]||-Number.MAX_SAFE_INTEGER;(o.labelAllFeatures||p>m||d)&&(o.rowLastLabelX[t.row]=g,"y"===o.axis?(e.save(),xo.labelTransformWithContext(e,c),xo.fillText(e,s,c,l,u,a),e.restore()):(e.clearRect(c-f.width/2-1,l-f.actualBoundingBoxAscent-1,f.width+2,f.actualBoundingBoxAscent+f.actualBoundingBoxDescent+2),xo.fillText(e,s,c,l,u,a)))}finally{e.restore()}}function kd(e,t,i,n,r,s,o,a,c){let l,h,d="",u="",f="";const p={left:void 0,rite:void 0};if("+"===e){if(t){if(u=c.getSequence(i,n),!u)return;if([l,h]=[vd(s)-(3-t),vd(s)],d=c.getSequence(l,h),!d)return;f=d+u,p.left={triplet:f,aminoAcidLetter:qd[f]}}if(r){if(d=c.getSequence(r.start,r.end),!d)return;const e=bd(a),t=Fd(a);if(u=c.getSequence(t,t+e),!u)return;f=d+u,p.rite={triplet:f,aminoAcidLetter:qd[f]}}}else{if(t){if(d=c.getSequence(i,n),void 0===d)return;if([l,h]=[Fd(a),Fd(a)+(3-t)],u=c.getSequence(l,h),void 0===u)return;f=d+u,f=cc(f.split("").reverse().join("")),p.rite={triplet:f,aminoAcidLetter:qd[f]}}if(r){if(u=c.getSequence(r.start,r.end),void 0===u)return;const e=bd(s),t=vd(s);if(d=c.getSequence(t-e,t),void 0===d)return;f=d+u,f=cc(f.split("").reverse().join("")),p.left={triplet:f,aminoAcidLetter:qd[f]}}}return p}const Id=new Set(["nonsense","missense","stop-loss","frameshift","cds-indel"]),Sd=new Set(["coding-synon"]),Ed=new Set(["splice-3","splice-5"]),Nd=new Set(["untranslated-5","untranslated-3"]);function Bd(e,t,i,n,r){var s,o,a,c,l,h,d=Ad(e,t,i),u=this.margin,f=this.snpColors.length;switch(s="squished"===this.displayMode?this.squishedRowHeight:this.expandedRowHeight,this.colorBy){case"function":c=e.func,h=c.split(","),l=h.map((function(e){return Id.has(e)||Ed.has(e)?f-1:Sd.has(e)?f-2:Nd.has(e)?f-3:0})),o=l.reduce((function(e,t){return Math.max(e,t)}));break;case"class":o="deletion"===(a=e.class)?f-1:"mnp"===a?f-2:"microsatellite"===a||"named"===a?f-3:0}r.fillStyle=this.snpColors[o],r.fillRect(d.px,u,d.pw,s)}function Md(e,t,i,n,r){const s="EXPANDED"===this.displayMode?this.expandedRowHeight:this.squishedRowHeight;let o=this.margin;"COLLAPSED"!==this.displayMode&&void 0!==e.row&&(o+=e.row*s);const a=o+.5*s,c=a-.5*s,l=a+.5*s,h=Math.round((e.junction_left-t)/i),d=Math.round((e.junction_right-t)/i);r.beginPath(),r.moveTo(h,a),r.bezierCurveTo(h,c,d,c,d,a),r.lineWidth=1+Math.log(e.num_junction_reads)/Math.log(2),r.strokeStyle="blue",r.stroke();const u=e.spanning_frag_coords;for(let e=0;e<u.length;e++){const n=u[e],s=Math.round((n.left-t)/i),o=Math.round((n.right-t)/i);r.beginPath(),r.moveTo(s,a),r.bezierCurveTo(s,l,o,l,o,a),r.lineWidth=1,r.strokeStyle="purple",r.stroke()}}class Rd extends Hl{static defaults={type:"annotation",maxRows:1e3,displayMode:"EXPANDED",margin:10,featureHeight:14,autoHeight:!1,useScore:!1};constructor(e,t){super(e,t)}init(e){super.init(e),this.labelDisplayMode=e.labelDisplayMode,e._featureSource?(this.featureSource=e._featureSource,delete e._featureSource):"blat"!==e.type&&(this.featureSource=e.featureSource?e.featureSource:wd(e,this.browser.genome)),"FusionJuncSpan"===e.type?(this.render=e.render||Md,this.squishedRowHeight=e.squishedRowHeight||50,this.expandedRowHeight=e.expandedRowHeight||50,this.height=e.height||this.margin+2*this.expandedRowHeight):"snp"===e.type?(this.render=e.render||Bd,this.snpColors=["rgb(0,0,0)","rgb(0,0,255)","rgb(0,255,0)","rgb(255,0,0)"],this.colorBy="function",this.expandedRowHeight=e.expandedRowHeight||10,this.squishedRowHeight=e.squishedRowHeight||5,this.height=e.height||30):(this.render=e.render||Cd,this.arrowSpacing=30,function(e){e.browser.on&&(e.browser.on("trackdragend",t),e.browser.on("trackremoved",i));function t(){e.trackView&&"SQUISHED"!==e.displayMode&&e.trackView.updateViews()}function i(n){e.browser.un&&e===n&&(e.browser.un("trackdragend",t),e.browser.un("trackremoved",i))}}(this),this.squishedRowHeight=e.squishedRowHeight||15,this.expandedRowHeight=e.expandedRowHeight||30,this.height=e.height||this.margin+2*this.expandedRowHeight,e.colorBy&&(e.colorBy.field&&(e.colorTable=e.colorBy.pallete||e.colorBy.palette,e.colorBy=e.colorBy.field),this.colorBy=e.colorBy,e.colorTable?this.colorTable=new ao(e.colorTable):this.colorTable=new oo("Set1")))}async postInit(){if("function"!=typeof this.featureSource.getHeader||(this.header=await this.featureSource.getHeader(),!this.disposed))return this.header&&this.setTrackProperties(this.header),void 0===this.visibilityWindow&&"function"==typeof this.featureSource.defaultVisibilityWindow&&(this.visibilityWindow=await this.featureSource.defaultVisibilityWindow()),this}get searchable(){return this.featureSource.searchable}async search(e){return this.featureSource&&this.featureSource.searchable?this.featureSource.search(e):void 0}get supportsWholeGenome(){return void 0!==this.config.supportsWholeGenome?this.config.supportsWholeGenome:this.featureSource&&"function"==typeof this.featureSource.supportsWholeGenome?this.featureSource.supportsWholeGenome():!(void 0!==this.visibilityWindow||!1!==this.config.indexed&&this.config.indexURL)||void 0}async getFeatures(e,t,i,n){const r=this.visibilityWindow;return this.featureSource.getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:r})}computePixelHeight(e){if("COLLAPSED"===this.displayMode)return this.margin+this.expandedRowHeight;{let t=0;if(e&&"function"==typeof e.forEach)for(let i of e)i.row&&i.row>t&&(t=i.row);return this.margin+(t+1)*("SQUISHED"===this.displayMode?this.squishedRowHeight:this.expandedRowHeight)}}draw(e){const{features:t,context:i,bpPerPixel:n,bpStart:r,bpEnd:s,pixelWidth:o,pixelHeight:a,referenceFrame:c}=e;if(n<yd&&(e.sequenceInterval=this.browser.genome.getSequenceInterval(c.chr,r,s)),this.isMergedTrack||xo.fillRect(i,0,e.pixelTop,o,a,{fillStyle:"rgb(255, 255, 255)"}),t){const c=[];e.rowLastX=[],e.rowLastLabelX=[];for(let i of t)if(i.start>r&&i.end<s){const t="COLLAPSED"===this.displayMode?0:i.row||0;c[t]?c[t]++:c[t]=1,e.rowLastX[t]=-Number.MAX_SAFE_INTEGER,e.rowLastLabelX[t]=-Number.MAX_SAFE_INTEGER}const l=o/Math.max(1,Math.max(...c.filter((e=>!isNaN(e)))));let h=[];const d=[];for(let o of t){if(o.end<r)continue;if(o.start>s)break;"COLLAPSED"===this.displayMode&&this.browser.qtlSelections.hasPhenotype(o.name)&&d.push(o);const t="COLLAPSED"===this.displayMode?0:o.row;e.drawLabel=e.labelAllFeatures||l>10;const c=Math.ceil((o.end-r)/n),u=h[t];if(!u||c>u){this.render.call(this,o,r,n,a,i,e);const s=Math.floor((o.start-r)/n);u&&s-u<=0&&(i.globalAlpha=.5,xo.strokeLine(i,s,0,s,a,{strokeStyle:"rgb(255, 255, 255)"}),i.globalAlpha=1),h[t]=c}}for(let t of d)e.drawLabel=!0,this.render.call(this,t,r,n,a,i,e)}else console.log("No feature list")}clickedFeatures(e){const t=e.y-this.margin,i=super.clickedFeatures(e);let n;switch(this.displayMode){case"SQUISHED":n=Math.floor(t/this.squishedRowHeight);break;case"EXPANDED":n=Math.floor(t/this.expandedRowHeight);break;default:n=void 0}return i.filter((function(e){return void 0===n||void 0===e.row||n===e.row}))}popupData(e,t){void 0===t&&(t=this.clickedFeatures(e));const i=e.genomicLocation,n=[];for(let e of t){const t=e._f||e,r="function"==typeof t.popupData?t.popupData(i):this.extractPopupData(t);if(r){n.length>0&&n.push("<hr/><hr/>");const s=this.infoURL||this.config.infoURL;for(let t of r)if(n.push(t),s&&t.name&&"name"===t.name.toLowerCase()&&t.value&&Mt(t.value)&&!t.value.startsWith("<")){const i=s.replace("$$",e.name);t.value=`<a target=_blank href=${i}>${t.value}</a>`}const o="gff"===this.config.format||"gff3"===this.config.format||"gtf"===this.config.format;if(t.exons&&t.exons.length>1)for(let e=0;e<t.exons.length;e++){const r=t.exons[e];if(i>=r.start&&i<=r.end){const i=o?r.number:"-"===t.strand?t.exons.length-e:e+1;i&&(n.push("<hr/>"),n.push({name:"Exon Number",value:i}));break}}}}return n}menuItemList(){const e=[];if(this.render===Bd){e.push("<hr/>");for(const i of["function","class"]){const n=Bt(Dl(`Color by ${i}`,i===this.colorBy));function r(){this.colorBy=i,this.trackView.repaintViews()}e.push({object:n,click:r})}}e.push("<hr/>");const t={COLLAPSED:"Collapse",SQUISHED:"Squish",EXPANDED:"Expand"};for(const s of["COLLAPSED","SQUISHED","EXPANDED"]){const o=Bt(Dl(t[s],s===this.displayMode));function a(){this.displayMode=s,this.config.displayMode=s,this.trackView.checkContentHeight(),this.trackView.repaintViews()}e.push({object:o,click:a})}return e}contextMenuItemList(e){const t=this.clickedFeatures(e);if(void 0===t||0===t.length)return;t.length>1&&t.sort(((e,t)=>t.end-t.start-(e.end-e.start)));const i=t[0];if(i.end-i.start<=1e6){const e=[{label:"View feature sequence",click:async()=>{let e=await this.browser.genome.getSequence(i.chr,i.start,i.end);e?"-"===i.strand&&(e=lc(e)):e="Unknown sequence",this.browser.alert.present(e)}}];return Za()&&void 0!==navigator.clipboard&&e.push({label:"Copy feature sequence",click:async()=>{let e=await this.browser.genome.getSequence(i.chr,i.start,i.end);e?"-"===i.strand&&(e=lc(e)):e="Unknown sequence";try{await navigator.clipboard.writeText(e)}catch(e){console.error(e),this.browser.alert.present(`error copying sequence to clipboard ${e}`)}}}),e.push("<hr/>"),e}}description(){if(Bd===this.render){let e="<html>"+this.name+"<hr/>";return e+="<em>Color By Function:</em><br>",e+='<span style="color:red">Red</span>: Coding-Non-Synonymous, Splice Site<br>',e+='<span style="color:green">Green</span>: Coding-Synonymous<br>',e+='<span style="color:blue">Blue</span>: Untranslated<br>',e+='<span style="color:black">Black</span>: Intron, Locus, Unknown<br><br>',e+="<em>Color By Class:</em><br>",e+='<span style="color:red">Red</span>: Deletion<br>',e+='<span style="color:green">Green</span>: MNP<br>',e+='<span style="color:blue">Blue</span>: Microsatellite, Named<br>',e+='<span style="color:black">Black</span>: Indel, Insertion, SNP',e+="</html>",e}return super.description()}getColorForFeature(e){const t=e._f||e;let i;if(e.name&&this.browser.qtlSelections.hasPhenotype(e.name))i=this.browser.qtlSelections.colorForGene(e.name);else if(this.altColor&&"-"===t.strand)i="function"==typeof this.altColor?this.altColor(t):this.altColor;else if(this.color)i="function"==typeof this.color?this.color(t):this.color;else if(this.colorBy){const e=t.getAttributeValue?t.getAttributeValue(this.colorBy):t[this.colorBy];i=this.colorTable.getColor(e)}else t.color&&(i=t.color);if(i||(i="rgb(0, 0, 150)"),t.alpha&&1!==t.alpha)i=_s.addAlpha(i,t.alpha);else if(this.useScore&&t.score&&!Number.isNaN(t.score)){const e=function(e,t,i){const n=(t-e)/9,r=Math.floor((i-e)/n);return Math.min(1,.2+.8*r/9)}(this.config.min?this.config.min:this.viewLimitMin?this.viewLimitMin:0,this.config.max?this.config.max:this.viewLimitMax?this.viewLimitMax:1e3,t.score);t.alpha=e,i=_s.addAlpha(i,e)}return i}dispose(){this.trackView=void 0}}class Dd{constructor(t){if(this.config=t,this.browser=t.browser,this.columnFormat=t.columnFormat,this.tableRowSelectionList=[],this.tableDOM=e({class:"igv-roi-table"}),t.width){let[e]=t.width.split("px");e=parseInt(e,10),this.tableDOM.style.width=`${Math.min(e,1600)}px`}t.parent.appendChild(this.tableDOM),this.headerDOM=t,this.tableColumnTitles=this.tableDOM,this.tableRowContainer=this.tableDOM,this.footerDOM=t.gotoButtonHandler}set headerDOM({browser:t,parent:i,headerTitle:n,dismissHandler:r}){const s=e();this.tableDOM.appendChild(s);const o=e();s.appendChild(o),o.innerHTML=n;const a=e();s.appendChild(a),a.appendChild(l("times")),this.boundDismissHandler=function(e){e.stopPropagation(),r()}.bind(this),a.addEventListener("click",this.boundDismissHandler);const{y:c}=t.root.getBoundingClientRect(),{y:h}=i.getBoundingClientRect(),d=-(h-c);p(this.tableDOM,s,{minX:0,minY:d}),this.tableDOM.style.display="none",this._headerDOM=s}set tableColumnTitles(t){const i=e({class:"igv-roi-table-column-titles"});t.appendChild(i);for(const{label:t,width:n}of this.columnFormat){const r=e();i.appendChild(r),r.style.width=n,r.innerText=t}this._tableColumnTitlesDOM=i}get tableColumnTitles(){return this._tableColumnTitlesDOM}set tableRowContainer(t){const i=e({class:"igv-roi-table-row-container"});t.appendChild(i),this._tableRowContainerDOM=i}get tableRowContainer(){return this._tableRowContainerDOM}set footerDOM(t){const i=e();this.tableDOM.appendChild(i);const n=e({class:"igv-roi-table-button"});i.appendChild(n),n.id="igv-roi-table-view-button",n.textContent="Go To",n.style.pointerEvents="none",this._footerDOM=i,this.gotoButton=n,this.boundGotoButtonHandler=t.bind(this),this.gotoButton.addEventListener("click",this.boundGotoButtonHandler)}tableRowDOMHelper(e){e.addEventListener("mousedown",(t=>{t.stopPropagation(),e.classList.toggle("igv-roi-table-row-selected"),e.classList.contains("igv-roi-table-row-selected")?e.classList.remove("igv-roi-table-row-hover"):e.classList.add("igv-roi-table-row-hover"),this.setTableRowSelectionState(e.classList.contains("igv-roi-table-row-selected"))})),e.addEventListener("mouseover",(t=>{e.classList.contains("igv-roi-table-row-selected")?e.classList.remove("igv-roi-table-row-hover"):e.classList.add("igv-roi-table-row-hover")})),e.addEventListener("mouseout",(t=>{e.classList.remove("igv-roi-table-row-hover")}))}clearTable(){const e=this.tableRowContainer.querySelectorAll(".igv-roi-table-row");for(let t of e)t.remove()}setTableRowSelectionState(e){e?this.tableRowSelectionList.push(1):this.tableRowSelectionList.pop(),this.gotoButton.style.pointerEvents=this.tableRowSelectionList.length>0?"auto":"none"}present(){this.tableDOM.style.left="0px";const{y:e}=this.browser.root.getBoundingClientRect(),{y:t}=this.config.parent.getBoundingClientRect();this.tableDOM.style.top=e-t+"px",this.tableDOM.style.display="flex"}dismiss(){this.tableDOM.style.display="none"}isVisible(){return"none"!==this.tableDOM.style.display}dispose(){this.tableDOM.innerHTML="",this.tableDOM.remove();for(const e of Object.keys(this))this[e]=void 0;document.removeEventListener("click",this.boundDismissHandler)}}class Td extends Dd{constructor(e){super(Object.assign({width:"1024px"},e)),this.descriptionDOM=e}set descriptionDOM(t){if(t.description){let i;i=e({class:"igv-roi-table-description"}),this.tableDOM.insertBefore(i,this.tableColumnTitles),i.style.height="auto",i.innerHTML="BLAT result for query sequence:",i=e({class:"igv-roi-table-description"}),this.tableDOM.insertBefore(i,this.tableColumnTitles),i.style.height="auto",i.style.maxHeight="128px",i.innerHTML=t.description,i=e({class:"igv-roi-table-goto-explainer"}),this.tableDOM.insertBefore(i,this.tableColumnTitles),i.innerHTML="Select one or more rows and click Go To to view the regions"}}tableRowDOM(t){const i=e({class:"igv-roi-table-row"}),n=t.map((e=>isFinite(e)?Rt(e):e));for(let t=0;t<n.length;t++){const r=e();i.appendChild(r);const s=this.columnFormat[t];r.style.width=s.width||"fit-content",r.innerText=n[t]}return this.tableRowDOMHelper(i),i}renderTable(e){if(Array.from(this.tableRowContainer.querySelectorAll(".igv-roi-table-row")).forEach((e=>e.remove())),e.length>0)for(let t of e){const e=this.tableRowDOM(t);this.tableRowContainer.appendChild(e)}}static getColumnFormatConfiguration(){return[{label:"chr",width:"7%"},{label:"start",width:"12%"},{label:"end",width:"12%"},{label:"strand",width:"5%"},{label:"score",width:"5%"},{label:"match",width:"5%"},{label:"mis-match",width:"7%"},{label:"rep. match",width:"7%"},{label:"N's",width:"3%"},{label:"Q gap count",width:"9%"},{label:"Q gap bases",width:"9%"},{label:"T gap count",width:"9%"},{label:"T gap bases",width:"9%"}]}static gotoButtonHandler(e){e.stopPropagation();const t=this.tableDOM.querySelectorAll(".igv-roi-table-row-selected"),i=[];for(const e of t){const t=[];e.querySelectorAll("div").forEach((e=>t.push(e.innerText)));const[n,r,s]=t;i.push(`${n}:${r}-${s}`)}for(const e of this.tableDOM.querySelectorAll(".igv-roi-table-row"))e.classList.remove("igv-roi-table-row-selected");this.setTableRowSelectionState(!1),this.browser.search(i.join(" "))}}const Ld="https://igv.org/services/blatUCSC.php";async function zd({url:e,userSeq:t,db:i}){if(e=e||Ld,!i)throw Error("Blat database is not defined");const n=await async function(e="",t,i){const n=new URLSearchParams;n.append("userSeq",t),n.append("db",i);const r=await fetch(e,{method:"post",body:n});return r.json()}(e,t,i);n.fields;return n.blat.map(Kc)}const Hd=25e3;class Pd extends Rd{constructor(e,t){super(e,t),this.name||(this.name="Blat Results"),this.sequence=e.sequence,this.table=void 0,e.features&&(this._features=e.features,this.featureSource=new cd({features:e.features},this.browser.genome),delete e.features)}async postInit(){if(!this.featureSource){const e=this.browser.genome.id,t=this.browser.config.blatServerURL,i=await zd({url:t,userSeq:this.sequence,db:e});this._features=i,this.featureSource=new cd({features:i},this.browser.genome)}}openTableView(){if(void 0===this.table){const e=this._features.map((e=>[e.chr,e.start+1,e.end,e.strand,e.score,e.matches,e.misMatches,e.repMatches,e.nCount,e.qNumInsert,e.qBaseInsert,e.tNumInsert,e.tBaseInsert])),t={browser:this.browser,parent:this.browser.columnContainer,headerTitle:this.config.title,description:this.sequence,dismissHandler:()=>{this.table.dismiss(),this.table.dispose(),this.table=void 0},columnFormat:Td.getColumnFormatConfiguration(),gotoButtonHandler:Td.gotoButtonHandler};this.table=new Td(t),this.table.renderTable(e)}this.table.present()}menuItemList(){const e=super.menuItemList();return e.push("<hr/>"),e.push({label:"Open table view",click:function(){this.openTableView()}}),e}dispose(){super.dispose(),this.table&&this.table.popover.parentElement.removeChild(this.table.popover)}}async function Od({sequence:e,browser:t,name:i,title:n}){if(e.length>Hd)t.alert.present(`Sequence size exceeds maximum allowed length (${e.length} > 25000)`);else try{const r=t.genome.id,s=t.config.blatServerURL||"https://igv.org/services/blatUCSC.php",o={type:"blat",name:i||"blat results",title:n||"blat results",sequence:e,altColor:"rgb(176, 176, 236)",color:"rgb(236, 176, 176)",searchable:!1,features:await zd({url:s,userSeq:e,db:r})};(await t.loadTrack(o)).openTableView()}catch(e){t.alert.present(`Error performing blat search:  ${e}`)}}const Ud=Number.MIN_SAFE_INTEGER,qd={TTT:"F",TTC:"F",TTA:"L",TTG:"L",CTT:"L",CTC:"L",CTA:"L",CTG:"L",ATT:"I",ATC:"I",ATA:"I",ATG:"M",GTT:"V",GTC:"V",GTA:"V",GTG:"V",TCT:"S",TCC:"S",TCA:"S",TCG:"S",CCT:"P",CCC:"P",CCA:"P",CCG:"P",ACT:"T",ACC:"T",ACA:"T",ACG:"T",GCT:"A",GCC:"A",GCA:"A",GCG:"A",TAT:"Y",TAC:"Y",TAA:"STOP",TAG:"STOP",CAT:"H",CAC:"H",CAA:"Q",CAG:"Q",AAT:"N",AAC:"N",AAA:"K",AAG:"K",GAT:"D",GAC:"D",GAA:"E",GAG:"E",TGT:"C",TGC:"C",TGA:"STOP",TGG:"W",CGT:"R",CGC:"R",CGA:"R",CGG:"R",AGT:"S",AGC:"S",AGA:"R",AGG:"R",GGT:"G",GGC:"G",GGA:"G",GGG:"G"},Qd={},Vd=["A","G","C","T","Y","R","W","S","K","M","D","V","H","B","N","X"],jd=["T","C","G","A","R","Y","W","S","M","K","H","B","D","V","N","X"];for(let IA=0;IA<Vd.length;IA++)Qd[Vd[IA]]=jd[IA],Qd[Vd[IA].toLowerCase()]=jd[IA].toLowerCase();const Wd=115;class Gd{constructor(e,t){this.config=e,this.browser=t,this.type="sequence",this.removable=!0===e.removable,this.name=e.name,this.id=e.id,this.sequenceType=e.sequenceType||"dna",this.disableButtons=!1,this.order=e.order||Ud,this.ignoreTrackMenu=!1,this.reversed=!0===e.reversed,this.frameTranslate=!0===e.frameTranslate,this.height=this.frameTranslate?Wd:25,e.url&&(e.fastaURL=e.url),e.fastaURL||(this.id=e.id||"sequence")}menuItemList(){return[{name:this.reversed?"Forward":"Reverse",click:()=>{this.reversed=!this.reversed,this.trackView.repaintViews()}},{name:this.frameTranslate?"Close Translation":"Three-frame Translate",click:()=>{if(this.frameTranslate=!this.frameTranslate,this.frameTranslate){for(let e of this.trackView.viewports)e.setContentHeight(Wd);this.trackView.setTrackHeight(Wd)}else{for(let e of this.trackView.viewports)e.setContentHeight(25);this.trackView.setTrackHeight(25)}this.trackView.repaintViews()}}]}contextMenuItemList(e){const t=e.viewport;if(t.referenceFrame.bpPerPixel<=1){const e=t.getWidth()*t.referenceFrame.bpPerPixel,i=t.referenceFrame.chr,n=Math.floor(t.referenceFrame.start),r=Math.ceil(n+e),s=[{label:this.reversed?"View visible sequence (reversed)...":"View visible sequence...",click:async()=>{let e=await this.browser.genome.getSequence(i,n,r);e?this.reversed&&(e=lc(e)):e="Unknown sequence",this.browser.alert.present(e)}}];return Za()&&s.push({label:"Copy visible sequence",click:async()=>{let e=await this.browser.genome.getSequence(i,n,r);e?this.reversed&&(e=lc(e)):e="Unknown sequence";try{await navigator.clipboard.writeText(e)}catch(e){console.error(e),this.browser.alert.present(`error copying sequence to clipboard ${e}`)}}}),s.push({label:"BLAT read sequence",click:async()=>{let e=await this.browser.genome.getSequence(i,n,r);if(e){this.reversed&&(e=lc(e));const t=`blat: ${i}:${n+1}-${r}`,s=`blat: ${i}:${n+1}-${r}`;Od({sequence:e,browser:this.browser,name:t,title:s})}}}),s.push("<hr/>"),s}}translateSequence(e){const t=[[],[],[]];for(let i of[0,1,2]){let n=i;for(;e.length-n>=3;){let r=e.slice(n,n+3);this.reversed&&(r=r.split("").reverse().join(""));const s=qd[r.toUpperCase()]||"";t[i].push({codons:r,aminoA:s}),n+=3}}return t}async getSequenceSource(){return this.config.fastaURL?(this.fasta||(this.fasta=new $d(this.config,this.browser.genome),await this.fasta.init()),this.fasta):this.browser.genome}async getFeatures(e,t,i,n){if(t=Math.floor(t),i=Math.floor(i),n&&n>10)return null;{const n=await this.getSequenceSource();return{bpStart:t,sequence:await n.getSequence(e,t,i)}}}draw(e){const t=e.context;if(e.features){let i=e.features.sequence;if(!i)return;this.reversed&&(i=i.split("").map((function(e){return Qd[e]})).join(""));const n=e.features.bpStart,r=1+e.bpStart+e.pixelWidth*e.bpPerPixel;for(let s=Math.floor(e.bpStart);s<=r;s++){const r=Math.floor(s-n);if(r>=0&&r<i.length){const n=(s-e.bpStart)/e.bpPerPixel,o=1/e.bpPerPixel,a=i[r],c=this.fillColor(a.toUpperCase());if(e.bpPerPixel>.1)xo.fillRect(t,n,5,o,10,{fillStyle:c});else{const i=n+.5*(o-t.measureText(a).width);"y"===e.axis?(t.save(),xo.labelTransformWithContext(t,i),xo.strokeText(t,a,i,15,{strokeStyle:c}),t.restore()):xo.strokeText(t,a,i,15,{strokeStyle:c})}}}if(this.frameTranslate){let r=25;const s=this.translateSequence(i);for(let i=0;i<s.length;i++){const o=s[i];for(let s=0;s<o.length;s++){let a=0==s%2?"rgb(160,160,160)":"rgb(224,224,224)";const c=o[s],l=n+i+3*s-e.bpStart,h=Math.floor(l/e.bpPerPixel),d=Math.floor((l+3)/e.bpPerPixel),u=Math.round((h+d)/2);if(d<0)continue;if(h>e.pixelWidth)break;let f=c.aminoA;c.aminoA.indexOf("STOP")>-1?(a="rgb(255, 0, 0)",f="STOP"):"M"===c.aminoA&&(a="rgb(0, 153, 0)",f="START"),xo.fillRect(t,h,r,d-h,25,{fillStyle:a}),e.bpPerPixel<=.1&&xo.strokeText(t,f,u-t.measureText(f).width/2,r+15)}r+=30}}}}get supportsWholeGenome(){return!1}computePixelHeight(e){return this.height=this.frameTranslate?Wd:25,this.height}fillColor(e){return this.color?this.color:"dna"===this.sequenceType?this.browser.nucleotideColors[e]||"gray":"rgb(0, 0, 150)"}getState(){const e={type:"sequence"};return this.order!==Ud&&(e.order=this.order),this.reversed&&(e.revealed=!0),e}}class $d{constructor(e,t){this.config=e,this.genome=t}async init(){this.fasta=await Bc(this.config),this.chrNameMap=new Map;for(let e of this.fasta.chromosomeNames)this.chrNameMap.set(this.genome.getChromosomeName(e),e)}async getSequence(e,t,i){const n=this.chrNameMap.has(e)?this.chrNameMap.get(e):e;return this.fasta.getSequence(n,t,i)}}class Kd{constructor(e,t,i,n){this.guid=s(),this.trackView=e,this.referenceFrame=i,this.browser=e.browser,this.$viewport=Bt('<div class="igv-viewport">'),t.appendChild(this.$viewport.get(0)),e.track.height&&(this.$viewport.get(0).style.height=`${e.track.height}px`),e.track instanceof Gd&&(this.alert=new La(this.$viewport.get(0))),this.contentTop=0,this.contentHeight=this.$viewport.height(),this.$viewport.width(n),this.initializationHelper()}initializationHelper(){}showMessage(e){this.messageDiv||(this.messageDiv=document.createElement("div"),this.messageDiv.className="igv-viewport-message",this.$viewport.append(Bt(this.messageDiv))),this.messageDiv.textContent=e,this.messageDiv.style.display="inline-block"}hideMessage(e){this.messageDiv&&(this.messageDiv.style.display="none")}setTrackLabel(e){}startSpinner(){}stopSpinner(){}checkZoomIn(){return!0}shift(){}setTop(e){this.contentTop=e,this.$viewport.height()}async loadFeatures(){}clearCache(){}repaint(){}draw(e,t,i){console.log("Viewport - draw(drawConfiguration, features, roiFeatures)")}checkContentHeight(e){let t=this.trackView.track;if(e=e||this.cachedFeatures,"FILL"===t.displayMode)this.setContentHeight(this.$viewport.height());else if("function"==typeof t.computePixelHeight&&e&&e.length>0){let i=t.computePixelHeight(e);i!==this.contentHeight&&this.setContentHeight(i)}}getContentHeight(){return this.contentHeight}setContentHeight(e){this.contentHeight=e}isLoading(){return!1}saveSVG(){}isVisible(){return this.$viewport.width()}setWidth(e){this.$viewport.width(e)}getWidth(){return this.$viewport.width()}getContentTop(){return this.contentTop}containsPosition(e,t){console.log("Viewport - containsPosition(chr, position)")}addMouseHandlers(){}removeMouseHandlers(){}dispose(){this.$viewport.get(0).remove();for(let e of Object.keys(this))this[e]=void 0}}
/*!!
     *  Canvas 2 Svg v1.0.19
     *  A low level canvas to SVG converter. Uses a mock canvas context to build an SVG document.
     *
     *  Licensed under the MIT license:
     *  http://www.opensource.org/licenses/mit-license.php
     *
     *  Author:
     *  Kerry Liu
     *
     *  Copyright (c) 2014 Gliffy Inc.
     */function Yd(e,t){var i,n=Object.keys(t);for(i=0;i<n.length;i++)e=e.replace(new RegExp("\\{"+n[i]+"\\}","gi"),t[n[i]]);return e}function Xd(e){var t,i,n;if(!e)throw new Error("cannot create a random attribute name for an undefined object");t="ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",i="";do{for(i="",n=0;n<12;n++)i+=t[Math.floor(51*Math.random())]}while(e[i]);return i}function Zd(e){var t={alphabetic:"alphabetic",hanging:"hanging",top:"text-before-edge",bottom:"text-after-edge",middle:"central"};return t[e]||t.alphabetic}function Jd(e){var t=Math.sqrt(e[0]*e[0]+e[1]*e[1]);return[e[0]/t,e[1]/t]}const eu=function(e,t){var i,n,r,s={};for(e=e.split(","),t=t||10,i=0;i<e.length;i+=2)n="&"+e[i+1]+";",r=parseInt(e[i],t),s[n]="&#"+r+";";return s["\\xa0"]="&#160;",s}("50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,t9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro",32),tu={strokeStyle:{svgAttr:"stroke",canvas:"#000000",svg:"none",apply:"stroke"},fillStyle:{svgAttr:"fill",canvas:"#000000",svg:null,apply:"fill"},lineCap:{svgAttr:"stroke-linecap",canvas:"butt",svg:"butt",apply:"stroke"},lineJoin:{svgAttr:"stroke-linejoin",canvas:"miter",svg:"miter",apply:"stroke"},miterLimit:{svgAttr:"stroke-miterlimit",canvas:10,svg:4,apply:"stroke"},lineWidth:{svgAttr:"stroke-width",canvas:1,svg:1,apply:"stroke"},globalAlpha:{svgAttr:"opacity",canvas:1,svg:1,apply:"fill stroke"},font:{canvas:"10px sans-serif"},shadowColor:{canvas:"#000000"},shadowOffsetX:{canvas:0},shadowOffsetY:{canvas:0},shadowBlur:{canvas:0},textAlign:{canvas:"start"},textBaseline:{canvas:"alphabetic"},lineDash:{svgAttr:"stroke-dasharray",canvas:[],svg:null,apply:"stroke"}};class iu{constructor(e,t){this.__root=e,this.__ctx=t}addColorStop(e,t){var i,n=this.__ctx.__createElement("stop");n.setAttribute("offset",e),t&&-1!==t.indexOf("rgba")?(i=/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(t),n.setAttribute("stop-color",Yd("rgb({r},{g},{b})",{r:i[1],g:i[2],b:i[3]})),n.setAttribute("stop-opacity",i[4])):n.setAttribute("stop-color",t),this.__root.appendChild(n)}}class nu{constructor(e,t){this.__root=e,this.__ctx=t}}class ru{constructor(e){if(!(this instanceof ru))return new ru(e);if(this.config=e,this.width=e.width,this.height=e.height,this.enableMirroring=e.enableMirroring||!1,this.canvas=this,this.__document=document,e.ctx?this.__ctx=e.ctx:(this.__canvas=this.__document.createElement("canvas"),this.__ctx=this.__canvas.getContext("2d")),this.isSVG=!0,this.__setDefaultStyles(),this.__stack=[this.__getStyleState()],this.__groupStack=[],this.__root=this.__createElement("svg"),this.__root.setAttribute("width",this.width),this.__root.setAttribute("height",this.height),this.__root.setAttribute("overflow","visible"),e.viewbox){const t=e.viewbox.x+" "+e.viewbox.y+" "+e.viewbox.width+" "+e.viewbox.height;this.__root.setAttribute("viewBox",t),this.viewbox=e.viewbox}this.__ids={},this.__defs=this.__createElement("defs"),this.__root.appendChild(this.__defs),this.multiLocusGap=e.multiLocusGap;let t={id:"svg_output_backdrop",width:"100%",height:"100%",fill:e.backdropColor||"white"},i=this.__createElement("rect",t);this.__root.appendChild(i),this.__rootGroup=this.__createElement("g",{id:"root-group"}),this.__root.appendChild(this.__rootGroup),this.__currentElement=this.__rootGroup}setWidth(e){this.width=e,this.__root.setAttribute("width",this.width);const t=this.config.viewbox.x+" "+this.config.viewbox.y+" "+e+" "+this.config.viewbox.height;this.__root.setAttribute("viewBox",t)}setHeight(e){this.height=e,this.__root.setAttribute("height",this.height);const t=this.config.viewbox.x+" "+this.config.viewbox.y+" "+this.config.viewbox.width+" "+e;this.__root.setAttribute("viewBox",t)}__createElement(e,t,i){void 0===t&&(t={});let n=this.__document.createElementNS("http://www.w3.org/2000/svg",e);i&&(n.setAttribute("fill","none"),n.setAttribute("stroke","none"));for(let e of Object.keys(t))n.setAttribute(e,t[e]);return n}__setDefaultStyles(){var e,t,i=Object.keys(tu);for(e=0;e<i.length;e++)this[t=i[e]]=tu[t].canvas}__applyStyleState(e){var t,i,n=Object.keys(e);for(t=0;t<n.length;t++)this[i=n[t]]=e[i]}__getStyleState(){var e,t,i={},n=Object.keys(tu);for(e=0;e<n.length;e++)i[t=n[e]]=this[t];return i}__applyStyleToCurrentElement(e){var t=this.__currentElement,i=this.__currentElementsToStyle;i&&(t.setAttribute(e,""),t=i.element,i.children.forEach((function(t){t.setAttribute(e,"")})));var n,r,s,o,a,c=Object.keys(tu);for(n=0;n<c.length;n++)if(r=tu[c[n]],s=this[c[n]],r.apply)if(s instanceof nu){if(s.__ctx)for(;s.__ctx.__defs.childNodes.length;)o=s.__ctx.__defs.childNodes[0].getAttribute("id"),this.__ids[o]=o,this.__defs.appendChild(s.__ctx.__defs.childNodes[0]);t.setAttribute(r.apply,Yd("url(#{id})",{id:s.__root.getAttribute("id")}))}else if(s instanceof iu)t.setAttribute(r.apply,Yd("url(#{id})",{id:s.__root.getAttribute("id")}));else if(r&&-1!==r.apply.indexOf(e)&&r.svg!==s)if("stroke"!==r.svgAttr&&"fill"!==r.svgAttr||!s||-1===s.indexOf("rgba")){var l=r.svgAttr;if("globalAlpha"===c[n]&&(l=e+"-"+r.svgAttr,t.getAttribute(l)))continue;t.setAttribute(l,s)}else{a=/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi.exec(s),t.setAttribute(r.svgAttr,Yd("rgb({r},{g},{b})",{r:a[1],g:a[2],b:a[3]}));var h=a[4],d=this.globalAlpha;null!=d&&(h*=d),t.setAttribute(r.svgAttr+"-opacity",h)}}__closestGroupOrSvg(e){return"g"===(e=e||this.__currentElement).nodeName||"svg"===e.nodeName?e:this.__closestGroupOrSvg(e.parentNode)}getSerializedSvg(e){var t,i,n,r,s,o=(new XMLSerializer).serializeToString(this.__root);if(e)for(t=Object.keys(eu),i=0;i<t.length;i++)n=t[i],r=eu[n],(s=new RegExp(n,"gi")).test(o)&&(o=o.replace(s,r));return o}getSvg(){return this.__root}saveWithTranslationAndClipRect(e,t,i,n,r,s){const o=`${e}_clip_rect`;let a=this.__createElement("clipPath",{id:o});this.__defs.appendChild(a);const c={x:"0",y:s.toString(),width:n.toString(),height:r.toString()};a.appendChild(this.__createElement("rect",c));const l=this.__createElement("g");l.setAttribute("transform",Yd("translate({x},{y})",{x:t,y:i})),l.setAttribute("clip-path",Yd("url(#{id})",{id:o}));const h=this.__closestGroupOrSvg();h.appendChild(l),this.__groupStack.push(h),this.__currentElement=l,this.__stack.push(this.__getStyleState())}save(){var e=this.__createElement("g"),t=this.__closestGroupOrSvg();this.__groupStack.push(t),t.appendChild(e),this.__currentElement=e,this.__stack.push(this.__getStyleState())}restore(){this.__currentElement=this.__groupStack.pop(),this.__currentElementsToStyle=null,this.__currentElement||(this.__currentElement=this.__root.childNodes[1]);var e=this.__stack.pop();this.__applyStyleState(e)}__addTransform(e){var t=this.__closestGroupOrSvg();if(t.childNodes.length>0){"path"===this.__currentElement.nodeName&&(this.__currentElementsToStyle||(this.__currentElementsToStyle={element:t,children:[]}),this.__currentElementsToStyle.children.push(this.__currentElement),this.__applyCurrentDefaultPath());var i=this.__createElement("g");t.appendChild(i),this.__currentElement=i}var n=this.__currentElement.getAttribute("transform");n?n+=" ":n="",n+=e,this.__currentElement.setAttribute("transform",n)}addTrackGroupWithTranslationAndClipRect(e,t,i,n,r,s){const o=e+"_clip_rect";let a=this.__createElement("clipPath",{id:o});this.__defs.appendChild(a),a.appendChild(this.__createElement("rect",{x:"0",y:s.toString(),width:n.toString(),height:r.toString()}));let c=this.__createElement("g");this.__rootGroup.appendChild(c),c.setAttribute("transform",Yd("translate({x},{y})",{x:t,y:i})),c.setAttribute("id",e+"_group"),c.setAttribute("clip-path",Yd("url(#{id})",{id:o})),this.__currentElement=c}scale(e,t){void 0===t&&(t=e),this.__addTransform(Yd("scale({x},{y})",{x:e,y:t}))}rotate(e){var t=180*e/Math.PI;this.__addTransform(Yd("rotate({angle},{cx},{cy})",{angle:t,cx:0,cy:0}))}translate(e,t){this.__addTransform(Yd("translate({x},{y})",{x:e,y:t}))}transform(e,t,i,n,r,s){this.__addTransform(Yd("matrix({a},{b},{c},{d},{e},{f})",{a:e,b:t,c:i,d:n,e:r,f:s}))}beginPath(){var e;this.__currentDefaultPath="",this.__currentPosition={},e=this.__createElement("path",{},!0),this.__closestGroupOrSvg().appendChild(e),this.__currentElement=e}__applyCurrentDefaultPath(){var e=this.__currentElement;"path"===e.nodeName?e.setAttribute("d",this.__currentDefaultPath):console.error("Attempted to apply path command to node",e.nodeName)}__addPathCommand(e){this.__currentDefaultPath+=" ",this.__currentDefaultPath+=e}moveTo(e,t){"path"!==this.__currentElement.nodeName&&this.beginPath(),this.__currentPosition={x:e,y:t},this.__addPathCommand(Yd("M {x} {y}",{x:e,y:t}))}closePath(){this.__currentDefaultPath&&this.__addPathCommand("Z")}lineTo(e,t){this.__currentPosition={x:e,y:t},this.__currentDefaultPath&&this.__currentDefaultPath.indexOf("M")>-1?this.__addPathCommand(Yd("L {x} {y}",{x:e,y:t})):this.__addPathCommand(Yd("M {x} {y}",{x:e,y:t}))}bezierCurveTo(e,t,i,n,r,s){this.__currentPosition={x:r,y:s},this.__addPathCommand(Yd("C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}",{cp1x:e,cp1y:t,cp2x:i,cp2y:n,x:r,y:s}))}quadraticCurveTo(e,t,i,n){this.__currentPosition={x:i,y:n},this.__addPathCommand(Yd("Q {cpx} {cpy} {x} {y}",{cpx:e,cpy:t,x:i,y:n}))}arcTo(e,t,i,n,r){var s=this.__currentPosition&&this.__currentPosition.x,o=this.__currentPosition&&this.__currentPosition.y;if(void 0!==s&&void 0!==o){if(r<0)throw new Error("IndexSizeError: The radius provided ("+r+") is negative.");if(s===e&&o===t||e===i&&t===n||0===r)this.lineTo(e,t);else{var a=Jd([s-e,o-t]),c=Jd([i-e,n-t]);if(a[0]*c[1]!=a[1]*c[0]){var l=a[0]*c[0]+a[1]*c[1],h=Math.acos(Math.abs(l)),d=Jd([a[0]+c[0],a[1]+c[1]]),u=r/Math.sin(h/2),f=e+u*d[0],p=t+u*d[1],g=[-a[1],a[0]],m=[c[1],-c[0]],w=function(e){var t=e[0];return e[1]>=0?Math.acos(t):-Math.acos(t)},b=w(g),F=w(m);this.lineTo(f+g[0]*r,p+g[1]*r),this.arc(f,p,r,b,F)}else this.lineTo(e,t)}}}stroke(){"path"===this.__currentElement.nodeName&&this.__currentElement.setAttribute("paint-order","fill stroke markers"),this.__applyCurrentDefaultPath(),this.__applyStyleToCurrentElement("stroke")}fill(){"path"===this.__currentElement.nodeName&&this.__currentElement.setAttribute("paint-order","stroke fill markers"),this.__applyCurrentDefaultPath(),this.__applyStyleToCurrentElement("fill")}rect(e,t,i,n){"path"!==this.__currentElement.nodeName&&this.beginPath(),this.moveTo(e,t),this.lineTo(e+i,t),this.lineTo(e+i,t+n),this.lineTo(e,t+n),this.lineTo(e,t),this.closePath()}fillRect(e,t,i,n){n<0&&(t+=n,n=-n),i<0&&(e+=i,i=-i);var r,s,o,a={x:e,y:t,width:i,height:n};(!this.viewbox||(r=this.viewbox,s=a,r.x<s.x+s.width&&r.x+r.width>s.x&&r.y<s.y+s.height&&r.y+r.height>s.y))&&(o=this.__createElement("rect",a,!0),this.__closestGroupOrSvg().appendChild(o),this.__currentElement=o,this.__applyStyleToCurrentElement("fill"))}strokeRect(e,t,i,n){var r;r=this.__createElement("rect",{x:e,y:t,width:i,height:n},!0),this.__closestGroupOrSvg().appendChild(r),this.__currentElement=r,this.__applyStyleToCurrentElement("stroke")}strokeEllipse(e,t,i,n,r,s,o,a){this.__ellipse(e,t,i,n,r,s,o,a,"stroke")}fillEllipse(e,t,i,n,r,s,o,a){this.__ellipse(e,t,i,n,r,s,o,a,"fill")}__ellipse(e,t,i,n,r,s,o,a,c){const l={cx:e,cy:t,rx:i,ry:n},h=this.__createElement("ellipse",l,!0);this.__closestGroupOrSvg().appendChild(h),this.__currentElement=h,this.__applyStyleToCurrentElement(c)}__clearCanvas(){for(var e=this.__closestGroupOrSvg().getAttribute("transform"),t=this.__root.childNodes[1],i=t.childNodes,n=i.length-1;n>=0;n--)i[n]&&t.removeChild(i[n]);this.__currentElement=t,this.__groupStack=[],e&&this.__addTransform(e)}clearRect(e,t,i,n){if(0!==e||0!==t||i!==this.width||n!==this.height){var r,s=this.__closestGroupOrSvg();r=this.__createElement("rect",{x:e,y:t,width:i,height:n,fill:"#FFFFFF"},!0),s.appendChild(r)}else this.__clearCanvas()}createLinearGradient(e,t,i,n){var r=this.__createElement("linearGradient",{id:Xd(this.__ids),x1:e+"px",x2:i+"px",y1:t+"px",y2:n+"px",gradientUnits:"userSpaceOnUse"},!1);return this.__defs.appendChild(r),new iu(r,this)}createRadialGradient(e,t,i,n,r,s){var o=this.__createElement("radialGradient",{id:Xd(this.__ids),cx:n+"px",cy:r+"px",r:s+"px",fx:e+"px",fy:t+"px",gradientUnits:"userSpaceOnUse"},!1);return this.__defs.appendChild(o),new iu(o,this)}__parseFont(){var e=/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\'\"\sa-z0-9]+?)\s*$/i.exec(this.font),t={style:e[1]||"normal",size:e[4]||"10px",family:e[6]||"sans-serif",weight:e[3]||"normal",decoration:e[2]||"normal",href:null};return"underline"===this.__fontUnderline&&(t.decoration="underline"),this.__fontHref&&(t.href=this.__fontHref),t}__wrapTextLink(e,t){if(e.href){var i=this.__createElement("a");return i.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",e.href),i.appendChild(t),i}return t}__applyText(e,t,i,n){var r,s,o=this.__parseFont(),a=this.__closestGroupOrSvg(),c=this.__createElement("text",{"font-family":o.family,"font-size":o.size,"font-style":o.style,"font-weight":o.weight,"text-decoration":o.decoration,x:t,y:i,"text-anchor":(r=this.textAlign,s={left:"start",right:"end",center:"middle",start:"start",end:"end"},s[r]||s.start),"dominant-baseline":Zd(this.textBaseline)},!0);c.appendChild(this.__document.createTextNode(e)),this.__currentElement=c,this.__applyStyleToCurrentElement(n),a.appendChild(this.__wrapTextLink(o,c))}fillText(e,t,i){this.__applyText(e,t,i,"fill")}strokeText(e,t,i){this.__applyText(e,t,i,"stroke")}measureText(e){return this.__ctx.font=this.font,this.__ctx.measureText(e)}arc(e,t,i,n,r,s){if(n!==r){(n%=2*Math.PI)===(r%=2*Math.PI)&&(r=(r+2*Math.PI-.001*(s?-1:1))%(2*Math.PI));var o=e+i*Math.cos(r),a=t+i*Math.sin(r),c=e+i*Math.cos(n),l=t+i*Math.sin(n),h=s?0:1,d=0,u=r-n;u<0&&(u+=2*Math.PI),d=s?u>Math.PI?0:1:u>Math.PI?1:0,this.lineTo(c,l),this.__addPathCommand(Yd("A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}",{rx:i,ry:i,xAxisRotation:0,largeArcFlag:d,sweepFlag:h,endX:o,endY:a})),this.__currentPosition={x:o,y:a}}}clip(){var e=this.__closestGroupOrSvg(),t=this.__createElement("clipPath"),i=Xd(this.__ids),n=this.__createElement("g");this.__applyCurrentDefaultPath(),e.removeChild(this.__currentElement),t.setAttribute("id",i),t.appendChild(this.__currentElement),this.__defs.appendChild(t),e.setAttribute("clip-path",Yd("url(#{id})",{id:i})),e.appendChild(n),this.__currentElement=n}drawImage(){var e,t,i,n,r,s,o,a,c,l,h,d,u,f=Array.prototype.slice.call(arguments),p=f[0],g=0,m=0;if(3===f.length)e=f[1],t=f[2],i=r=p.width,n=s=p.height;else if(5===f.length)e=f[1],t=f[2],i=f[3],n=f[4],r=p.width,s=p.height;else{if(9!==f.length)throw new Error("Invalid number of arguments passed to drawImage: "+arguments.length);g=f[1],m=f[2],r=f[3],s=f[4],e=f[5],t=f[6],i=f[7],n=f[8]}o=this.__closestGroupOrSvg(),this.__currentElement;var w="translate("+e+", "+t+")";if(p instanceof ru){if((a=p.getSvg().cloneNode(!0)).childNodes&&a.childNodes.length>1){for(c=a.childNodes[0];c.childNodes.length;)u=c.childNodes[0].getAttribute("id"),this.__ids[u]=u,this.__defs.appendChild(c.childNodes[0]);if(l=a.childNodes[1]){var b,F=l.getAttribute("transform");b=F?F+" "+w:w,l.setAttribute("transform",b),o.appendChild(l)}}}else"CANVAS"!==p.nodeName&&"IMG"!==p.nodeName||((h=this.__createElement("image")).setAttribute("width",i),h.setAttribute("height",n),h.setAttribute("preserveAspectRatio","none"),(g||m||r!==p.width||s!==p.height)&&((d=this.__document.createElement("canvas")).width=i,d.height=n,d.getContext("2d").drawImage(p,g,m,r,s,0,0,i,n),p=d),h.setAttribute("transform",w),h.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","CANVAS"===p.nodeName?p.toDataURL():p.getAttribute("src")),o.appendChild(h))}createPattern(e,t){let i,n=this.__document.__createElement("pattern"),r=Xd(this.__ids);return n.setAttribute("id",r),n.setAttribute("width",e.width),n.setAttribute("height",e.height),"CANVAS"===e.nodeName||"IMG"===e.nodeName?(i=this.__createElement("image"),i.setAttribute("width",e.width),i.setAttribute("height",e.height),i.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","CANVAS"===e.nodeName?e.toDataURL():e.getAttribute("src")),n.appendChild(i),this.__defs.appendChild(n)):e instanceof ru&&(n.appendChild(e.__root.childNodes[1]),this.__defs.appendChild(n)),new nu(n,this)}setLineDash(e){e&&e.length>0?this.lineDash=e.join(","):this.lineDash=null}drawFocusRing(){}createImageData(){}getImageData(){}putImageData(){}globalCompositeOperation(){}setTransform(){}}class su{static supportedTypes=new Set(["bigBed","bigWig","bigGenePred","vcfTabix"]);static filterTracks=new Set(["cytoBandIdeo","assembly","gap","gapOverlap","allGaps","cpgIslandExtUnmasked","windowMasker"]);static async loadHub(e){const t=e.lastIndexOf("/"),i=e.substring(0,t+1),n=await cu(e);let r;if("genome"===n[1].type){const e=n[1];if(e.hasProperty("groups")){const t=i+e.getProperty("groups");r=await cu(t)}}return new su(e,n,r)}constructor(e,t,i){this.url=e;const n=e.lastIndexOf("/");if(this.baseURL=e.substring(0,n+1),"hub"!==t[0].type)throw Error("Unexpected hub.txt file -- does the first line start with 'hub'?");if(this.hubStanza=t[0],"on"!==this.hubStanza.getProperty("useOneFile"))throw Error("Only 'useOneFile' hubs are currently supported");if(t.length<2)throw Error("Expected at least 2 stanzas, hub and genome");if("genome"!==t[1].type)throw Error(`Unexpected hub file -- expected "genome" stanza but found "${t[1].type}"`);this.genomeStanza=t[1],this.trackStanzas=[];for(let e=2;e<t.length;e++)"track"===t[e].type&&this.trackStanzas.push(t[e]);if(i){this.groupStanzas=i,this.groupPriorityMap=new Map;for(let e of i)e.hasProperty("priority")&&this.groupPriorityMap.set(e.getProperty("name"),10*Number.parseInt(e.getProperty("priority")))}}getDefaultPosition(){return this.genomeStanza.getProperty("defaultPos")}getGenomeConfig(e={}){const t=this.genomeStanza.getProperty("genome"),i=this.hubStanza.getProperty("shortLabel")||this.genomeStanza.getProperty("scientificName")||this.genomeStanza.getProperty("organism")||this.genomeStanza.getProperty("description"),n=i+(i?` (${t})`:` ${t}`),r={hubURL:this.url,id:t,name:n,twoBitURL:this.baseURL+this.genomeStanza.getProperty("twoBitPath"),nameSet:"ucsc",wholeGenomeView:!1,showChromosomeWidget:!1};if(this.genomeStanza.hasProperty("defaultPos")){const e=this.genomeStanza.getProperty("defaultPos");if(e){const t=e.lastIndexOf(":");r.locus=t>0?e.substring(0,t):e}}this.genomeStanza.hasProperty("blat")&&(r.blat=this.baseURL+this.genomeStanza.getProperty("blat")),this.genomeStanza.hasProperty("chromAliasBb")&&(r.chromAliasBbURL=this.baseURL+this.genomeStanza.getProperty("chromAliasBb")),this.genomeStanza.hasProperty("chromAlias")&&(r.aliasURL=this.baseURL+this.genomeStanza.getProperty("chromAlias")),this.genomeStanza.hasProperty("twoBitBptURL")&&(r.twoBitBptURL=this.baseURL+this.genomeStanza.getProperty("twoBitBptURL")),this.genomeStanza.hasProperty("twoBitBptUrl")&&(r.twoBitBptURL=this.baseURL+this.genomeStanza.getProperty("twoBitBptUrl")),e.includeChromSizes&&this.genomeStanza.hasProperty("chromSizes")&&(r.chromSizesURL=this.baseURL+this.genomeStanza.getProperty("chromSizes")),this.hubStanza.hasProperty("longLabel")?r.description=this.hubStanza.getProperty("longLabel").replace("/","\n"):(r.description=r.id,this.genomeStanza.hasProperty("description")&&(r.description+=`\n${this.genomeStanza.getProperty("description")}`),this.genomeStanza.hasProperty("organism")&&(r.description+=`\n${this.genomeStanza.getProperty("organism")}`),this.genomeStanza.hasProperty("scientificName")&&(r.description+=`\n${this.genomeStanza.getProperty("scientificName")}`),this.genomeStanza.hasProperty("htmlPath")&&(r.infoURL=this.baseURL+this.genomeStanza.getProperty("htmlPath")));const s=this.trackStanzas.filter((e=>"cytoBandIdeo"===e.name&&e.hasProperty("bigDataUrl")));s.length>0&&(r.cytobandBbURL=this.baseURL+s[0].getProperty("bigDataUrl"));return r.tracks=this.#u((e=>!su.filterTracks.has(e.name)&&"hide"!==e.getProperty("visibility"))),r}getGroupedTrackConfigurations(){const e=new Map;for(let t of this.#u()){if("cytoBandIdeo"===t.name)continue;const i=t.group||"other";e.has(i)?e.get(i).push(t):e.set(i,[t])}const t=this.groupStanzas?new Map(this.groupStanzas.map((e=>[e.getProperty("name"),e]))):new Map;return Array.from(e.keys()).map((i=>({label:t.has(i)?t.get(i).getProperty("label"):i,tracks:e.get(i)})))}#u(e){return this.trackStanzas.filter((t=>su.supportedTypes.has(t.format)&&t.hasProperty("bigDataUrl")&&(!e||e(t)))).map((e=>this.#f(e)))}#f(e){const t=e.format,i={id:e.getProperty("track"),name:e.getProperty("shortLabel"),format:t,url:this.baseURL+e.getProperty("bigDataUrl"),displayMode:e.displayMode};if("vcfTabix"===t&&(i.indexURL=i.url+".tbi"),e.hasProperty("longLabel")&&e.hasProperty("html")?(i.description&&(i.description+="<br/>"),i.description=`<a target="_blank" href="${this.baseURL+e.getProperty("html")}">${e.getProperty("longLabel")}</a>`):e.hasProperty("longLabel")&&(i.description=e.getProperty("longLabel")),e.hasProperty("autoScale")&&(i.autoscale="on"===e.getProperty("autoScale").toLowerCase()),e.hasProperty("maxHeightPixels")){const t=e.getProperty("maxHeightPixels").split(":");i.maxHeight=Number.parseInt(t[0]),i.height=Number.parseInt(t[1]),i.minHeight=Number.parseInt(t[2])}if(e.hasProperty("color")){const t=e.getProperty("color");i.color=t.indexOf(",")>0?`rgb(${t})`:t}if(e.hasProperty("altColor")){const t=e.getProperty("altColor");i.altColor=t.indexOf(",")>0?`rgb(${t})`:t}if(e.hasProperty("viewLimits")){const t=e.getProperty("viewLimits").split(":");let n,r;t.length>1&&(n=Number.parseInt(t[0]),r=Number.parseInt(t[1])),Number.isNaN(r)||Number.isNaN(n)?console.warn(`Unexpected viewLimits value in track line: ${properties.viewLimits}`):(i.min=n,i.max=r)}if(e.hasProperty("itemRgb"),"hide"===e.getProperty("visibility")&&(i.visible=!1),e.hasProperty("url")&&(i.infoURL=e.getProperty("url")),e.hasProperty("searchIndex")&&(i.searchIndex=e.getProperty("searchIndex")),e.hasProperty("searchTrix")&&(i.searchTrix=this.baseURL+e.getProperty("searchTrix")),e.hasProperty("group")&&(i.group=e.getProperty("group"),this.groupPriorityMap&&this.groupPriorityMap.has(i.group))){const e=this.groupPriorityMap.get(i.group)+1;i.order=e,this.groupPriorityMap.set(i.group,e)}return i}}function ou(e){const t=e.indexOf(" ");return t>0?e.substring(0,t):e}class au{properties=new Map;constructor(e,t){this.type=e,this.name=t}setProperty(e,t){this.properties.set(e,t)}getProperty(e){return this.properties.has(e)?this.properties.get(e):this.parent?this.parent.getProperty(e):void 0}hasProperty(e){return!!this.properties.has(e)||!!this.parent&&this.parent.hasProperty(e)}get format(){const e=this.getProperty("type");if(e)return ou(e)}get displayMode(){let e=this.getProperty("visibility");if(!e)return"COLLAPSED";switch(e=e.toLowerCase(),e){case"dense":default:return"COLLAPSED";case"pack":return"EXPANDED";case"squish":return"SQUISHED"}}}async function cu(e){const t=await fetch(e),i=(await t.text()).split(/\n|\r\n|\r/g),n=[];let r,s=!0;for(let e of i){const t=lu(e),i=e.indexOf(" ",t);if(i<0)s=!0;else{const o=e.substring(t,i).trim();if(o.startsWith("#"))continue;const a=e.substring(i+1).trim();if(s){const e=new au(o,a);n.push(e),r=e,s=!1}r.setProperty(o,a)}}return function(e){const t=new Map;for(let i of e)t.set(i.name,i);for(let i of e)if(i.properties.has("parent")){const e=ou(i.properties.get("parent"));i.parent=t.get(e)}return e}(n)}function lu(e){let t=0;for(t=0;t<e.length;t++){const i=e.charAt(t);if(" "!==i&&"\t"!==i)break}return t}const hu={initializeGenomes:async function(e){if(!hu.KNOWN_GENOMES){const t={};if(!1!==e.loadDefaultGenomes)try{const r="https://igv.org/genomes/genomes.json";n(await Qs.loadJson(r,{timeout:5e3}))}catch(s){console.error(s);try{const o="https://s3.amazonaws.com/igv.org.genomes/genomes.json";n(await Qs.loadJson(o,{}))}catch(a){console.error(a),console.warn("Errors loading default genome definitions.")}}const i=e.genomeList||e.genomes;if(i)if("string"==typeof i){n(await Qs.loadJson(i,{}))}else n(i);function n(e){return e.forEach((function(e){t[e.id]=e})),t}hu.KNOWN_GENOMES=t}},isWholeGenomeView:function(e){return"all"===e.toLowerCase()},expandReference:async function(e,t){if(Mt(t)&&t.startsWith("{"))try{t=JSON.parse(t)}catch(e){}let i;if(Mt(t)?i=t:t.genome?i=t.genome:void 0===t.id||t.fastaURL||t.twobitURL||(i=t.id),i){let t=hu.KNOWN_GENOMES[i];if(!t){if((i.startsWith("GCA_")||i.startsWith("GCF_"))&&i.length>=13)try{const e=function(e){if(e.startsWith("GCF")||e.startsWith("GCA")&&e.length>=13)return"https://hgdownload.soe.ucsc.edu/hubs/"+e.substring(0,3)+"/"+e.substring(4,7)+"/"+e.substring(7,10)+"/"+e.substring(10,13)+"/"+e+"/hub.txt"}(i);t=(await su.loadHub(e)).getGenomeConfig()}catch(e){console.error(e)}t||e.present(new Error(`Unknown genome id: ${i}`),void 0)}return t}return t}};let du,uu,fu=0,pu=0,gu=[];class mu extends Kd{constructor(e,t,i,n){super(e,t,i,n)}initializationHelper(){this.$spinner=Bt("<div>",{class:"igv-loading-spinner-container"}),this.$viewport.append(this.$spinner),this.$spinner.append(Bt("<div>"));const e=this.trackView.track;"sequence"!==e.type&&(this.$zoomInNotice=this.createZoomInNotice(this.$viewport)),"sequence"!==e.id&&(this.$trackLabel=Bt('<div class="igv-track-label">'),this.$viewport.append(this.$trackLabel),this.setTrackLabel(e.name||""),!1===this.browser.doShowTrackLabels&&this.$trackLabel.hide()),this.stopSpinner(),this.addMouseHandlers()}setContentHeight(e){super.setContentHeight(e),this.featureCache&&(this.featureCache.redraw=!0)}setTrackLabel(e){this.$trackLabel.empty(),this.$trackLabel.html(e);const t=this.$trackLabel.text();this.$trackLabel.attr("title",t)}startSpinner(){this.$spinner.show()}stopSpinner(){this.$spinner&&this.$spinner.hide()}checkZoomIn(){if(this.trackView.track&&"sequence"===this.trackView.track.type&&this.referenceFrame.bpPerPixel>10)return Bt(this.canvas).remove(),this.canvas=void 0,!1;if(!this.viewIsReady())return!1;if((()=>{if("all"!==this.referenceFrame.chr.toLowerCase()||this.trackView.track.supportsWholeGenome){const e=this.trackView.track.visibilityWindow;return void 0!==e&&e>0&&this.referenceFrame.bpPerPixel*this.$viewport.width()>e}return!0})()){if(this.canvas&&(Bt(this.canvas).remove(),this.canvas=void 0),this.trackView.track.autoHeight){const e=this.trackView.minHeight||0;this.setContentHeight(e)}return this.$zoomInNotice&&this.$zoomInNotice.show(),!1}return this.$zoomInNotice&&this.$zoomInNotice.hide(),!0}shift(){const e=this.referenceFrame;this.canvas&&this.canvas._data&&this.canvas._data.referenceFrame.chr===this.referenceFrame.chr&&this.canvas._data.bpPerPixel===e.bpPerPixel&&(this.canvas._data.pixelShift=Math.round((this.canvas._data.bpStart-e.start)/e.bpPerPixel),this.canvas.style.left=this.canvas._data.pixelShift+"px")}genomicRange(){return{start:this.referenceFrame.start,end:this.referenceFrame.start+this.referenceFrame.bpPerPixel*this.$viewport.width()}}setTop(e){if(super.setTop(e),this.canvas){const t=this.$viewport.height(),i=e+this.canvas._data.pixelTop,n=i+this.canvas._data.pixelHeight;(i>0||n<t)&&this.repaint()}else this.repaint();if(this.canvas&&this.canvas._data){let t=e+this.canvas._data.pixelTop;this.canvas.style.top=`${t}px`}}async loadFeatures(){const e=this.referenceFrame,t=e.chr,i=await this.browser.genome.loadChromosome(t),n=i?i.bpLength:Number.MAX_SAFE_INTEGER,r=this.$viewport.width()*e.bpPerPixel,s=Math.floor(Math.max(0,e.start-r)),o=Math.ceil(Math.min(n,e.start+r+r));if(!this.loading||this.loading.start!==s||this.loading.end!==o){this.loading={start:s,end:o},this.startSpinner();try{const i=this.trackView.track,n=await this.getFeatures(i,t,s,o,e.bpPerPixel);if(n){let r=[];if(i.roiSets&&i.roiSets.length>0)for(let n of i.roiSets){const i=await n.getFeatures(t,s,o,e.bpPerPixel);r.push({track:n,features:i})}const a=i&&i.resolutionAware,c=this.windowFunction;return this.featureCache=new wu(t,s,o,e.bpPerPixel,n,r,a,c),this.loading=!1,this.hideMessage(),this.stopSpinner(),this.featureCache}}catch(e){this.trackView&&!0!==this.trackView.disposed&&(this.showMessage("Error loading track data"),this.browser.alert.present(e),console.error(e))}finally{this.loading=!1,this.stopSpinner()}}}get track(){return this.trackView.track}get windowFunction(){return this.track?this.track.windowFunction:void 0}repaintDimensions(){const e=hu.isWholeGenomeView(this.referenceFrame.chr),t=e?this.$viewport.width():3*this.$viewport.width(),i=this.referenceFrame.bpPerPixel;return{bpStart:this.referenceFrame.start-(e?0:this.$viewport.width()*i),bpEnd:e?Number.MAX_SAFE_INTEGER:this.referenceFrame.start+2*this.$viewport.width()*i+1,pixelWidth:t}}repaint(){if(void 0===this.featureCache)return;const{features:e,roiFeatures:t}=this.featureCache,{bpStart:i,bpEnd:n,pixelWidth:r}=this.repaintDimensions(),s=this.$viewport.height(),o=this.getContentHeight(),a=t?Math.max(o,s):o,c=Math.min(a,3*s);if(0===r||0===c)return void(this.canvas&&Bt(this.canvas).remove());const l=Math.max(0,-this.contentTop-Math.floor(c/3)),h=this.referenceFrame.bpPerPixel,d=Math.round((i-this.referenceFrame.start)/h),u=(this.contentTop||0)+l,f=document.createElement("canvas");f.style.position="relative",f.style.display="block",f.style.width=r+"px",f.style.height=c+"px",f.style.left=d+"px",f.style.top=u+"px";const p="FILL"===this.trackView.track.displayMode||!1!==this.trackView.track.supportHiDPI?window.devicePixelRatio:1;f.width=p*r,f.height=p*c;const g=f.getContext("2d");g.scale(p,p),g.translate(0,-l);const m={context:g,pixelXOffset:d,pixelWidth:r,pixelHeight:c,pixelTop:l,bpStart:i,bpEnd:n,bpPerPixel:h,pixelShift:d,windowFunction:this.windowFunction,referenceFrame:this.referenceFrame,selection:this.selection,viewport:this,viewportWidth:this.$viewport.width()};this.draw(m,e,t),this.canvas&&Bt(this.canvas).remove(),f._data=m,this.canvas=f,this.$viewport.append(Bt(f))}refresh(){if(!this.canvas||!this.featureCache)return;const e=this.canvas._data;e.context.clearRect(0,0,this.canvas.width,this.canvas.height);const{features:t,roiFeatures:i}=this.featureCache;this.draw(e,t,i)}draw(e,t,i){if(t&&(e.features=t,this.trackView.track.draw(e)),i&&i.length>0)for(let t of i)e.features=t.features,t.track.draw(e)}containsPosition(e,t){return this.referenceFrame.chr===e&&t>=this.referenceFrame.start&&t<=this.referenceFrame.calculateEnd(this.getWidth())}isLoading(){return this.loading}savePNG(){if(!this.canvas)return;const e=this.canvas._data,t=e?e.pixelTop:0,i=window.devicePixelRatio,n=this.$viewport.width()*i,r=this.$viewport.height()*i,s=-Bt(this.canvas).position().left*i,o=(-this.contentTop-t)*i,a=this.canvas.getContext("2d").getImageData(s,o,n,r),c=document.createElement("canvas"),l=c.getContext("2d");c.width=a.width,c.height=a.height,l.putImageData(a,0,0);Pt((this.$trackLabel.text()?this.$trackLabel.text():"image")+".png",c.toDataURL("image/png"))}saveSVG(){let{width:e,height:t}=this.browser.columnContainer.getBoundingClientRect();const i=new ru({width:e,height:8e3,backdropColor:"white",multiLocusGap:0,viewbox:{x:0,y:0,width:e,height:8e3}}),n={deltaX:32,deltaY:32};this.renderSVGContext(i,n,!1),i.setHeight(t);const r=(this.trackView.track.name||this.trackView.track.id).replace(/\W/g,""),o=this.browser.referenceFrameList.indexOf(this.referenceFrame),a=i.getSerializedSvg(!0),c=URL.createObjectURL(new Blob([a],{type:"application/octet-stream"}));Pt(`${`${r}_referenceFrame_${o}_guid_${s()}`}.svg`,c)}renderSVGContext(e,{deltaX:t,deltaY:i},n=!0){if(!(this.$zoomInNotice&&this.$zoomInNotice.is(":visible"))){const{width:n,height:r}=this.$viewport.get(0).getBoundingClientRect(),o=`${(this.trackView.track.name||this.trackView.track.id).replace(/\W/g,"")}_referenceFrame_${this.browser.referenceFrameList.indexOf(this.referenceFrame)}_guid_${s()}`,a=t,c=i+this.contentTop,l=-this.contentTop;e.saveWithTranslationAndClipRect(o,a,c,n,r,l);let{start:h,bpPerPixel:d}=this.referenceFrame;const u={context:e,viewport:this,referenceFrame:this.referenceFrame,top:l,pixelTop:l,pixelWidth:n,pixelHeight:r,bpStart:h,bpEnd:h+n*d,bpPerPixel:d,viewportWidth:n,selection:this.selection},f=this.featureCache?this.featureCache.features:void 0,p=this.featureCache?this.featureCache.roiFeatures:void 0;this.draw(u,f,p),e.restore()}if(n&&this.$trackLabel&&this.browser.doShowTrackLabels){const{x:n,y:r,width:s,height:o}=((e,t)=>{const{x:i,y:n,width:r,height:s}=e.getBoundingClientRect(),{x:o,y:a,width:c,height:l}=t.getBoundingClientRect();return{x:o-i,y:a-n,width:c,height:l}})(this.$viewport.get(0),this.$trackLabel.get(0));this.renderTrackLabelSVG(e,t+n,i+r,s,o)}}renderTrackLabelSVG(e,t,i,n,r){const o=`${(this.trackView.track.name||this.trackView.track.id).replace(/\W/g,"")}_track_label_guid_${s()}`;e.saveWithTranslationAndClipRect(o,t,i,n,r,0),e.fillStyle="white",e.fillRect(0,0,n,r),e.font="12px Arial",e.fillStyle="rgb(68, 68, 68)";const{width:a}=e.measureText(this.$trackLabel.text()),c=.25*(n-a),l=.7*(r-12);e.fillText(this.$trackLabel.text(),c,r-l),e.strokeStyle="rgb(68, 68, 68)",e.strokeRect(0,0,n,r),e.restore()}get cachedFeatures(){return this.featureCache?this.featureCache.features:[]}clearCache(){this.featureCache=void 0,this.canvas&&(this.canvas._data=void 0)}async getFeatures(e,t,i,n,r){if(this.featureCache&&this.featureCache.containsRange(t,i,n,r,this.windowFunction))return this.featureCache.features;if("function"==typeof e.getFeatures){const s=await e.getFeatures(t,i,n,r,this);return this.checkContentHeight(s),s}}needsRepaint(){if(!this.canvas)return!0;const e=this.canvas._data;return!e||this.referenceFrame.start<e.bpStart||this.referenceFrame.end>e.bpEnd||this.referenceFrame.chr!==e.referenceFrame.chr||this.referenceFrame.bpPerPixel!=e.bpPerPixel||this.windowFunction!=e.windowFunction}needsReload(){if(!this.featureCache)return!0;const{chr:e,bpPerPixel:t}=this.referenceFrame,{bpStart:i,bpEnd:n}=this.repaintDimensions();return!this.featureCache.containsRange(e,i,n,t,this.windowFunction)}createZoomInNotice(e){const t=Bt("<div>",{class:"igv-zoom-in-notice-container"});e.append(t);const i=Bt("<div>");return t.append(i),i.text("Zoom in to see features"),t.hide(),t}viewIsReady(){return this.browser&&this.browser.referenceFrameList&&this.referenceFrame}addMouseHandlers(){const e=this.$viewport.get(0);this.addViewportContextMenuHandler(e);const t=e=>{this.enableClick=!0,this.browser.mouseDownOnViewport(e,this),r(e)};e.addEventListener("mousedown",t),e.addEventListener("touchstart",t);const i=e=>{this.browser.dragObject||this.browser.isScrolling?(this.browser.cancelTrackPan(),this.enableClick=!1):(this.browser.cancelTrackPan(),this.browser.endTrackDrag())};e.addEventListener("mouseup",i),e.addEventListener("touchend",i),"function"==typeof this.trackView.track.hoverText&&e.addEventListener("mousemove",(e=>{if(0===e.buttons&&Date.now()-pu>100){pu=Date.now();const t=this.createClickState(e);if(t){const e=this.trackView.track.hoverText(t);e?this.$viewport[0].setAttribute("title",e):this.$viewport[0].removeAttribute("title")}}})),this.addViewportClickHandler(this.$viewport.get(0)),this.trackView.track.name&&"sequence"!==this.trackView.track.config.type&&this.addTrackLabelClickHandler(this.$trackLabel.get(0))}addViewportContextMenuHandler(e){e.addEventListener("contextmenu",(e=>{if(this.browser.dragObject)return!1;const t=this.createClickState(e);if(void 0===t)return!1;e.preventDefault();let i=[];if("function"==typeof this.trackView.track.contextMenuItemList){const e=this.trackView.track.contextMenuItemList(t);e&&(i=e)}i.length>0&&i.push({label:Bt("<HR>")}),i.push({label:"Save Image (PNG)",click:()=>this.savePNG()}),i.push({label:"Save Image (SVG)",click:()=>this.saveSVG()}),this.browser.menuPopup.presentTrackContextMenu(e,i)}))}addViewportClickHandler(e){e.addEventListener("click",(e=>{if(this.enableClick&&this.canvas){if(3===e.which||e.ctrlKey)return;if(this.browser.dragObject||this.browser.isScrolling)return;e.preventDefault();const t=a(e,this.$viewport.get(0)).x,i=a(e,this.canvas).x,n=this.referenceFrame;Math.floor(n.start+n.toBP(i));const r=Date.now();if(r-fu<this.browser.constants.doubleClickDelay){du&&(window.clearTimeout(du),du=void 0);const e=Math.round(n.start+n.toBP(t));let i;if("all"===this.referenceFrame.chr.toLowerCase()){const t=this.browser.genome.getChromosomeCoordinate(e).chr;if(1===this.browser.referenceFrameList.length)i=t;else{const e=this.browser.referenceFrameList.map((({locusSearchString:e})=>e));e[this.browser.referenceFrameList.indexOf(this.referenceFrame)]=t,i=e.join(" ")}this.browser.search(i)}else this.browser.zoomWithScaleFactor(.5,e,this.referenceFrame)}else"function"==typeof this.trackView.track.popupData&&(du=setTimeout((()=>{const t=this.getPopupContent(e);if(t)if(!1===e.shiftKey){if(uu&&uu.dispose(),gu.length>0){for(const e of gu)e.dispose();gu.length=0}uu=new ic(this.$viewport.get(0).parentElement,!0,void 0,(()=>{uu.dispose()})),uu.presentContentWithEvent(e,t)}else{let i=new ic(this.$viewport.get(0).parentElement,!0,void 0,(()=>{const e=gu.indexOf(i);gu.splice(e,1),i.dispose()}));gu.push(i),i.presentContentWithEvent(e,t)}window.clearTimeout(du),du=void 0}),this.browser.constants.doubleClickDelay));fu=r}}))}addTrackLabelClickHandler(e){e.addEventListener("click",(e=>{e.stopPropagation();const{track:t}=this.trackView;let i;"function"==typeof t.description?i=t.description():t.description&&(i=`<div>${t.description}</div>`),i&&(void 0===this.popover&&(this.popover=new ic(this.browser.columnContainer,!0,t.name||"",void 0)),this.popover.presentContentWithEvent(e,i))}))}createClickState(e){if(!this.canvas)return;const t=this.referenceFrame,i=a(e,this.$viewport.get(0)),n=a(e,this.canvas),r=t.start+t.toBP(i.x);return{event:e,viewport:this,referenceFrame:t,genomicLocation:r,y:i.y-this.contentTop,canvasX:n.x,canvasY:n.y}}getPopupContent(e){const t=this.createClickState(e);if(void 0===t)return;let i=this.trackView.track;const n=i.popupData(t),r=this.browser.fireEvent("trackclick",[i,n]);let s;return void 0===r||!0===r?n&&n.length>0&&(s=n.map((e=>{if(e.name){const t=`<span>${e.name}</span>&nbsp&nbsp&nbsp${e.value}`;return`<div title="${e.value}">${t}</div>`}return"<hr>"===e?e:e.html?e.html:`<div title="${e}">${e}</div>`})).join("")):"string"==typeof r&&(s=r),s}dispose(){this.popover&&this.popover.dispose(),super.dispose()}}class wu{constructor(e,t,i,n,r,s,o,a){this.chr=e,this.bpStart=t,this.bpEnd=i,this.bpPerPixel=n,this.features=r,this.roiFeatures=s,this.multiresolution=o,this.windowFunction=a}containsRange(e,t,i,n,r){if(r&&r!==this.windowFunction)return!1;const s=this.multiresolution?this.bpPerPixel/n:1;return t>=this.bpStart&&i<=this.bpEnd&&e===this.chr&&s>.5&&s<2}overlapsRange(e,t,i){return this.chr===e&&i>=this.bpStart&&t<=this.bpEnd}}const bu=function(e,t){const{r:i,g:n,b:r}=no[e];return`rgba(${i},${n},${r},${t})`}("nickel",2/16),Fu=bu;class vu{constructor(e,t){if(this.url=e.url,e.name&&(this.name=e.name),this.isUserDefined=e.isUserDefined,e.featureSource)this.featureSource=e.featureSource;else if(e.features)this.featureSource=new Au(e.features,t);else{if(!e.format)throw Error("ROI configuration must define either features or file format");this.featureSource=wd(e,t)}!0===this.isUserDefined?(this.color=e.color||Fu,this.headerColor="rgba(155,185,129)"):(this.color=e.color||bu,this.headerColor="rgb(190,190,190)"),this.isVisible=void 0===e.isVisible||e.isVisible}async getFeatures(e,t,i){return this.featureSource.getFeatures({chr:e,start:t,end:i})}async getAllFeatures(){return"function"==typeof this.featureSource.getAllFeatures?await this.featureSource.getAllFeatures():{}}addFeature(e){this.featureSource.addFeature(e)}removeFeature(e){this.featureSource.removeFeature(e)}toJSON(){if(this.url)return{name:this.name,color:this.color,url:this.url,isUserDefined:this.isUserDefined,isVisible:this.isVisible};{const e=this.featureSource.getAllFeatures(),t=[];for(let i of Object.keys(e))for(let n of e[i])t.push(n);return{name:this.name,color:this.color,features:t,isUserDefined:this.isUserDefined,isVisible:this.isVisible}}}dispose(){for(let e of Object.keys(this))this[e]=void 0}}function yu(e,t,i,n){let r=Math.round((e-i)/n);let s=Math.round((t-i)/n)-r;return s<3&&(s=3,r-=1),{x:r,width:s}}class Au{constructor(e,t){this.featureMap={},this.genome=t;for(let i of e){const e=t?t.getChromosomeName(i.chr):i.chr;let n=this.featureMap[e];n||(n=[],this.featureMap[e]=n),n.push(i)}for(let e of Object.keys(this.featureMap))this.featureMap[e].sort(((e,t)=>e.start-t.start))}async getFeatures({chr:e,start:t,end:i}){if("all"===e.toLowerCase())return Ll(this.featureMap,this.genome);{const n=this.featureMap[e];return n?n.filter((e=>e.end>t&&e.start<i)):[]}}getAllFeatures(){return this.featureMap}supportsWholeGenome(){return!0}addFeature(e){let t=this.featureMap[e.chr];t||(t=[],this.featureMap[e.chr]=t),t.push(e),t.sort(((e,t)=>e.start-t.start))}removeFeature({chr:e,start:t,end:i}){if(this.featureMap[e]){const n=`${e}-${t}-${i}`;this.featureMap[e]=this.featureMap[e].filter((e=>n!==`${e.chr}-${e.start}-${e.end}`))}}}class Cu{constructor(t,i,n,r){this.rulerViewport=t,this.rulerSweeper=e({class:"igv-ruler-sweeper"}),i.appendChild(this.rulerSweeper),this.browser=n,this.referenceFrame=r,this.isMouseHandlers=void 0,this.addBrowserObserver()}addBrowserObserver(){this.boundObserverHandler=(()=>{this.referenceFrame&&(hu.isWholeGenomeView(this.referenceFrame.chr)?this.removeMouseHandlers():this.addMouseHandlers())}).bind(this),this.browser.on("locuschange",this.boundObserverHandler)}removeBrowserObserver(){this.browser.off("locuschange",this.boundObserverHandler)}addMouseHandlers(){if(!0===this.isMouseHandlers)return;let e,t,i,n,r,s;this.boundContentMouseDownHandler=function(s){e=!0,t=!0;const{x:o}=a(s,this.rulerViewport.contentDiv);n=i=o,r=1,this.rulerSweeper.style.display="block",this.rulerSweeper.style.backgroundColor=!0===s.shiftKey?Fu:"rgba(68, 134, 247, 0.25)",this.rulerSweeper.style.left=`${n}px`,this.rulerSweeper.style.width=`${r}px`}.bind(this),this.rulerViewport.contentDiv.addEventListener("mousedown",this.boundContentMouseDownHandler),this.boundDocumentMouseMoveHandler=function(o){let c;if(e&&t){const{x:e}=a(o,this.rulerViewport.contentDiv);c=Math.max(Math.min(e,this.rulerViewport.contentDiv.clientWidth),0),s=c-i,r=Math.abs(s),this.rulerSweeper.style.width=`${r}px`,s<0&&(n=i+s,this.rulerSweeper.style.left=`${n}px`)}}.bind(this),document.addEventListener("mousemove",this.boundDocumentMouseMoveHandler),this.boundDocumentMouseUpHandler=function(i){let s;if(!0===e&&!0===t&&(e=t=void 0,this.rulerSweeper.style.display="none",r>1)){s={start:Math.floor(this.referenceFrame.calculateEnd(n)),end:Math.floor(this.referenceFrame.calculateEnd(n+r))};!0===i.shiftKey?this.browser.roiManager.updateUserDefinedROISet(Object.assign({chr:this.referenceFrame.chr},s)):(Va(this.browser.genome.getChromosome(this.referenceFrame.chr).bpLength,s,this.browser.minimumBases()),function(e,t,i){e.start=Math.round(t.start),e.end=Math.round(t.end),e.bpPerPixel=(e.end-e.start)/i}(this.referenceFrame,s,this.rulerViewport.contentDiv.clientWidth),this.browser.updateViews(this.referenceFrame))}}.bind(this),document.addEventListener("mouseup",this.boundDocumentMouseUpHandler),this.isMouseHandlers=!0}removeMouseHandlers(){this.rulerViewport.contentDiv.removeEventListener("mousedown",this.boundContentMouseDownHandler),document.removeEventListener("mousemove",this.boundDocumentMouseMoveHandler),document.removeEventListener("mouseup",this.boundDocumentMouseUpHandler),this.isMouseHandlers=!1}dispose(){this.removeBrowserObserver(),this.removeMouseHandlers(),this.rulerSweeper.remove()}}function _u(e){if(xu[e])return xu[e];if(xu["chr"+e]){const t=xu["chr"+e];return xu[e]=t,t}{const t=_s.randomRGB(0,255);return xu[e]=t,t}}const xu={chrX:"rgb(204, 153, 0)",chrY:"rgb(153, 204, 0)",chrUn:"rgb(50, 50, 50)",chr1:"rgb(80, 80, 255)",chrI:"rgb(139, 155, 187)",chr2:"rgb(206, 61, 50)",chrII:"rgb(206, 61, 50)",chr2a:"rgb(216, 71, 60)",chr2b:"rgb(226, 81, 70)",chr3:"rgb(116, 155, 88)",chrIII:"rgb(116, 155, 88)",chr4:"rgb(240, 230, 133)",chrIV:"rgb(240, 230, 133)",chr5:"rgb(70, 105, 131)",chr6:"rgb(186, 99, 56)",chr7:"rgb(93, 177, 221)",chr8:"rgb(128, 34, 104)",chr9:"rgb(107, 215, 107)",chr10:"rgb(213, 149, 167)",chr11:"rgb(146, 72, 34)",chr12:"rgb(131, 123, 141)",chr13:"rgb(199, 81, 39)",chr14:"rgb(213, 143, 92)",chr15:"rgb(122, 101, 165)",chr16:"rgb(228, 175, 105)",chr17:"rgb(59, 27, 83)",chr18:"rgb(205, 222, 183)",chr19:"rgb(97, 42, 121)",chr20:"rgb(174, 31, 99)",chr21:"rgb(231, 199, 111)",chr22:"rgb(90, 101, 94)",chr23:"rgb(204, 153, 0)",chr24:"rgb(153, 204, 0)",chr25:"rgb(51, 204, 0)",chr26:"rgb(0, 204, 51)",chr27:"rgb(0, 204, 153)",chr28:"rgb(0, 153, 204)",chr29:"rgb(10, 71, 255)",chr30:"rgb(71, 117, 255)",chr31:"rgb(255, 194, 10)",chr32:"rgb(255, 209, 71)",chr33:"rgb(153, 0, 51)",chr34:"rgb(153, 26, 0)",chr35:"rgb(153, 102, 0)",chr36:"rgb(128, 153, 0)",chr37:"rgb(51, 153, 0)",chr38:"rgb(0, 153, 26)",chr39:"rgb(0, 153, 102)",chr40:"rgb(0, 128, 153)",chr41:"rgb(0, 51, 153)",chr42:"rgb(26, 0, 153)",chr43:"rgb(102, 0, 153)",chr44:"rgb(153, 0, 128)",chr45:"rgb(214, 0, 71)",chr46:"rgb(255, 20, 99)",chr47:"rgb(0, 214, 143)",chr48:"rgb(20, 255, 177)"};let ku,Iu;class Su extends mu{constructor(e,t,i,n){super(e,t,i,n)}get contentDiv(){return this.$viewport.get(0)}initializationHelper(){let e;this.$multiLocusCloseButton=Bt("<div>",{class:"igv-multi-locus-close-button"}),this.$viewport.append(this.$multiLocusCloseButton),this.$multiLocusCloseButton.get(0).appendChild(l("times-circle")),this.$multiLocusCloseButton.click((()=>{this.browser.removeMultiLocusPanel(this.referenceFrame)})),this.$rulerLabel=Bt("<div>",{class:"igv-multi-locus-ruler-label"}),this.$viewport.append(this.$rulerLabel),e=document.createElement("div"),this.$rulerLabel.append(Bt(e)),this.$rulerLabel.get(0).addEventListener("click",(async e=>{e.stopPropagation(),await this.browser.gotoMultilocusPanel(this.referenceFrame)})),this.$tooltip=Bt("<div>",{class:"igv-ruler-tooltip"}),this.$tooltip.height(this.$viewport.height()),this.$viewport.append(this.$tooltip),this.$tooltipContent=Bt("<div>"),this.$tooltip.append(this.$tooltipContent),this.rulerSweeper=new Cu(this,this.$viewport.get(0).parentElement,this.browser,this.referenceFrame),this.attachMouseHandlers(hu.isWholeGenomeView(this.referenceFrame.chr)),this.$tooltip.hide(),this.dismissLocusLabel()}presentLocusLabel(e){this.$multiLocusCloseButton.show(),this.$rulerLabel.show(),this.$rulerLabel.get(0).style.backgroundColor=_u(this.referenceFrame.chr);const t=this.$rulerLabel.get(0).querySelector("div"),{width:i}=this.$rulerLabel.get(0).getBoundingClientRect();t.innerHTML=`${this.referenceFrame.getMultiLocusLabel(e)}`;const{width:n}=t.getBoundingClientRect();n/i>.5&&(t.innerHTML=`${this.referenceFrame.getMultiLocusLabelBPLengthOnly(e)}`)}dismissLocusLabel(){this.$rulerLabel.hide(),this.$multiLocusCloseButton.hide()}attachMouseHandlers(e){if(this.namespace=`.ruler_track_viewport_${this.browser.referenceFrameList.indexOf(this.referenceFrame)}`,this.$viewport.off(this.namespace),!0===e){const e=this.browser.referenceFrameList.indexOf(this.referenceFrame),t=`click${this.namespace}`;this.$viewport.on(t,(t=>{const{x:i}=a(t,this.$viewport.get(0)),n=Math.round(this.referenceFrame.start+this.referenceFrame.toBP(i));let r;const{chr:s}=this.browser.genome.getChromosomeCoordinate(n);if(1===this.browser.referenceFrameList.length)r=s;else{let t=this.browser.referenceFrameList.map((({locusSearchString:e})=>e));t[e]=s,r=t.join(" ")}this.browser.search(r)})),this.$viewport.get(0).style.cursor="pointer"}else this.$viewport.get(0).style.cursor="default"}mouseMove(e){if(!0===this.browser.doShowCursorGuide){void 0===Iu?(Iu=this,this.$tooltip.show()):Iu.guid!==this.guid?(Iu.$tooltip&&Iu.$tooltip.hide(),this.$tooltip.show(),Iu=this):this.$tooltip.show();if(this.browser.isMultiLocusWholeGenomeView()||hu.isWholeGenomeView(this.referenceFrame.chr))return void this.$tooltip.hide();const{x:t}=a(e,this.$viewport.get(0)),{start:i,end:n,bpPerPixel:r}=this.referenceFrame,s=Math.round(.5+i+Math.max(0,t)*r);this.$tooltipContent.text(Rt(s));const{width:o}=this.$tooltipContent.get(0).getBoundingClientRect(),{width:c}=this.$viewport.get(0).getBoundingClientRect();return this.$tooltip.css({left:`${ys.clamp(t,0,c-o)}px`}),clearTimeout(ku),ku=setTimeout((()=>{this.$tooltip&&this.$tooltip.hide()}),1e4),{start:i,bp:s,end:n}}}startSpinner(){}stopSpinner(){}dispose(){this.rulerSweeper.dispose(),super.dispose()}}class Eu extends mu{featureCache=new Nu;constructor(e,t,i,n){super(e,t,i,n)}initializationHelper(){this.canvas=document.createElement("canvas"),this.canvas.className="igv-ideogram-canvas",this.$viewport.append(Bt(this.canvas)),this.ideogram_ctx=this.canvas.getContext("2d"),this.addMouseHandlers()}async getFeatures(e,t,i,n){return this.featureCache.containsRange(e)?this.featureCache.get(e):this.loadFeatures()}async loadFeatures(){const e=this.referenceFrame.chr,t=await this.referenceFrame.genome.getCytobands(e);return this.featureCache.set(e,t),t}repaint(){if(void 0===this.featureCache)return;const{width:e,height:t}=this.$viewport[0].getBoundingClientRect();xo.configureHighDPICanvas(this.ideogram_ctx,e,t);const i=this.referenceFrame.chr,n=this.featureCache.get(i),r={context:this.ideogram_ctx,pixelWidth:e,pixelHeight:t,referenceFrame:this.referenceFrame,features:n};this.trackView.track.draw(r)}addMouseHandlers(){this.addViewportClickHandler(this.$viewport.get(0))}addViewportClickHandler(e){this.boundClickHandler=function(e){const{xNormalized:t,width:i}=a(e,this.ideogram_ctx.canvas),{bpLength:n}=this.browser.genome.getChromosome(this.referenceFrame.chr),r=this.referenceFrame.bpPerPixel*i/n;let s=t;s-r/2<0&&(s=r/2);s+r/2>1&&(s=1-r/2);const o=Math.round((s-r/2)*n),c=Math.round((s+r/2)*n);this.referenceFrame.start=o,this.referenceFrame.end=c,this.referenceFrame.bpPerPixel=(c-o)/i,this.browser.updateViews(this.referenceFrame,this.browser.trackViews,!0)}.bind(this),e.addEventListener("click",this.boundClickHandler)}setWidth(e){this.$viewport.width(e)}renderSVGContext(e,{deltaX:t,deltaY:i},n=!0){const{width:r,height:o}=this.$viewport.get(0).getBoundingClientRect(),a=`ideogram_referenceFrame_${this.browser.referenceFrameList.indexOf(this.referenceFrame)}_guid_${s()}`,c=t,l=i+this.contentTop,h=-this.contentTop;e.saveWithTranslationAndClipRect(a,c,l,r,o,h),this.trackView.track.draw({context:e,pixelWidth:r,pixelHeight:o,referenceFrame:this.referenceFrame,features:this.featureCache.get(this.referenceFrame.chr)}),e.restore()}startSpinner(){}stopSpinner(){}}class Nu{features=new Map;containsRange(e){return this.features.has(e)}set(e,t){this.features.set(e,t)}get(e){return this.features.get(e)}}function Bu(e,t,i,n){if("ruler"===e.track.type)return new Su(e,t,i,n);if("ideogram"===e.track.id)return new Eu(e,t,i,n);{const r=new mu(e,t,i,n);return i.viewport=r,r}}const Mu=["rgb(255, 0, 0)","rgb(0, 255, 0)","rgb(0, 0, 255)","rgb(255, 0, 255)","rgb(0, 255, 255)","rgb(128, 0, 128)","rgb(255, 165, 0)","rgb(255, 105, 180)","rgb(255, 127, 80)","rgb(220, 20, 60)","rgb(255, 99, 71)","rgb(173, 216, 230)","rgb(144, 238, 144)","rgb(224, 255, 255)","rgb(250, 250, 210)","rgb(152, 251, 152)","rgb(70, 130, 180)","rgb(102, 205, 170)"].map((e=>{const[t,i,n]=e.split(","),[r,s]=t.split("("),[o,a]=n.split(")");return[s,i,o]})),Ru=ro("magnesium"),Du=["#sampleTable","#sampleMapping","#colors"];class Tu{static emptySpaceReplacement="|";sampleDictionary={};attributeNames=[];sampleMappingDictionary={};colorDictionary={};attributeRangeLUT={};constructor(e){e.tracks.some((e=>"function"==typeof e.getSamples)).length>0&&e.sampleInfoControl.setButtonVisibility(!0),this.initialize()}initialize(){this.sampleInfoFiles=[],this.attributeNames=[],this.sampleDictionary={},this.sampleMappingDictionary={},this.colorDictionary={},this.attributeRangeLUT={},this.initialized=!1}get attributeCount(){return this.attributeNames?this.attributeNames.length:0}isInitialized(){return this.initialized}hasAttributes(){return this.attributeCount>0}getAttributes(e){const t=0===Object.keys(this.sampleMappingDictionary)?e:this.sampleMappingDictionary[e]||e;return this.sampleDictionary[t]}async loadSampleInfoFile(e){try{const t=await Qs.loadString(e);this.#p(t),this.sampleInfoFiles.push(e)}catch(e){console.error(e.message)}}#p(e){const t=function(e){const t={},i=e.split(/\r?\n|\r/).map((e=>e.trim())).filter((e=>""!==e));let n;Du.includes(i[0])||(n="#sampleTable",t[n]=[]);for(const e of i)Du.includes(e)?(n=e,t[n]=[]):n&&!1===e.startsWith("#")&&t[n].push(e);return t}(e);for(const[e,i]of Object.entries(t))switch(e){case"#sampleTable":this.#g(i);break;case"#sampleMapping":this.#m(i);break;case"#colors":this.#w(i)}this.initialized=!0}getAttributeColor(e,t){let i;if("-"===t)i=ro("snow");else if("string"==typeof t&&this.colorDictionary[t])i=this.colorDictionary[t]();else if(this.colorDictionary[e])i=this.colorDictionary[e](t);else if("string"==typeof t)i="NA"===t?Ru:function(e){let t=0;for(let i=0;i<e.length;i++)t=e.charCodeAt(i)+((t<<5)-t);let i=[];for(let e=0;e<3;e++){const n=t>>8*e&255;i.push(n)}return`rgb(${i.join(", ")})`}(t);else{const[n,r]=this.attributeRangeLUT[e],s=.2,o=Math.max((t-n)/(r-n),s),[a,c,l]=Mu[Object.keys(this.attributeRangeLUT).indexOf(e)];i=`rgba(${a},${c},${l},${o})`}return i}getSortedSampleKeysByAttribute(e,t,i){i=i||1;const n=e.filter((e=>"number"==typeof this.getAttributes(e)[t])),r=e.filter((e=>"string"==typeof this.getAttributes(e)[t])),s=(e,n)=>{const r=this.getAttributes(e)[t],s=this.getAttributes(n)[t];return"string"==typeof r&&"string"==typeof s?i*r.localeCompare(s):"number"==typeof r&&"number"==typeof s?i*(r-s):void 0};return n.sort(s),r.sort(s),-1===i?[...n,...r]:[...r,...n]}toJSON(){const e=[];for(const t of this.sampleInfoFiles){const i={url:t},n=Hl.localFileInspection(i);e.push(n)}return e}#g(e){const t=e.shift().split("\t").filter((e=>e.length>0));t.shift();const i=t.map((e=>e.split(" ").join(Tu.emptySpaceReplacement))),n=e.filter((e=>e.length>0));let r;for(const e of n){const t=e.split("\t"),n=t.shift();void 0===r&&(r={}),r[n]={};for(let e=0;e<t.length;e++){const s={};""===t[e]?s[i[e]]="-":s[i[e]]=t[e],Object.assign(r[n],s)}}for(const[e,t]of Object.entries(r))r[e]=zu(t);const s=function(e,t){const i={};for(const n of Object.values(t))for(const t of e){let e=n[t];void 0===i[t]&&(i[t]=[]),i[t].push(e)}const n=e=>"number"==typeof e,r=e=>"string"==typeof e;for(const e of Object.keys(i)){const t=i[e],s=new Set(t),o=Array.from(s);if(!0===o.some(r)&&!0===o.some(n)?i[e]=o.filter((e=>!r(e))):i[e]=o,!i[e].some(r)){const t=i[e].slice();i[e]=[Math.min(...t),Math.max(...t)]}}return i}(i,r);Lu(this.attributeRangeLUT,s);const o=new Set(this.attributeNames);for(const e of i)o.has(e)||this.attributeNames.push(e);Lu(this.sampleDictionary,r)}#m(e){for(const t of e){const[e,i]=t.split("\t");this.sampleMappingDictionary[e]=i}}#w(e){const t=(e,t,i)=>{let n;switch(t){case 0:n=e.split(" ").join(Tu.emptySpaceReplacement);break;case 1:n=e.includes(":")?e.split(":").map((e=>parseFloat(e))):e;break;case 2:case 3:n=`rgb(${e})`}return n},i=e.map((e=>e.split("\t").map(t))),n=i.filter((e=>3===e.length&&!e.includes("*"))).filter((([e,t,i])=>!Array.isArray(t))),r={};for(const e of n){const[t,i,n]=e;void 0===r[t]&&(r[t]={}),r[t][i.toUpperCase()]=n}for(const[e,t]of Object.entries(r)){const i=Object.assign({},t);this.colorDictionary[e]=e=>{const t=e.toUpperCase();return i[t]||ro("snow")}}const s=i.filter((e=>Array.isArray(e[1])));for(const e of s){const[t,i]=e[1],n=e[0];if(3===e.length){const[r,s,o]=uo(e[2]);this.colorDictionary[n]=e=>{e=ys.clamp(e,t,i);return lo(r,s,o,(e-t)/(i-t))}}else if(4===e.length){const[t,i]=e[1],[n,r,s,o]=e;this.colorDictionary[n]=e=>{e=ys.clamp(e,t,i);return fo(s,o,(e-t)/(i-t))}}}const o=i.filter((e=>3===e.length&&e.includes("*")));for(const e of o)if("*"===e[1]){const[t,i,n]=e;this.colorDictionary[t]=e=>{if("NA"===e)return Ru;{const[i,r]=this.attributeRangeLUT[t],s=(e-i)/(r-i),[o,a,c]=uo(n);return lo(o,a,c,s)}}}else if("*"===e[0]){const[t,i,n]=e;this.colorDictionary[i]=()=>n}}}function Lu(e,t){for(const[i,n]of Object.entries(t))i in e&&e[i]===n||(e[i]=n)}function zu(e){const t=Object.assign({},e);for(const[e,i]of Object.entries(t))"string"!=typeof i||isNaN(i)||(t[e]=Number(i));return t}const Hu=16,Pu=Rt;class Ou{constructor(e){this.browser=e,this.height=40,this.name="",this.id="ruler",this.disableButtons=!0,this.ignoreTrackMenu=!0,this.order=.01*Number.MIN_SAFE_INTEGER,this.removable=!1,this.type="ruler"}async getFeatures(e,t,i){return[]}computePixelHeight(e){return this.height}draw({context:e,referenceFrame:t,pixelWidth:i,pixelHeight:n,bpPerPixel:r,bpStart:s}){hu.isWholeGenomeView(t.chr)?this.drawWholeGenome({context:e,pixelWidth:i,pixelHeight:n,bpPerPixel:r}):this.doDraw({context:e,referenceFrame:t,pixelWidth:i,pixelHeight:n,bpStart:s})}drawWholeGenome({context:e,pixelWidth:t,pixelHeight:i,bpPerPixel:n}){e.save(),xo.fillRect(e,0,0,t,i,{fillStyle:"white"});for(let t of this.browser.genome.wgChromosomeNames){let r=this.browser.genome.getCumulativeOffset(t),s=this.browser.genome.getChromosome(t).bpLength,o=Math.round(r/n),a=Math.round(s/n);this.renderChromosomeRect(e,o,0,a,i,t)}e.restore()}doDraw({context:e,referenceFrame:t,pixelWidth:i,pixelHeight:n,bpStart:r}){e.clearRect(0,0,i,n);const s=function(e,t){if(e<10)return new Uu(1,"bp",1);const i=Math.floor(Math.log10(e));let n="bp",r=1;i>9?(n="gb",r=1e9):i>6?(n="mb",r=1e6):i>3&&(n="kb",r=1e3);const s=Math.pow(10,i-1),o=e/s,a=75,c=Math.pow(10,i-1),l=Math.pow(10,i)/2;return new Uu(o<a&&!0!==t?c:l,n,r)}(Math.floor(t.toBP(i)),e.isSVG);let o=Math.floor(r/s.majorTick)-1;const{tickDelta:a,labelLength:c}=function(e,t,i,n,r){const s=l(t,c(1+n,r),i)-l(t,c(n,r),i),o=`${Rt(Math.floor(c(n,r)/r.unitMultiplier))} ${r.majorUnit}`,a=Math.floor(e.measureText(o).width);return{tickDelta:s,labelLength:a};function c(e,t){return Math.floor(e*t.majorTick)}function l(e,t,i){return Math.round(e.toPixels(t-1-i+.5))}}(e,t,r,o,s);let l,h;this.browser.referenceFrameList.indexOf(t);let d=a;const u=.25*c;do{h=Math.floor(o*s.majorTick);const i=`${Rt(Math.floor(h/s.unitMultiplier))} ${s.majorUnit}`;l=Math.round(t.toPixels(h-1-r+.5));const n=Math.round(l-e.measureText(i).width/2);n>0&&u+c<=d&&(xo.fillText(e,i,n,this.height-8),d=0),l>0&&xo.strokeLine(e,l,this.height-6,l,this.height-2),h=Math.floor((1+o)*s.majorTick);let f=l+(Math.round(t.toPixels(h-1-r+.5))-l)/2;f>0&&xo.strokeLine(e,f,this.height-6,f,this.height-2),++o,d+=a}while(l<i);xo.strokeLine(e,0,this.height-2,i,this.height-2)}renderChromosomeRect(e,t,i,n,r,s){e.textAlign="center",e.textBaseline="middle",e.font="12px sans-serif",xo.strokeLine(e,t+n,i,t+n,i+r,{strokeStyle:_s.greyScale(191)});const o=(s=this.browser.genome.getChromosomeDisplayName(s)).startsWith("chr")?s.substring(3):s;n>e.measureText(o).width&&xo.fillText(e,o,t+n/2,i+r/2,{fillStyle:_s.greyScale(68)})}get supportsWholeGenome(){return!0}dispose(){}}class Uu{constructor(e,t,i){this.majorTick=e,this.minorTick=e/10,this.majorUnit=t,this.unitMultiplier=i}description(e){console.log((e||"")+" tick "+Pu(this.majorTick)+" label width "+Pu(this.labelWidthBP)+" multiplier "+this.unitMultiplier)}}class qu{constructor(t,i,n){this.guid=s(),this.trackView=t,this.browser=t.browser,this.viewport=e({class:"igv-viewport"}),i.appendChild(this.viewport),this.viewport.style.height=`${t.track.height}px`,null===this.viewport.previousElementSibling&&(this.viewport.style.zIndex=16,this.viewport.style.overflow="visible"),this.canvas=document.createElement("canvas"),this.viewport.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.ctx.font="10px verdana",this.contentTop=0,this.hitList=void 0,this.sortDirection=1,this.setWidth(n),this.addMouseHandlers()}resizeCanvas(){const e=window.devicePixelRatio,t=this.browser.getSampleInfoViewportWidth();let i;if(this.browser.trackViews.length>1&&null===this.viewport.previousElementSibling){const[e,t]=[this.browser.ideogramTrackView.track,this.browser.rulerTrackView.track];i=e.height+t.height}else i=this.viewport.clientHeight;if(this.canvas.width!==t*e||this.canvas.height!==i*e){const n=this.canvas;n.width=t*e,n.height=i*e,n.style.width=`${t}px`,n.style.height=`${i}px`,this.ctx=this.canvas.getContext("2d"),this.ctx.scale(e,e),null===this.viewport.previousElementSibling&&xo.fillRect(this.ctx,0,0,this.ctx.canvas.width,this.ctx.canvas.height,{fillStyle:ro("snow")})}}setTop(e){"function"==typeof this.trackView.track.getSamples&&(this.contentTop=e,this.repaint())}setWidth(e){this.viewport.innerWidth=e,this.resizeCanvas()}setHeight(e){const t=this.browser.getSampleInfoViewportWidth();this.viewport.style.width=`${t}px`,this.viewport.style.height=`${e}px`;const i=window.devicePixelRatio;this.canvas.width=t*i,this.canvas.height=e*i,this.canvas.style.width=`${t}px`,this.canvas.style.height=`${e}px`,this.ctx=this.canvas.getContext("2d"),this.ctx.scale(i,i),null===this.viewport.previousElementSibling&&xo.fillRect(this.ctx,0,0,this.ctx.canvas.width,this.ctx.canvas.height,{fillStyle:ro("snow")})}async repaint(){if(this.resizeCanvas(),"function"==typeof this.trackView.track.getSamples){const e=this.trackView.track.getSamples();e.names&&e.names.length>0&&this.draw({context:this.ctx,samples:e})}else null===this.viewport.previousElementSibling&&(this.browser.rulerTrackView&&this.browser.rulerTrackView.setTrackHeight(!0===this.browser.sampleInfoControl.showSampleInfo?this.calculateSampleInfoColumnHeight():40,!0),this.renderSampleInfoColumns(this.ctx))}calculateSampleInfoColumnHeight(){const e=this.browser.sampleInfo.attributeNames.map((e=>this.ctx.measureText(e).width));return 4+Math.min(Math.max(...e),128)}draw({context:e,samples:t}){if(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillStyle=ro("snow"),e.fillRect(0,0,e.canvas.width,e.canvas.height),t&&t.names.length>0){const i=this.browser.sampleInfo.attributeNames,n=this.viewport.getBoundingClientRect().height;let r=1;const s=t.height;r=s-2*r<=1?0:1;let o=this.contentTop+t.yOffset;this.hitList={};for(const a of t.names){if(o>n)break;if(o+s>0){const t=this.browser.sampleInfo.getAttributes(a);if(t){const n=Object.entries(t);for(const t of n){const[n,a]=t;e.fillStyle=this.browser.sampleInfo.getAttributeColor(n,a);const c=8+i.indexOf(n)*Hu,l=o+r,h=s-2*r;e.fillRect(c,l,15,h);const d=`${Math.floor(c)}#${Math.floor(l)}#16#${Math.ceil(h)}`;this.hitList[d]=`${n}#${a}`}}}o+=s}}}renderSampleInfoColumns(e){const t=(e,t,i,n,r,s)=>{e.save(),e.font="10px verdana",e.translate(i+r/2,n+s),e.rotate(-Math.PI/2),e.textAlign="left",e.fillStyle=ro("lead"),e.fillText(t,2,2),e.restore()},i=this.browser.sampleInfo.attributeNames;this.hitList={};for(let n=0;n<i.length;n++){const r=8+n*Hu,s=15,o=Math.round(e.canvas.height/window.devicePixelRatio);xo.fillRect(e,r,0,s,o,{fillStyle:ro("snow")}),t(e,i[n],r,0,s,o);const a=`${Math.floor(r)}#0#${s}#${Math.ceil(o)}`;this.hitList[a]=`${i[n]}`}}renderSVGContext(e,{deltaX:t,deltaY:i}){if("function"==typeof this.trackView.track.getSamples){const n=this.trackView.track.getSamples(),r=0,{width:o,height:a}=this.viewport.getBoundingClientRect(),c=`${(this.trackView.track.name||this.trackView.track.id).replace(/\W/g,"")}_sample_names_guid_${s()}`;e.saveWithTranslationAndClipRect(c,t,i+r,o,a,-r),this.draw({context:e,samples:n}),e.restore()}}addMouseHandlers(){this.addMouseMoveHandler()}addMouseMoveHandler(){this.boundMouseMoveHandler=function(e){if(this.hitList){const t=Object.entries(this.hitList);if(null===this.viewport.previousElementSibling){const i=(t,i)=>{const{marginTop:n}=window.getComputedStyle(i),{x:r,y:s}=a(e,this.browser.columnContainer.querySelector(".igv-sample-info-column"));return{x:Math.floor(r),y:Math.floor(s-parseInt(n,10))}},n=this.browser.columnContainer.querySelector(".igv-sample-info-column"),{x:r,y:s}=i(n,this.viewport);n.setAttribute("title","");for(const[e,i]of t){const[t,o,a,c]=e.split("#").map((e=>parseInt(e,10)));if(!(r<t||r>t+a||s<o||s>o+c)){n.setAttribute("title",`${i}`);break}}}else{const{x:i,y:n}=a(e,this.viewport);this.viewport.setAttribute("title","");for(const[e,r]of t){const[t,s,o,a]=e.split("#").map((e=>parseInt(e,10)));if(!(i<t||i>t+o||n<s||n>s+a)){const[e,t]=r.split("#");this.viewport.setAttribute("title",`${e.split(Tu.emptySpaceReplacement).join(" ")}: ${"-"===t?"":t}`);break}}}}}.bind(this),this.viewport.addEventListener("mousemove",this.boundMouseMoveHandler)}removeMouseHandlers(){this.viewport.removeEventListener("mousemove",this.boundMouseMoveHandler)}dispose(){this.removeMouseHandlers(),this.viewport.remove()}show(){this.viewport.style.display="block"}hide(){this.viewport.style.display="none"}}class Qu{constructor(t,i,n,r){this.guid=s(),this.trackView=t,this.browser=t.browser,this.viewport=e({class:"igv-viewport"}),i.appendChild(this.viewport),t.track.height&&(this.viewport.style.height=`${t.track.height}px`),this.canvas=document.createElement("canvas"),this.viewport.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.trackScrollDelta=0,this.contentTop=0,this.hitList=void 0,this.sortDirection=1,this.setWidth(r),this.addMouseHandlers()}checkCanvas(){const e=this.browser.sampleNameViewportWidth||0;this.ctx.canvas.width=e*window.devicePixelRatio,this.ctx.canvas.style.width=`${e}px`,this.ctx.canvas.height=this.viewport.clientHeight*window.devicePixelRatio,this.ctx.canvas.style.height=`${this.viewport.clientHeight}px`,this.ctx.scale(window.devicePixelRatio,window.devicePixelRatio)}setTop(e){if("function"==typeof this.trackView.track.getSamples){this.contentTop=e;const t=this.trackView.track.getSamples();this.repaint(t)}}setWidth(e){this.viewport.innerWidth=e,this.checkCanvas()}async repaint(e){if(e.names.length>0&&!0===this.browser.showSampleNames&&(this.checkCanvas(),this.draw({context:this.ctx,samples:e}),void 0===this.browser.sampleNameViewportWidth)){const t=e.names.map((e=>this.ctx.measureText(e).width));this.browser.sampleNameViewportWidth=Math.min(200,4+Math.ceil(Math.max(...t))),this.browser.layoutChange()}}draw({context:e,samples:t}){if(xo.fillRect(e,0,0,e.canvas.width,t.height,{fillStyle:ro("snow")}),t&&t.names.length>0){const i=this.viewport.getBoundingClientRect().height,n=t.height,r=n-2<=1?0:1;let s=this.contentTop+t.yOffset;this.hitList={};for(const o of t.names){if(s>i)break;if(s+n>0){const t=n-2*r;Vu(e,o,0+2,s+r,e.canvas.width,t)}s+=n}}}renderSVGContext(e,{deltaX:t,deltaY:i}){if("function"==typeof this.trackView.track.getSamples){const n=this.trackView.track.getSamples(),r=0,{width:o,height:a}=this.viewport.getBoundingClientRect(),c=`${(this.trackView.track.name||this.trackView.track.id).replace(/\W/g,"")}_sample_names_guid_${s()}`;e.saveWithTranslationAndClipRect(c,t,i+r,o,a,-r),this.draw({context:e,samples:n}),e.restore()}}addMouseHandlers(){this.boundClickHandler=function(e){e.preventDefault();const t={label:"Name Panel Width",value:this.browser.sampleNameViewportWidth,callback:e=>{this.browser.sampleNameViewportWidth=parseInt(e),this.browser.layoutChange()}};this.browser.inputDialog.present(t,e)}.bind(this),this.viewport.addEventListener("contextmenu",this.boundClickHandler),this.boundMouseMoveHandler=function(e){if(this.hitList){const t=Object.entries(this.hitList),{x:i,y:n}=a(e,this.viewport);this.viewport.setAttribute("title","");for(const[e,r]of t){const[t,s,o,a]=e.split("#").map((e=>parseInt(e,10)));if(!(i<t||i>t+o||n<s||n>s+a)){this.viewport.setAttribute("title",`${r}`);break}}}}.bind(this),this.viewport.addEventListener("mousemove",this.boundMouseMoveHandler)}removeMouseHandlers(){this.viewport.removeEventListener("contextmenu",this.boundClickHandler),this.viewport.removeEventListener("mousemove",this.boundMouseMoveHandler)}dispose(){this.removeMouseHandlers(),this.viewport.remove()}}function Vu(e,t,i,n,r,s){const o=Math.min(s,10);e.font=`${o}px sans-serif`,e.textAlign="start",e.fillStyle=ro("lead");const a=i,c=e.measureText(t),l=n+s/2+(c.actualBoundingBoxAscent+c.actualBoundingBoxDescent)/2;e.fillText(t,a,l)}class ju{constructor(t){this.popover=e({class:"igv-menu-popup"}),t.appendChild(this.popover),this.parent=t;const i=e({class:"igv-menu-popup-header"});this.popover.appendChild(i),u(i,(()=>this.popover.style.display="none")),this.popoverContent=e(),this.popover.appendChild(this.popoverContent),p(this.popover,i),i.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault()})),this.popover.style.display="none"}presentMenuList(e,t){if(Wu(this.parent),t.length>0){this.popoverContent.innerHTML="";const i=this.parseMenuList(e,t);for(let e of i){e.init&&e.init();let t=e.object;0===i.indexOf(e)&&t.removeClass("igv-track-menu-border-top"),t.hasClass("igv-track-menu-border-top")||t.hasClass("igv-menu-popup-check-container")||t.is("div")&&t.addClass("igv-menu-popup-shim"),this.popoverContent.appendChild(t.get(0))}this.popover.style.display="flex";const{width:n}=this.popover.getBoundingClientRect();this.popover.style.left=-n+"px",this.popover.style.top="0px"}}parseMenuList(e,t){return t.map(((t,i)=>{let n;if(t.name?(n=Bt("<div>"),n.text(t.name)):t.object?n=t.object:"string"==typeof t.label?(n=Bt("<div>"),n.html(t.label)):"string"==typeof t&&(n=t.startsWith("<")?Bt(t):Bt("<div>"+t+"</div>")),0===i&&n.addClass("igv-track-menu-border-top"),t.click||t.dialog){const i=i=>{if(i.preventDefault(),i.stopPropagation(),t.click)if(e.track.selected){const n=e.browser.getSelectedTrackViews();if(!0===t.doAllMultiSelectedTracks)t.click.call(e.track,i);else if("removeTrack"===t.menuItemType){const r=()=>{e.browser.overlayTrackButton.setVisibility(!1);for(const{track:e}of n)t.click.call(e,i)},s={html:`Are you sure you want to delete ${n.length} tracks?`,callback:r};e.browser.menuUtils.dialog.present(s,i)}else for(const{track:e}of n)t.click.call(e,i)}else t.click.call(e.track,i);else t.dialog&&t.dialog.call(e.track,i);this.popover.style.display="none"};n.on("click",i),n.on("touchend",(e=>i(e))),n.on("mouseup",(function(e){e.preventDefault(),e.stopPropagation()}))}return{object:n,init:t.init||void 0}}))}presentTrackContextMenu(t,n){this.popoverContent.innerHTML="";const r=function(t,n){return t.map((t=>{let r;if("string"==typeof t&&"<hr/>"===t)r=document.createElement("hr");else if("string"==typeof t)r=e({class:"context-menu"}),r.innerHTML=t;else if("Node"==typeof t)r=t;else{if("function"==typeof t.init&&t.init(),"checkbox"===t.type)r=Dl("Show all bases",t.value);else if("color"===t.type){const s=new Da(n.parentElement);s.configure({color:"grey"}),r=e({class:"context-menu"}),"string"==typeof t.label&&(r.innerHTML=t.label);const o=e=>{s.show(),i(n),e.preventDefault(),e.stopPropagation()};r.addEventListener("click",o),r.addEventListener("touchend",o),r.addEventListener("mouseup",(function(e){e.preventDefault(),e.stopPropagation()}))}else r=e({class:"context-menu"}),"string"==typeof t.label&&(r.innerHTML=t.label);if(t.click&&"color"!==t.type){function a(e){t.click(),i(n),e.preventDefault(),e.stopPropagation()}r.addEventListener("click",a),r.addEventListener("touchend",a),r.addEventListener("mouseup",(function(e){e.preventDefault(),e.stopPropagation()}))}}return{el:r,init:t.init}}))}(n,this.popover);for(let{el:e}of r)this.popoverContent.appendChild(e);!function(e,t){t.style.display="flex";const{x:i,y:n}=a(e,t.parentNode),{width:r}=t.getBoundingClientRect(),s=i+r,{width:o}=t.parentNode.getBoundingClientRect();t.style.left=`${s>o?i-(s-o):i}px`,t.style.top=`${n}px`}(t,this.popover)}hide(){this.popover.style.display="none"}dispose(){this.popoverContent.innerHTML="",this.popover.innerHTML="",Object.keys(this).forEach((function(e){this[e]=void 0}))}}const Wu=e=>{const t=e.querySelectorAll(".igv-menu-popup");for(const e of t)e.style.display="none"};class Gu{constructor(t,i,n,r,s,o,a){this.browser=t,this.button=e({class:"igv-navbar-text-button"}),i.appendChild(this.button),Array.isArray(n)?(this.textContent=n[0],this.title=n[1]):this.textContent=this.title=n,this.buttonLabel=r,this.imageDictionary={image:`url("data:image/svg+xml,${encodeURIComponent(s)}")`,imageHover:`url("data:image/svg+xml,${encodeURIComponent(o)}")`},this.responsiveKey="text",this.configureButton(this.textContent,this.title),this.setState(a),t.on("navbar-resize",(e=>{this.navbarResizeHandler(e)}))}navbarResizeHandler(e){const t="igv-navbar-icon-button"===e?"image":"text";t!==this.responsiveKey&&(this.responsiveKey=t,this.configureButton(this.textContent,this.title),this.setState(void 0))}configureButton(e,t){this.groupElement=void 0,this.button.title=t,this.button.innerHTML="",this.button.style.backgroundImage="none",this.button.classList.remove("igv-navbar-icon-button"),this.button.classList.remove("igv-navbar-text-button"),"text"===this.responsiveKey?this.configureTextButton(e):this.configureIconButton()}configureTextButton(e){this.button.classList.add("igv-navbar-text-button");const t=document.createElement("div");t.innerHTML=this.buttonLabel;const i=t.firstChild;this.button.appendChild(i),this.groupElement=i.querySelector("#igv-navbar-button-group");i.querySelector("#igv-navbar-button-label").textContent=e}configureIconButton(){this.button.classList.add("igv-navbar-icon-button")}setState(e){void 0!==e&&(this.doHover=e),"text"===this.responsiveKey?this.setTextButtonState(this.doHover):this.setIconButtonState(this.doHover)}setTextButtonState(e){this.groupElement.classList.remove(...this.groupElement.classList);const t=!0===e?"igv-navbar-text-button-svg-hover":"igv-navbar-text-button-svg-inactive";this.groupElement.classList.add(t)}setIconButtonState(e){this.button.style.backgroundImage=!0===e?this.imageDictionary.imageHover:this.imageDictionary.image}show(){this.button.style.display="flex"}hide(){this.button.style.display="none"}setVisibility(e){!0===e?this.show():this.hide()}static currentNavbarButtonClass(e){return e.$navigation.get(0).querySelector(".igv-navbar-text-button")?"igv-navbar-text-button":"igv-navbar-icon-button"}}const $u='<svg width="80px" height="18px" viewBox="0 0 80 18" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="igv-navbar-button-group">\n            <rect id="Rectangle" x="0.5" y="0.5" width="79" height="17" rx="6"></rect>\n            <text id="igv-text-button-label" x="50%" y="50%" dy=".1em" font-family="Helvetica" font-size="12" font-weight="normal" letter-spacing="-0.372">\n                <tspan id="igv-navbar-button-label"></tspan>\n            </text>\n        </g>\n    </g>\n</svg>',Ku=.01;function Yu(e,t,i,n){if(void 0===this.dataRange||void 0===this.dataRange.max||void 0===this.dataRange.min)return;xo.fillRect(e,0,0,t,i,{fillStyle:"white"}),n&&xo.fillRect(e,t-4-2,0,4,i,{fillStyle:n});const r=void 0!==this.flipAxis&&this.flipAxis,s=.95*t-8-5,o=.95*t-5,a={font:"normal 10px Arial",textAlign:"right",fillStyle:"black",strokeStyle:"black"};xo.strokeLine(e,s,Ku*i,o,Ku*i,a),xo.fillText(e,l(r?this.dataRange.min:this.dataRange.max),s+4,Ku*i+12,a);const c=.99*i;function l(e){return 0===e?"0":Math.abs(e)>=10?e.toFixed():Math.abs(e)>=1?e.toFixed(1):Math.abs(e)>=.1?e.toFixed(2):e.toExponential(1)}xo.strokeLine(e,s,c,o,c,a),xo.fillText(e,l(r?this.dataRange.max:this.dataRange.min),s+4,c-4,a),xo.strokeLine(e,o,Ku*i,o,c,a)}class Xu extends Hl{static defaults={autoscale:void 0,alpha:.5,height:50};constructor(e,t,i){super(e,t),this.type="merged",this.paintAxis=Yu,this.graphType=e.graphType,this.tracks=i||[]}async postInit(){if(this.config.tracks){for(let e of this.config.tracks){const t=await this.browser.createTrack(e);t?this.tracks.push(t):console.warn("Could not create track "+e),"function"==typeof t.postInit&&await t.postInit()}this.config.tracks.every((e=>void 0!==e.autoscale||void 0!==e.max))||(this.config.autoscale=void 0===this.config.max)}for(let e of this.tracks)e.isMergedTrack=!0;if(this.config.autoscale?this.autoscale=this.config.autoscale:void 0!==this.config.max&&this.setDataRange({min:this.config.min||0,max:this.config.max}),void 0!==this.config.flipAxis)for(let e of this.tracks)e.flipAxis=this.config.flipAxis;if(void 0!==this.config.logScale)for(let e of this.tracks)e.logScale=this.config.logScale;this.resolutionAware=this.tracks.some((e=>e.resolutionAware))}set flipAxis(e){this.config.flipAxis=e;for(let t of Ju(this.tracks))t.flipAxis=e}get flipAxis(){return Ju(this.tracks).every((e=>e.flipAxis))}set logScale(e){this.config.logScale=e;for(let t of Ju(this.tracks))t.logScale=e}get logScale(){return Ju(this.tracks).every((e=>e.logScale))}get height(){return this._height}set height(e){if(this.config.height=e,this._height=e,this.tracks)for(let t of this.tracks)t.height=e,t.config.height=e}set autoscale(e){if(this._autoscale=e,!1===e&&this.tracks)for(let e of this.tracks)e.autoscale=!1}get autoscale(){return this._autoscale}setDataRange({min:e,max:t}){this.autoscale=!1;for(const i of Ju(this.tracks))i.dataRange={min:e,max:t},i.autoscale=!1,i.autoscaleGroup=!1}set dataRange({min:e,max:t}){for(const i of Ju(this.tracks))i.dataRange={min:e,max:t}}get dataRange(){if(this.tracks){const e=Ju(this.tracks);if(e.length>0){const t=e[0].dataRange;if(e.every((e=>e.dataRange&&e.dataRange.min===t.min&&e.dataRange.max===t.max)))return t}}}menuItemList(){const e=[];return Ju(this.tracks).length>0&&(void 0!==this.flipAxis&&e.push({label:"Flip y-axis",click:function(){this.flipAxis=!this.flipAxis,this.trackView.repaintViews()}}),e.push(...this.numericDataMenuItems())),e.push("<hr/>"),e.push(this.overlayTrackAlphaAdjustmentMenuItem()),e.push(this.trackSeparationMenuItem()),e}async getFeatures(e,t,i,n){const r=this.tracks.map((r=>r.getFeatures(e,t,i,n))),s=await Promise.all(r);if(s.every((e=>0===e.length)))return new Zu([],[]);{const e=this.tracks.map((e=>e.name));return new Zu(s,e)}}draw(e){const t=e.features;for(let i=0,n=this.tracks.length;i<n;i++){const n=Object.assign({},e);n.features=t.featureArrays[i],n.alpha=this.alpha,this.graphType&&(this.tracks[i].graphType=this.graphType),this.tracks[i].draw(n)}}popupData(e){const t=this.clickedFeatures(e);if(t&&t.length===this.tracks.length){const i=[];let n=!0;for(let r=0;r<t.length;r++)if(r>0&&i.push("<hr/>"),i.push(`<div style=background-color:rgb(245,245,245);border-bottom-style:dashed;border-bottom-width:1px;padding-bottom:5px;padding-top:10px;font-weight:bold;font-size:larger >${t[r].trackName}</div>`),t[r].features.length>0){n=!1;const s=this.tracks[r].popupData(e,t[r].features);i.push(...s)}else i.push("Missing or 0 value(s)");return!0===n?[]:i}}clickedFeatures(e){const t=e.viewport.cachedFeatures;if(!t||!t.featureArrays||!Array.isArray(t.featureArrays)||0===t.featureArrays.length)return[];const i=e.genomicLocation,n=[],r=e.referenceFrame.bpPerPixel>.2?3*e.referenceFrame.bpPerPixel:.2,s=i-r,o=i+r;for(let e=0;e<t.featureArrays.length;e++){const i=to(t.featureArrays[e],s,o);n.push({trackName:t.trackNames[e],features:i})}return n}get supportsWholeGenome(){return this.tracks.every((e=>e.supportsWholeGenome))}getState(){const e=super.getState(),t=[];for(let e of this.tracks)t.push(e.getState());return e.tracks=t,e}updateScales(e){let t;if(this.autoscale){t=!0;let i=[];for(let t of e){if(t.featureCache&&t.featureCache.features){const e=t.referenceFrame,n=e.start,r=n+e.toBP(t.getWidth()),s=t.featureCache.features;this.autoscale&&(i.push({value:s.getMax(n,r)}),i.push({value:s.getMin(n,r)}))}const e=Qa(i);for(const t of Ju(this.tracks))t.dataRange=e}}else{let i=-1;for(let n of this.tracks)if(++i,n.autoscale){t=!0;let r=[];for(let t of e)if(t.featureCache&&t.featureCache.features){const e=t.referenceFrame,n=e.start,s=n+e.toBP(t.getWidth()),o=t.featureCache.features.featureArrays[i];if(o)for(let e of o)if(!(e.end<n)){if(e.start>s)break;r.push(e)}}n.dataRange=Qa(r)}}return t}overlayTrackAlphaAdjustmentMenuItem(){const t=e();return t.innerText="Set transparency",{object:Bt(t),dialog:function(e){const t={label:"Transparency",value:this.alpha,min:0,max:1,scaleFactor:1e3,callback:e=>{this.alpha=Math.max(.001,e),this.repaintViews()}};this.browser.sliderDialog.present(t,e)}}}trackSeparationMenuItem(){const e=Bt("<div>");return e.text("Separate tracks"),{object:e,click:function(e){const t=this.autoscale,i=this.name,n=this.tracks,r=this.browser,s=this.order;r.removeTrack(this);for(let e of n)e.order=s,t&&(e.autoscaleGroup=i),e.isMergedTrack=!1,r.addTrack(e.config,e);r.updateViews()}}}}class Zu{constructor(e,t){this.featureArrays=e,this.trackNames=t}getMax(e,t){let i=-Number.MAX_VALUE;for(let n of this.featureArrays)if(Array.isArray(n))for(let r of n)if(!(void 0===r.value||Number.isNaN(r.value)||r.end<e)){if(r.start>t)break;i=Math.max(i,r.value)}return i!==-Number.MAX_VALUE?i:100}getMin(e,t){let i=0;for(let n of this.featureArrays)if(Array.isArray(n))for(let r of n)if(void 0!==r.value&&!Number.isNaN(r.value)){if(r.end<e)continue;if(r.start>t)break;i=Math.min(i,r.value)}return i}}const Ju=e=>e?e.filter((e=>void 0!==e.dataRange||void 0!==e.autoscale||void 0!==e.autoscaleGroup)):[];class ef extends Gu{constructor(e,t){super(e,t,"Overlay Tracks",$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>Overlay Tracks</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="Overlay-Tracks">\n            <rect id="backdrop" stroke="#737373" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="layer-group" transform="translate(3, 127)">\n                <rect id="a" stroke="#737373" stroke-width="24" fill="#A1A1A1" x="12" y="12" width="332" height="139"></rect>\n                <rect id="a---hold-out" fill="#A1A1A1" x="9" y="25" width="324" height="115"></rect>\n                <rect id="b" stroke="#737373" stroke-width="24" fill="#C9C9C9" x="81" y="103" width="474" height="139"></rect>\n                <rect id="c" stroke="#737373" stroke-width="24" fill="#ECECEC" x="238" y="214" width="372" height="139"></rect>\n                <rect id="c---hold-out" fill="#ECECEC" x="250" y="226" width="372" height="115"></rect>\n            </g>\n            <rect id="over-border" stroke="#737373" stroke-width="12" x="6" y="6" width="613" height="613" rx="135"></rect>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>Overlay Tracks Hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="Overlay-Tracks-Hover">\n            <rect id="backdrop-copy" stroke="#737373" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="layer-group" transform="translate(3, 127)">\n                <rect id="a" stroke="#FFFFFF" stroke-width="24" fill="#A1A1A1" x="12" y="12" width="332" height="139"></rect>\n                <rect id="a---hold-out" fill="#A1A1A1" x="9" y="25" width="324" height="115"></rect>\n                <rect id="b" stroke="#FFFFFF" stroke-width="24" fill="#C9C9C9" x="81" y="103" width="474" height="139"></rect>\n                <rect id="c" stroke="#FFFFFF" stroke-width="24" fill="#ECECEC" x="238" y="214" width="372" height="139"></rect>\n                <rect id="c---hold-out" fill="#ECECEC" x="250" y="226" width="372" height="115"></rect>\n            </g>\n            <rect id="over-border-copy" stroke="#737373" stroke-width="12" x="6" y="6" width="613" height="613" rx="135"></rect>\n        </g>\n    </g>\n</svg>',!1),this.button.addEventListener("mouseenter",(()=>this.setState(!0))),this.button.addEventListener("mouseleave",(()=>this.setState(!1)));this.boundMouseClickHandler=(()=>{this.setVisibility(!1),tf.call(this)}).bind(this),this.button.addEventListener("click",this.boundMouseClickHandler),this.setVisibility(!0)}}function tf(e){if(!0===nf(this.browser)){const e=this.browser.getSelectedTrackViews().map((({track:e})=>e));for(const t of e)t.selected=!1;const t=[];for(let i of e)"merged"===i.type?t.push(...i.tracks):t.push(i);const i={name:"Overlay",type:"merged",autoscale:!1,alpha:.5,height:Math.max(...e.map((({height:e})=>e))),order:Math.min(...e.map((({order:e})=>e)))},n=new Xu(i,this.browser,t);for(const t of e)this.browser.removeTrack(t);this.browser.addTrack(i,n)}}function nf(e){const t=e.getSelectedTrackViews();if(t&&t.length>1){const e=new Set(["wig","merged"]);return t.filter((({track:t})=>e.has(t.type))).length>1}return!1}const rf=new Set(["sequence","ruler","ideogram"]),sf=new Set(["ruler","sequence","ideogram"]);class of{constructor(e,t,i){this.namespace=`trackview-${s()}`,this.browser=e,this.track=i,i.trackView=this,this.addDOMToColumnContainer(e,t,e.referenceFrameList)}startSpinner(){this.viewports&&this.viewports.length>0&&this.viewports[0].startSpinner()}stopSpinner(){this.viewports&&this.viewports.length>0&&this.viewports[0].stopSpinner()}addDOMToColumnContainer(e,t,i){this.axis=this.createAxis(e,this.track),this.createViewports(e,t,i),this.sampleInfoViewport=new qu(this,e.columnContainer.querySelector(".igv-sample-info-column"),e.getSampleInfoViewportWidth()),this.sampleNameViewport=new Qu(this,e.columnContainer.querySelector(".igv-sample-name-column"),void 0,e.getSampleNameViewportWidth()),this.createTrackScrollbar(e),this.createTrackDragHandle(e),this.createTrackGearPopup(e)}createViewports(e,t,i){this.viewports=[];const n=e.calculateViewportWidth(i.length),r=t.querySelectorAll(".igv-column");for(let e=0;e<r.length;e++){const t=Bu(this,r[e],i[e],n);this.viewports.push(t)}}createAxis(t,i){const n=e();if(t.columnContainer.querySelector(".igv-axis-column").appendChild(n),n.dataset.tracktype=i.type,n.style.height=`${i.height}px`,"function"==typeof i.paintAxis){const{width:e,height:t}=n.getBoundingClientRect();this.axisCanvas=document.createElement("canvas"),this.axisCanvas.style.width=`${e}px`,this.axisCanvas.style.height=`${t}px`,n.appendChild(this.axisCanvas)}if(!1===mo.has(this.track.type)){const t=e();n.appendChild(t);const i='<input type="checkbox" name="track-select">',r=document.createRange().createContextualFragment(i).firstChild;t.appendChild(r),r.checked=this.track.selected||!1,r.addEventListener("change",(e=>{e.preventDefault(),e.stopPropagation(),this.track.selected=e.target.checked,this.setDragHandleSelectionState(e.target.checked),this.browser.overlayTrackButton.setVisibility(nf(this.browser))})),this.setTrackSelectionState(n,!1)}return n}resizeAxisCanvas(e,t){this.axis.style.width=`${e}px`,this.axis.style.height=`${t}px`,"function"==typeof this.track.paintAxis&&(this.axisCanvas.style.width=`${e}px`,this.axisCanvas.style.height=`${t}px`)}renderSVGContext(e,{deltaX:t,deltaY:i}){!function(e,t,i,n,r){if("function"==typeof t.paintAxis){const{y:o,width:a,height:c}=i.getBoundingClientRect(),l=`${(t.name||t.id).replace(/\W/g,"")}_axis_guid_${s()}`;e.saveWithTranslationAndClipRect(l,n,o+r,a,c,0),t.paintAxis(e,a,c),e.restore()}}(e,this.track,this.axisCanvas,t,i);const{width:n}=this.axis.getBoundingClientRect(),{y:r}=this.viewports[0].$viewport.get(0).getBoundingClientRect();let o={deltaX:n+t,deltaY:r+i};for(let t of this.viewports){t.renderSVGContext(e,o);const{width:i}=t.$viewport.get(0).getBoundingClientRect();o.deltaX+=i}if(!0===this.browser.sampleInfo.isInitialized()&&!0===this.browser.sampleInfoControl.showSampleInfo){this.sampleInfoViewport.renderSVGContext(e,o);const{width:t}=this.sampleInfoViewport.viewport.getBoundingClientRect();o.deltaX+=t}!0===this.browser.showSampleNames&&this.sampleNameViewport.renderSVGContext(e,o)}presentColorPicker(e){if(!1===sf.has(this.track.type)){const t=[],i=this.track.color||this.track.defaultColor;Mt(i)&&t.push(i),this.track.altColor&&Mt(this.track.altColor)&&t.push(this.track.altColor);let n=t.map((e=>e.startsWith("#")?e:e.startsWith("rgb(")?_s.rgbToHex(e):_s.colorNameToHex(e))),r={color:e=>{this.track.color=io(e),this.repaintViews()},altColor:e=>{this.track.altColor=io(e),this.repaintViews()}};const s=this.browser.getSelectedTrackViews();s.length>0&&new Set(s).has(this)?(r={color:e=>{for(let t of s)t.track.color=e,t.repaintViews()}},this.browser.genericColorPicker.configure(n,r)):this.browser.genericColorPicker.configure(n,r),this.browser.genericColorPicker.setActiveColorHandler(e),this.browser.genericColorPicker.show()}}setTrackHeight(e,t){t||(this.track.minHeight&&(e=Math.max(this.track.minHeight,e)),this.track.maxHeight&&(e=Math.min(this.track.maxHeight,e))),this.track.height=e,this.resizeAxisCanvas(this.axis.clientWidth,this.track.height),"function"==typeof this.track.paintAxis&&this.paintAxis();for(let{$viewport:t}of this.viewports)t.height(e);if(this.sampleInfoViewport.setHeight(e),this.sampleNameViewport.viewport.style.height=`${e}px`,"function"!=typeof this.track.computePixelHeight)for(let t of this.viewports)t.setContentHeight(e);this.repaintViews(),this.updateScrollbar(),this.dragHandle.style.height=`${e}px`,this.gearContainer.style.height=`${e}px`}updateScrollbar(){const e=this.viewports[0].$viewport.height();if(this.outerScroll.style.height=`${e}px`,!1===rf.has(this.track.type)){const t=this.maxViewportContentHeight(),i=Math.round(e/t*e);t>e?(this.innerScroll.style.display="block",this.innerScroll.style.height=`${i}px`):this.innerScroll.style.display="none"}}moveScroller(e){const t=Bt(this.innerScroll).position().top+e,i=Math.min(Math.max(0,t),this.outerScroll.clientHeight-this.innerScroll.clientHeight);Bt(this.innerScroll).css("top",`${i}px`);const n=this.maxViewportContentHeight(),r=-Math.round(i*(n/this.viewports[0].$viewport.height()));for(let e of this.viewports)e.setTop(r);this.sampleInfoViewport.setTop(r),this.sampleNameViewport.trackScrollDelta=e,this.sampleNameViewport.setTop(r)}isLoading(){for(let e of this.viewports)if(e.isLoading())return!0}repaintViews(){for(let e of this.viewports)e.isVisible()&&e.repaint();"function"==typeof this.track.paintAxis&&this.paintAxis(),this.repaintSampleInfo(),this.repaintSamples()}repaintSampleInfo(){this.sampleInfoViewport.repaint()}repaintSamples(){if("function"==typeof this.track.getSamples){const e=this.track.getSamples();e.names&&e.names.length>0&&this.sampleNameViewport.repaint(e)}}setTrackLabelName(e){this.viewports.forEach((t=>t.setTrackLabel(e)))}resize(e){for(let t of this.viewports)t.setWidth(e)}async updateViews(){if(!this.browser||!this.browser.referenceFrameList)return;const e=this.viewports.filter((e=>e.isVisible()));if(e.forEach((e=>e.shift())),this.browser.dragObject)return;const t=e.filter((e=>e.needsRepaint())).filter((e=>e.checkZoomIn())),i=t.filter((e=>e.needsReload()));for(let e of i)await e.loadFeatures();if(this.disposed)return;if(this.track&&"function"==typeof this.track.variantRowCount&&i.length>0){let e=0;for(let t of this.viewports)t.featureCache&&t.featureCache.features&&(e=Math.max(e,t.featureCache.features.reduce(((e,t)=>Math.max(e,t.row||0)),0)));if(this.track.nVariantRows!==e+1){this.track.variantRowCount(e+1);for(let e of this.viewports)e.checkContentHeight()}}let n;if("merged"===this.track.type)n=this.track.updateScales(e);else if(this.track.autoscale){let t=[];for(let i of e){const e=i.referenceFrame,n=e.start,r=n+e.toBP(i.getWidth());if(i.featureCache&&i.featureCache.features)if("function"==typeof i.featureCache.features.getMax){const e=i.featureCache.features.getMax(n,r);if(t.push({value:e}),"function"==typeof i.featureCache.features.getMin){const e=i.featureCache.features.getMin(n,r);t.push({value:e})}}else{const e=to(i.featureCache.features,n,r);for(let i of e)t.push(i)}}"function"==typeof this.track.doAutoscale?this.track.dataRange=this.track.doAutoscale(t):this.track.dataRange=Qa(t)}const r=this.track.autoscale||this.track.autoscaleGroup||"ruler"===this.track.type||n||this.track.groupBy;for(let i of e)t.includes(i)?i.repaint():r&&i.refresh();this.adjustTrackHeight(),this.repaintSampleInfo(),this.repaintSamples(),this.updateRulerViewportLabels()}clearCachedFeatures(){for(let e of this.viewports)e.clearCache()}updateRulerViewportLabels(){const e=this.browser.calculateViewportWidth(this.viewports.length);for(let t of this.viewports)"ruler"===this.track.type&&(this.viewports.length>1?t.presentLocusLabel(e):t.dismissLocusLabel())}async getInViewFeatures(){if(!this.browser||!this.browser.referenceFrameList)return[];let e=[];const t=this.viewports.filter((e=>e.isVisible()));for(let i of t){const t=i.referenceFrame,{chr:n,start:r,bpPerPixel:s}=i.referenceFrame,o=r+t.toBP(i.getWidth());if((!i.featureCache||!i.featureCache.containsRange(n,r,o,s))&&await i.loadFeatures(),i.featureCache&&i.featureCache.features)if("function"==typeof i.featureCache.features.getMax){const t=i.featureCache.features.getMax(r,o);e.push({value:t})}else{const t="function"==typeof i.featureCache.queryFeatures?i.featureCache.queryFeatures(n,r,o):to(i.featureCache.features,r,o);e=e.concat(t)}}return e}checkContentHeight(){for(let e of this.viewports)e.checkContentHeight();this.adjustTrackHeight()}adjustTrackHeight(){var e=this.maxViewportContentHeight();if(this.track.autoHeight?this.setTrackHeight(e,!1):this.track.paintAxis&&this.paintAxis(),!1===rf.has(this.track.type)){const t=this.viewports[0].getContentTop(),i=this.viewports[0].$viewport.height(),n=Math.min(0,i-e);if(t<n)for(let e of this.viewports)e.setTop(n);this.updateScrollbar()}}viewportsToReload(e){return this.viewports.filter((t=>{if(!t.isVisible())return!1;if(t.checkZoomIn()){const i=t.referenceFrame,n=t.referenceFrame.chr,r=i.start,s=r+i.toBP(Bt(t.contentDiv).width()),o=i.bpPerPixel;return e||!t.tile||t.tile.invalidate||!t.tile.containsRange(n,r,s,o)}return!1}))}createTrackScrollbar(t){const i=e();if(t.columnContainer.querySelector(".igv-scrollbar-column").appendChild(i),i.style.height=`${this.track.height}px`,this.outerScroll=i,!1===rf.has(this.track.type)){const n=e();i.appendChild(n),this.innerScroll=n,this.addTrackScrollMouseHandlers(t)}}createTrackDragHandle(t){"sequence"!==this.track.type&&!0===mo.has(this.track.type)?this.dragHandle=e({class:"igv-track-drag-shim"}):(this.dragHandle=e({class:"igv-track-drag-handle"}),this.dragHandle.classList.add("igv-track-drag-handle-color")),t.columnContainer.querySelector(".igv-track-drag-column").appendChild(this.dragHandle),this.dragHandle.style.height=`${this.track.height}px`,this.addTrackDragMouseHandlers(t)}createTrackGearPopup(t){if(this.gearContainer=e(),t.columnContainer.querySelector(".igv-gear-menu-column").appendChild(this.gearContainer),this.gearContainer.style.height=`${this.track.height}px`,!0===this.track.ignoreTrackMenu);else{function i(e){if(e.preventDefault(),e.stopPropagation(),"none"===this.trackGearPopup.popover.style.display){for(const e of t.trackViews.filter((e=>e!==this&&void 0!==e.trackGearPopup)))e.trackGearPopup.popover.style.display="none";this.trackGearPopup.presentMenuList(this,t.menuUtils.trackMenuItemList(this))}else this.trackGearPopup.popover.style.display="none"}this.gear=e(),this.gearContainer.appendChild(this.gear),this.gear.appendChild(l("cog")),this.trackGearPopup=new ju(this.gear),this.boundTrackGearClickHandler=i.bind(this),this.gear.addEventListener("click",this.boundTrackGearClickHandler)}}addTrackScrollMouseHandlers(e){this.boundTrackScrollMouseDownHandler=function(t){t.stopPropagation();const{y:i}=r(t);Bt(this.innerScroll).data("yDown",i.toString()),this.boundColumnContainerMouseMoveHandler=function(e){e.stopPropagation();const{y:t}=r(e);this.moveScroller(t-parseInt(Bt(this.innerScroll).data("yDown"))),Bt(this.innerScroll).data("yDown",t.toString())}.bind(this),e.columnContainer.addEventListener("mousemove",this.boundColumnContainerMouseMoveHandler)}.bind(this),this.innerScroll.addEventListener("mousedown",this.boundTrackScrollMouseDownHandler),this.boundColumnContainerMouseUpHandler=function(t){e.columnContainer.removeEventListener("mousemove",this.boundColumnContainerMouseMoveHandler)}.bind(this),e.columnContainer.addEventListener("mouseup",this.boundColumnContainerMouseUpHandler),e.columnContainer.addEventListener("mouseleave",this.boundColumnContainerMouseUpHandler)}removeTrackScrollMouseHandlers(){!1===rf.has(this.track.type)&&(this.innerScroll.removeEventListener("mousedown",this.boundTrackScrollMouseDownHandler),this.browser.columnContainer.removeEventListener("mouseup",this.boundColumnContainerMouseUpHandler),this.browser.columnContainer.removeEventListener("mousemove",this.boundColumnContainerMouseMoveHandler),this.browser.columnContainer.removeEventListener("mouseleave",this.boundColumnContainerMouseMoveHandler))}addTrackDragMouseHandlers(e){if("sequence"===this.track.type||!1===mo.has(this.track.type)){let t;function i(i){i.preventDefault(),t=i.target,!1===this.track.selected&&(t.classList.remove("igv-track-drag-handle-color"),t.classList.add("igv-track-drag-handle-hover-color")),e.startTrackDrag(this)}function n(i){e.endTrackDrag(),t&&i.target!==t&&!1===this.track.selected&&(t.classList.remove("igv-track-drag-handle-hover-color"),t.classList.add("igv-track-drag-handle-color")),t=void 0}function r(i){i.preventDefault(),void 0===t&&!1===this.track.selected&&(i.target.classList.remove("igv-track-drag-handle-color"),i.target.classList.add("igv-track-drag-handle-hover-color")),e.updateTrackDrag(this)}function s(e){e.preventDefault(),void 0===t&&!1===this.track.selected&&(e.target.classList.remove("igv-track-drag-handle-hover-color"),e.target.classList.add("igv-track-drag-handle-color"))}this.boundTrackDragMouseDownHandler=i.bind(this),this.dragHandle.addEventListener("mousedown",this.boundTrackDragMouseDownHandler),this.boundDocumentTrackDragMouseUpHandler=n.bind(this),document.addEventListener("mouseup",this.boundDocumentTrackDragMouseUpHandler),this.boundTrackDragMouseEnterHandler=r.bind(this),this.dragHandle.addEventListener("mouseenter",this.boundTrackDragMouseEnterHandler),this.dragHandle.addEventListener("mouseout",(e=>{e.preventDefault(),void 0===t&&!1===this.track.selected&&(e.target.classList.remove("igv-track-drag-handle-hover-color"),e.target.classList.add("igv-track-drag-handle-color"))})),this.boundTrackDragMouseOutHandler=s.bind(this),this.dragHandle.addEventListener("mouseout",this.boundTrackDragMouseOutHandler)}}removeTrackDragMouseHandlers(){"ideogram"===this.track.type||"ruler"===this.track.type||(this.dragHandle.removeEventListener("mousedown",this.boundTrackDragMouseDownHandler),document.removeEventListener("mouseup",this.boundDocumentTrackDragMouseUpHandler),this.dragHandle.removeEventListener("mouseup",this.boundTrackDragMouseEnterHandler),this.dragHandle.removeEventListener("mouseout",this.boundTrackDragMouseOutHandler))}removeTrackGearMouseHandlers(){!0===this.track.ignoreTrackMenu||this.gear.removeEventListener("click",this.boundTrackGearClickHandler)}removeDOMFromColumnContainer(){this.axis.remove(),this.removeViewportsFromColumnContainer(),this.sampleInfoViewport.dispose(),this.sampleNameViewport.dispose(),this.removeTrackScrollMouseHandlers(),this.outerScroll.remove(),this.removeTrackDragMouseHandlers(),this.dragHandle.remove(),this.removeTrackGearMouseHandlers(),this.gearContainer.remove()}removeViewportsFromColumnContainer(){for(let e of this.viewports)e.$viewport.remove()}dispose(){this.axis.remove();for(let e of this.viewports)e.dispose();this.sampleInfoViewport.dispose(),this.sampleNameViewport.dispose(),this.removeTrackScrollMouseHandlers(),this.outerScroll.remove(),this.removeTrackDragMouseHandlers(),this.dragHandle.remove(),this.removeTrackGearMouseHandlers(),this.gearContainer.remove(),"function"==typeof this.track.dispose&&this.track.dispose();for(let e of Object.keys(this))this[e]=void 0;this.alert&&this.alert.container.remove(),this.disposed=!0}paintAxis(){if("function"==typeof this.track.paintAxis){const{width:e,height:t}=this.axisCanvas.getBoundingClientRect(),i=window.devicePixelRatio||1;this.axisCanvas.height=i*t,this.axisCanvas.width=i*e;const n=this.axisCanvas.getContext("2d");if(n.scale(i,i),this.track.autoscaleGroup){if(void 0===wo[this.track.autoscaleGroup]){const e=so.Dark2,t=Math.floor(Math.random()*so.Dark2.length);wo[this.track.autoscaleGroup]=e[t]}const i=_s.addAlpha(wo[this.track.autoscaleGroup],.75);this.track.paintAxis(n,e,t,i)}else this.track.paintAxis(n,e,t,void 0)}}maxViewportContentHeight(){return Math.max(...this.viewports.map((e=>e.getContentHeight())))}setTrackSelectionState(e,t){const i=e.querySelector("div");if(!1!==t)i.style.display="grid";else{i.querySelector("[name=track-select]").checked=this.track.selected,this.dragHandle&&this.setDragHandleSelectionState(!1),i.style.display="none"}}setDragHandleSelectionState(e){const t=this.dragHandle;e?(t.classList.remove("igv-track-drag-handle-color"),t.classList.remove("igv-track-drag-handle-hover-color"),t.classList.add("igv-track-drag-handle-selected-color")):(t.classList.remove("igv-track-drag-handle-hover-color"),t.classList.remove("igv-track-drag-handle-selected-color"),t.classList.add("igv-track-drag-handle-color"))}}const af="rgb(150, 150, 150)";class cf extends Hl{static defaults={height:50,flipAxis:!1,logScale:!1,windowFunction:"mean",graphType:"bar",normalize:void 0,scaleFactor:void 0,overflowColor:"rgb(255, 32, 255)",baselineColor:"lightGray",summarize:!0};constructor(e,t){super(e,t)}init(e){super.init(e),this.type="wig",this.featureType="numeric",this.resolutionAware=!0,this.paintAxis=Yu;const t=e.format?e.format.toLowerCase():e.format;e.featureSource?(this.featureSource=e.featureSource,delete e.featureSource):this.featureSource="bigwig"===t?new Zh(e,this.browser.genome):"tdf"===t?new nd(e,this.browser.genome):wd(e,this.browser.genome),void 0===e.max||!0===e.autoscale?this.autoscale=!0:this.dataRange={min:e.min||0,max:e.max}}async postInit(){const e=await this.getHeader();this.disposed||e&&this.setTrackProperties(e)}async getFeatures(e,t,i,n){const r=this.windowFunction,s=await this.featureSource.getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:this.visibilityWindow,windowFunction:r});if(this.normalize&&this.featureSource.normalizationFactor){const e=this.featureSource.normalizationFactor;for(let t of s)t.value*=e}if(this.scaleFactor){const e=this.scaleFactor;for(let t of s)t.value*=e}return!this.summarize||"mean"!==r&&"min"!==r&&"max"!==r?s:function(e,t,i,n="mean"){if(i<=1||!e||0===e.length)return e;const r=e[0].chr,s=i,o=[],a=e=>{const i=t+e.bin*s,a=i+s;let c;switch(n){case"mean":c=e.sumData/e.count;break;case"max":c=e.max;break;case"min":c=e.min;break;default:throw Error(`Unknown window function: ${n}`)}const l=`${n} of ${e.count} values`;o.push({chr:r,start:i,end:a,value:c,description:l})};let c;for(let i of e){let e=Math.floor((i.start-t)/s);const n=Math.floor((i.end-t)/s);if(c&&e===c.bin&&(c.add(i),e++),!c||n>c.bin){if(c&&a(c),n>e){const e=t+n*s;o.push({chr:r,start:i.start,end:e,value:i.value})}c=new lf(n,i)}}c&&a(c);const l=[];let h=o[0];for(let e of o)h.value===e.value&&e.start<=h.end?h.end=e.end:(l.push(h),h=e);return l.push(h),l}(s,t,n,r)}menuItemList(){const e=[];if(void 0!==this.flipAxis){function t(){this.flipAxis=!this.flipAxis,this.trackView.repaintViews()}e.push("<hr>"),e.push({label:"Flip y-axis",click:t})}return this.featureSource.windowFunctions&&e.push(...this.wigSummarizationItems()),e.push(...this.numericDataMenuItems()),e}wigSummarizationItems(){const e=this.featureSource.windowFunctions,t=[];t.push("<hr/>"),t.push("<div>Windowing function</div>");for(const i of e){const n=Bt(Dl(i,this.windowFunction===i));function r(){this.windowFunction=i,this.trackView.updateViews()}t.push({object:n,click:r})}return t}async getHeader(){return"function"==typeof this.featureSource.getHeader&&(this.header=await this.featureSource.getHeader()),this.header}getScaleFactor(e,t,i,n){return n?i/(Math.log10(t+1)-(e<=0?0:Math.log10(e+1))):i/(t-e)}computeYPixelValue(e,t){return(this.flipAxis?e-this.dataRange.min:this.dataRange.max-e)*t}computeYPixelValueInLogScale(e,t){let i=this.dataRange.max,n=this.dataRange.min;return i<=0?0:(n<=-1&&(n=0),n=n<=0?0:Math.log10(n+1),i=Math.log10(i+1),e=Math.log10(e+1),(this.flipAxis?e-n:i-e)*t)}draw(e){const t=e.features,i=e.context,n=e.bpPerPixel,r=e.bpStart,s=e.pixelWidth,o=e.pixelHeight,a=r+s*n+1;this.color;const c=this.getScaleFactor(this.dataRange.min,this.dataRange.max,e.pixelHeight,this.logScale),l=e=>this.logScale?this.computeYPixelValueInLogScale(e,c):this.computeYPixelValue(e,c);if(t&&t.length>0&&(void 0===this.dataRange.min&&(this.dataRange.min=0),this.dataRange.max>this.dataRange.min)){let s,c=-1;const h=l(0);for(let d of t){if(d.end<r)continue;if(d.start>a)break;const t=(d.start-r)/n;if(isNaN(t))continue;let u=l(d.value);const f=(d.end-r)/n-t,p=e.alpha?_s.addAlpha(this.getColorForFeature(d),e.alpha):this.getColorForFeature(d);if("line"===this.graphType)void 0!==s&&xo.strokeLine(i,c,s,t,u,{fillStyle:p,strokeStyle:p}),xo.strokeLine(i,t,u,t+f,u,{fillStyle:p,strokeStyle:p});else if("points"===this.graphType){const e=this.config.pointSize||3,n=t+f/2;xo.fillCircle(i,n,u,e/2,{fillStyle:p,strokeStyle:p}),d.value>this.dataRange.max?xo.fillCircle(i,n,e/2,e/2,3,{fillStyle:this.overflowColor}):d.value<this.dataRange.min&&xo.fillCircle(i,n,o-e/2,e/2,3,{fillStyle:this.overflowColor})}else{const e=Math.min(o,u-h);xo.fillRect(i,t,h,f,e,{fillStyle:p}),d.value>this.dataRange.max?xo.fillRect(i,t,0,f,3,{fillStyle:this.overflowColor}):d.value<this.dataRange.min&&xo.fillRect(i,t,o-3,f,3,{fillStyle:this.overflowColor})}c=t+f,s=u}if(this.dataRange.min<0){const t=this.dataRange.max/(this.dataRange.max-this.dataRange.min),n=this.flipAxis?(1-t)*e.pixelHeight:t*e.pixelHeight;xo.strokeLine(i,0,n,e.pixelWidth,n,{strokeStyle:this.baselineColor})}}if(this.config.hasOwnProperty("guideLines"))for(let t of this.config.guideLines)if(t.hasOwnProperty("color")&&t.hasOwnProperty("y")&&t.hasOwnProperty("dotted")){let i=l(t.y),n={strokeStyle:t.color,strokeWidth:2};t.dotted?xo.dashedLine(e.context,0,i,e.pixelWidth,i,5,n):xo.strokeLine(e.context,0,i,e.pixelWidth,i,n)}}popupData(e,t){if(void 0===t&&(t=this.clickedFeatures(e)),t&&t.length>0){const i=e.genomicLocation,n=[];t.sort((function(e,t){return Math.abs((e.start+e.end)/2-i)-Math.abs((t.start+t.end)/2-i)}));const r=t.length>10?t.slice(0,10):t;r.sort((function(e,t){return e.start-t.start}));for(let e of r)if(e){n.length>0&&n.push("<hr/>");let t=e.end-e.start==1?Rt(Math.floor(e.start)+1):Rt(Math.floor(e.start)+1)+"-"+Rt(Math.floor(e.end));n.push({name:"Position:",value:t}),n.push({name:"Value:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",value:Rt(e.value.toFixed(4))})}return r.length<t.length&&n.push("<hr/>..."),n}return[]}get supportsWholeGenome(){return!this.config.indexURL&&!1!==this.config.supportsWholeGenome}getColorForFeature(e){let t=e.value<0&&this.altColor?this.altColor:this.color||af;return"function"==typeof t?t(e.value):t}dispose(){this.trackView=void 0}}class lf{constructor(e,t){this.bin=e,this.sumData=t.value,this.count=1,this.min=t.value,this.max=t.value}add(e){this.sumData+=e.value,this.max=Math.max(e.value,this.max),this.min=Math.min(e.value,this.min),this.count++}get mean(){return this.sumData/this.count}}function hf(e){this.thresholds=e.thresholds,this.colors=e.colors}function df(e){this.scale=e,this.lowColor="rgb("+e.lowR+","+e.lowG+","+e.lowB+")",this.highColor="rgb("+e.highR+","+e.highG+","+e.highB+")",this.diff=e.high-e.low}hf.prototype.getColor=function(e){for(let t of this.thresholds)if(e<t)return this.colors[this.thresholds.indexOf(t)];return this.colors[this.colors.length-1]},df.prototype.getColor=function(e){var t,i=this.scale;return e<=i.low?this.lowColor:e>=i.high?this.highColor:(t=(e-i.low)/this.diff,"rgb("+Math.floor(i.lowR+t*(i.highR-i.lowR))+","+Math.floor(i.lowG+t*(i.highG-i.lowG))+","+Math.floor(i.lowB+t*(i.highB-i.lowB))+")")};class uf{constructor(e){this.color=e}getColor(){return this.color}}const ff={threshold:2e3,r:0,g:0,b:255};class pf{constructor(e){e=e||ff,this.threshold=e.threshold,this.r=e.r,this.g=e.g,this.b=e.b,this.cache=[],this.nbins=2e3,this.binsize=this.threshold/this.nbins}setThreshold(e){this.threshold=e,this.cache=[],this.binsize=this.threshold/this.nbins}getThreshold(){return this.threshold}setColorComponents(e){this.r=e.r,this.g=e.g,this.b=e.b,this.cache=[]}getColorComponents(){return{r:this.r,g:this.g,b:this.b}}equals(e){return JSON.stringify(this)===JSON.stringify(e)}getColor(e){const t=Math.floor(Math.min(this.threshold,e)/this.binsize);if(void 0===this.cache[t]){const i=(ys.clamp(e,0,this.threshold)-0)/(this.threshold-0);this.cache[t]=`rgba(${this.r},${this.g},${this.b}, ${i})`}return this.cache[t]}stringify(){return this.threshold+","+this.r+","+this.g+","+this.b}static parse(e){var t,i;return e.startsWith("R:")?(t=e.substring(2).split(":"),(i=new RatioColorScale(Number.parseFloat(t[0]))).positiveScale=n(t[1]),i.negativeScale=n(t[2]),i):n(e);function n(e){var t,i;return t={threshold:(i=e.split(","))[0],r:i[1],g:i[2],b:i[3]},new pf(t)}}}class gf{constructor(e){this.config=e,this.url=e.path||e.url}async read(e,t){const i={start:e,size:t};return Qs.loadArrayBuffer(this.url,{range:i})}}class mf{constructor(e){this.file=e}async read(e,t){const i=this.file;return void 0!==e?i.slice(e,e+t).arrayBuffer():i.arrayBuffer()}}class wf{constructor(e,t){this.file=e,this.rateLimiter=t}async read(e,t){const i=this.file,n=this.rateLimiter;return new Promise((function(r,s){n.limiter((async function(i){try{const n=await i.read(e,t);r(n)}catch(e){s(e)}}))(i)}))}}class bf{constructor(e){this.file=e.file,this.size=e.size||64e3,this.position=0,this.bufferStart=0,this.bufferLength=0,this.buffer=void 0}async read(e,t){const i=e,n=e+t,r=this.bufferStart,s=this.bufferStart+this.bufferLength;if(t>this.size)return this.buffer=void 0,this.bufferStart=0,this.bufferLength=0,this.file.read(e,t);if(i>=r&&n<=s){const e=i-r,n=e+t;return this.buffer.slice(e,n)}if(i<r&&n>r){const n=r-i,s=await this.file.read(e,n),o=t-n;if(o>0){const e=this.buffer.slice(0,o);return Ff(s,e)}return s}if(!(i<s&&n>s))return this.buffer=await this.file.read(e,this.size),this.bufferStart=e,this.bufferLength=this.buffer.byteLength,this.buffer.slice(0,t);{const e=s-i,n=this.bufferLength-e,r=this.buffer.slice(n,this.bufferLength),o=t-e;if(!(o>0))return r;try{this.buffer=await this.file.read(s,this.size),this.bufferStart=s,this.bufferLength=this.buffer.byteLength;const e=this.buffer.slice(0,o);return Ff(r,e)}catch(e){if(e.code&&416===e.code)return r;throw e}}}}var Ff=function(e,t){var i=new Uint8Array(e.byteLength+t.byteLength);return i.set(new Uint8Array(e),0),i.set(new Uint8Array(t),e.byteLength),i.buffer};const vf=function(e,t){this.littleEndian=void 0===t||t,this.position=0,this.view=e,this.length=e.byteLength};function yf(e,t){this.block=e,this.offset=t}vf.prototype.available=function(){return this.length-this.position},vf.prototype.remLength=function(){return this.length-this.position},vf.prototype.hasNext=function(){return this.position<this.length-1},vf.prototype.getByte=function(){var e=this.view.getUint8(this.position,this.littleEndian);return this.position++,e},vf.prototype.getShort=function(){var e=this.view.getInt16(this.position,this.littleEndian);return this.position+=2,e},vf.prototype.getUShort=function(){var e=this.view.getUint16(this.position,this.littleEndian);return this.position+=2,e},vf.prototype.getInt=function(){var e=this.view.getInt32(this.position,this.littleEndian);return this.position+=4,e},vf.prototype.getUInt=function(){var e=this.view.getUint32(this.position,this.littleEndian);return this.position+=4,e},vf.prototype.getLong=function(){var e=[];e[0]=this.view.getUint8(this.position),e[1]=this.view.getUint8(this.position+1),e[2]=this.view.getUint8(this.position+2),e[3]=this.view.getUint8(this.position+3),e[4]=this.view.getUint8(this.position+4),e[5]=this.view.getUint8(this.position+5),e[6]=this.view.getUint8(this.position+6),e[7]=this.view.getUint8(this.position+7);var t=0;if(this.littleEndian)for(var i=e.length-1;i>=0;i--)t=256*t+e[i];else for(i=0;i<e.length;i++)t=256*t+e[i];return this.position+=8,t},vf.prototype.getString=function(e){for(var t,i="";0!=(t=this.view.getUint8(this.position++))&&(i+=String.fromCharCode(t),!e||i.length!=e););return i},vf.prototype.getFixedLengthString=function(e){var t,i,n="";for(t=0;t<e;t++)(i=this.view.getUint8(this.position++))>0&&(n+=String.fromCharCode(i));return n},vf.prototype.getFixedLengthTrimmedString=function(e){var t,i,n="";for(t=0;t<e;t++)(i=this.view.getUint8(this.position++))>32&&(n+=String.fromCharCode(i));return n},vf.prototype.getFloat=function(){var e=this.view.getFloat32(this.position,this.littleEndian);return this.position+=4,e},vf.prototype.getDouble=function(){var e=this.view.getFloat64(this.position,this.littleEndian);return this.position+=8,e},vf.prototype.skip=function(e){return this.position+=e,this.position},vf.prototype.getVPointer=function(){var e=this.position,t=this.view.getUint8(e+1)<<8|this.view.getUint8(e),i=4294967296*(255&this.view.getUint8(e+6))+16777216*(255&this.view.getUint8(e+5))+65536*(255&this.view.getUint8(e+4))+256*(255&this.view.getUint8(e+3))+(255&this.view.getUint8(e+2));return this.position+=8,new yf(i,t)},yf.prototype.isLessThan=function(e){return this.block<e.block||this.block===e.block&&this.offset<e.offset},yf.prototype.isGreaterThan=function(e){return this.block>e.block||this.block===e.block&&this.offset>e.offset},yf.prototype.print=function(){return this.block+":"+this.offset};class Af{constructor(e,t){this.chr1=e,this.chr2=t}getKey(){return this.chr1.name+"_"+this.chr2.name+"_"+this.zoom.unit+"_"+this.zoom.binSize}getBlockNumbers(e,t,i){if(e.chr==this.chr2&&t.chr===this.chr1){const i=e;e=t,t=i}const n=this.chr1===this.chr2,r=this.zoom.binSize,s=this.blockBinCount,o=this.blockColumnCount;return i<9||!n?function(){const i=e.start/r,a=e.end/r,c=t.start/r,l=t.end/r,h=Math.floor(i/s),d=Math.floor((a-1)/s),u=Math.floor(c/s),f=Math.floor((l-1)/s),p=[];for(let e=u;e<=f;e++)for(let t=h;t<=d;t++){let i;i=n&&e<t?t*o+e:e*o+t,p.includes(i)||p.push(i)}return p}():function(){const i=e.start/r,n=e.end/r,a=t.start/r,c=t.end/r,l=Math.floor((i+a)/2/s),h=Math.floor((n+c)/2/s),d=Math.floor(Math.log2(1+Math.abs(i-c)/Math.sqrt(2)/s)),u=Math.floor(Math.log2(1+Math.abs(n-a)/Math.sqrt(2)/s)),f=(n-a)*(i-c)<0?0:Math.min(d,u),p=Math.max(d,u),g=[];for(let e=f;e<=p;e++)for(let t=l;t<=h;t++){const i=e*o+t;g.push(i)}return g}()}static parseMatrixZoomData(e,t,i){const n=new Af(e,t),r=i.getString(),s=i.getInt(),o=i.getFloat(),a=i.getFloat(),c=i.getFloat(),l=i.getFloat(),h=i.getInt();n.blockBinCount=i.getInt(),n.blockColumnCount=i.getInt();const d=i.getInt();n.zoom={index:s,unit:r,binSize:h},n.blockIndex=new Cf(d,i);const u=o/(e.size/h)/(t.size/h);return n.averageCount=u,n.sumCounts=o,n.stdDev=c,n.occupiedCellCount=a,n.percent95=l,n}}class Cf{constructor(e,t){for(this.blockIndex={};e-- >0;){const e=t.getInt(),i=t.getLong(),n=t.getInt();this.blockIndex[e]={filePosition:i,size:n}}}getBlockIndexEntry(e){return this.blockIndex[e]}}class _f{constructor(e,t,i){this.chr1=e,this.chr2=t,this.bpZoomData=[],this.fragZoomData=[];for(let e of i)"BP"===e.zoom.unit?this.bpZoomData.push(e):this.fragZoomData.push(e)}findZoomForResolution(e,t){const i="FRAG"===t?this.fragZoomData:this.bpZoomData;for(let t=1;t<i.length;t++){if(i[t].zoom.binSize<e)return t-1}return i.length-1}getZoomData(e,t){const i="BP"===(t=t||"BP")?this.bpZoomData:this.fragZoomData;for(let t=0;t<i.length;t++){var n=i[t];if(e===n.zoom.binSize)return n}}getZoomDataByIndex(e,t){return("FRAG"===t?this.fragZoomData:this.bpZoomData)[e]}static getKey(e,t){if(e>t){const i=e;e=t,t=i}return`${e}_${t}`}static parseMatrix(e,t){const i=new vf(new DataView(e)),n=i.getInt(),r=i.getInt(),s=t[n],o=t[r];let a=i.getInt();const c=[];for(;a-- >0;){const e=Af.parseMatrixZoomData(s,o,i);c.push(e)}return new _f(n,r,c)}}class xf{constructor(e,t,i){this.bin1=e,this.bin2=t,this.counts=i}getKey(){return this.bin1+"_"+this.bin2}}class kf{constructor(e=10){this.max=e,this.map=new Map}get(e){let t=this.map.get(e);return t&&(this.map.delete(e),this.map.set(e,t)),t}set(e,t){this.map.has(e)?this.map.delete(e):this.map.size===this.max&&this.map.delete(this.first()),this.map.set(e,t)}has(e){return this.map.has(e)}clear(){this.map.clear()}first(){return this.map.keys().next().value}}class If{constructor(e,t,i,n){this.file=e,this.filePosition=t,this.nValues=i,this.dataType=n,this.cache=void 0}async getValues(e,t){if(!this.cache||e<this.cache.start||t>this.cache.end){const i=Math.max(0,e-1e3),n=Math.min(this.nValues,t+1e3),r=this.filePosition+i*this.dataType,s=n-i,o=s*this.dataType,a=await this.file.read(r,o);if(!a)return;const c=new vf(new DataView(a)),l=[];for(let e=0;e<s;e++)l[e]=8===this.dataType?c.getDouble():c.getFloat();this.cache={start:i,end:n,values:l}}const i=e-this.cache.start,n=i+(t-e);return this.cache.values.slice(i,n)}getKey(){return If.getKey(this.type,this.chrIdx,this.unit,this.resolution)}static getNormalizationVectorKey(e,t,i,n){return e+"_"+t+"_"+i+"_"+n}}var Sf={"hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2Fcombined.hic":"54386046426,55860","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2Fprimary.hic":"33860030033,37504","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2Freplicate.hic":"30849652794,55832","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2Fmaternal.hic":"1380542661,17185","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2Fpaternal.hic":"1389001777,17185","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2Fcombined.hic":"13433880319,35723","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC001.hic":"3409347253,35975","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC002.hic":"4529947083,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC003.hic":"6894962500,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC004.hic":"3395593338,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC005.hic":"5204128636,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC006.hic":"3278363811,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC007.hic":"3585547340,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC008.hic":"4134197273,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC009.hic":"2851728310,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC010.hic":"1754216102,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC011.hic":"1716829574,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC012.hic":"4367980375,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC013.hic":"2309654671,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC014.hic":"5324950266,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC015.hic":"3132333594,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC016.hic":"3159154704,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC017.hic":"3262554627,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC018.hic":"3014216364,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC019.hic":"5025753246,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC020.hic":"5861584507,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC021.hic":"3542263275,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC022.hic":"5061949378,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC023.hic":"4816423919,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC024.hic":"2683781104,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC025.hic":"6522701781,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC026.hic":"6748846520,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC027.hic":"5642693007,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC028.hic":"2098921691,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC029.hic":"3886454027,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fagar%2FHIC030.hic":"2288984204,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fagar%2FHIC031.hic":"2115342419,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fpellet%2FHIC032.hic":"2063314324,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fsupernatant%2FHIC033.hic":"1933908457,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fdilution%2FHIC034.hic":"13555514595,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fdilution%2FHIC035.hic":"6129650900,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fdilution%2FHIC036.hic":"4307445019,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fdilution%2FHIC037.hic":"9375139867,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fdilution%2Fcombined.hic":"11664249584,33929","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2Fcombined_DpnII.hic":"7003537290,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC038.hic":"2099825544,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC039.hic":"2096900138,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC040.hic":"2593642141,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC041.hic":"2263919098,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC042.hic":"2684774693,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2Fcombined_noXlink.hic":"5574807456,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC043.hic":"2986114347,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC044.hic":"1916378621,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC045.hic":"746463126,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC046.hic":"2338476164,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC047.hic":"1167496250,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC048.hic":"2231690794,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fin-situ%2FHIC049.hic":"2782308678,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2FHIC050.hic":"3633531346,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2FHIC051.hic":"4063486444,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2FHIC052.hic":"929756278,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2FHIC053.hic":"2489657204,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2FHIC054.hic":"4036419444,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2FHIC055.hic":"4284185549,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fin-situ%2FHIC056.hic":"4410546240,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fimr90%2Fdilution%2FHIC057.hic":"1491998259,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fin-situ%2Fcombined.hic":"7266425111,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fin-situ%2FHIC058.hic":"6532635593,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fin-situ%2FHIC059.hic":"400684530,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fin-situ%2FHIC060.hic":"645352187,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fin-situ%2FHIC061.hic":"736291871,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fin-situ%2FHIC062.hic":"762731037,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fin-situ%2FHIC063.hic":"682917431,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhmec%2Fdilution%2FHIC064.hic":"4550171307,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fnhek%2Fin-situ%2Fcombined.hic":"11897184911,35789","hicfiles.s3.amazonaws.com%2Fhiseq%2Fnhek%2Fin-situ%2FHIC065.hic":"5425943567,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fnhek%2Fin-situ%2FHIC066.hic":"5942869818,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fnhek%2Fin-situ%2FHIC067.hic":"5191049261,35647","hicfiles.s3.amazonaws.com%2Fhiseq%2Fnhek%2Fdilution%2FHIC068.hic":"2713318801,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fk562%2Fin-situ%2Fcombined.hic":"12641555389,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fk562%2Fin-situ%2FHIC069.hic":"5630177461,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fk562%2Fin-situ%2FHIC070.hic":"5926611269,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fk562%2Fin-situ%2FHIC071.hic":"2486191351,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fk562%2Fin-situ%2FHIC072.hic":"2281343366,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fk562%2Fin-situ%2FHIC073.hic":"2173074239,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fk562%2Fin-situ%2FHIC074.hic":"2463700999,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fkbm7%2Fin-situ%2Fcombined.hic":"14661922519,35639","hicfiles.s3.amazonaws.com%2Fhiseq%2Fkbm7%2Fin-situ%2FHIC075.hic":"3685310515,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fkbm7%2Fin-situ%2FHIC076.hic":"5833658487,35891","hicfiles.s3.amazonaws.com%2Fhiseq%2Fkbm7%2Fin-situ%2FHIC077.hic":"2406346486,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fkbm7%2Fin-situ%2FHIC078.hic":"5241454987,35919","hicfiles.s3.amazonaws.com%2Fhiseq%2Fkbm7%2Fin-situ%2FHIC079.hic":"6297234263,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhuvec%2Fin-situ%2Fcombined.hic":"9193858096,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhuvec%2Fin-situ%2FHIC080.hic":"5171405536,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhuvec%2Fin-situ%2FHIC081.hic":"3489767688,35891","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhuvec%2Fin-situ%2FHIC082.hic":"4243339375,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhuvec%2Fdilution%2FHIC083.hic":"1497495406,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhela%2Fin-situ%2Fcombined.hic":"7923332224,35593","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhela%2Fin-situ%2FHIC084.hic":"867699123,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhela%2Fin-situ%2FHIC085.hic":"3669518514,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhela%2Fin-situ%2FHIC086.hic":"5306474712,35595","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhela%2Fin-situ%2FHIC087.hic":"1490963755,36397","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2Fcombined.hic":"8956382853,50248","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC088.hic":"1874185366,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC089.hic":"1301165236,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC090.hic":"1105246282,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC091.hic":"1338325770,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC092.hic":"1307918730,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC093.hic":"755136918,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC094.hic":"1606583694,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC095.hic":"2039711245,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC096.hic":"1909573053,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC097.hic":"1826710712,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC098.hic":"1998793575,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC099.hic":"1007740962,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC100.hic":"736464120,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC101.hic":"980505082,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fin-situ%2FHIC102.hic":"1116083646,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fdilution%2FHIC103.hic":"1096994310,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fch12-lx-b-lymphoblasts%2Fdilution%2FHIC104.hic":"841063882,32102","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC105.hic":"107742864,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC106.hic":"134295912,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC107.hic":"110228014,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC108.hic":"102761401,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC109.hic":"100461491,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC110.hic":"88828472,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC111.hic":"81471064,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC112.hic":"92297035,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC113.hic":"65503916,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC114.hic":"49181188,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC115.hic":"46471102,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC116.hic":"64284432,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC117.hic":"60434076,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC118.hic":"45248563,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC119.hic":"60288782,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC120.hic":"136888414,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC121.hic":"125009003,33681","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC122.hic":"154011688,34127","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC123.hic":"177663372,35293","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC124.hic":"382186226,35245","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC125.hic":"158160717,35271","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC127.hic":"110261177,34659","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC128.hic":"246131875,35509","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC129.hic":"260160119,35667","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC130.hic":"117479562,34681","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC131.hic":"81508929,34673","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC132.hic":"105959102,34895","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC133.hic":"91504812,33451","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC134.hic":"52222546,33737","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC135.hic":"57763085,34159","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC136.hic":"50618489,33731","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC137.hic":"193163606,33363","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC138.hic":"229876152,33777","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC139.hic":"201783666,33571","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC140.hic":"281163862,34125","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC141.hic":"275969727,33935","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC142.hic":"275020431,34125","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC144.hic":"223834810,34177","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC145.hic":"296632653,33937","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC146.hic":"290945216,33961","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC147.hic":"234459964,34231","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC148.hic":"295457850,34039","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC149.hic":"113569632,35695","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC150.hic":"304381897,33963","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC151.hic":"289314545,33805","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC152.hic":"284320182,33803","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC153.hic":"401393947,34659","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC154.hic":"188065488,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC155.hic":"299157119,33967","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC156.hic":"279289244,33787","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC157.hic":"254852119,33917","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC158.hic":"195969660,33477","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC159.hic":"185720388,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC160.hic":"227709279,33599","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC161.hic":"157225076,33209","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC162.hic":"105703444,32033","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC163.hic":"122665658,32121","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC164.hic":"228048231,33761","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC165.hic":"114440819,32011","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC166.hic":"285147558,33891","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC167.hic":"363116754,33943","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC168.hic":"119592158,31937","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC169.hic":"236853872,33785","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC170.hic":"195187639,33395","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC171.hic":"208044058,33309","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC172.hic":"144645916,32877","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC173.hic":"119115941,32203","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC175.hic":"178030481,33525","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC176.hic":"117220136,32169","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC177.hic":"128586196,32659","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC178.hic":"191419141,33629","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC179.hic":"141556748,32959","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC180.hic":"199825102,33185","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC181.hic":"301022688,33783","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC182.hic":"185384453,33205","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC183.hic":"202189264,36367","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC184.hic":"37464475,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC185.hic":"161938278,36099","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC186.hic":"133853166,36179","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC188.hic":"128068030,36237","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC189.hic":"148053886,36177","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC190.hic":"198946958,35803","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC191.hic":"226584564,36063","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC192.hic":"194412797,36341","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC193.hic":"176408194,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC194.hic":"207215649,36055","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC195.hic":"175185530,36315","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC196.hic":"168969337,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC197.hic":"121231252,36339","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC198.hic":"92713752,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC199.hic":"105130500,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC200.hic":"114526350,36479","hicfiles.s3.amazonaws.com%2Fmiseq%2Frh2014%2FHIC201.hic":"122689717,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fhap1%2Fin-situ%2Fcombined.hic":"9614983328,36479","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fctbp_8_4_17%2Fall_intra_megabase_michrom.hic":"154205644,10960","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2Fdel-Xa-combined.hic":"8843305329,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FdelXa-chrX-diploid.hic":"11173520,1498","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FWT-combined.hic":"13365182403,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FWT-chrX-diploid.hic":"17343459,1498","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC002.hic":"4279298739,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC003.hic":"3027365532,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC004.hic":"2896130835,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC005.hic":"4717830071,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC006.hic":"5066210154,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC007.hic":"3069516128,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2Fdel-Xi-combined.hic":"14551096423,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FdelXi-chrX-diploid.hic":"17362477,1498","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC008.hic":"2572386655,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC009.hic":"2935931663,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC010.hic":"2019085070,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC011.hic":"6087610814,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC012.hic":"2809618194,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Frpe1%2FDarrowHuntley-2015%2FHIC013.hic":"2572386655,36479","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2Fcombined.hic":"6950423609,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2Fpaternal.hic":"220592749,15691","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2Fmaternal.hic":"323233095,15691","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2FHIC014.hic":"3183235800,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2FHIC015.hic":"1739539801,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2FHIC016.hic":"1105912758,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2FHIC017.hic":"1060773319,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2FHIC018.hic":"1203679874,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fpatski%2FDarrowHuntley-2015%2FHIC019.hic":"3321955269,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Frhesus%2FDarrowHuntley-2015%2FHIC020.hic":"7108980626,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2Fgm12878%2Fcola%2FDarrowHuntley-2015%2FHIC021.hic":"3906448676,34955","hicfiles.s3.amazonaws.com%2Fhiseq%2Fassembly%2Faedes%2Fcombined.hic":"390780490,2245","hicfiles.s3.amazonaws.com%2Fhiseq%2Fassembly%2Fhs2-hic.hic":"1960284186,33561","hicfiles.s3.amazonaws.com%2Fhiseq%2Fassembly%2FCpipJ3.hic":"766279097,4381","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fphanstiel%2Fupdated_O%2FSnyder_O.hic":"8046980555,18679","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fphanstiel%2FA_inter.hic":"10986005145,18679","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2Fcombined.hic":"30439217680,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2Fcombined.hic":"33255540403,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2Fdeep%2F20min_withdraw_combined.hic":"11078436933,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2Fdeep%2F40min_withdraw_combined.hic":"11031830038,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2Fdeep%2F60min_withdraw_combined.hic":"10312725340,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2Fdeep%2F180min_withdraw_combined.hic":"10038610214,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2FHIC001.hic":"8004335785,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2FHIC002.hic":"8453215933,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2FHIC003.hic":"9118406189,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2FHIC004.hic":"5973342894,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2FHIC005.hic":"6846576837,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2FHIC006.hic":"6075148017,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Funsynchronized%2FHIC007.hic":"8192366992,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2FHIC008.hic":"6844159653,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2FHIC009.hic":"7282063059,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2FHIC010.hic":"10410578833,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2FHIC011.hic":"8192366992,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2FHIC012.hic":"7223422850,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2FHIC013.hic":"7435986997,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Funsynchronized%2FHIC014.hic":"9120113605,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Fsynchronized%2Fcombined.hic":"4170577904,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Fsynchronized%2FHIC015.hic":"1504084990,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Fsynchronized%2FHIC016.hic":"1686244500,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Fsynchronized%2FHIC017.hic":"1804802410,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Funtreated%2Fsynchronized%2FHIC018.hic":"1533942067,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Fsynchronized%2Fcombined.hic":"4572390198,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Fsynchronized%2FHIC019.hic":"1543609666,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Fsynchronized%2FHIC020.hic":"1814133288,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Fsynchronized%2FHIC021.hic":"1942698243,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftreated_6hr%2Fsynchronized%2FHIC022.hic":"1873587413,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2Funtreated%2FRao-2017-HIC049.hic":"405127557,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2Funtreated%2FRao-2017-HIC060.hic":"326681741,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2Funtreated%2FRao-2017-HIC061.hic":"300908673,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_20min%2FRao-2017-HIC050.hic":"481758242,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_20min%2FRao-2017-HIC051.hic":"417577401,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_40min%2FRao-2017-HIC052.hic":"419353227,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_40min%2FRao-2017-HIC053.hic":"411554953,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_60min%2FRao-2017-HIC054.hic":"386655891,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_60min%2FRao-2017-HIC055.hic":"402170701,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_240min%2FRao-2017-HIC057.hic":"735906308,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min%2FRao-2017-HIC058.hic":"443789827,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min%2FRao-2017-HIC059.hic":"491422615,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min%2FRao-2017-HIC062.hic":"320261375,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min%2FRao-2017-HIC063.hic":"306590499,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_20min%2FRao-2017-HIC032S.hic":"367051742,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_20min%2FRao-2017-HIC033S.hic":"344555339,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_40min%2FRao-2017-HIC036S.hic":"349392947,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_40min%2FRao-2017-HIC037S.hic":"317714554,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_60min%2FRao-2017-HIC040S.hic":"266786397,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_60min%2FRao-2017-HIC041S.hic":"279445530,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_180min%2FRao-2017-HIC044S.hic":"898418269,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_180min%2FRao-2017-HIC045S.hic":"961006347,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_360min%2FRao-2017-HIC064.hic":"833576408,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_360min%2FRao-2017-HIC065.hic":"840881418,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_1080min%2FRao-2017-HIC066.hic":"980958864,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_1080min%2FRao-2017-HIC067.hic":"882023129,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_1440min%2FRao-2017-HIC068.hic":"1110292630,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fdegron%2Ftime_course%2FAuxin_treated_360min_withdraw_1440min%2FRao-2017-HIC069.hic":"1001747023,36479","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FCP190_HiChIP.hic":"144107588,6976","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FH3K27ac_HiChIP_combined.hic":"43171370,5233","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FH3K27me3_HiChIP_combined.hic":"42906472,5233","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FPol2_ChIAPET.hic":"41992430,6976","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FPol2S2_HiChIP.hic":"145842743,6976","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FArabidopsis_Wang2015_Liu2016.hic":"1134391078,4984","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FElegans_Crane2015.hic":"387127568,8758","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FNcrassa_Galazka2016.hic":"26555511,27725","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fexternal%2Frowley_nichols_mol_cell_2017%2FPfalciparum_trophozoite_Ay2014.hic":"15640893,13948","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FE-Me-A.hic":"6897251,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FE-Me-B.hic":"4959088,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FE-Mp-A.hic":"5232286,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FE-Mp-B.hic":"5105292,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FH-Me-A.hic":"6900072,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FH-Me-B.hic":"8653258,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FH-Mp-A.hic":"7999058,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fduan%2FH-Mp-B.hic":"8774657,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fdekker%2F4dn%2Fh1hesc.hic":"23671753603,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fdekker%2F4dn%2Fh1hesc_rep1.hic":"23671754721,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fdekker%2F4dn%2Fh1hesc_rep2.hic":"22269909910,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fdekker%2F4dn%2Fhffc6_rep1.hic":"19016661622,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Flieberman_aiden_van_berkum%2FGM06990_NcoI.hic":"480725203,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Flieberman_aiden_van_berkum%2F302NH.hic":"99948617,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Flieberman_aiden_van_berkum%2FK562.hic":"470263605,36151","hicfiles.s3.amazonaws.com%2Fexternal%2Flieberman_aiden_van_berkum%2FGM06990_HindIII.hic":"293706559,36289","hicfiles.s3.amazonaws.com%2Fexternal%2Flieberman_aiden_van_berkum%2FGM06990_rep_HindIII.hic":"309673862,36087","hicfiles.s3.amazonaws.com%2Fexternal%2Frudan%2Fcanis-lupus-rep1.hic":"1531151371,56905","hicfiles.s3.amazonaws.com%2Fexternal%2Frudan%2Fcanis-lupus-rep2.hic":"2851437676,56905","hicfiles.s3.amazonaws.com%2Fexternal%2Frudan%2Fmouse-rep1.hic":"582052544,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Frudan%2Fmacaque-rep1.hic":"698509182,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Frudan%2Fmacaque-rep2.hic":"461410393,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Frudan%2Frabbit-rep1.hic":"691045338,33561","hicfiles.s3.amazonaws.com%2Fexternal%2Frudan%2Frabbit-rep2.hic":"668888336,33561","hicfiles.s3.amazonaws.com%2Fexternal%2Fsexton%2Fcombined.hic":"50650087,4486","hicfiles.s3.amazonaws.com%2Fexternal%2Fkalhor%2Ftcc-hindiii.hic":"1071142023,16500","hicfiles.s3.amazonaws.com%2Fexternal%2Fkalhor%2Ftcc-mboi.hic":"1508851093,16448","hicfiles.s3.amazonaws.com%2Fexternal%2Fkalhor%2Fnon-tcc-hindiii.hic":"395179229,36093","hicfiles.s3.amazonaws.com%2Fexternal%2Fkalhor%2Ftcc-combined.hic":"1050423847,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fdixon%2Fmm9-hindiii%2Fsplit-read-run.hic":"9599984876,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fdixon%2Fhesc-hindiii.hic":"1952555632,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fdixon%2Fimr90-hindiii.hic":"9691260435,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fdixon%2Fmm9-cortex.hic":"3712072953,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fzhang%2Fatm-i-scei-chr18.hic":"2083350075,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Fzhang%2Fatm-i-scei-chr2.hic":"3362049644,16360","hicfiles.s3.amazonaws.com%2Fexternal%2Fzhang%2Fatm-i-scei-chr7.hic":"1658399854,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Fzhang%2Fwt-i-scei-chr15.hic":"866691249,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Fzhang%2Fwt-i-scei-chr2.hic":"3304782795,16386","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-1.hic":"23673506,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-2.hic":"26873280,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-3.hic":"31066362,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-4.hic":"16807724,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-5.hic":"28665065,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-6.hic":"13124158,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-7.hic":"15118945,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-8.hic":"68316814,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-9.hic":"18965101,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2Fcell-10.hic":"17020666,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90%2Fcombined.hic":"6526601242,36427","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90%2Frep1.hic":"1861562891,36401","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90%2Frep2.hic":"3061013635,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90%2Frep3.hic":"1564588211,35969","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90%2Frep4.hic":"1255543175,36153","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90%2Frep5.hic":"974683253,36179","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90%2Frep6.hic":"1040805629,36053","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90-tnf-alpha%2Fcombined.hic":"8424080116,36401","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90-tnf-alpha%2Frep1.hic":"2697976702,36295","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90-tnf-alpha%2Frep3.hic":"1718610467,36159","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90-tnf-alpha%2Frep4.hic":"2029519405,36101","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90-tnf-alpha%2Frep5.hic":"985310855,36069","hicfiles.s3.amazonaws.com%2Fexternal%2Fjin%2Fimr90-tnf-alpha%2Frep6.hic":"1418750480,35967","hicfiles.s3.amazonaws.com%2Fexternal%2Fcheng%2Fmhh-call-4-cell-line.hic":"538380253,35351","hicfiles.s3.amazonaws.com%2Fexternal%2Fcheng%2Fprimary-b-all.hic":"773764191,35793","hicfiles.s3.amazonaws.com%2Fexternal%2Fcheng%2Fnormal-b-cell-line.hic":"336271459,35005","hicfiles.s3.amazonaws.com%2Fexternal%2Fcheng%2Frl-cell-line.hic":"484807998,35351","hicfiles.s3.amazonaws.com%2Fexternal%2Fhou%2Fkc167-biorep.hic":"135932435,8758","hicfiles.s3.amazonaws.com%2Fexternal%2Fhou%2Fkc167-techrep1.hic":"160355961,8758","hicfiles.s3.amazonaws.com%2Fexternal%2Fhou%2Fkc167-techrep2.hic":"188809887,8758","hicfiles.s3.amazonaws.com%2Fexternal%2Flin%2Fpre-prob-egs.hic":"2237792858,15483","hicfiles.s3.amazonaws.com%2Fexternal%2Flin%2Fprob-egs.hic":"5744720377,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Flin%2Fprob-fa.hic":"2174866215,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Fli%2Fhct116-rnapii-pilot.hic":"396366166,35999","hicfiles.s3.amazonaws.com%2Fexternal%2Fli%2Fhela-rnapii-pilot.hic":"882516759,35107","hicfiles.s3.amazonaws.com%2Fexternal%2Fli%2Fk562-rnapii-pilot.hic":"1131576189,35969","hicfiles.s3.amazonaws.com%2Fexternal%2Fli%2Fk562-rnapii-saturated.hic":"571583828,36291","hicfiles.s3.amazonaws.com%2Fexternal%2Fli%2Fmcf7-rnapii-saturated.hic":"1282547841,36035","hicfiles.s3.amazonaws.com%2Fexternal%2Fli%2Fnb4-rnapii-pilot.hic":"761614686,34861","hicfiles.s3.amazonaws.com%2Fexternal%2Fjung%2Fmouse_sperm.hic":"1730231642,29184","hicfiles.s3.amazonaws.com%2Fexternal%2Ftang%2Fgm12878.hic":"1953518212,20505","hicfiles.s3.amazonaws.com%2Fexternal%2Frutledge%2FSRR1791299.hic":"5723484,11956","hicfiles.s3.amazonaws.com%2Fexternal%2Frutledge%2FSRR1791297.hic":"16534743,23348","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-rad21cv-hrv.hic":"5094525579,36289","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-rad21cv-hrv-rep1.hic":"2574358912,36373","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-rad21cv-hrv-rep2.hic":"3417099433,36243","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-rad21cv-tev.hic":"4785157552,36323","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-rad21cv-tev-rep1.hic":"2648268465,36321","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-rad21cv-tev-rep2.hic":"2994727980,36107","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-sirna-ctcf.hic":"5391791815,36063","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-sirna-ctcf-rep1.hic":"3325842095,36269","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-sirna-ctcf-rep2.hic":"3096215920,36167","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-sirna-ctrl.hic":"3830902383,36167","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-sirna-ctrl-rep1.hic":"1346712252,36079","hicfiles.s3.amazonaws.com%2Fexternal%2Fzuin%2Fhek293t-sirna-ctrl_rep2.hic":"3098067367,36271","hicfiles.s3.amazonaws.com%2Fexternal%2Fay%2Fp-falciparum-3d7-0h-hiseq.hic":"38174042,21889","hicfiles.s3.amazonaws.com%2Fexternal%2Fay%2Fp-falciparum-3d7-18h-hiseq.hic":"26506099,21889","hicfiles.s3.amazonaws.com%2Fexternal%2Fay%2Fp-falciparum-3d7-18h-hiseq-non-crosslinked_control.hic":"3545496,21889","hicfiles.s3.amazonaws.com%2Fexternal%2Fay%2Fp-falciparum-3d7-36h-hiseq.hic":"70754194,21889","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3%2Fg1mid-r1.hic":"200863476,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3%2Fm-r1.hic":"249021190,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3%2Fm-r2.hic":"212341157,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3ccl2p2%2Fg1-0-25fa.hic":"583572265,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3ccl2p2%2Fg1-1fa.hic":"354502306,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3ccl2p2%2Fm-0-25fa.hic":"149308791,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3ccl2p2%2Fm-98percent.hic":"778175225,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhelas3ccl2p2%2Fm-1fa.hic":"158091047,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhff1%2Fcchic-hff1-ns-r1.hic":"801670039,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fhff1%2Fcchic-hff1-m-r1.hic":"875922086,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fk562%2Fm-r1.hic":"130959943,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fnaumova%2Fk562%2Fm-r2.hic":"237861106,17185","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmAST-WT.hic":"496104039,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmAST-WT-adv-cre.hic":"438608517,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmAST-floxed-rep1.hic":"446205712,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmAST-floxed-rep2.hic":"386354767,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmAST-deleted-rep1.hic":"621998722,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmAST-deleted-rep2.hic":"583840829,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmNSC-floxed-rep1.hic":"801290988,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmNSC-floxed-rep2.hic":"819406658,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmNSC-deleted-rep1.hic":"792825269,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmNSC-deleted-rep2.hic":"746189884,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmNSC-WT.hic":"309353372,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fsofueva%2FmNSC-WT-OHT.hic":"274229679,30643","hicfiles.s3.amazonaws.com%2Fexternal%2Fseitan%2FTcell-Rad21KO-R1.hic":"1490362251,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fseitan%2FTcell-Rad21KO-R3.hic":"2403664421,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fseitan%2FTcell-Rad21WT-R1.hic":"1377124538,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fseitan%2FTcell-Rad21WT-R3.hic":"2646201369,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fmoissiard%2Fcrh6-mutant.hic":"105261071,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Fmoissiard%2FWT.hic":"127506388,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Fgrob%2FCol.hic":"153638500,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Fgrob%2Fcrwn1.hic":"211213220,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Fgrob%2Fcrwn4.hic":"134236837,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Fxie%2Fprimary.hic":"92936173,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2F6wt-control6wt337.hic":"318737891,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2F6wt-control6wt67.hic":"348123956,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2F6wt337.hic":"251107279,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2F6wt67.hic":"351840994,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2FCol0.hic":"345969497,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2Fclf28-swn7.hic":"299585025,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2Fcmt3-11.hic":"253427706,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2Fddm1-2.hic":"303626924,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2Fmet1-3.hic":"347697973,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Ffeng%2Fsuvh4-suvh5-suvh6.hic":"263122019,10217","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FDNase-HiC-WG-K562.hic":"892955840,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FDNaseHiC-WG-H1.hic":"696922695,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FtargetedDNaseHiC-lincRNA-K562-rep1.hic":"341917716,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FtargeredDNaseHiC-lincRNA-K562-rep2.hic":"214841185,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FtargetedDNaseHiC-lincRNA-H1-rep1.hic":"616326137,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FtargetedDNaseHiC-lincRNA-H1-rep2.hic":"579654013,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FtargetedDNaseHiC-pe-H1-rep1.hic":"519810544,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Fma%2FtargetedDNaseHiC-pe-K562-rep1.hic":"199553123,18679","hicfiles.s3.amazonaws.com%2Fexternal%2Frowley%2FKc167_DpnII.hic":"1319373594,6976","hicfiles.s3.amazonaws.com%2Fexternal%2Frowley%2FKc167_HinfI.hic":"1465493873,6976","hicfiles.s3.amazonaws.com%2Fexternal%2Frowley%2FKc167_DpnII_HinfI_combo.hic":"753062558,5814","hicfiles.s3.amazonaws.com%2Fexternal%2Fbarutcu%2FMCF-10A.hic":"2784956115,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fbarutcu%2FMCF-7.hic":"2700457411,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fbatullin%2Fsperm.hic":"501052169,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fminajigi%2FWT_hiC_rep1.hic":"1450697530,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fminajigi%2FWT_hiC_rep2.hic":"1189371558,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fminajigi%2Fcombined.hic":"2262007875,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fminajigi%2Finactive.hic":"4444564,751","hicfiles.s3.amazonaws.com%2Fexternal%2Fminajigi%2Factive.hic":"3993495,751","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fpatski_rep1.hic":"1650838357,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fpatski_rep2.hic":"1258038606,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fpatski.hic":"499827296,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fpatski_active.hic":"79175714,15691","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fpatski_inactive.hic":"98947881,15691","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fbrain_dnase.hic":"4298088401,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fbrain_in_situ_dnase.hic":"609321852,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fbrain.hic":"1028196506,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fbrain_active.hic":"79175714,15691","hicfiles.s3.amazonaws.com%2Fexternal%2Fdeng%2Fbrain_inactive.hic":"98947881,15691","hicfiles.s3.amazonaws.com%2Fexternal%2Fle%2FBglII_rep1.hic":"1283306,1463","hicfiles.s3.amazonaws.com%2Fexternal%2Fle%2FBglII_rep2.hic":"1263227,1463","hicfiles.s3.amazonaws.com%2Fexternal%2Fle%2FNcoI_rep1.hic":"4380906,1463","hicfiles.s3.amazonaws.com%2Fexternal%2Feagen%2FGSE89112_Kc167combined.hic":"1829549643,25624","hicfiles.s3.amazonaws.com%2Fexternal%2Feagen%2FGSE89112_Kc167combined_randomized.hic":"1859742654,25624","hicfiles.s3.amazonaws.com%2Fexternal%2Fmumbach%2FGSE80820_HiChIP_GM_cohesin.hic":"1231264781,17932","hicfiles.s3.amazonaws.com%2Fexternal%2Fmumbach%2FGSE80820_HiChIP_mES_cohesin_all.hic":"1152008628,16438","hicfiles.s3.amazonaws.com%2Fexternal%2Fmumbach%2FGSE80820_HiChIP_mES_Oct4.hic":"912828146,16438","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fwapl_hic%2FSCC4KO.hic":"1767906138,18679","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fwapl_hic%2FDKO.hic":"1487228787,18679","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fwapl_hic%2FWaplKO_1.14.hic":"1189751862,18679","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fwapl_hic%2FWaplKO_3.3.hic":"1155057696,18679","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fwapl_hic%2FWT.hic":"1522401568,18679","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fskfuwi4fnsjkdf9jekrw2%2Fmega_Liverpool%2Fmega.hic":"2612171975,4381","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fskfuwi4fnsjkdf9jekrw2%2FHIC2836_Liverpool1%2FLiverpool1.hic":"191729195,2245","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fskfuwi4fnsjkdf9jekrw2%2FHIC2861_Liverpool2%2FLiverpool2.hic":"1637096030,4381","s3.amazonaws.com%2Fhicfiles%2Fhiseq%2Fskfuwi4fnsjkdf9jekrw2%2FHIC2862_Liverpool3%2FLiverpool3.hic":"1160045602,4381","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fgoodell%2FHSPC.hic":"11857786247,36479","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fgoodell%2FHSPC_CanyonDel.hic":"8139168836,36479","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fgoodell%2Ftcell.hic":"9871547081,36479","s3.amazonaws.com%2Fhicfiles%2Fexternal%2Fgoodell%2Fep.hic":"17479335373,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fnagano%2FTh1_ensemble.hic":"1690592868,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fbonev%2FES_mapq30.hic":"32930498831,32386","hicfiles.s3.amazonaws.com%2Fexternal%2Fbonev%2FNPC_mapq30.hic":"55053730986,32386","hicfiles.s3.amazonaws.com%2Fexternal%2Fbonev%2FCN_mapq30.hic":"53138031154,32386","hicfiles.s3.amazonaws.com%2Fhiseq%2FKieffer-Kwon_et_al_2017%2FMain_maps%2FKieffer-Kwon-2017-activated_B_cells_72_hours_WT.hic":"16492991184,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2FKieffer-Kwon_et_al_2017%2FMain_maps%2FKieffer-Kwon-2017-resting_B_cells_WT.hic":"23057795398,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2FKieffer-Kwon_et_al_2017%2FMain_maps%2FKieffer-Kwon-2017-activated_B_cells_24_hours_MYC_KO.hic":"21245554876,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2FKieffer-Kwon_et_al_2017%2FMain_maps%2FKieffer-Kwon-2017-resting_B_cells_TSA.hic":"13933346059,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2FKieffer-Kwon_et_al_2017%2FMain_maps%2FKieffer-Kwon-2017-activated_B_cells_24_hours_oligomycin.hic":"21902506832,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2FKieffer-Kwon_et_al_2017%2FMain_maps%2FKieffer-Kwon-2017-mES_WT.hic":"9451969795,32102","hicfiles.s3.amazonaws.com%2Fhiseq%2FVian_et_al_2018%2FMain_maps%2FVian-2018-activated_B_cells_24_hours_WT.hic":"3600188564,16438","hicfiles.s3.amazonaws.com%2Fhiseq%2FVian_et_al_2018%2FMain_maps%2FVian-2018-activated_B_cells_30_hours_WT.hic":"1309503359,16438","hicfiles.s3.amazonaws.com%2Fhiseq%2FVian_et_al_2018%2FMain_maps%2FVian-2018-activated_B_cells_30_hours_HU_treated.hic":"1477252396,16438","hicfiles.s3.amazonaws.com%2Fhiseq%2FVian_et_al_2018%2FMain_maps%2FVian-2018-activated_B_cells_24_hours_flavopiridol.hic":"15711773490,32102","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FPGP1F_mega_090118%2FPGP1F_mega_090118_30.hic":"24786676166,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7145%2FHIC7145_30.hic":"4554644616,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7146%2FHIC7146_30.hic":"4174848944,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7147%2FHIC7147_30.hic":"5062229182,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7862%2FHIC7862_30.hic":"4520990620,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7863%2FHIC7863_30.hic":"4330354773,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7864%2FHIC7864_30.hic":"5880640268,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7865%2FHIC7865_30.hic":"4431632469,36479","hicfiles.s3.amazonaws.com%2Fexternal%2Fpgp%2FHIC7866%2FHIC7866_30.hic":"4686000222,36479","encode-public.s3.amazonaws.com%2F2018%2F10%2F19%2Fb122542b-306c-4631-bdc3-2e155e89af55%2FENCFF718AWL.hic":"39544267907,58932","encode-public.s3.amazonaws.com%2F2019%2F02%2F15%2F8e787cd8-e388-4bc2-a236-7a5e6f39e0c0%2FENCFF999YXX.hic":"9255069996,56883","encode-public.s3.amazonaws.com%2F2019%2F02%2F08%2Ffc1d9d5d-8fa0-4e29-9080-3da674d9490d%2FENCFF543USQ.hic":"5005263062,36479","s3.us-east-1.wasabisys.com%2Fhicfiles%2Finternal%2FLCL_mega_42B_500bp_30.hic":"106482584851,22829","www.encodeproject.org%2Ffiles%2FENCFF925QIF%2F%40%40download%2FENCFF925QIF.hic":"51712684396,54779","www.encodeproject.org%2Ffiles%2FENCFF259YUS%2F%40%40download%2FENCFF259YUS.hic":"24640030444,54779","www.encodeproject.org%2Ffiles%2FENCFF783KQI%2F%40%40download%2FENCFF783KQI.hic":"27209249856,54779","www.encodeproject.org%2Ffiles%2FENCFF318JAP%2F%40%40download%2FENCFF318JAP.hic":"28636979242,54779","www.encodeproject.org%2Ffiles%2FENCFF512PQA%2F%40%40download%2FENCFF512PQA.hic":"28124104361,54779","www.encodeproject.org%2Ffiles%2FENCFF591MHA%2F%40%40download%2FENCFF591MHA.hic":"37373387202,54779","www.encodeproject.org%2Ffiles%2FENCFF197OWW%2F%40%40download%2FENCFF197OWW.hic":"41826180893,54779","www.encodeproject.org%2Ffiles%2FENCFF317OIA%2F%40%40download%2FENCFF317OIA.hic":"34741636038,54779","www.encodeproject.org%2Ffiles%2FENCFF522YLZ%2F%40%40download%2FENCFF522YLZ.hic":"24064692329,54779","www.encodeproject.org%2Ffiles%2FENCFF420JTA%2F%40%40download%2FENCFF420JTA.hic":"21202405177,54779","www.encodeproject.org%2Ffiles%2FENCFF871ZDJ%2F%40%40download%2FENCFF871ZDJ.hic":"10124815680,18679","www.encodeproject.org%2Ffiles%2FENCFF349RZY%2F%40%40download%2FENCFF349RZY.hic":"4446702705,36479","www.encodeproject.org%2Ffiles%2FENCFF738YON%2F%40%40download%2FENCFF738YON.hic":"3338049584,35947","www.encodeproject.org%2Ffiles%2FENCFF406KJN%2F%40%40download%2FENCFF406KJN.hic":"4132875306,36479","www.encodeproject.org%2Ffiles%2FENCFF081NPN%2F%40%40download%2FENCFF081NPN.hic":"34495587443,54779","www.encodeproject.org%2Ffiles%2FENCFF946RZW%2F%40%40download%2FENCFF946RZW.hic":"34571955193,54779","www.encodeproject.org%2Ffiles%2FENCFF602CHT%2F%40%40download%2FENCFF602CHT.hic":"30674798032,54779","www.encodeproject.org%2Ffiles%2FENCFF150DKS%2F%40%40download%2FENCFF150DKS.hic":"12618769864,36479","www.encodeproject.org%2Ffiles%2FENCFF614IPZ%2F%40%40download%2FENCFF614IPZ.hic":"42450060331,54779","www.encodeproject.org%2Ffiles%2FENCFF571ZQR%2F%40%40download%2FENCFF571ZQR.hic":"15230068871,47429","www.encodeproject.org%2Ffiles%2FENCFF705MKK%2F%40%40download%2FENCFF705MKK.hic":"38686554702,54779","www.encodeproject.org%2Ffiles%2FENCFF658KTB%2F%40%40download%2FENCFF658KTB.hic":"13195884405,47429","www.encodeproject.org%2Ffiles%2FENCFF435JYN%2F%40%40download%2FENCFF435JYN.hic":"17192139674,54779","www.encodeproject.org%2Ffiles%2FENCFF016JKX%2F%40%40download%2FENCFF016JKX.hic":"37266736642,54779","www.encodeproject.org%2Ffiles%2FENCFF294GFP%2F%40%40download%2FENCFF294GFP.hic":"36389843399,54779","www.encodeproject.org%2Ffiles%2FENCFF700CYI%2F%40%40download%2FENCFF700CYI.hic":"60482012152,54779","www.encodeproject.org%2Ffiles%2FENCFF962EDB%2F%40%40download%2FENCFF962EDB.hic":"39394328182,54779","www.encodeproject.org%2Ffiles%2FENCFF467OGP%2F%40%40download%2FENCFF467OGP.hic":"35572788855,54779","www.encodeproject.org%2Ffiles%2FENCFF556RLR%2F%40%40download%2FENCFF556RLR.hic":"34826921187,54779","www.encodeproject.org%2Ffiles%2FENCFF309UNV%2F%40%40download%2FENCFF309UNV.hic":"48510618174,54779","www.encodeproject.org%2Ffiles%2FENCFF653HCO%2F%40%40download%2FENCFF653HCO.hic":"41079007620,54779","www.encodeproject.org%2Ffiles%2FENCFF120DSV%2F%40%40download%2FENCFF120DSV.hic":"12790195576,47429","www.encodeproject.org%2Ffiles%2FENCFF284OEA%2F%40%40download%2FENCFF284OEA.hic":"46007570339,54779","www.encodeproject.org%2Ffiles%2FENCFF035BLF%2F%40%40download%2FENCFF035BLF.hic":"63868871985,54779","www.encodeproject.org%2Ffiles%2FENCFF094KKX%2F%40%40download%2FENCFF094KKX.hic":"42151419971,54779","www.encodeproject.org%2Ffiles%2FENCFF965BPU%2F%40%40download%2FENCFF965BPU.hic":"42717376107,54779","www.encodeproject.org%2Ffiles%2FENCFF842DUO%2F%40%40download%2FENCFF842DUO.hic":"39553892515,54779","www.encodeproject.org%2Ffiles%2FENCFF417GBZ%2F%40%40download%2FENCFF417GBZ.hic":"45544785452,54779","www.encodeproject.org%2Ffiles%2FENCFF499BVX%2F%40%40download%2FENCFF499BVX.hic":"40900674170,54779","www.encodeproject.org%2Ffiles%2FENCFF136XCV%2F%40%40download%2FENCFF136XCV.hic":"47700392974,54779","www.encodeproject.org%2Ffiles%2FENCFF224HKR%2F%40%40download%2FENCFF224HKR.hic":"40426005932,54779","www.encodeproject.org%2Ffiles%2FENCFF711XSR%2F%40%40download%2FENCFF711XSR.hic":"41434581949,54779","www.encodeproject.org%2Ffiles%2FENCFF660JWA%2F%40%40download%2FENCFF660JWA.hic":"54201632697,54779","www.encodeproject.org%2Ffiles%2FENCFF081PMO%2F%40%40download%2FENCFF081PMO.hic":"53428285130,54779","www.encodeproject.org%2Ffiles%2FENCFF799QGA%2F%40%40download%2FENCFF799QGA.hic":"1228682189,36479","www.encodeproject.org%2Ffiles%2FENCFF473CAA%2F%40%40download%2FENCFF473CAA.hic":"1077514950,36479","www.encodeproject.org%2Ffiles%2FENCFF663FRL%2F%40%40download%2FENCFF663FRL.hic":"39843938245,54779","www.encodeproject.org%2Ffiles%2FENCFF341WOY%2F%40%40download%2FENCFF341WOY.hic":"34792598619,54779","www.encodeproject.org%2Ffiles%2FENCFF515ZBF%2F%40%40download%2FENCFF515ZBF.hic":"41779230923,54779","www.encodeproject.org%2Ffiles%2FENCFF545GBW%2F%40%40download%2FENCFF545GBW.hic":"38351980358,54779","www.encodeproject.org%2Ffiles%2FENCFF252ANV%2F%40%40download%2FENCFF252ANV.hic":"37668839771,54779","www.encodeproject.org%2Ffiles%2FENCFF912NDK%2F%40%40download%2FENCFF912NDK.hic":"21196851956,54779","www.encodeproject.org%2Ffiles%2FENCFF683PLM%2F%40%40download%2FENCFF683PLM.hic":"21849338763,54779","www.encodeproject.org%2Ffiles%2FENCFF355NFJ%2F%40%40download%2FENCFF355NFJ.hic":"47880627268,54779","www.encodeproject.org%2Ffiles%2FENCFF507WEW%2F%40%40download%2FENCFF507WEW.hic":"35777782924,54779","www.encodeproject.org%2Ffiles%2FENCFF241MSL%2F%40%40download%2FENCFF241MSL.hic":"22507408288,54779","www.encodeproject.org%2Ffiles%2FENCFF135MUT%2F%40%40download%2FENCFF135MUT.hic":"24168734040,54779","www.encodeproject.org%2Ffiles%2FENCFF459FRB%2F%40%40download%2FENCFF459FRB.hic":"37166770103,54779","www.encodeproject.org%2Ffiles%2FENCFF705YZH%2F%40%40download%2FENCFF705YZH.hic":"44679182442,54779","www.encodeproject.org%2Ffiles%2FENCFF395INO%2F%40%40download%2FENCFF395INO.hic":"56727346538,54779","www.encodeproject.org%2Ffiles%2FENCFF736ITL%2F%40%40download%2FENCFF736ITL.hic":"49036286185,54779","www.encodeproject.org%2Ffiles%2FENCFF546TZN%2F%40%40download%2FENCFF546TZN.hic":"33195126348,54779","www.encodeproject.org%2Ffiles%2FENCFF706SFK%2F%40%40download%2FENCFF706SFK.hic":"3271831702,36479","www.encodeproject.org%2Ffiles%2FENCFF922ERE%2F%40%40download%2FENCFF922ERE.hic":"12476647122,36479","www.encodeproject.org%2Ffiles%2FENCFF876OWE%2F%40%40download%2FENCFF876OWE.hic":"1538692704,47429","www.encodeproject.org%2Ffiles%2FENCFF227XJZ%2F%40%40download%2FENCFF227XJZ.hic":"1925617685,36479","www.encodeproject.org%2Ffiles%2FENCFF053BXY%2F%40%40download%2FENCFF053BXY.hic":"1032237652,36479","www.encodeproject.org%2Ffiles%2FENCFF014VMM%2F%40%40download%2FENCFF014VMM.hic":"1564021703,36479","www.encodeproject.org%2Ffiles%2FENCFF563XES%2F%40%40download%2FENCFF563XES.hic":"1489180508,36479","www.encodeproject.org%2Ffiles%2FENCFF482LGO%2F%40%40download%2FENCFF482LGO.hic":"1208778887,36479","www.encodeproject.org%2Ffiles%2FENCFF216QQM%2F%40%40download%2FENCFF216QQM.hic":"6293163571,47429","www.encodeproject.org%2Ffiles%2FENCFF256UOW%2F%40%40download%2FENCFF256UOW.hic":"6293163571,47429","www.encodeproject.org%2Ffiles%2FENCFF791UZC%2F%40%40download%2FENCFF791UZC.hic":"37029615181,54779","www.encodeproject.org%2Ffiles%2FENCFF911AHQ%2F%40%40download%2FENCFF911AHQ.hic":"34246649165,54779","www.encodeproject.org%2Ffiles%2FENCFF491AOR%2F%40%40download%2FENCFF491AOR.hic":"558663570,36479","www.encodeproject.org%2Ffiles%2FENCFF307PDL%2F%40%40download%2FENCFF307PDL.hic":"525321519,36479","www.encodeproject.org%2Ffiles%2FENCFF773ITV%2F%40%40download%2FENCFF773ITV.hic":"295464771,36479","www.encodeproject.org%2Ffiles%2FENCFF198SSL%2F%40%40download%2FENCFF198SSL.hic":"500142476,36479","www.encodeproject.org%2Ffiles%2FENCFF251UEF%2F%40%40download%2FENCFF251UEF.hic":"567443575,36479","www.encodeproject.org%2Ffiles%2FENCFF942LTN%2F%40%40download%2FENCFF942LTN.hic":"4430960222,36479","www.encodeproject.org%2Ffiles%2FENCFF543USQ%2F%40%40download%2FENCFF543USQ.hic":"5005263062,36479","www.encodeproject.org%2Ffiles%2FENCFF434XQU%2F%40%40download%2FENCFF434XQU.hic":"25506511674,54779","www.encodeproject.org%2Ffiles%2FENCFF318GOM%2F%40%40download%2FENCFF318GOM.hic":"44750824314,54779","www.encodeproject.org%2Ffiles%2FENCFF004TKY%2F%40%40download%2FENCFF004TKY.hic":"20705661833,54779","www.encodeproject.org%2Ffiles%2FENCFF493YNC%2F%40%40download%2FENCFF493YNC.hic":"53407154984,54779","www.encodeproject.org%2Ffiles%2FENCFF334XXU%2F%40%40download%2FENCFF334XXU.hic":"14341194962,47429","www.encodeproject.org%2Ffiles%2FENCFF569RJM%2F%40%40download%2FENCFF569RJM.hic":"1922066634,36479","www.encodeproject.org%2Ffiles%2FENCFF076LWH%2F%40%40download%2FENCFF076LWH.hic":"39406255845,54779","www.encodeproject.org%2Ffiles%2FENCFF977XWK%2F%40%40download%2FENCFF977XWK.hic":"20563512962,54779","www.encodeproject.org%2Ffiles%2FENCFF127TPS%2F%40%40download%2FENCFF127TPS.hic":"21032070512,54779","www.encodeproject.org%2Ffiles%2FENCFF480KLP%2F%40%40download%2FENCFF480KLP.hic":"33115569647,54779","www.encodeproject.org%2Ffiles%2FENCFF281ILS%2F%40%40download%2FENCFF281ILS.hic":"28236353584,54779","www.encodeproject.org%2Ffiles%2FENCFF129LMU%2F%40%40download%2FENCFF129LMU.hic":"35247096013,54779","www.encodeproject.org%2Ffiles%2FENCFF759YCW%2F%40%40download%2FENCFF759YCW.hic":"16058537743,32102","www.encodeproject.org%2Ffiles%2FENCFF045YOM%2F%40%40download%2FENCFF045YOM.hic":"19775445828,32102","www.encodeproject.org%2Ffiles%2FENCFF013TGD%2F%40%40download%2FENCFF013TGD.hic":"4208420532,36479","www.encodeproject.org%2Ffiles%2FENCFF929RPW%2F%40%40download%2FENCFF929RPW.hic":"1974260276,36479","www.encodeproject.org%2Ffiles%2FENCFF996XEO%2F%40%40download%2FENCFF996XEO.hic":"2072918865,36479","www.encodeproject.org%2Ffiles%2FENCFF097SKJ%2F%40%40download%2FENCFF097SKJ.hic":"1983524001,36479","www.encodeproject.org%2Ffiles%2FENCFF464KRA%2F%40%40download%2FENCFF464KRA.hic":"1957300131,36479","www.encodeproject.org%2Ffiles%2FENCFF406HHC%2F%40%40download%2FENCFF406HHC.hic":"3854527235,36479","www.encodeproject.org%2Ffiles%2FENCFF080DPJ%2F%40%40download%2FENCFF080DPJ.hic":"19953768024,47429","www.encodeproject.org%2Ffiles%2FENCFF621AIY%2F%40%40download%2FENCFF621AIY.hic":"26781700010,54779","www.encodeproject.org%2Ffiles%2FENCFF366ERB%2F%40%40download%2FENCFF366ERB.hic":"1049184239,36479","www.encodeproject.org%2Ffiles%2FENCFF997RGL%2F%40%40download%2FENCFF997RGL.hic":"2521167549,36479","www.encodeproject.org%2Ffiles%2FENCFF029MPB%2F%40%40download%2FENCFF029MPB.hic":"1854711185,36479","www.encodeproject.org%2Ffiles%2FENCFF043EEE%2F%40%40download%2FENCFF043EEE.hic":"2924133032,36479","www.encodeproject.org%2Ffiles%2FENCFF920CJR%2F%40%40download%2FENCFF920CJR.hic":"3011577886,36479","www.encodeproject.org%2Ffiles%2FENCFF928NJV%2F%40%40download%2FENCFF928NJV.hic":"2778936244,36479","www.encodeproject.org%2Ffiles%2FENCFF894GLR%2F%40%40download%2FENCFF894GLR.hic":"2831733099,36479","www.encodeproject.org%2Ffiles%2FENCFF303PCK%2F%40%40download%2FENCFF303PCK.hic":"688704435,36479","www.encodeproject.org%2Ffiles%2FENCFF999YXX%2F%40%40download%2FENCFF999YXX.hic":"9255069996,56883","www.encodeproject.org%2Ffiles%2FENCFF685BLG%2F%40%40download%2FENCFF685BLG.hic":"16797022992,47429","www.encodeproject.org%2Ffiles%2FENCFF188SSH%2F%40%40download%2FENCFF188SSH.hic":"16797023050,47429","www.encodeproject.org%2Ffiles%2FENCFF465ESX%2F%40%40download%2FENCFF465ESX.hic":"13489465953,32102","www.encodeproject.org%2Ffiles%2FENCFF493SFI%2F%40%40download%2FENCFF493SFI.hic":"30033046818,54779","www.encodeproject.org%2Ffiles%2FENCFF235LCO%2F%40%40download%2FENCFF235LCO.hic":"38572174589,54779","www.encodeproject.org%2Ffiles%2FENCFF625VNK%2F%40%40download%2FENCFF625VNK.hic":"45202258438,54779","www.encodeproject.org%2Ffiles%2FENCFF304HMS%2F%40%40download%2FENCFF304HMS.hic":"36994445315,54779","www.encodeproject.org%2Ffiles%2FENCFF605CEN%2F%40%40download%2FENCFF605CEN.hic":"40358346301,54779","www.encodeproject.org%2Ffiles%2FENCFF086ORS%2F%40%40download%2FENCFF086ORS.hic":"22650781304,54779","www.encodeproject.org%2Ffiles%2FENCFF237UKR%2F%40%40download%2FENCFF237UKR.hic":"41516707246,54779","www.encodeproject.org%2Ffiles%2FENCFF004YZQ%2F%40%40download%2FENCFF004YZQ.hic":"71900665326,54779","www.encodeproject.org%2Ffiles%2FENCFF104THR%2F%40%40download%2FENCFF104THR.hic":"15172410632,54779","www.encodeproject.org%2Ffiles%2FENCFF807IRK%2F%40%40download%2FENCFF807IRK.hic":"17346637451,54779","www.encodeproject.org%2Ffiles%2FENCFF193CQL%2F%40%40download%2FENCFF193CQL.hic":"55726903245,54779","www.encodeproject.org%2Ffiles%2FENCFF700DEX%2F%40%40download%2FENCFF700DEX.hic":"20231399798,54779","www.encodeproject.org%2Ffiles%2FENCFF234MDO%2F%40%40download%2FENCFF234MDO.hic":"24635312640,54779","www.encodeproject.org%2Ffiles%2FENCFF181ROW%2F%40%40download%2FENCFF181ROW.hic":"26883606497,54779","www.encodeproject.org%2Ffiles%2FENCFF896OFN%2F%40%40download%2FENCFF896OFN.hic":"36952196833,54779","www.encodeproject.org%2Ffiles%2FENCFF573OPJ%2F%40%40download%2FENCFF573OPJ.hic":"36685546919,54779","www.encodeproject.org%2Ffiles%2FENCFF028RXH%2F%40%40download%2FENCFF028RXH.hic":"31053919206,54779","www.encodeproject.org%2Ffiles%2FENCFF156GGD%2F%40%40download%2FENCFF156GGD.hic":"35284134289,54779","www.encodeproject.org%2Ffiles%2FENCFF496GEU%2F%40%40download%2FENCFF496GEU.hic":"44659660933,54779","www.encodeproject.org%2Ffiles%2FENCFF945TUH%2F%40%40download%2FENCFF945TUH.hic":"3898570191,35639","www.encodeproject.org%2Ffiles%2FENCFF698KFV%2F%40%40download%2FENCFF698KFV.hic":"4427896684,35751","www.encodeproject.org%2Ffiles%2FENCFF239BHZ%2F%40%40download%2FENCFF239BHZ.hic":"1718552021,36479","www.encodeproject.org%2Ffiles%2FENCFF277LAN%2F%40%40download%2FENCFF277LAN.hic":"4542391336,36479","www.encodeproject.org%2Ffiles%2FENCFF397CMD%2F%40%40download%2FENCFF397CMD.hic":"2832016430,36479","www.encodeproject.org%2Ffiles%2FENCFF778OYA%2F%40%40download%2FENCFF778OYA.hic":"14067187484,47429","www.encodeproject.org%2Ffiles%2FENCFF775VSU%2F%40%40download%2FENCFF775VSU.hic":"14067187484,47429","www.encodeproject.org%2Ffiles%2FENCFF812THZ%2F%40%40download%2FENCFF812THZ.hic":"9667720429,36479","www.encodeproject.org%2Ffiles%2FENCFF777KBU%2F%40%40download%2FENCFF777KBU.hic":"5058284320,36479","www.encodeproject.org%2Ffiles%2FENCFF688KOY%2F%40%40download%2FENCFF688KOY.hic":"4198695833,36479","www.encodeproject.org%2Ffiles%2FENCFF223UBX%2F%40%40download%2FENCFF223UBX.hic":"1206064037,36479","www.encodeproject.org%2Ffiles%2FENCFF273XBU%2F%40%40download%2FENCFF273XBU.hic":"44085607579,54779","www.encodeproject.org%2Ffiles%2FENCFF952JZV%2F%40%40download%2FENCFF952JZV.hic":"44728845246,54779","www.encodeproject.org%2Ffiles%2FENCFF643NDM%2F%40%40download%2FENCFF643NDM.hic":"35877886780,54779","www.encodeproject.org%2Ffiles%2FENCFF586MQY%2F%40%40download%2FENCFF586MQY.hic":"71158037547,54779","www.encodeproject.org%2Ffiles%2FENCFF251VFA%2F%40%40download%2FENCFF251VFA.hic":"40089479399,54779","www.encodeproject.org%2Ffiles%2FENCFF033WGK%2F%40%40download%2FENCFF033WGK.hic":"30802023728,54779","www.encodeproject.org%2Ffiles%2FENCFF649OHR%2F%40%40download%2FENCFF649OHR.hic":"28203184265,54779","www.encodeproject.org%2Ffiles%2FENCFF782WVZ%2F%40%40download%2FENCFF782WVZ.hic":"37248221674,54779","www.encodeproject.org%2Ffiles%2FENCFF579CAR%2F%40%40download%2FENCFF579CAR.hic":"39662025395,54779","www.encodeproject.org%2Ffiles%2FENCFF514XWQ%2F%40%40download%2FENCFF514XWQ.hic":"1319613701,36479","www.encodeproject.org%2Ffiles%2FENCFF666USK%2F%40%40download%2FENCFF666USK.hic":"15051670107,32102","www.encodeproject.org%2Ffiles%2FENCFF047SDP%2F%40%40download%2FENCFF047SDP.hic":"1357076705,16438","www.encodeproject.org%2Ffiles%2FENCFF584LEP%2F%40%40download%2FENCFF584LEP.hic":"9314176858,36479","www.encodeproject.org%2Ffiles%2FENCFF671SOE%2F%40%40download%2FENCFF671SOE.hic":"3273732256,16438","www.encodeproject.org%2Ffiles%2FENCFF702LAP%2F%40%40download%2FENCFF702LAP.hic":"1800427500,31682","www.encodeproject.org%2Ffiles%2FENCFF339PON%2F%40%40download%2FENCFF339PON.hic":"5394351199,31514","www.encodeproject.org%2Ffiles%2FENCFF741QPR%2F%40%40download%2FENCFF741QPR.hic":"4271510019,30139","www.encodeproject.org%2Ffiles%2FENCFF103ANX%2F%40%40download%2FENCFF103ANX.hic":"4439745804,30083","www.encodeproject.org%2Ffiles%2FENCFF395SBC%2F%40%40download%2FENCFF395SBC.hic":"1596732351,31850","www.encodeproject.org%2Ffiles%2FENCFF289WNN%2F%40%40download%2FENCFF289WNN.hic":"8632980535,32102","www.encodeproject.org%2Ffiles%2FENCFF381EAU%2F%40%40download%2FENCFF381EAU.hic":"1702476311,36479","www.encodeproject.org%2Ffiles%2FENCFF976FEY%2F%40%40download%2FENCFF976FEY.hic":"1448279040,36479","www.encodeproject.org%2Ffiles%2FENCFF485LVS%2F%40%40download%2FENCFF485LVS.hic":"1593610856,36479","www.encodeproject.org%2Ffiles%2FENCFF143VJV%2F%40%40download%2FENCFF143VJV.hic":"1422312076,36479","www.encodeproject.org%2Ffiles%2FENCFF588NHX%2F%40%40download%2FENCFF588NHX.hic":"3943637009,36479","www.encodeproject.org%2Ffiles%2FENCFF768UBD%2F%40%40download%2FENCFF768UBD.hic":"24786676166,36479","www.encodeproject.org%2Ffiles%2FENCFF965PEE%2F%40%40download%2FENCFF965PEE.hic":"29387092778,47429","www.encodeproject.org%2Ffiles%2FENCFF702IFC%2F%40%40download%2FENCFF702IFC.hic":"29387092778,47429","www.encodeproject.org%2Ffiles%2FENCFF288DNV%2F%40%40download%2FENCFF288DNV.hic":"10313429504,36479","www.encodeproject.org%2Ffiles%2FENCFF698HWZ%2F%40%40download%2FENCFF698HWZ.hic":"10962849269,47429","www.encodeproject.org%2Ffiles%2FENCFF355OWW%2F%40%40download%2FENCFF355OWW.hic":"3219571601,36479","www.encodeproject.org%2Ffiles%2FENCFF177TYX%2F%40%40download%2FENCFF177TYX.hic":"10325679706,36479","www.encodeproject.org%2Ffiles%2FENCFF542BHD%2F%40%40download%2FENCFF542BHD.hic":"11085397879,47429","www.encodeproject.org%2Ffiles%2FENCFF684IFW%2F%40%40download%2FENCFF684IFW.hic":"11085397879,47429","www.encodeproject.org%2Ffiles%2FENCFF592UHE%2F%40%40download%2FENCFF592UHE.hic":"21363948089,32102","www.encodeproject.org%2Ffiles%2FENCFF779XIS%2F%40%40download%2FENCFF779XIS.hic":"9517383271,36479","www.encodeproject.org%2Ffiles%2FENCFF518PSL%2F%40%40download%2FENCFF518PSL.hic":"7500581463,36479","www.encodeproject.org%2Ffiles%2FENCFF275GBB%2F%40%40download%2FENCFF275GBB.hic":"7889407162,36479","www.encodeproject.org%2Ffiles%2FENCFF634KXI%2F%40%40download%2FENCFF634KXI.hic":"6430702966,36479","www.encodeproject.org%2Ffiles%2FENCFF337QPM%2F%40%40download%2FENCFF337QPM.hic":"8529733887,36479","www.encodeproject.org%2Ffiles%2FENCFF162KMP%2F%40%40download%2FENCFF162KMP.hic":"5615896908,36479","www.encodeproject.org%2Ffiles%2FENCFF992VTE%2F%40%40download%2FENCFF992VTE.hic":"7328975027,36479","www.encodeproject.org%2Ffiles%2FENCFF464WXY%2F%40%40download%2FENCFF464WXY.hic":"5715339664,36479","www.encodeproject.org%2Ffiles%2FENCFF752EGH%2F%40%40download%2FENCFF752EGH.hic":"1733758743,36479","www.encodeproject.org%2Ffiles%2FENCFF474UJM%2F%40%40download%2FENCFF474UJM.hic":"222309548,18679","www.encodeproject.org%2Ffiles%2FENCFF531UPZ%2F%40%40download%2FENCFF531UPZ.hic":"1827756846,36479","www.encodeproject.org%2Ffiles%2FENCFF022VHA%2F%40%40download%2FENCFF022VHA.hic":"244983451,18679","www.encodeproject.org%2Ffiles%2FENCFF732NGR%2F%40%40download%2FENCFF732NGR.hic":"1679484567,36479","www.encodeproject.org%2Ffiles%2FENCFF513VSF%2F%40%40download%2FENCFF513VSF.hic":"28397932940,36479","www.encodeproject.org%2Ffiles%2FENCFF750AOC%2F%40%40download%2FENCFF750AOC.hic":"36471430712,47429","www.encodeproject.org%2Ffiles%2FENCFF219YOB%2F%40%40download%2FENCFF219YOB.hic":"2859767211,26979","www.encodeproject.org%2Ffiles%2FENCFF604YDD%2F%40%40download%2FENCFF604YDD.hic":"3549694085,26979","www.encodeproject.org%2Ffiles%2FENCFF746AMV%2F%40%40download%2FENCFF746AMV.hic":"2954867135,26979","www.encodeproject.org%2Ffiles%2FENCFF845ZEB%2F%40%40download%2FENCFF845ZEB.hic":"2763039282,26979","www.encodeproject.org%2Ffiles%2FENCFF570LWS%2F%40%40download%2FENCFF570LWS.hic":"2861588289,26979","www.encodeproject.org%2Ffiles%2FENCFF883YVR%2F%40%40download%2FENCFF883YVR.hic":"2433679887,26979","www.encodeproject.org%2Ffiles%2FENCFF056VLK%2F%40%40download%2FENCFF056VLK.hic":"2502986910,26979","www.encodeproject.org%2Ffiles%2FENCFF532DUQ%2F%40%40download%2FENCFF532DUQ.hic":"3172615899,26979","www.encodeproject.org%2Ffiles%2FENCFF723PYJ%2F%40%40download%2FENCFF723PYJ.hic":"10292839095,36479","www.encodeproject.org%2Ffiles%2FENCFF991SGJ%2F%40%40download%2FENCFF991SGJ.hic":"13072407683,32102","www.encodeproject.org%2Ffiles%2FENCFF885UZI%2F%40%40download%2FENCFF885UZI.hic":"1201881201,16438","www.encodeproject.org%2Ffiles%2FENCFF287KXA%2F%40%40download%2FENCFF287KXA.hic":"14705801988,32102","www.encodeproject.org%2Ffiles%2FENCFF335HYI%2F%40%40download%2FENCFF335HYI.hic":"20366756545,32102","www.encodeproject.org%2Ffiles%2FENCFF121YPY%2F%40%40download%2FENCFF121YPY.hic":"2760104016,26979","www.encodeproject.org%2Ffiles%2FENCFF675SJE%2F%40%40download%2FENCFF675SJE.hic":"3751779995,26979","www.encodeproject.org%2Ffiles%2FENCFF876LAW%2F%40%40download%2FENCFF876LAW.hic":"4032376256,26979","www.encodeproject.org%2Ffiles%2FENCFF740KVX%2F%40%40download%2FENCFF740KVX.hic":"3202490322,26979","www.encodeproject.org%2Ffiles%2FENCFF977OQV%2F%40%40download%2FENCFF977OQV.hic":"2919735477,26979","www.encodeproject.org%2Ffiles%2FENCFF525EFN%2F%40%40download%2FENCFF525EFN.hic":"2394748073,26979","www.encodeproject.org%2Ffiles%2FENCFF690QRC%2F%40%40download%2FENCFF690QRC.hic":"3183023394,26979","www.encodeproject.org%2Ffiles%2FENCFF452FWS%2F%40%40download%2FENCFF452FWS.hic":"2951805127,26979","www.encodeproject.org%2Ffiles%2FENCFF089KBG%2F%40%40download%2FENCFF089KBG.hic":"2531936700,26979","www.encodeproject.org%2Ffiles%2FENCFF939ARM%2F%40%40download%2FENCFF939ARM.hic":"3066385212,26979","www.encodeproject.org%2Ffiles%2FENCFF401ZAN%2F%40%40download%2FENCFF401ZAN.hic":"3008677144,26979","www.encodeproject.org%2Ffiles%2FENCFF378RZT%2F%40%40download%2FENCFF378RZT.hic":"2830232168,26979","www.encodeproject.org%2Ffiles%2FENCFF304AVD%2F%40%40download%2FENCFF304AVD.hic":"6164439305,50358","www.encodeproject.org%2Ffiles%2FENCFF453DBX%2F%40%40download%2FENCFF453DBX.hic":"6775246670,36479","www.encodeproject.org%2Ffiles%2FENCFF590VOM%2F%40%40download%2FENCFF590VOM.hic":"6443478922,36479","www.encodeproject.org%2Ffiles%2FENCFF246DOF%2F%40%40download%2FENCFF246DOF.hic":"6837914659,36479","www.encodeproject.org%2Ffiles%2FENCFF125FXX%2F%40%40download%2FENCFF125FXX.hic":"9736232550,36479","www.encodeproject.org%2Ffiles%2FENCFF241RAY%2F%40%40download%2FENCFF241RAY.hic":"7686758397,36479","www.encodeproject.org%2Ffiles%2FENCFF415XWQ%2F%40%40download%2FENCFF415XWQ.hic":"6973092068,36479","www.encodeproject.org%2Ffiles%2FENCFF374EBH%2F%40%40download%2FENCFF374EBH.hic":"8557459058,36479","www.encodeproject.org%2Ffiles%2FENCFF263YWR%2F%40%40download%2FENCFF263YWR.hic":"331586820,18679","www.encodeproject.org%2Ffiles%2FENCFF280CGS%2F%40%40download%2FENCFF280CGS.hic":"1743569614,36479","www.encodeproject.org%2Ffiles%2FENCFF553ZNS%2F%40%40download%2FENCFF553ZNS.hic":"1717253636,36479","www.encodeproject.org%2Ffiles%2FENCFF451VOI%2F%40%40download%2FENCFF451VOI.hic":"1626927468,36479","www.encodeproject.org%2Ffiles%2FENCFF420MQO%2F%40%40download%2FENCFF420MQO.hic":"31055961677,36479","www.encodeproject.org%2Ffiles%2FENCFF301BWY%2F%40%40download%2FENCFF301BWY.hic":"38902429246,47429","www.encodeproject.org%2Ffiles%2FENCFF606XNW%2F%40%40download%2FENCFF606XNW.hic":"1009699327,36479","www.encodeproject.org%2Ffiles%2FENCFF439ZOU%2F%40%40download%2FENCFF439ZOU.hic":"12381714313,36479","www.encodeproject.org%2Ffiles%2FENCFF499SYK%2F%40%40download%2FENCFF499SYK.hic":"13182654663,47429","www.encodeproject.org%2Ffiles%2FENCFF532LFI%2F%40%40download%2FENCFF532LFI.hic":"8286030286,36479","www.encodeproject.org%2Ffiles%2FENCFF020DPP%2F%40%40download%2FENCFF020DPP.hic":"23521952420,47429","www.encodeproject.org%2Ffiles%2FENCFF306VTV%2F%40%40download%2FENCFF306VTV.hic":"23521952480,47429","www.encodeproject.org%2Ffiles%2FENCFF399IHE%2F%40%40download%2FENCFF399IHE.hic":"10216571232,36479","www.encodeproject.org%2Ffiles%2FENCFF944AII%2F%40%40download%2FENCFF944AII.hic":"12567308552,47429","www.encodeproject.org%2Ffiles%2FENCFF230HVV%2F%40%40download%2FENCFF230HVV.hic":"8629849711,36479","www.encodeproject.org%2Ffiles%2FENCFF174LAF%2F%40%40download%2FENCFF174LAF.hic":"9446506633,47429","www.encodeproject.org%2Ffiles%2FENCFF898HRO%2F%40%40download%2FENCFF898HRO.hic":"9446506633,47429","www.encodeproject.org%2Ffiles%2FENCFF429MOR%2F%40%40download%2FENCFF429MOR.hic":"1455757398,36479","www.encodeproject.org%2Ffiles%2FENCFF061NXV%2F%40%40download%2FENCFF061NXV.hic":"1710915891,36479","www.encodeproject.org%2Ffiles%2FENCFF434PYS%2F%40%40download%2FENCFF434PYS.hic":"1832274903,36479","www.encodeproject.org%2Ffiles%2FENCFF704HHX%2F%40%40download%2FENCFF704HHX.hic":"1768142834,36479","www.encodeproject.org%2Ffiles%2FENCFF349DPM%2F%40%40download%2FENCFF349DPM.hic":"4316041260,36479","www.encodeproject.org%2Ffiles%2FENCFF718AWL%2F%40%40download%2FENCFF718AWL.hic":"39544267907,58932","www.encodeproject.org%2Ffiles%2FENCFF065LSP%2F%40%40download%2FENCFF065LSP.hic":"24929805283,55874","www.encodeproject.org%2Ffiles%2FENCFF632MFV%2F%40%40download%2FENCFF632MFV.hic":"22333105467,55798","www.encodeproject.org%2Ffiles%2FENCFF179HVU%2F%40%40download%2FENCFF179HVU.hic":"2659219603,36479","www.encodeproject.org%2Ffiles%2FENCFF791SPZ%2F%40%40download%2FENCFF791SPZ.hic":"2537491657,36479","www.encodeproject.org%2Ffiles%2FENCFF211ZWF%2F%40%40download%2FENCFF211ZWF.hic":"3512141227,36479","www.encodeproject.org%2Ffiles%2FENCFF614BNU%2F%40%40download%2FENCFF614BNU.hic":"5252155462,36479","www.encodeproject.org%2Ffiles%2FENCFF891DLM%2F%40%40download%2FENCFF891DLM.hic":"2549095612,36479","www.encodeproject.org%2Ffiles%2FENCFF056EXT%2F%40%40download%2FENCFF056EXT.hic":"2219014704,36479","www.encodeproject.org%2Ffiles%2FENCFF776DSS%2F%40%40download%2FENCFF776DSS.hic":"3920308353,36479","www.encodeproject.org%2Ffiles%2FENCFF814LQF%2F%40%40download%2FENCFF814LQF.hic":"1349480197,36479","www.encodeproject.org%2Ffiles%2FENCFF513ZNA%2F%40%40download%2FENCFF513ZNA.hic":"2638868195,36479","www.encodeproject.org%2Ffiles%2FENCFF692IOL%2F%40%40download%2FENCFF692IOL.hic":"3106768498,36479","www.encodeproject.org%2Ffiles%2FENCFF294WZY%2F%40%40download%2FENCFF294WZY.hic":"2211089761,36479","www.encodeproject.org%2Ffiles%2FENCFF339UWS%2F%40%40download%2FENCFF339UWS.hic":"2142759055,36479","www.encodeproject.org%2Ffiles%2FENCFF835FSK%2F%40%40download%2FENCFF835FSK.hic":"3919821739,36479","www.encodeproject.org%2Ffiles%2FENCFF328BMB%2F%40%40download%2FENCFF328BMB.hic":"2550686152,36479","www.encodeproject.org%2Ffiles%2FENCFF897RTY%2F%40%40download%2FENCFF897RTY.hic":"1323294397,36479","www.encodeproject.org%2Ffiles%2FENCFF306MWH%2F%40%40download%2FENCFF306MWH.hic":"1665386199,36479","www.encodeproject.org%2Ffiles%2FENCFF039YUJ%2F%40%40download%2FENCFF039YUJ.hic":"2335679939,36479","www.encodeproject.org%2Ffiles%2FENCFF468QIN%2F%40%40download%2FENCFF468QIN.hic":"3352516594,36479","www.encodeproject.org%2Ffiles%2FENCFF364WXU%2F%40%40download%2FENCFF364WXU.hic":"3959043175,36479","www.encodeproject.org%2Ffiles%2FENCFF373MSH%2F%40%40download%2FENCFF373MSH.hic":"4429550624,36479","www.encodeproject.org%2Ffiles%2FENCFF959EGQ%2F%40%40download%2FENCFF959EGQ.hic":"2475218228,36479","www.encodeproject.org%2Ffiles%2FENCFF624XMK%2F%40%40download%2FENCFF624XMK.hic":"3527855681,36479","www.encodeproject.org%2Ffiles%2FENCFF445OKS%2F%40%40download%2FENCFF445OKS.hic":"3369125589,36479","www.encodeproject.org%2Ffiles%2FENCFF239QDV%2F%40%40download%2FENCFF239QDV.hic":"1960069888,36479","www.encodeproject.org%2Ffiles%2FENCFF645AVM%2F%40%40download%2FENCFF645AVM.hic":"4969006589,36479","www.encodeproject.org%2Ffiles%2FENCFF494IPI%2F%40%40download%2FENCFF494IPI.hic":"1565483792,36479","www.encodeproject.org%2Ffiles%2FENCFF753IXE%2F%40%40download%2FENCFF753IXE.hic":"2892400648,36479","www.encodeproject.org%2Ffiles%2FENCFF731GXX%2F%40%40download%2FENCFF731GXX.hic":"5131381303,36479","www.encodeproject.org%2Ffiles%2FENCFF369CAQ%2F%40%40download%2FENCFF369CAQ.hic":"4236629448,36479","www.encodeproject.org%2Ffiles%2FENCFF053VBX%2F%40%40download%2FENCFF053VBX.hic":"54305946375,47429","www.encodeproject.org%2Ffiles%2FENCFF555ISR%2F%40%40download%2FENCFF555ISR.hic":"54305946434,47429","www.encodeproject.org%2Ffiles%2FENCFF964RSP%2F%40%40download%2FENCFF964RSP.hic":"12065485229,36479","www.encodeproject.org%2Ffiles%2FENCFF234MZQ%2F%40%40download%2FENCFF234MZQ.hic":"17507142760,47429","www.encodeproject.org%2Ffiles%2FENCFF994CEG%2F%40%40download%2FENCFF994CEG.hic":"17507142760,47429","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb068e787-bbdd-49e2-9f6d-7a0e9f065d6e%2F4DNFIHSUIRFY.hic":"2701182442,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3768b89a-e124-40eb-8acd-94a4fdd35807%2F4DNFIXTAS6EE.hic":"3283740601,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9c513602-5abb-4088-8415-c827c381ab0d%2F4DNFIC3JD6O2.hic":"4896075767,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fde954dad-1849-4c23-beb4-bf893b7d76c9%2F4DNFIGY85S4W.hic":"3364151996,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe1befa6e-8067-4296-8db2-67d2a2458985%2F4DNFI2LTNXME.hic":"3699291418,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbb3307fd-7162-477a-87c5-52f12d03befc%2F4DNFID162B9J.hic":"3576428773,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8597cdae-8319-42d9-9175-3f77aaee34e1%2F4DNFIQWS3632.hic":"4022561190,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F327f091d-6a63-47c4-9752-2dff303a13d9%2F4DNFI6GFHB6G.hic":"4239331168,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd70dc3b8-48a7-42c2-bd23-80bc44fc2266%2F4DNFIS5F6EBL.hic":"4404671861,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F77df7bf8-6a3d-407a-8968-4ca1e78d2269%2F4DNFIF2D3TL9.hic":"4793989394,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc8f7cc35-d2ef-4717-9009-c02154050fbf%2F4DNFI6EIFUZI.hic":"3370273763,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F98449d79-30d1-4e32-801d-07435819a42f%2F4DNFIRKGMZRQ.hic":"4669813207,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd4fe1844-2493-4722-8b98-34a93a4bb7d8%2F4DNFIQWD8ZYD.hic":"5379889057,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1ee40499-1de4-47ff-b540-d9a65943c6b8%2F4DNFIX7H3CE2.hic":"4857679239,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fac016170-23a7-4111-8773-353d6c150f34%2F4DNFIO21YDCV.hic":"4695989644,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1faea4e7-9a32-466e-a826-0bfdab6cd915%2F4DNFIUE5RAS6.hic":"4788044799,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcbd396ed-11bb-404f-aed9-ef10abc258e6%2F4DNFIFI6NIKJ.hic":"2069414927,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faf3f78db-ae92-4215-bcae-76d30c617e5d%2F4DNFIL5K3MA1.hic":"2585598247,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F66fc2893-224e-48b4-bdb0-25e022dedd03%2F4DNFIPV5KFMK.hic":"2060965679,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2b39781d-aadc-434f-abe3-562d61308fdd%2F4DNFIW8TIFI5.hic":"1694424195,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb6d28f7b-27d3-486f-b5ac-32567416560d%2F4DNFIA6NSSBJ.hic":"2219532611,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F08785616-722e-46bb-ade2-2fdd21324e11%2F4DNFIBKZK63V.hic":"2429136232,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F904b13d3-1203-42a4-812c-963e80c159b1%2F4DNFI3CFMRID.hic":"1233390166,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb0ed4afe-5ecf-451d-bb1f-444697e3f558%2F4DNFIYIAUEPW.hic":"1753567534,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4bb9a9b3-12a8-4d2f-8071-4722294c88ea%2F4DNFIC3HAU11.hic":"2271375254,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5abf9c36-c1d1-44dc-8197-74d860d896c0%2F4DNFIM2BMJ33.hic":"1770471113,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa68475db-7816-4cec-b2da-d4ce4a0c7a0e%2F4DNFIBY3UHJB.hic":"2095528423,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F07c40943-0d0b-4b3e-94a0-8583b0e00b47%2F4DNFIWZEN3FF.hic":"1558559508,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd8a39553-2718-4866-9b2a-45d8e9c5ac6f%2F4DNFIE5TEYK7.hic":"1323063102,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F294b61ef-5565-4f04-ade9-f921a6686cce%2F4DNFI7H4II2V.hic":"1436947982,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F87a70ad7-7d34-4302-9c03-eb824bd4e633%2F4DNFIAS8LV1C.hic":"1263105698,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9db804c6-5a91-4cf5-8ae9-e054223afb77%2F4DNFIBXWIH8J.hic":"1587059951,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd1e55906-ec8f-444b-8ce1-2de22a431a76%2F4DNFIO2HBDAI.hic":"1666436393,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7a4b9b37-8e38-470c-8190-fd4d513c0bbb%2F4DNFIXWCLD4M.hic":"1513511880,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6c7615b2-5310-4bbf-a605-98761d3a3079%2F4DNFINASC4NQ.hic":"1420358914,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F20454014-49cd-4e2d-93da-f40ad52776d5%2F4DNFIZF1KI43.hic":"1377041630,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5df04e86-ee2a-45f2-b878-bf1648e2cca5%2F4DNFIQBHR9XC.hic":"1179502734,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9d1cc910-bb3f-4106-802a-73184c58d5ba%2F4DNFIQVMVRP6.hic":"1811976991,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe431986b-0732-460f-92ff-0abd1694d2d0%2F4DNFIJ7OAIFQ.hic":"1685503856,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F56d0c575-4962-4ea3-92c3-55bd0e17c096%2F4DNFIE8E4ANZ.hic":"1598369564,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdb1502fb-a989-4ef9-b800-7eaa7be172ae%2F4DNFIOUSETUP.hic":"1493294709,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Facc2f1c3-8c96-4d21-814a-3a8ba81e7741%2F4DNFIVJ3IIQL.hic":"1472376655,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F037fb4c3-8641-4953-a977-cc71f2137582%2F4DNFIHN2QSMX.hic":"1179632606,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F16d2c3c0-6d29-4815-b074-b142af90b615%2F4DNFIILDWK8M.hic":"2280059989,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F31789849-e4db-45d8-9730-66a048c02d8a%2F4DNFI6XD6JAQ.hic":"2253961696,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fff04947e-e6e8-4d62-8374-ef2ee4104809%2F4DNFIALNLR78.hic":"1914687914,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F53e6c1e7-9410-4158-84e6-57c2e683b095%2F4DNFIBT4EAKN.hic":"2296378356,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0127900a-258f-4815-97d2-6fd2b043d853%2F4DNFIDJ2JZ7Q.hic":"2558945393,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F89f95693-3d28-44eb-9d45-14932f8e258c%2F4DNFI8JFOAJT.hic":"1726440253,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd803d818-b0d4-4796-8d61-a9f3943f3b10%2F4DNFIRZA6EV6.hic":"1805017504,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff9165fb1-0782-4757-a740-5b929e0252bb%2F4DNFIB7QTIMH.hic":"2541020707,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff8d916b2-b58e-4cdf-894c-ffcb3bf6ebd9%2F4DNFIJ5DQZVK.hic":"2445734043,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F14066a5b-e01a-43c2-a468-b18826174df3%2F4DNFISTWNV9C.hic":"2499319890,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd0692151-7f9a-4475-b059-f8802616dded%2F4DNFIBN9K4V9.hic":"1591570769,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F70a7ef36-a514-4e45-918f-47c4e9e30ef4%2F4DNFIR8OU6QJ.hic":"1689882108,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F180306cd-8593-413a-ae83-24f19209c5d2%2F4DNFIDSWKFF5.hic":"1596696630,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6e7b9be7-f465-4434-8e9c-68d1e44a76af%2F4DNFIV239W4L.hic":"2345867406,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F55df948c-941d-4930-854c-6a07557a0c1d%2F4DNFIREVU1Z5.hic":"2254683002,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3f590cb7-df3a-498f-81c3-d5ed4179b8ad%2F4DNFIFHU75I5.hic":"2497670883,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8f064770-6008-4f74-bfca-268d4a22d745%2F4DNFIMROE6N4.hic":"9850583704,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa93d0588-76b7-4ccf-933c-4325876b0a53%2F4DNFI5SUHCGZ.hic":"10364705187,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2f5f0d6b-0b22-4936-93c9-0944d49c037b%2F4DNFII84FBKM.hic":"8836986129,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F12e90fc5-0b76-4e42-b346-58d267f9ad6e%2F4DNFI2J1ODWB.hic":"13410858286,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff2702a45-3e8b-4980-bcd5-6bb0e291614f%2F4DNFIJWBWE41.hic":"20515676755,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa0859349-5f06-4ad3-b56f-b1166b34a9eb%2F4DNFIIMZB6Y9.hic":"15350325963,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F12685c57-d54a-46fa-9efb-acf34ed77574%2F4DNFICJECID5.hic":"1525002266,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd101a58e-89aa-44fd-96c5-6bf1e2476272%2F4DNFIR6UW2QA.hic":"1264999913,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3d8c73bf-1335-4af4-b124-e3622d48c5f6%2F4DNFIGOEKBUZ.hic":"1905947578,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcd2477cf-6ed0-4d7b-b4e9-88fb38b0df48%2F4DNFIMDNAEW4.hic":"996444147,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0f03953e-29da-4f2e-8c05-572d0edf4525%2F4DNFI5OSZ3JC.hic":"369361754,22829","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F29d95dbb-005a-4ae1-8b9c-0fec9ec0bbd0%2F4DNFI7KOUGFM.hic":"1227434049,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa441ab7b-afbe-437d-bf98-b6b916558642%2F4DNFIGKX4A32.hic":"883933242,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F941b2f94-2fff-4d3c-aceb-fee4a5ae41a9%2F4DNFI1ORHOTA.hic":"1140970677,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8720ede9-093f-4c00-912f-373283260a16%2F4DNFIWSVLZED.hic":"458091151,26979","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe9e17155-2b62-4a68-afb2-31dfa674e169%2F4DNFI6H926RO.hic":"3552863515,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F22f22778-987a-4dc0-97bc-f26eae0156d9%2F4DNFIKTYSPOF.hic":"2939475400,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F40f40192-0acb-44cb-8778-8d21afe593fb%2F4DNFIZ4S52BV.hic":"3067438113,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd8767374-7018-4e11-9226-bf5612d39ebb%2F4DNFI3APMXHF.hic":"3258874744,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8c5140ec-a65a-4186-8c59-2927233eecaa%2F4DNFIQLIKDSD.hic":"2746398416,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8cdedda6-d7d8-4231-a85b-d56fcd962366%2F4DNFIKYXMF1E.hic":"14442148774,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faa4d4497-7c6c-4dad-8040-be13ba07ea32%2F4DNFI9815EEJ.hic":"17960817603,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe9b7b95f-190b-49fe-8047-ef4a8fc59746%2F4DNFIQ2687RT.hic":"15954277087,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F59863d3a-8d7c-49c7-9a41-7f2a58ad24d1%2F4DNFIYDBBSE3.hic":"16499534862,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3e80ca41-b3e0-4f4f-a05e-8f95fe96d938%2F4DNFIMOCN1YS.hic":"863725312,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F96f97a01-0020-4f09-93e8-fc8a9fd07218%2F4DNFI6558CM8.hic":"1597967345,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fce9e9334-ee0b-4549-a845-110470ba5986%2F4DNFIQZRKS7Y.hic":"907626411,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdaac8209-1015-48da-9e31-2e252dfd8fe0%2F4DNFIX4DLXSE.hic":"1369766288,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F268b7d52-9655-474c-9467-8ba31bb2195c%2F4DNFII3JV8I1.hic":"856656441,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9681f9b5-335a-4f56-afa1-15b58bbb41e8%2F4DNFI5IAH9H1.hic":"1495185175,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3e082eab-95aa-4677-88ed-9d7adcc1effb%2F4DNFIK5HY1GP.hic":"2135337789,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F31af1ead-4520-4669-957e-424b4b197c33%2F4DNFIFA89L5B.hic":"1975593640,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcc2b78fd-52d4-4e0c-ac93-b84ee82daf7e%2F4DNFICXCFGEI.hic":"2628202920,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff54efece-280f-46ca-95e3-1f8a3cd18820%2F4DNFIK4CECUH.hic":"1901129375,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1181c0c4-afb7-4b6a-9fdc-d868fb2253fc%2F4DNFI1EYIGOC.hic":"1947135384,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1d3e2905-b9b9-4b91-bcb4-8d34746e78f6%2F4DNFI7TLEWUI.hic":"1185758726,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faba3d42f-39cd-4a85-9d3f-835aefb5c803%2F4DNFIVCJKHMN.hic":"687240974,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F27f54fcb-54fe-41a4-b25a-2f8944c89044%2F4DNFIN8F14CS.hic":"1304082029,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb75fedb5-88f4-4bc0-8e38-298df7847a7f%2F4DNFI5LCW273.hic":"12497258313,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2f22b2a0-3712-496e-92d2-63775ec0e421%2F4DNFIVSCH2CH.hic":"12594733778,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F07e47261-5863-44f5-9198-76e263081bea%2F4DNFIZ268JGC.hic":"1499059135,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F682b1ae1-3ac3-40e4-a330-c49f63946952%2F4DNFIJ1P4HBI.hic":"1190211725,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F197e7c89-ea73-41de-8cb2-8c0b1e3bb945%2F4DNFITEGKBIW.hic":"2061501971,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F191f6928-c9a8-44b2-8516-ee4d6005f24b%2F4DNFIE1P6RVH.hic":"1711447310,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F94435086-3701-4b28-a6d0-4a59b24d7615%2F4DNFICJ6I4DO.hic":"1557899940,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faa9ac173-d233-41c7-8985-ca91949664e4%2F4DNFIKUG8MEW.hic":"1339072088,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fba6d8ab6-ee18-4ba2-8da9-d631888dd50a%2F4DNFICFZGFAV.hic":"1261083478,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F87a3ab04-7094-4673-81e4-ac8c9add8eb5%2F4DNFIQXCZVVA.hic":"1084913802,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbc1ff488-82af-4579-9424-959184edb139%2F4DNFIB6PJFJ3.hic":"1114571343,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1f7026ee-987a-41e7-8a61-45510ee3f86b%2F4DNFIX97731O.hic":"1246860402,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6186787c-2e72-4925-9729-02121e2e4597%2F4DNFIYQYZOTO.hic":"1212210849,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3b98a946-0109-4efa-a13e-cc7a36772125%2F4DNFIPXU7V25.hic":"1696288217,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fea17d041-c6ed-43a1-8047-535f3d19ad44%2F4DNFIL39PR76.hic":"1719284710,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F72774afe-f166-42ac-9849-4070b0dadf6d%2F4DNFIYLJ3R3B.hic":"1106419640,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4a45e733-55f8-4a8e-be24-2ef34c976e25%2F4DNFIL51WBN6.hic":"1327651164,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F086c62b0-a26f-41ae-a5ff-88b8be2bd2aa%2F4DNFI6SFPUDA.hic":"1336964405,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4d9b79c7-af62-4070-84a9-b953903f2732%2F4DNFI2KM22QR.hic":"953067310,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3c9889d1-f49e-4639-8e15-2d99d6cd22e7%2F4DNFIVF8Q45U.hic":"984193565,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa080dd7b-b7bb-4eae-a275-572a8b45b2d0%2F4DNFI2RN3WFP.hic":"1046525527,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb81860ca-c227-4b68-a298-1907fd32300a%2F4DNFI4TJTL7A.hic":"1160373401,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F74ab47dc-7b52-421c-845e-6feb33457adf%2F4DNFIYJ4TWB8.hic":"1268416204,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc6582128-a930-4bcc-941e-5c0733bdd4d5%2F4DNFIM6RGKPV.hic":"863347067,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F11a75514-4450-4295-9eda-18e3678a575a%2F4DNFIL2VWWL5.hic":"860731581,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5eb52a8c-bf14-4225-bf34-14a0aa47c369%2F4DNFIX6ZXCA8.hic":"893462267,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F66aaa4c0-1f62-4040-8ecc-4e95da23cd18%2F4DNFIEVR81FS.hic":"879736207,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F821c6e7f-96f7-47de-b7d9-4970562b3c8e%2F4DNFIAUI6BBI.hic":"996313881,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9252c362-31ab-413d-a47a-cc97bdbf243a%2F4DNFIAFEE9G2.hic":"1103265750,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc1a0bf52-2e65-4deb-871f-ede736babd41%2F4DNFIPZBEXCP.hic":"1081257762,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F729f5ce3-d7e0-466d-b781-d18049e63bfa%2F4DNFIWPKRZGU.hic":"973779283,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F80b769ee-a717-4825-9db0-dca86f913173%2F4DNFIMD9QNDX.hic":"1158688208,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F266290c0-2767-4158-85ab-7274368905b9%2F4DNFIATA1HD5.hic":"1073361089,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc46f18a8-eb24-4d35-b112-36db72bde2f5%2F4DNFIH9U4I7I.hic":"1111124316,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fec91a79e-7de7-49f7-9b3d-d28313aeddc8%2F4DNFIZ95S6TR.hic":"1242494051,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9e9390b9-da20-43bb-a8f4-9830f354ddf9%2F4DNFI5ERM9J7.hic":"1271051397,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fee8ea82e-b9e4-41ad-bced-5f4fbdaa4fec%2F4DNFI15FPSQL.hic":"1216714120,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbed7eb86-8990-42f2-b3ee-5992d6361f7c%2F4DNFIJ3DZPGM.hic":"1035089437,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdaa8a324-3bf8-424c-8a86-b8ad325cc20d%2F4DNFINW9P6XF.hic":"1215712740,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F70631758-6bf8-47a0-92b6-132574886faa%2F4DNFITS16HW8.hic":"1105283847,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe473304b-7bc8-49b8-bba1-ecb9f06914ee%2F4DNFIS3DIH4V.hic":"1036056660,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F10f9224a-111c-402a-ac25-e221ad0af9ef%2F4DNFIY3KDHP6.hic":"1071761024,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F17519b96-2bdd-4294-98f0-1535f1aef28e%2F4DNFIO8HVKOL.hic":"953793750,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ffb18f896-4730-4909-86a3-867fc8e76cd6%2F4DNFIMF6CFOM.hic":"708717889,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcfee4d87-0873-40b0-b79f-35dcc8669c1c%2F4DNFIZZ77KD2.hic":"732668723,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb8b5d909-8a1b-41bb-bcdd-d108a0bde762%2F4DNFIOLO226X.hic":"951271932,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9ce81f6e-b9cf-4ec9-8bd3-517539e4b662%2F4DNFIJMS2ODT.hic":"932509067,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F506aa952-5d41-49ff-b658-916bcf88a395%2F4DNFI49F3LJ4.hic":"1208494817,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe4dc392d-ca36-4bdf-a27d-173cae34f520%2F4DNFI65MQOIJ.hic":"854630155,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F149ef8d7-e0b4-4e4f-b7e5-7226e2603746%2F4DNFIM4KEPRD.hic":"882790622,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa436f0a8-4f9a-4524-90ac-795c5b8491cf%2F4DNFIIXBIZFC.hic":"848244425,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbc8a05dc-7449-4b01-8330-a55db37ca8e6%2F4DNFIWDOOBVE.hic":"1116239020,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faef8b881-28fe-4694-9a95-1d31940e6726%2F4DNFIDT9EB5M.hic":"888289053,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff66f3162-a53d-46f2-8800-3752935d5400%2F4DNFIX2VUNV8.hic":"1226661451,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F36c782e6-2c48-4298-aa43-bd6624da003d%2F4DNFIEQHTV1R.hic":"804665819,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff15d571e-605d-4bcc-a359-0350b57a6815%2F4DNFIFW7GA64.hic":"901568712,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc2aa2e8b-ac7f-4acb-b4b5-ac5f845840fe%2F4DNFIXGXD67I.hic":"970995551,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F71b6fd7d-b249-4d65-a597-b80b95845399%2F4DNFIA7GB1NB.hic":"956785837,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6cbb1418-34db-427f-9273-5174eac81529%2F4DNFIVOJGWNP.hic":"890415052,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc69c2ee7-b6c3-4a62-8d4f-913491c9dab8%2F4DNFIW22BNB5.hic":"1075499540,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa268f28f-c6d9-4324-8989-75d2d317af1b%2F4DNFIIFBC8WN.hic":"1045459440,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6c7361d4-60a6-440b-b5be-072cada98663%2F4DNFI9ZBEBJH.hic":"759395398,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcceaad1a-e01e-4430-8bd6-24ffa6891802%2F4DNFID4SLU53.hic":"921288444,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9eee5854-b33e-4d5a-9ba8-ceffd47e7488%2F4DNFIODI1NUJ.hic":"733159777,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5e1089b0-42e8-441c-99bb-4be99bcec28b%2F4DNFIJL26LFN.hic":"723567970,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F298a429e-ea29-49d3-bfed-fa851e1e7c4c%2F4DNFI5KTF553.hic":"2213661745,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F965d29f0-e4a3-477c-8ae4-faf4a654e69a%2F4DNFIYSPGFGV.hic":"2274989349,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd88acbc1-37b9-4266-9f97-d8fed576d0f3%2F4DNFILOR6D2D.hic":"2595459358,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7b6ddbce-0ed1-4272-b8ae-32793e4ea4e4%2F4DNFI1WMMPJQ.hic":"2262433890,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fedc0c8c4-97d8-4372-9a4f-5e0cdf09d7d0%2F4DNFI47P5978.hic":"2146314403,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0edcc389-43a4-44d7-b946-fe3496f93d56%2F4DNFI7XGW6IH.hic":"2302805723,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0a802926-e235-4c80-b521-83a1774dfb46%2F4DNFIK1EJG8I.hic":"2374943035,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3c36aedb-6a58-4aa2-9b11-bb440ec174f1%2F4DNFIDQ3THN9.hic":"2341188249,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F846123cd-8828-4e51-8b8a-27deaf293858%2F4DNFI3WPNFWT.hic":"775145629,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbd06e3ad-0e37-48a3-8367-c7d5912cab03%2F4DNFI9DCUOQ1.hic":"870487824,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc2eaf9bf-9584-4cec-8685-bd74038a6c01%2F4DNFIU8AF5ZY.hic":"1276224366,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F219497b5-3f35-473b-9d4e-e1cf21c69561%2F4DNFIHW8NTQX.hic":"28864787856,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4be13558-114a-4f2d-abca-7598e2ff4757%2F4DNFI4OUMWZ8.hic":"17061013588,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F49aed637-87a1-4d4d-ae68-e5da82aec05b%2F4DNFIEYQ5ZIR.hic":"13555272651,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa2f48779-4eff-44a6-8a9d-96435aca1ddc%2F4DNFIDZT7PR8.hic":"13425047093,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb6ec6b71-27b8-4891-b10a-ab06a5270468%2F4DNFIEJEFCAM.hic":"15394960208,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F68b9a7b5-8413-44fc-8c2d-59a67b1c4166%2F4DNFIJ8JKKWJ.hic":"17012681779,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F294d45a4-8b5e-456f-a9cb-1cbbbad3a7d2%2F4DNFINEQY95T.hic":"13966775978,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbd7f3a48-b822-41e2-bd9c-f52b3aff7b6a%2F4DNFII6AN691.hic":"12367300362,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7da44594-0dc8-4e74-8e10-a957aeaea51a%2F4DNFIDBIEXI7.hic":"2015474981,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F085a0453-3784-4eba-80b2-3556e53e2f52%2F4DNFIDKJFK2S.hic":"1983111659,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc370c78c-0a99-4c3f-a29b-2dfafc6a3e86%2F4DNFIPAF4PYT.hic":"3041434294,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F907ce45f-baa5-416d-92de-e86db4bacff1%2F4DNFIWIYYNQ5.hic":"7082321112,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff13afc6b-cf69-4c9d-881f-eed4dd3c28ee%2F4DNFIHMCILEN.hic":"1739157603,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7575d891-0e3d-4a77-896a-3e1b3a8d330b%2F4DNFIJBJ6QVH.hic":"5213499748,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff0daa830-60d5-4c7c-a2e1-a4ee70b3fee7%2F4DNFIH2A7IKF.hic":"4099503507,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff4970a25-91d8-49a7-9a4a-fe0f12cb2b0f%2F4DNFIOL8KGQ2.hic":"2256042055,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F879f1850-d175-4a86-8a97-12658482e3d1%2F4DNFIWILLD6C.hic":"5476286356,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F787f538e-d619-4c8f-985b-78753fb7e57c%2F4DNFIZBXXJAF.hic":"5946467856,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb8ee785f-1016-4989-9e64-78352621d32f%2F4DNFI8PZOJHN.hic":"8307204961,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3d8997fa-528c-4531-b25b-a412de6bd472%2F4DNFIGXAMSJY.hic":"6577588285,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F87aede55-7610-4283-af0e-c6840429a31e%2F4DNFIWNNO89O.hic":"2871061417,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F93b8e020-b337-4685-81dc-40cc8a12b5e9%2F4DNFIXU2KPNQ.hic":"3401717686,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ffb5cf1bd-59d6-46fe-857d-b86d9756029d%2F4DNFIHBGD6N6.hic":"840028421,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2d1bc088-d838-49b8-85fc-fea78a7353c4%2F4DNFI7J8NI4A.hic":"675705256,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F21a27b63-fd67-401b-9aa2-2798e6588d21%2F4DNFISFM9VFK.hic":"800145922,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F656c0a9d-7058-4c4b-a3ce-701d929561c1%2F4DNFIJU5XBK7.hic":"966593603,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2efacfbd-9c81-4e62-8df7-847d1ab774d5%2F4DNFIPKY8ED1.hic":"3401629450,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa50b6a26-56b5-43f2-b525-fa219fd716f1%2F4DNFIQRTP7NM.hic":"5358852759,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff5dc7a59-b998-4490-8a76-afbf3b258a49%2F4DNFIBCIA62Q.hic":"5779049277,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F62b2b237-cb02-45f7-89d9-616cf9ffb678%2F4DNFIV56OFE3.hic":"5818844506,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8ac79b4f-cfbf-4b2a-9fc2-898ed6c3e5e1%2F4DNFILIM6FDL.hic":"19637469163,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1cff8afa-5a13-4ad4-bcad-91fc3ced759c%2F4DNFIP71EWXC.hic":"17934647326,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F000789fe-9a22-4280-a71c-7ad228fd4cac%2F4DNFIM7ZVQOQ.hic":"700134697,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8d78457f-0c2b-4358-b08c-4d4ef4d9f59d%2F4DNFIS6EYHCX.hic":"628314484,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8ca3b4a0-2478-49c9-b4a2-a28430417a32%2F4DNFIKKCMS1Q.hic":"584050634,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff5041473-18ec-439d-92b1-8ad98c9b25c0%2F4DNFIBIV8OUN.hic":"522632731,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcf474ec6-abd4-431e-a21c-252fcf5ee6b3%2F4DNFIAUMRM2S.hic":"313395531,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2bb1c73e-fb0f-41c4-8620-a938cc8d24a0%2F4DNFI9ZUXG61.hic":"332217525,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F26dfa41e-7e4f-457a-a3ac-72daf8059f3c%2F4DNFIDBFENL7.hic":"359604894,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8ed2e68b-189e-4988-bb6d-94e63240a231%2F4DNFI7XAZNNQ.hic":"5312422266,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6f2b1ce0-5205-4680-981e-d91b694dc3e4%2F4DNFISNGDB53.hic":"2008546759,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F73c8147f-bc7d-4d33-8a10-a9e7b413ecc6%2F4DNFI1CIGHYC.hic":"2221847625,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F526ae3e3-32cc-4670-970f-1faa9cfafd4d%2F4DNFIQD2DP2F.hic":"5295591503,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6e803530-47f8-4c56-bb19-fbdcd578d2f0%2F4DNFINHT8P7C.hic":"3159499486,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ffe705f38-903f-47b7-9b38-f80ebd18a479%2F4DNFIGF8EM7M.hic":"3490552542,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faa197328-d6da-4299-a0fd-409ac9892668%2F4DNFIUPG2ZBJ.hic":"5382003751,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ffe5d52c4-2be7-4812-bca0-cd4bb3025e6b%2F4DNFIH3OTR14.hic":"3224693110,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F21935f61-daa8-4df2-aa69-fcd27953b405%2F4DNFIUATRW3Z.hic":"3835865655,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F72147527-e3e8-4967-bc45-8251249d76c9%2F4DNFI6V7ZQAE.hic":"4382708138,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F589f0919-f54d-49ff-a482-e2f453ef7f34%2F4DNFICKMT1CY.hic":"4479068191,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F861946ca-bad8-4a87-96e1-b2eb20b9ef10%2F4DNFIF9BDCNI.hic":"3698151402,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff76346ac-97ec-4893-8984-2b75ce1cdc51%2F4DNFIG5O1OQS.hic":"5704288175,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe8b43826-f049-4c3f-b83a-e75fa7aacc85%2F4DNFIHS2SVBQ.hic":"990025510,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F46316260-f555-4dd4-9e40-8ae06ca52822%2F4DNFIU95B69H.hic":"1275878544,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff62ef491-a3ae-4f66-ab33-c5673c9e0b65%2F4DNFIYRROFCR.hic":"1522530503,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1cd617e1-fad4-4fdc-8b4e-cb277650123c%2F4DNFIF7JN3IU.hic":"1463443128,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdb20fe2a-0078-4d4a-8a52-d76043d06f40%2F4DNFIB2RYULQ.hic":"1269529700,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3d386fcf-1d22-47de-a0d6-0c3a641ca174%2F4DNFIMVDK3SI.hic":"1185489599,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F00e470bd-c533-41b1-923a-4b471824da12%2F4DNFIRLOTXSC.hic":"978217499,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb8774fb3-d0c5-43cc-a6c9-eb0ca39841fb%2F4DNFIZAPX6J8.hic":"1100356082,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fab3b826e-614c-448b-860f-a3ebef68a82f%2F4DNFIQD5VCSD.hic":"1322319877,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F66c78d2b-993a-4937-95ed-9e2d302ceb3e%2F4DNFIIF6VAGN.hic":"868885799,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5d106fe1-2d80-466e-87aa-46b38ba142c5%2F4DNFI86IEZXH.hic":"751443267,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc99490b6-faf9-413f-9c38-3f53018089d6%2F4DNFIP881SR2.hic":"754427927,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F39c7e387-e710-4b1d-b757-357dec03f6ad%2F4DNFI42NNCW8.hic":"1166392978,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4742a211-43b1-4325-af6f-82490aeb766b%2F4DNFIEV4PKP6.hic":"1102227476,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Feaa73842-1c86-4ad9-8a9e-c189c0b4c01d%2F4DNFIF1DUQHE.hic":"1206699207,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd25f24df-0298-4079-bb6f-1c8e1e32392b%2F4DNFIGW55EAY.hic":"1033358104,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc57a7ab5-2778-4fe2-9d64-9a4e95135f12%2F4DNFISZRU6I4.hic":"1539570262,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd89f494a-27ca-46b6-89be-7583f3f6d18c%2F4DNFIBKKDTAP.hic":"350372180,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F06725280-cb24-4f22-a267-18b434bfa79e%2F4DNFIJSRQW24.hic":"314361467,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8fe5c3c5-006f-425b-ac6d-ea475e29be78%2F4DNFI3REN89E.hic":"299665258,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc8b6ac5c-13b4-427e-9158-cec0b890b6d8%2F4DNFIF5XLHKM.hic":"235668364,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F01ff33fc-fc23-48aa-a6c6-b720d6fe0768%2F4DNFIB6Q538N.hic":"316494853,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F552978c8-abbc-424a-9187-3e34cf802a97%2F4DNFI3ST3F7Y.hic":"296298411,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F72e66520-5170-4f2e-844a-fbfd0e23b480%2F4DNFIQT4M6UI.hic":"307691265,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb3eb3953-ffe8-4d5a-970c-a16f3b7b9ec3%2F4DNFIFNCC7M2.hic":"364160436,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F37d413fb-afab-41ff-99aa-1678830f7dde%2F4DNFITM9MDJL.hic":"252412426,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faf5db92c-aaf1-4086-a0d2-79b28648f172%2F4DNFI3NTD7B3.hic":"227586640,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff6892f7b-1f8a-4d7d-9605-c67932cd5654%2F4DNFIBED48O1.hic":"328344868,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd64afb07-5ab1-4c4f-8438-2fee37afa86a%2F4DNFISATK9PF.hic":"379669025,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fad11bb63-8692-461c-b698-89c601451321%2F4DNFISRP84FE.hic":"298491537,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F63710ec5-35d2-47dd-bf9a-08d3daa83d67%2F4DNFI2LY7B73.hic":"303150299,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F76077d9e-ca75-4301-ab79-88aa49bda495%2F4DNFIXEB4UZO.hic":"711757090,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F34dd4c0e-3487-4fb4-b95f-c4bb66e0fa31%2F4DNFIQWWATGK.hic":"221304476,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F48a8cf86-3248-4a8e-8e85-472ec219d49c%2F4DNFI44JLUSL.hic":"284772724,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fee399fbf-2a9e-46e2-8364-457713bff508%2F4DNFIM7Q2FQQ.hic":"330729464,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F124d191a-c5c7-49b6-b84b-0d1bad8bef2b%2F4DNFIZK7W8GZ.hic":"293166018,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe351f7cc-7a2c-4515-ae0b-3bb2f91c986a%2F4DNFIMIMLMD3.hic":"240094740,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ffd1ae249-57b1-41d6-81a6-16b21dcd8f12%2F4DNFI7QUSU5J.hic":"681762505,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F46c92c5c-9ad8-4d49-beba-f35c5cd99208%2F4DNFINXUOI5H.hic":"375594313,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd7350d40-4e9e-4131-9151-bb539d39b431%2F4DNFIIJR2296.hic":"331322302,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbfacf37b-1665-45f3-a046-e29e1544e9b0%2F4DNFIJMZUTXR.hic":"361313244,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F234e18fb-9990-43bf-9a48-f72722cfa232%2F4DNFIZQPT9EL.hic":"540421873,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4b35ab09-2e79-4876-b2bc-d3a8faa26257%2F4DNFIZIXSZ9J.hic":"545066813,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2ae5118e-807a-46e0-8e92-143d4b282b3d%2F4DNFIDD9IF9T.hic":"237409149,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb34d7f6f-73f7-4b6b-80c7-c8af0f991549%2F4DNFIVC8OQPG.hic":"355121712,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9ab169fd-cbdd-4f60-8553-a4c6912ad89e%2F4DNFITUPI4HA.hic":"313085022,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4e53712b-d0d9-40c5-afe1-ffa0fad71e59%2F4DNFI5IZNXIO.hic":"341863906,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7a91477f-45eb-4a16-affb-fc131f9326b8%2F4DNFII16KXA7.hic":"248904495,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F153729de-0eca-43cc-9b61-61aa8d775b38%2F4DNFIAAH19VM.hic":"668047244,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F879fd78a-7165-43d9-a0de-ca158b53df30%2F4DNFIVKIY3KV.hic":"247571318,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F67f901a4-040b-4b04-9fff-94a1780423cd%2F4DNFIVVCWL6C.hic":"198355985,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd5b30c5a-654a-463c-9474-39bdc3ce4500%2F4DNFIJRF2273.hic":"343971277,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7070280a-8f03-40d0-9fef-e9d9f4d3dae7%2F4DNFI6FCC9ZA.hic":"312013061,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F47049719-9407-4d76-9048-26231045f642%2F4DNFI1CPQ4O3.hic":"352923267,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F862c2b5f-44c2-4bd7-9264-b3ca032d3d8d%2F4DNFISXFEDE9.hic":"271745977,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Feffbe052-39ff-4217-9871-44199ed90818%2F4DNFIF9L6QEQ.hic":"668409334,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa7791854-1b35-4258-90fb-603c55f24642%2F4DNFIPKASX1Q.hic":"312727920,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F79cccad6-a78e-4de9-9fe7-08f7e8df663d%2F4DNFIWXZ4JQZ.hic":"151808553,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7e86e0cc-d6f1-4ce0-aba4-c36c6ebb3c4c%2F4DNFIEMQ1O8V.hic":"700533280,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4a1b58d3-9ae6-43e4-91cf-49f1fcbbab33%2F4DNFIYWONU7A.hic":"729050356,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F67bff264-0b0c-4c5c-9d4d-ff5abef2bbe4%2F4DNFISNIE5FH.hic":"7987657997,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3a6a943f-2cc0-4433-a27d-c89f3fdd3309%2F4DNFIV8MLWJB.hic":"6646216171,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9e235711-ba90-404d-b4ac-b15990ea8e33%2F4DNFIXSTDPHL.hic":"3146468238,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0c89f4bc-e9fc-4ecf-b868-26108dbb7bb2%2F4DNFIQJNOH8U.hic":"2919703928,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1856ff9e-de7a-4fa1-ae0b-3e04b837b5e1%2F4DNFI57XB4A8.hic":"13417594377,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F099bb5b9-6315-4650-8f78-d603f5a046b3%2F4DNFIQ7UKVZV.hic":"9016468637,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faf3c7a30-0fc4-410d-8d41-247da3eb105d%2F4DNFIWJY8GHD.hic":"7921314766,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fda99f429-20ab-4d91-bbfe-f8bdea8ed7b1%2F4DNFIN8NKRNF.hic":"4247121358,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0ca0f4e3-30ca-4332-b735-e32dce08e1a4%2F4DNFIZYGEHNZ.hic":"4910404663,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F243f48b0-6b59-4f37-ad39-a12e0986f530%2F4DNFIRPYGAV8.hic":"4220073636,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F49f1a890-d458-42a6-9c78-99c38b6c7a8f%2F4DNFI6MZTDM1.hic":"375035361,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F76bd4768-9343-44ba-a99d-5500e184e39d%2F4DNFIG3BCGPL.hic":"2422923206,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F9d1ed866-eaf6-4906-aa8c-9e39616dde38%2F4DNFIS9YPJ3L.hic":"1593271574,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1e7a5636-bdb6-45fb-85d8-87a7e908de43%2F4DNFIOWGA9AX.hic":"1632314387,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5ecc552a-0a6b-49a9-9aa5-9f3fd9b535fd%2F4DNFINKEDSBF.hic":"1458761024,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6c03f1d2-bb25-4c94-b5f5-d5cdd01c14b6%2F4DNFIVIXVUK7.hic":"1504818271,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1a4616ff-6d04-4a6a-9773-b80e81da2471%2F4DNFIANHFY16.hic":"1850724180,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd2231870-a78d-4c8b-9cfd-084f2468acb1%2F4DNFIJ67ZFBI.hic":"1473864703,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F859c2dd3-df8a-42b7-86ea-bf6524f75e80%2F4DNFIG3YQQ4V.hic":"1539822829,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8bad667e-6003-4828-9a20-07585fa9c811%2F4DNFIOLKEOME.hic":"3036353747,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F92ea551b-5779-4d31-a0f5-621e4bd0eb21%2F4DNFIVLN8WJE.hic":"2710426318,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F61ee79fa-0617-4083-b121-f92ef3a8905c%2F4DNFI2111XQA.hic":"2589549183,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F83ebb98d-e5db-403d-aa23-875293156c0e%2F4DNFI88HXX7D.hic":"2462367030,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6d63671a-8f1d-4159-82c0-931b43464772%2F4DNFIUBM6QK8.hic":"2486020469,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcccb9014-ce15-4032-81ac-222b3d621cb4%2F4DNFIVILEERC.hic":"2052537210,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F21a07867-4007-4ca5-b066-25d3168208dc%2F4DNFIF7Q43N4.hic":"2091773428,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff738de0f-358b-44bf-97dd-644c8d9b1b1c%2F4DNFID56VJGW.hic":"878913568,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fda97c1d4-bb92-4a77-92a7-f7960f88b9dc%2F4DNFIYUR29KO.hic":"983915575,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F54ea363a-99e7-4f55-861e-1644acab7939%2F4DNFIUDPGHO8.hic":"905253594,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdcd66a07-55ee-48d9-a157-419cf4ee3eef%2F4DNFISWC2N8T.hic":"1233576358,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F40363837-7466-4a1d-b20d-a66d1670b700%2F4DNFICMPHDMI.hic":"516590777,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0b3fa4e6-caeb-40b4-8942-e9c0b03dfe4f%2F4DNFIKMKN736.hic":"634310295,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb6a34050-d52b-4880-91cf-d3fe4b0ce982%2F4DNFIN5NLS49.hic":"650451131,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8e63a47b-9fd4-4772-8b0c-10ee589ffb16%2F4DNFI4P8UBRL.hic":"705655033,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7d92b666-30cc-4838-9d46-c1f11cee3d3c%2F4DNFISNC3LAI.hic":"176146197,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F17f7dc63-a1bc-4970-b389-87d9ee93b753%2F4DNFIVBWPFD7.hic":"749678512,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff8897333-4791-4a83-9444-a653e24aee13%2F4DNFITMQRXB7.hic":"254477361,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8712bf31-33d0-4562-ab0b-a1e9cf4fd30c%2F4DNFIUYD3HBY.hic":"995625724,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbfaf6383-9cc6-4b5c-9b20-d3bf2e8c3495%2F4DNFIRRSC7P9.hic":"1149985362,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb0b70598-5d17-4e0a-8831-6cbe697e69e2%2F4DNFIWKR8FP6.hic":"1151628407,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fccc094a8-23ce-4fd8-9c4a-41f07c045c8f%2F4DNFIQ74RSUY.hic":"931695969,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8eda16f3-af5e-4f1f-b46d-c74df44b76aa%2F4DNFI9IIO5PW.hic":"1077740364,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff283637b-cf2c-4412-ba00-0e3d7e279fad%2F4DNFI8WGJG19.hic":"812086456,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7ad8438f-d3d9-42d8-88bf-42845a0dc2d0%2F4DNFIQ5CCESJ.hic":"652559720,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F70e3bdcc-caf4-4822-b9c5-85234873db7a%2F4DNFIWTZHB4H.hic":"760694196,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F56ed767d-cd8a-4d38-8047-ed1e8bc8cd19%2F4DNFIENYQCDP.hic":"1159428005,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa912fff9-5f90-42b1-a3a6-cbb9eb2cf861%2F4DNFIFATZWPD.hic":"1033325746,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F21338ea5-fdee-4ad8-b61c-608fc6cec4bc%2F4DNFI7YRXKEO.hic":"388142539,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff0f88647-5631-437b-b48a-4603915e3714%2F4DNFIUY3J7EW.hic":"407344788,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F16926af8-ac3b-4f32-97d5-6c0dc6f1596a%2F4DNFIRKUYKP4.hic":"893352368,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F93e39aec-6cde-4c5b-bcdf-283faa3163a2%2F4DNFIAQDBJZP.hic":"489922022,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0dc0b1ba-5509-4464-9814-dfe103ff09a0%2F4DNFIC1CLPK7.hic":"565748333,37769","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fb50964c7-b025-49d9-b1ed-289bedb59678%2F4DNFI3A3VYWU.hic":"4597459343,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff4390cea-b330-4022-88c1-9ff8c0a786f7%2F4DNFI6JJQKFJ.hic":"3678393678,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F70c0f730-5da1-4863-9b7a-6cdd31066cff%2F4DNFIK61ILGM.hic":"3324300994,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F14b14ac4-ab59-4754-9c43-eacd9d0638e2%2F4DNFIYD8LO9Z.hic":"3227227120,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7386f953-8da9-47b0-acb2-931cba810544%2F4DNFIOTPSS3L.hic":"253942497,7557","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff6b5d8bd-27dc-4415-a320-53405a16db85%2F4DNFI525PKU5.hic":"305089653,7557","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1f922dbc-637b-4c43-b816-f604f0e79ad1%2F4DNFI8Y9SRP2.hic":"1438589609,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6a36d686-716c-4ba8-a9c3-fa8311791d3c%2F4DNFIP25GZGA.hic":"1419100109,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0e535542-2cf2-46e4-ba10-7a0b946a7fb2%2F4DNFITPO1WTY.hic":"3885296184,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0c17d228-5052-4c83-880e-af05118e6929%2F4DNFIG4X5Z5F.hic":"2159245890,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc3977c00-525b-4556-9a27-061707f8cb76%2F4DNFIXLYR32S.hic":"587852728,21916","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3f856506-cbc5-4211-a29d-48a7530c622e%2F4DNFIWI3V5LI.hic":"2318237793,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F38f77979-5eb7-4b6f-9a60-c2451185db98%2F4DNFI2DGL7LH.hic":"2068150664,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe0992a75-7727-405e-95ac-aa97141b51c1%2F4DNFI1VSO8JP.hic":"1807949651,21916","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe925f1aa-2e7b-44e7-bfa8-2084a613ab13%2F4DNFIV5O2ZYO.hic":"2242134377,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F803a6d3c-3972-4939-8ff2-d195c5192090%2F4DNFIEWEWQ8D.hic":"2981341325,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F25104375-a588-46e6-a382-663cee6c332f%2F4DNFICSTCJQZ.hic":"14592996888,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F927aa8a5-24a5-43b7-807a-1e99ac321459%2F4DNFICEGAHRC.hic":"15431307603,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8c380474-12cd-41f4-b86f-2a29faf12eec%2F4DNFIY3XPKPO.hic":"2550999291,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F77da562e-d0ec-45a8-8764-14fa16d995a1%2F4DNFIK9PS9GM.hic":"3401011629,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F11b26222-d480-40a7-8d53-3ad8500396cb%2F4DNFIF4Y74JR.hic":"2127593378,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F93df02c6-1047-43f6-afae-d3598b61eeea%2F4DNFIBBKG9KD.hic":"5724446278,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6cd4378a-8f51-4e65-99eb-15f5c80abf8d%2F4DNFIT4I5C6Z.hic":"5419655766,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F067881e5-563d-40de-a9e3-caccad887fbc%2F4DNFI2U38HCE.hic":"14749043471,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fcb3da9ad-7afe-4d0c-9c2d-261181e7a95c%2F4DNFIETP228R.hic":"9401474797,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F185b7bcc-7bb7-41b7-9ebe-92d4fe159431%2F4DNFIXKC48TK.hic":"11624295594,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F18459b84-dd43-4af6-a05f-bcb773096322%2F4DNFIFPGOWJ6.hic":"2843730862,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ffde1e48c-4a0d-4bb1-b84a-e0e45f9a0aa3%2F4DNFIIRMBE8Y.hic":"5820677927,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbabed539-1f0f-4e87-8815-fde596e6024c%2F4DNFIVUGNDD7.hic":"5170782436,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7d00531a-e616-469b-af52-5b028270e2ce%2F4DNFIFLJLIS5.hic":"18917549985,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7a9dad53-b8af-4cb6-9ce3-5c38e4a855c7%2F4DNFIOX3BGNE.hic":"5482775936,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F82fd7b7e-5f47-48d5-bf0d-daaa48a4674d%2F4DNFISPUVQHA.hic":"2177864938,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4c6680f3-9cf6-452f-9dc5-ecebf376775d%2F4DNFI8649RQJ.hic":"3288850368,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2395f001-19d9-4000-9f00-dae3dea708d6%2F4DNFIE8T8JZ8.hic":"1383191843,21916","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F24464fa8-bf96-483c-8e9a-c2f626ad6e19%2F4DNFIBM714BP.hic":"1765204569,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F918fc048-fa27-41d2-a63a-d50c511fbb9a%2F4DNFI6CWNUFL.hic":"2431120602,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7ff5a0d1-8e54-4cf0-9fe7-339f147c78da%2F4DNFIZ4F74QR.hic":"3211825957,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F355f0412-cb17-452a-b15c-aba16c5a742c%2F4DNFIOUVOX3R.hic":"5547401083,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3cac91c5-160a-4b91-a91e-edc309318dd5%2F4DNFIVTDXW6X.hic":"4797344498,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe9ac9ec5-6221-4f39-951a-1c5054fc9f1c%2F4DNFICA8Y9TN.hic":"4277557869,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F46f62222-b50a-428b-938b-5444951600eb%2F4DNFIDWM3HN5.hic":"4374808431,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F50e4f2a1-9cb6-4192-8199-64d354bfdf96%2F4DNFIBK5TB3N.hic":"3757387253,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe4cdd5a8-1a45-4c6a-906b-a9603260d4c8%2F4DNFI3JYF9VS.hic":"5260534916,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc8164e99-5778-427d-be26-f0e1b62400f0%2F4DNFIP1GNKUO.hic":"7589365689,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0d72e78a-fc87-4716-8b8e-6dc5650ff2ef%2F4DNFIQYQWPF5.hic":"22022259901,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fac58fc15-48c2-4eec-a689-23b677b4b6e7%2F4DNFIW6H9U3S.hic":"6810897169,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F31811e40-e3ca-4456-8ba6-2ee66d6c7104%2F4DNFI7J8BQ4P.hic":"7188744676,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F62d81a52-d2cb-4bbd-8510-0fe120e786e0%2F4DNFIA3AKFSU.hic":"1763730692,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fae0b7513-d1a0-4f27-a9d3-348837f42cb6%2F4DNFID68JQY9.hic":"2422880133,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fae6a1a7e-1d2d-4fd2-a89f-1799abac8a9c%2F4DNFIL1FQDXE.hic":"1543814834,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F80d343c9-bd60-468a-803d-c3e351a958bc%2F4DNFITSIPCSK.hic":"2344682115,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff2d61195-a3a6-4d50-b928-546ca67546cb%2F4DNFIJ88LYHR.hic":"3362742962,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F31052aba-773a-4500-961b-e0a518245b0c%2F4DNFIJIPWD63.hic":"2529548812,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc93d0710-3fbf-40cc-b0eb-878e2aa659e4%2F4DNFIZUP2BBI.hic":"491996147,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F8660baeb-5be1-4ba5-93e4-66499e9a4587%2F4DNFIEBC4AF3.hic":"2993048734,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff6d08fbc-b836-4776-82ad-8b1b277ae837%2F4DNFI5VO3E1W.hic":"1949322679,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3af004a2-a6fa-46dc-8be8-898b847a77be%2F4DNFIFDGVWLU.hic":"2456400803,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbd613b4b-2422-492c-8d8f-8afba9c8a182%2F4DNFITVGFNYZ.hic":"1411204423,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc340694f-14f3-4638-b09b-98220c20039a%2F4DNFIOW9TTC1.hic":"2611370588,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3effa71b-6aa3-4265-87ba-f8d709d778d7%2F4DNFIOAA3ZEQ.hic":"3123195980,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fde75cf8b-9ce1-44fc-8b7b-ca0adea6bae9%2F4DNFIA5ID1S6.hic":"3496246968,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F714f775d-a5a4-4314-83f8-016b9d73200b%2F4DNFIZYU7V81.hic":"4245592042,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5ca518af-6e1e-4777-b67b-0fe7f039ce58%2F4DNFIRV6PVUX.hic":"3981520466,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc29b57d5-c263-4372-b396-ab4f55682f5d%2F4DNFIMEANFBY.hic":"3999623376,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4196d3ef-161a-4c18-a57e-005165c6b32a%2F4DNFIGLGQXLC.hic":"4105683321,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe10828b5-9519-4ceb-81e7-7228bfd890de%2F4DNFILS2HLXC.hic":"3804942111,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Feaac88c7-9bdc-4b1e-aa9f-e675520dfffa%2F4DNFIQS8853L.hic":"5287726781,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faab371b1-bc8d-4e83-998e-5bb977c443ca%2F4DNFIVBYCYGS.hic":"4657988157,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdb116add-af8c-4a3b-b106-9f704ba0a175%2F4DNFIE4WWHMF.hic":"5116727268,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F033366e2-05a2-4381-9d48-90122892a9e0%2F4DNFIKDUUC3C.hic":"45638237,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F7284a446-442d-4a46-aae5-84987e75a7af%2F4DNFIJ5HIRA2.hic":"62201052,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F876649a3-6dd3-463a-8b17-5752a98a89c5%2F4DNFIXDFC7EM.hic":"69878143,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3cb4ce4d-d474-459f-8b8a-2159d8df8068%2F4DNFIO35EOVR.hic":"70153114,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5c5612fa-18c2-47fb-8074-693b1054e254%2F4DNFI57QGL6U.hic":"54605055,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F70c1472d-cf3a-41d7-8682-cd03b7cc978d%2F4DNFI2AGEBE5.hic":"67930121,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2bf4cce8-6e03-422b-a190-e51d4a07d501%2F4DNFI1E6NJQJ.hic":"4893181511,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0eb3aa56-8a23-435d-a07b-8bb545e8d708%2F4DNFI2DNFM1A.hic":"60466977,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F1201682a-a223-482d-913d-3c3972b8eb65%2F4DNFIIRIHBR2.hic":"48961678,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F6aee7913-6356-43cf-affa-f2b60dd478f6%2F4DNFIKXNMT46.hic":"39095246,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F357139a3-c9a5-4343-b0a4-b41c45fd03fd%2F4DNFIRV7IRJP.hic":"70916718,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F76be3061-6259-42be-a917-19dcba41517b%2F4DNFIFX1XYKZ.hic":"229197441,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ff60c348a-a62c-43c3-ac85-f6c28b5f823f%2F4DNFI64CJUZ5.hic":"112428610,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fbd0b0a14-9703-49af-bb36-2359f96d4d0e%2F4DNFIBPL2HL1.hic":"73972428,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F79ac278d-83f7-4c1f-91b2-05c8018c1426%2F4DNFIBRSIPE4.hic":"415430378,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F0c3b8141-8e67-4211-80dd-3bae88f9e537%2F4DNFIDLDVY14.hic":"112747303,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2ae703d2-d85c-4ac4-9ce1-14d653927675%2F4DNFI4R1II4P.hic":"210565448,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F76e641af-90be-49f8-b126-12c20f856159%2F4DNFINMLRY95.hic":"1590865292,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3b416382-ae5d-469f-9e9a-85a3e2ce9793%2F4DNFI8KBXYNL.hic":"4626496956,22663","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa27589a6-86b2-43a2-8218-1f2232d551e6%2F4DNFI53R5IKA.hic":"1536016455,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdd3999f5-b36e-4154-a6b9-446656959a3a%2F4DNFIAWVDQ8C.hic":"2210273411,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fc377953b-0e61-426b-a905-abab2d5a3002%2F4DNFI9VXTBE2.hic":"3384365692,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F2dbe0377-1db2-4aae-af2b-d87dff728035%2F4DNFIT96Z365.hic":"7692311974,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fdcfcb009-f006-4ab8-a4c7-af72be58c12c%2F4DNFITUOMFUQ.hic":"6592120312,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F67f9073d-b2c5-474e-b3d5-7d72cde555cd%2F4DNFIHLQKDN8.hic":"2647703964,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F76968cc8-fb9f-485b-85b2-c9289067194b%2F4DNFIL9M97T2.hic":"6186798917,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F87d9330b-8d2c-4e9d-85bb-02e572de7a68%2F4DNFIDWGZLHX.hic":"4379708168,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Ffc01b381-3665-4225-88ee-2e5e9ecb7324%2F4DNFIMEG1QIC.hic":"3587146533,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3144a03c-15c3-4bf9-95f8-ffad2640a1bf%2F4DNFIWSB66VX.hic":"1529739069,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fd7d3aac0-ba66-494b-ba0c-147631084b98%2F4DNFIH7TH4MF.hic":"6896300679,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F4b13bd19-fbd1-4c68-8855-4f0158d1ce47%2F4DNFIHKWIZ9T.hic":"1954878455,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F3d04e286-30d4-4add-a806-7a929d36419e%2F4DNFIZBBX795.hic":"1350142414,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Faa26f261-a88a-4cac-9118-ff8e90ab6f61%2F4DNFI9ZWZ5BS.hic":"3410552807,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F24e516ce-0b49-4476-b818-cc96471d8765%2F4DNFIPAI8XB5.hic":"4168518737,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fac3b06b5-46d4-4c1e-97e9-9a4f353473a7%2F4DNFI1OUWFSC.hic":"10766406904,21916","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F76c6aa27-895f-4e82-8ed8-7a85aca84490%2F4DNFIX4PJKXZ.hic":"1463157350,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fe6fbe03a-997b-4d72-a3cc-f1ed7bd88a92%2F4DNFIZGCA8AH.hic":"1597664180,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F61d99a87-4ec6-4116-be99-b483999641c4%2F4DNFI5CGQ46V.hic":"2870576870,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F271ea8cd-53b9-44c9-9fff-1bb5c444b54c%2F4DNFIOCW5AEM.hic":"2463600138,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2Fa98ca64a-861a-4a8c-92e9-586af457b1fb%2F4DNFI1UEG1HD.hic":"22480709268,25900","4dn-open-data-public.s3.amazonaws.com%2Ffourfront-webprod%2Fwfoutput%2F5809b32e-0aea-4cf5-a174-cf162d591a35%2F4DNFI9YAVTI1.hic":"3141182061,25900"};const Ef="undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node,Nf=new class{constructor(e){this.wait=void 0===e?100:e,this.isCalled=!1,this.calls=[]}limiter(e){const t=this;let i=function(){t.calls.length&&!t.isCalled&&(t.isCalled=!0,t.calls.shift().call(),setTimeout((function(){t.isCalled=!1,i()}),t.wait))};return function(){t.calls.push(e.bind(this,...arguments)),i()}}}(100);class Bf{constructor(e){if(e.alert&&(this.alert=e.alert),this.config=e,this.loadFragData=e.loadFragData,this.fragmentSitesCache={},this.normVectorCache=new kf(10),this.normalizationTypes=["NONE"],this.matrixCache=new kf(10),this.blockCache=new Df,e.file)this.file=e.file;else if(e.blob)this.file=new mf(e.blob);else{if(!(e.url||e.path&&!Ef))throw e.path?Error("path property is deprecated, use NodeLocalFile"):Error("Arguments must include file, blob, url, or path");{this.url=e.url||this.path,this.remote=!0;const i=new gf(e);(t=this.url).indexOf("drive.google.com")>=0||t.indexOf("www.googleapis.com/drive")>0?this.file=new wf(i,Nf):this.file=i}}var t}async init(){this.initialized||(await this.readHeaderAndFooter(),this.initialized=!0)}async getVersion(){if(void 0===this.version){const e=await this.file.read(0,128);if(!e)return;const t=new vf(new DataView(e));return this.magic=t.getString(),this.version=t.getInt(),this.version}return this.version}async getMetaData(){return await this.init(),this.meta}async readHeaderAndFooter(){let e=await this.file.read(0,16);if(!e||0===e.byteLength)throw Error("File content is empty");let t=new vf(new DataView(e));if(this.magic=t.getString(),this.version=t.getInt(),this.version<5)throw Error("Unsupported hic version: "+this.version);this.footerPosition=t.getLong(),await this.readFooter();const i=Object.values(this.masterIndex).reduce(((e,t)=>Math.min(e,t.start)),Number.MAX_VALUE)-16;e=await this.file.read(16,i),t=new vf(new DataView(e)),this.genomeId=t.getString(),this.version>=9&&(this.normVectorIndexPosition=t.getLong(),this.normVectorIndexSize=t.getLong()),this.attributes={};let n=t.getInt();for(;n-- >0;)this.attributes[t.getString()]=t.getString();this.chromosomes=[],this.chromosomeIndexMap={};let r=t.getInt(),s=0;for(;r-- >0;){const e={index:s,name:t.getString(),size:this.version<9?t.getInt():t.getLong()};"all"===e.name.toLowerCase()&&(this.wholeGenomeChromosome=e,this.wholeGenomeResolution=Math.round(2*e.size)),this.chromosomes.push(e),this.chromosomeIndexMap[e.name]=e.index,s++}this.bpResolutions=[];let o=t.getInt();for(;o-- >0;)this.bpResolutions.push(t.getInt());if(this.loadFragData){this.fragResolutions=[];let e=t.getInt();if(e>0)for(;e-- >0;)this.fragResolutions.push(t.getInt())}this.chrAliasTable={};for(let e of Object.keys(this.chromosomeIndexMap))e.startsWith("chr")?this.chrAliasTable[e.substr(3)]=e:"MT"===e?this.chrAliasTable.chrM=e:this.chrAliasTable["chr"+e]=e;this.meta={version:this.version,genome:this.genomeId,chromosomes:this.chromosomes,resolutions:this.bpResolutions}}async readFooter(){const e=this.version<9?8:12;let t=await this.file.read(this.footerPosition,e);if(!t)return null;let i=new vf(new DataView(t));const n=this.version<9?i.getInt():i.getLong();let r=i.getInt();const s=196*r;for(t=await this.file.read(this.footerPosition+e,Math.min(s,n)),i=new vf(new DataView(t)),this.masterIndex={};r-- >0;){const e=i.getString(),t=i.getLong(),n=i.getInt();this.masterIndex[e]={start:t,size:n}}if(this.expectedValueVectors={},this.version>5){const e=this.version<9?4:8;this.normExpectedValueVectorsPosition=this.footerPosition+e+n}return this}async printIndexStats(){let e,t=0,i=0;await await this.init();for(let n of Object.keys(this.masterIndex)){const r=this.masterIndex[n];t+=r.size,r.size>i&&(i=r.size,e=n)}console.log(`${i}  ${e}  ${this.config.url}`)}async getMatrix(e,t){const i=_f.getKey(e,t);if(this.matrixCache.has(i))return this.matrixCache.get(i);{const n=await this.readMatrix(e,t);return this.matrixCache.set(i,n),n}}async readMatrix(e,t){if(await this.init(),e>t){const i=e;e=t,t=i}const i=_f.getKey(e,t),n=this.masterIndex[i];if(!n)return;const r=await this.file.read(n.start,n.size);return r?_f.parseMatrix(r,this.chromosomes):void 0}async getContactRecords(e,t,i,n,r,s=!1){await this.init();const o=this.chromosomeIndexMap[this.getFileChrName(t.chr)],a=this.chromosomeIndexMap[this.getFileChrName(i.chr)];if(o>a||o===a&&t.start>=i.end){const e=t;t=i,i=e}const c=await this.getBlocks(t,i,n,r);if(!c||0===c.length)return[];const l=[],h=t.start/r,d=t.end/r,u=i.start/r,f=i.end/r,p=Math.floor(h),g=Math.ceil(d),m=Math.floor(u),w=Math.ceil(f);for(let o of c)if(o){let a,c,b=e&&"NONE"!==e;const F=this.getFileChrName(t.chr),v=this.getFileChrName(i.chr);if(b){const t=await this.getNormalizationVector(e,F,n,r),i=F===v?t:await this.getNormalizationVector(e,v,n,r);t&&i?(a=await t.getValues(p,g),c=await i.getValues(m,w)):b=!1}for(let e of o.records)if(s||e.bin1>=h&&e.bin1<d&&e.bin2>=u&&e.bin2<f)if(b){const t=e.bin1,i=e.bin2,n=a[t-p]*c[i-m];if(0!==n&&!isNaN(n)){const r=e.counts/n;l.push(new xf(t,i,r))}}else l.push(e);void 0===this.percentile95&&o.records.length>10&&(this.percentile95=Tf(o.records,95))}return l}async getBlocks(e,t,i,n){const r=(e,t)=>`${t.getKey()}_${e}`;await this.init();const s=this.getFileChrName(e.chr),o=this.getFileChrName(t.chr),a=this.chromosomeIndexMap[s],c=this.chromosomeIndexMap[o];if(void 0===a)return console.log("No chromosome named: "+e.chr),[];if(void 0===c)return console.log("No chromosome named: "+t.chr),[];const l=await this.getMatrix(a,c);if(!l)return console.log("No matrix for "+e.chr+"-"+t.chr),[];const h=l.getZoomData(n,i);if(!h){let i=`No data avalailble for resolution: ${n}  for map ${e.chr}-${t.chr}`;throw new Error(i)}const d=h.getBlockNumbers(e,t,this.version),u=[],f=[];for(let e of d){const t=r(e,h);this.blockCache.has(n,t)?u.push(this.blockCache.get(n,t)):f.push(e)}const p=f.map((e=>this.readBlock(e,h))),g=await Promise.all(p);for(let e of g)e&&this.blockCache.set(n,r(e.blockNumber,h),e);return u.concat(g)}async readBlock(e,t){const i=await t.blockIndex.getBlockIndexEntry(e);if(i){let n=await this.file.read(i.filePosition,i.size);if(!n)return;n=new ls(new Uint8Array(n)).buffer;const r=new vf(new DataView(n)),s=r.getInt(),o=[];if(this.version<7)for(let e=0;e<s;e++){const e=r.getInt(),t=r.getInt(),i=r.getFloat();o.push(new xf(e,t,i))}else{const e=r.getInt(),t=r.getInt(),i=1===r.getByte(),n=!(this.version<9)&&1==r.getByte(),s=!(this.version<9)&&1==r.getByte(),a=r.getByte();if(1===a){const a=s?r.getInt():r.getShort();for(let c=0;c<a;c++){const a=t+(s?r.getInt():r.getShort()),c=n?r.getInt():r.getShort();for(let t=0;t<c;t++){const t=e+(n?r.getInt():r.getShort()),s=i?r.getFloat():r.getShort();o.push(new xf(t,a,s))}}}else{if(2!=a)throw new Error("Unknown block type: "+a);{const n=r.getInt(),s=r.getShort();for(let a=0;a<n;a++){const n=Math.floor(a/s),c=e+(a-n*s),l=t+n;if(i){const e=r.getFloat();isNaN(e)||o.push(new xf(c,l,e))}else{const e=r.getShort();-32768!=e&&o.push(new xf(c,l,e))}}}}}return new Rf(e,t,o,i)}}async hasNormalizationVector(e,t,i,n){let r;if(await this.init(),Number.isInteger(t))r=t;else{const e=this.getFileChrName(t);r=this.chromosomeIndexMap[e]}const s=Mf(e,r,i.toString(),n),o=await this.getNormVectorIndex();return o&&o[s]}async isNormalizationValueAvailableAtResolution(e,t,i,n){let r;if(Number.isInteger(t))r=t;else{const e=this.getFileChrName(t);r=this.chromosomeIndexMap[e]}return void 0!==(await this.getNormVectorIndex())[Mf(e,r,i.toString(),n)]}async getNormalizationVector(e,t,i,n){let r;if(await this.init(),Number.isInteger(t))r=t;else{const e=this.getFileChrName(t);r=this.chromosomeIndexMap[e]}const s=Mf(e,r,i.toString(),n);if(this.normVectorCache.has(s))return this.normVectorCache.get(s);const o=await this.getNormVectorIndex();if(!o)return void console.log("Normalization vectors not present in this file");if(!1===await this.isNormalizationValueAvailableAtResolution(e,t,i,n)){const t=`Normalization option ${e} not available at resolution ${n}. Will use NONE.`;return console.log(t),void(this.alert&&this.alert(t))}const a=o[s],c=await this.file.read(a.filePosition,8);if(!c)return;const l=new vf(new DataView(c)),h=this.version<9?l.getInt():l.getLong(),d=this.version<9?8:4,u=this.version<9?a.filePosition+4:a.filePosition+8,f=new If(this.file,u,h,d);return this.normVectorCache.set(s,f),f}async getNormVectorIndex(){if(!(this.version<6)){if(!this.normVectorIndex){if(!this.config.nvi&&this.remote&&this.url){const e=new URL(this.url),t=encodeURIComponent(e.hostname+e.pathname);Sf.hasOwnProperty(t)&&(this.config.nvi=Sf[t])}if(this.config.nvi){const e=decodeURIComponent(this.config.nvi).split(","),t={start:parseInt(e[0]),size:parseInt(e[1])};return this.readNormVectorIndex(t)}try{return await this.readNormExpectedValuesAndNormVectorIndex(),this.normVectorIndex}catch(e){"416"===e.code||416===e.code?this.normExpectedValueVectorsPosition=void 0:console.error(e)}}return this.normVectorIndex}}async getNormalizationOptions(){return await this.getNormVectorIndex(),this.normalizationTypes}async readNormVectorIndex(e){await this.init(),this.normalizationVectorIndexRange=e;const t=await this.file.read(e.start,e.size),i=new vf(new DataView(t));this.normVectorIndex={};let n=i.getInt();for(;n-- >0;)this.parseNormVectorEntry(i);return this.normVectorIndex}async readNormExpectedValuesAndNormVectorIndex(){if(await this.init(),void 0===this.normExpectedValueVectorsPosition)return;const e=await this.skipExpectedValues(this.normExpectedValueVectorsPosition);let t=4,i=await this.file.read(e,4);if(0===i.byteLength)return;const n=new vf(new DataView(i)).getInt(),r={start:e+t,size:30*n};i=await this.file.read(r.start,r.size),this.normalizedExpectedValueVectors={},this.normVectorIndex={},await async function i(n,r){const s=new vf(new DataView(r));for(;n-- >0;){if(s.available()<100){n++,t+=s.position;const r=Math.max(1e3,30*n),o={start:e+t,size:r},a=await this.file.read(o.start,o.size);return i.call(this,n,a)}this.parseNormVectorEntry(s)}t+=s.position}.call(this,n,i),this.config.nvi=e.toString()+","+t}async skipExpectedValues(e){const t=this.version,i=new bf({file:this.file,size:256e3}),n={start:e,size:4},r=await i.read(n.start,n.size),s=new vf(new DataView(r)).getInt();return 0===s?e+4:async function e(n,r){let s={start:n,size:500},o=0,a=n,c=await i.read(s.start,s.size),l=new vf(new DataView(c));l.getString(),l.getString(),l.getInt();const h=t<9?l.getInt():l.getLong();o+=l.position+h*(t<9?8:4),s={start:n+o,size:4},c=await i.read(s.start,s.size),l=new vf(new DataView(c));const d=l.getInt();return o+=4+d*(4+(t<9?8:4)),r--,0===r?a+o:e(a+o,r)}(e+4,s)}getZoomIndexForBinSize(e,t){let i;if("BP"===(t=t||"BP"))i=this.bpResolutions;else{if("FRAG"!==t)throw new Error("Invalid unit: "+t);i=this.fragResolutions}for(let t=0;t<i.length;t++)if(i[t]===e)return t;return-1}parseNormVectorEntry(e){const t=e.getString(),i=e.getInt(),n=e.getString(),r=e.getInt(),s=e.getLong(),o=this.version<9?e.getInt():e.getLong(),a=t+"_"+i+"_"+n+"_"+r;this.normalizationTypes.includes(t)||this.normalizationTypes.push(t),this.normVectorIndex[a]={filePosition:s,size:o}}getFileChrName(e){return this.chrAliasTable.hasOwnProperty(e)?this.chrAliasTable[e]:e}}function Mf(e,t,i,n){return e+"_"+t+"_"+i+"_"+n}class Rf{constructor(e,t,i,n){this.blockNumber=e,this.zoomData=t,this.records=i,this.idx=n}}class Df{constructor(){this.resolution=void 0,this.map=new kf(6)}set(e,t,i){this.resolution!==e&&this.map.clear(),this.resolution=e,this.map.set(t,i)}get(e,t){return this.resolution===e?this.map.get(t):void 0}has(e,t){return this.resolution===e&&this.map.has(t)}}function Tf(e,t){const i=e.map((e=>e.counts));i.sort((function(e,t){return e-t}));return i[Math.floor(t/100*e.length)]}class Lf{constructor(e,t){this.config=e,this.genome=t,this.hicFile=e._hicFile?e._hicFile:new Bf(e),e._hicFile=void 0}async getHeader(){return await this.hicFile.init(),this.hicFile}async getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:r}){this.hicFile.initialized||await this.hicFile.init();const s=this.hicFile.bpResolutions,o=s[s.length-1];return(await this.hicFile.getContactRecords(void 0,{chr:e,start:t,end:i},{chr:"celltype",start:0,end:1e8},"BP",o)).map((t=>{const i=t.bin1*o;return{chr:e,start:i,end:i+o,value:t.counts,sample:t.bin2.toString()}}))}supportsWholeGenome(){return!1}}function zf(e,t){const i=new Set(e.attributeNames),n=t[0];if(void 0===e.getAttributes(n))return!1;{const t=Object.keys(e.getAttributes(n));for(const e of t)if(!1===i.has(e))return!1}return!0}class Hf extends Hl{#b=new Map;constructor(e,t){super(e,t)}init(e){if(super.init(e),this.type=e.type||"seg","maf"===this.type&&(this.type="mut"),this.isLog=e.isLog,this.displayMode=e.displayMode||"EXPANDED",this.height=e.height||300,this.maxHeight=e.maxHeight||500,this.squishedRowHeight=e.sampleSquishHeight||e.squishedRowHeight||2,this.expandedRowHeight=e.sampleExpandHeight||e.expandedRowHeight||13,this.sampleHeight=this.squishedRowHeight,this.sampleKeys=[],e.samples){for(let t of e.samples)this.sampleKeys.push(t);this.explicitSamples=!0}if(e.color)this.color=e.color;else if(e.colorTable)this.colorTable=new ao(e.colorTable);else switch(this.type){case"mut":this.colorTable=new ao(Uf);break;case"shoebox":e.colorScale&&(this.sbColorScale=pf.parse(e.colorScale));break;default:this.posColorScale=new df(e.posColorScale||Pf),this.negColorScale=new df(e.negColorScale||Of)}const t=Object.assign({},this.config);t.maxWGCount=t.maxWGCount||Number.MAX_SAFE_INTEGER,"shoebox"===this.type?(this.featureSource=new Lf(t,this.browser.genome),this.height=e.height||500,this.maxHeight=e.maxHeight||800,this.isLog=!1,this.squishedRowHeight=e.squishedRowHeight||1,this.displayMode=e.displayMode||"SQUISHED",this.visibilityWindow=void 0===e.visibilityWindow?1e6:e.visibilityWindow):this.featureSource=wd(t,this.browser.genome),this.initialSort=e.sort}async postInit(){"function"==typeof this.featureSource.getHeader&&(this.header=await this.featureSource.getHeader(),this.disposed)||this.header&&this.setTrackProperties(this.header)}menuItemList(){const e=[];if(!0===zf(this.browser.sampleInfo,this.sampleKeys)){e.push("<hr/>"),e.push("Sort by attribute:");for(const n of this.browser.sampleInfo.attributeNames){if(this.sampleKeys.some((e=>{const t=this.browser.sampleInfo.getAttributes(e);return t&&t[n]}))){const r=Bt("<div>");function s(){const e=this.#b.get(n)||1;this.sortByAttribute(n,e),this.#b.set(n,-1*e),this.config.sort={option:"ATTRIBUTE",attribute:n,direction:1===e?"ASC":"DESC"}}r.html(`&nbsp;&nbsp;${n.split(Tu.emptySpaceReplacement).join(" ")}`),e.push({object:r,click:s})}}}const t={SQUISHED:"Squish",EXPANDED:"Expand",FILL:"Fill"};if("shoebox"===this.type&&this.sbColorScale){function o(e){this.browser.inputDialog.present({label:"Color Scale Threshold",value:this.sbColorScale.threshold,callback:()=>{const e=Number(this.browser.inputDialog.value,10);e&&(this.sbColorScale.setThreshold(e),this.trackView.repaintViews())}},e)}e.push("<hr/>"),e.push({object:Bt("<div>Set color scale threshold</div>"),dialog:o})}e.push("<hr/>"),e.push("DisplayMode:");const i="seg"===this.type||"shoebox"===this.type?["SQUISHED","EXPANDED","FILL"]:["SQUISHED","EXPANDED"];for(let a of i){const c=Dl(t[a],a===this.displayMode);e.push({object:Bt(c),click:function(){this.displayMode=a,this.config.displayMode=a,this.trackView.checkContentHeight(),this.trackView.repaintViews(),this.trackView.moveScroller(this.trackView.sampleNameViewport.trackScrollDelta)}})}return e}hasSamples(){return!0}getSamples(){return{names:this.sampleKeys,height:this.sampleHeight,yOffset:0}}async getFeatures(e,t,i){const n=await this.featureSource.getFeatures({chr:e,start:t,end:i});if(this.updateSampleKeys(n),this.initialSort){const e=this.initialSort;if(void 0===e.option||"VALUE"===e.option.toUpperCase())this.sortByValue(e,n);else if("ATTRIBUTE"===e.option.toUpperCase()&&e.attribute){const t="DESC"===e.direction?1:-1;this.sortByAttribute(e.attribute,t)}this.initialSort=void 0}return n}draw({context:e,pixelTop:t,pixelWidth:i,pixelHeight:n,features:r,bpPerPixel:s,bpStart:o}){if(xo.fillRect(e,0,t,i,n,{fillStyle:"rgb(255, 255, 255)"}),r&&r.length>0){if(this.checkForLog(r),"shoebox"===this.type&&!this.sbColorScale){const e=this.featureSource.hicFile.percentile95||2e3;this.sbColorScale=new pf({threshold:e,r:0,g:0,b:255})}const a={};let c;switch(this.sampleKeys.forEach((function(e,t){a[e]=t})),this.displayMode){case"FILL":this.sampleHeight=n/this.sampleKeys.length,c=0;break;case"SQUISHED":this.sampleHeight=this.squishedRowHeight,c=0;break;default:this.sampleHeight=this.expandedRowHeight,c=1}const l=this.sampleHeight;for(let e of r)e.pixelRect=void 0;const h=t+n,d=o+i*s+1,u=s;this.sampleYStart=void 0;for(let i of r){if(i.end<o||i.start>d)continue;const n=i.sampleKey||i.sample;i.row=a[n];const r=i.row*l+c;void 0===this.sampleYStart&&(this.sampleYStart=r);if(r+l<t||r>h)continue;const s=Math.max(i.start,o);let f=Math.round((s-o)/u);const p=Math.min(i.end,d),g=Math.round((p-o)/u);let m,w,b=Math.max(1,g-f);if(this.color?m="function"==typeof this.color?this.color(i):this.color:this.colorTable&&(m=this.colorTable.getColor(i.value.toLowerCase())),"mut"===this.type)w=l-2*c,b<3&&(b=3,f-=1);else if("shoebox"===this.type){m=this.sbColorScale.getColor(i.value);let e=l;if(l<.25){const t=.1+2*Math.abs(t.value);e=Math.min(1,t*l)}w=e-2*c}else{let e=i.value;this.isLog||(e=ys.log2(e/2)),m=e<-.1?this.negColorScale.getColor(e):e>.1?this.posColorScale.getColor(e):"white";let t=l;if(l<.25){const i=.1+2*Math.abs(e);t=Math.min(1,i*l)}w=t-2*c}i.pixelRect={x:f,y:r,w:b,h:w},e.fillStyle=m,e.fillRect(f,r,b,w)}}}checkForLog(e){if(void 0===this.isLog){this.isLog=!1;for(let t of e)if(t.value<0)return void(this.isLog=!0)}}computePixelHeight(e){if(!e)return 0;const t="SQUISHED"===this.displayMode?this.squishedRowHeight:this.expandedRowHeight;return this.updateSampleKeys(e),this.sampleKeys.length*t}async sortByValue(e,t){const i=e.chr;let n,r;if(e.position?(n=e.position-1,r=n+1):(n=e.start,r=e.end),t||(t=await this.featureSource.getFeatures({chr:i,start:n,end:r})),!t)return;this.updateSampleKeys(t);const s={},o="ASC"===e.direction?1:-1,a=()=>{const e=r-n+1;for(let i of t){if(i.end<n)continue;if(i.start>r)break;const t=Math.max(n,i.start),o=(Math.min(r,i.end)-t)/e,a=i.sampleKey||i.sample,c=s[a]||0;s[a]=c+o*i.value}this.sampleKeys.sort((function(e,t){let i=s[e],n=s[t];return i||(i=o*Number.MAX_VALUE),n||(n=o*Number.MAX_VALUE),i===n?0:i>n?o:-1*o}))},c=()=>{for(let e of t){if(e.end<n)continue;if(e.start>r)break;const t=e.sampleKey||e.sample;(!s.hasOwnProperty(t)||e.value.localeCompare(s[t])>0)&&(s[t]=e.value)}this.sampleKeys.sort((function(e,t){let i=s[e]||"",n=s[t]||"";return o*i.localeCompare(n)}))};"mut"===this.type?c():a(),this.trackView.repaintViews()}sortByAttribute(e,t){this.sampleKeys=this.browser.sampleInfo.getSortedSampleKeysByAttribute(this.sampleKeys,e,t),this.trackView.repaintViews()}clickedFeatures(e){const t=super.clickedFeatures(e),i=e.y;return t.filter((function(e){const t=e.pixelRect;return t&&i>=t.y&&i<=t.y+t.h}))}hoverText(e){const t=this.clickedFeatures(e);if(t&&t.length>0)return`${t[0].sample}: ${t[0].value}`}popupData(e,t){void 0===t&&(t=this.clickedFeatures(e));const i=[];for(let e of t){i.length>0&&(i.push("<hr/>"),i.push("<hr/>"));const t=e._f||e,n="function"==typeof t.popupData?t.popupData(this.type,this.browser.genome.id):this.extractPopupData(t);Array.prototype.push.apply(i,n)}return i}contextMenuItemList(e){const t=e.genomicLocation,i=t=>{const i=e.viewport.cachedFeatures;this.sortByValue(t,i)},n=e.referenceFrame.toBP(2.5);return["DESC","ASC"].map((r=>{const s="DESC"===r?"descending":"ascending";return{label:"seg"===this.type||"shoebox"===this.type?`Sort by value (${s})`:`Sort by type (${s})`,click:()=>{const s={option:"VALUE",direction:r,chr:e.referenceFrame.chr,start:Math.floor(t-n),end:Math.floor(t+n)};i(s),this.config.sort=s}}}))}get supportsWholeGenome(){return(!1===this.config.indexed||!this.config.indexURL)&&!1!==this.config.supportsWholeGenome}updateSampleKeys(e){if(this.explicitSamples)return;const t=new Set(this.sampleKeys);for(let i of e){const e=i.sampleKey||i.sample;t.has(e)||(this.sampleKeys.push(e),t.add(e))}}}const Pf={low:.1,lowR:255,lowG:255,lowB:255,high:1.5,highR:255,highG:0,highB:0},Of={low:-1.5,lowR:0,lowG:0,lowB:255,high:-.1,highR:255,highG:255,highB:255},Uf={indel:"rgb(0,200,0)","targeted region":"rgb(236,155,43)",truncating:"rgb(\t150,0,0)","non-coding transcript":"rgb(0,0,150)",synonymous:"rgb(109,165,95)",silent:"rgb(109,135,80)",missense_mutation:"rgb(72,130,187)",missense:"rgb(72,130,187)","splice site":"rgb(143,83,155)",splice_region:"rgb(143,83,155)",nonsense:"rgb(216, 57,81)",nonsense_mutation:"rgb(216, 57,81)",frame_shift_del:"rgb(226,135,65)",frame_shift_ins:"rgb(226,135,65)",in_frame_del:"rgb(247,235,94)",in_frame_ins:"rgb(247,235,94)","*other*":"rgb(159,91,50)"};class qf{constructor(e){this.paired=!0,this.firstAlignment=e,this.chr=e.chr,this.readName=e.readName,e.start<e.mate.position?(this.start=e.start,this.scStart=e.scStart,this.connectingStart=e.start+e.lengthOnRef,this.connectingEnd=e.mate.position):(this.start=e.mate.position,this.scStart=this.start,this.connectingStart=e.mate.position,this.connectingEnd=e.start),this.end=Math.max(e.mate.position,e.start+e.lengthOnRef),this.lengthOnRef=this.end-this.start;let t=Math.max(this.end,e.scStart+e.scLengthOnRef);this.scLengthOnRef=t-this.scStart}setSecondAlignment(e){this.secondAlignment=e;const t=this.firstAlignment;e.start>t.start?this.connectingEnd=e.start:this.connectingStart=e.start+e.lengthOnRef,this.start=Math.min(t.start,e.start),this.end=Math.max(t.start+t.lengthOnRef,e.start+e.lengthOnRef),this.lengthOnRef=this.end-this.start,this.scStart=Math.min(t.scStart,e.scStart);const i=Math.max(t.scStart+t.scLengthOnRef,e.scStart+e.scLengthOnRef);this.scLengthOnRef=i-this.scStart}containsLocation(e,t){const i=t?this.scStart:this.start,n=t?this.scLengthOnRef:this.lengthOnRef;return e>=i&&e<=i+n}alignmentContaining(e,t){return this.firstAlignment.containsLocation(e,t)?this.firstAlignment:this.secondAlignment&&this.secondAlignment.containsLocation(e,t)?this.secondAlignment:void 0}popupData(e){let t=this.firstAlignment.popupData(e);return this.secondAlignment&&(t.push("-------------------------------"),t=t.concat(this.secondAlignment.popupData(e))),t}isPaired(){return!0}isMateMapped(){return!0}isProperPair(){return this.firstAlignment.isProperPair()}get fragmentLength(){return Math.abs(this.firstAlignment.fragmentLength)}get firstOfPairStrand(){return this.firstAlignment.firstOfPairStrand}get pairOrientation(){return this.firstAlignment.pairOrientation}hasTag(e){return this.firstAlignment.hasTag(e)||this.secondAlignment&&this.secondAlignment.hasTag(e)}getGroupValue({option:e,tag:t}){switch(e){case"strand":return this.isNegativeStrand()?"-":"+";case"FIRST_IN_PAIR_STRAND":return this.isPaired()?this.isFirstOfPair()?this.isNegativeStrand()?"-":"+":this.isSecondOfPair()?this.isNegativeStrand()?"+":"-":void 0:void 0;case"START":return this.start;case"INSERT_SIZE":return this.fragmentLength;case"MATE_CHR":return this.mate?this.mate.chr:void 0;case"MQ":return this.mq;case"ALIGNED_READ_LENGTH":return this.lengthOnRef;case"TAG":return this.tags()[t];case"PHASE":return this.tags().HP;case"READ_ORDER":return this.isPaired()&&this.isFirstOfPair()?"FIRST":this.isPaired()&&this.isSecondOfPair()?"SECOND":"";default:return}}}class Qf{static instances=new Map;static getKey(e,t,i){const n=""+e+t+i;return Qf.instances.has(n)||Qf.instances.set(n,new Qf(e,t,i)),Qf.instances.get(n)}constructor(e,t,i){this.base=e,this.strand=t,this.modification=i,this.canonicalBase="+"===this.strand?this.base:ac(this.base)}getCanonicalBase(){}toString(){return""+this.base+this.strand+this.modification}static compare(e,t){const i=e.modification,n=t.modification;return i===n?e.strand.charAt(0)-t.strand.charAt(0):Vf.has(i)&Vf.has(n)?Vf.get(i)-Vf.get(n):Vf.has(i)?1:Vf.has(n)?-1:i>n?1:-1}}const Vf=new Map(["NONE_C","NONE_T","NONE_G","NONE_A","m","h","f","c","C","g","e","b","T","U","a","A","o","G","n","N"].map(((e,t)=>[e,t])));class jf{constructor(e,t,i,n){this.base=e,this.modification=i,this.strand=t,this.likelihoods=n,this.canonicalBase="+"==this.strand?this.base:ac(this.base),this.key=Qf.getKey(e,t,i)}containsPosition(e){return this.likelihoods.has(e)}is5mC(){return this.modification.equals("m")&&("C"===this.base&&"+"===this.strand||"G"===this.base&&"-"===this.strand)}fullName(){return Wf.get(this.modification)||this.modification}}const Wf=new Map;Wf.set("m","5mC"),Wf.set("h","5hmC"),Wf.set("f","5fC"),Wf.set("c","5caC"),Wf.set("g","5hmU"),Wf.set("e","5fU"),Wf.set("b","5caU"),Wf.set("a","6mA"),Wf.set("o","8xoG"),Wf.set("n","Xao"),Wf.set("C","Unknown C"),Wf.set("T","Unknown T"),Wf.set("A","Unknown A"),Wf.set("G","Unknown G"),Wf.set("N","Unknown");const Gf=new Map([["m","5mC"],["h","5hmC"],["f","5fC"],["c","5caC"],["g","5hmU"],["e","5fU"],["b","5caU"],["a","6mA"],["o","8xoG"],["n","Xao"],["C","Unknown C"],["T","Unknown T"],["A","Unknown A"],["G","Unknown G"],["N","Unknown"]]);function $f(e){return Gf.has(e)?Gf.get(e):"Uknown"}function Kf(e){if(!e)return!1;const t=e.length;if(0==t)return!1;for(let i=0;i<t;i++){const t=e.charAt(i);if(t<"0"||t>"9")return!1}return!0}function Yf(e){return e<0?e+256:e}class Xf{allModifications=new Set;simplexModifications=new Set;maxLikelihoods=new Map;nomodLikelihoods=new Map;lastThreshold;incrementCounts(e){if(!e.blocks)return;const t=e.getBaseModificationSets();if(t)for(let i of e.blocks)if("S"!==i.type)for(let e=0;e<i.len;e++){let n,r=e+i.seqOffset,s=0,o=-1,a=255;for(let e of t){const t=Qf.getKey(e.base,e.strand,e.modification);this.allModifications.add(t);const i=e.likelihoods;if(e.containsPosition(r)){const c=Yf(i.get(r));a-=c,c>o&&(s=e.canonicalBase,o=c,n=t)}}if(0!=s){const t=i.start+e,r=Qf.getKey(s,"+","NONE_"+s);this.allModifications.add(r);const c=(e,t,i,n)=>{let r=n.get(i);r||(r=new Map,n.set(i,r));let s=r.get(e);s||(s=[],r.set(e,s)),s.push(t)};c(t,o,n,this.maxLikelihoods),a>o?c(t,a,r,this.nomodLikelihoods):c(t,o,n,this.nomodLikelihoods)}}}getCount(e,t,i,n){this.lastThreshold=i;const r=255*i,s=n?this.nomodLikelihoods.get(t):this.maxLikelihoods.get(t);if(!s)return 0;const o=s.get(e);if(o){let e=0;for(let t of o){Yf(t)>=r&&e++}return e}return 0}getLikelihoodSum(e,t,i,n){this.lastThreshold=i;const r=255*i,s=(n?this.nomodLikelihoods.get(t):this.maxLikelihoods.get(t)).get(e);if(s){let e=0;for(let t of s){const i=Yf(t);i>=r&&(e+=i)}return e}return 0}popupData(e,t){const i=[];i.push("<b>Modifications with likelihood > "+100*this.lastThreshold+"%</b>");for(let n of this.maxLikelihoods.keys()){if(this.maxLikelihoods.get(n).has(e)){let r="basemod2"===t;const s=this.getCount(e,n,this.lastThreshold,r);if(s>0){const t=this.getLikelihoodSum(e,n,this.lastThreshold,r)/s*.3921568,o=$f(n.modification);i.push(o+" ("+n.base+n.strand+"): "+s+"  @ average likelihood "+Math.round(t)+"%")}}}return i}computeSimplex(){const e=new Set(Array.from(this.allModifications).filter((e=>"-"===e.strand)).map((e=>e.modification)));for(let t of this.allModifications)"+"!==t.strand||e.has(t.modification)||(this.simplexModifications.add(t.modification),this.simplexModifications.add("NONE_"+t.getCanonicalBase()))}}class Zf{constructor(){this.alignments=[],this.score=void 0}findAlignment(e,t=!1){const i=(e,i)=>i>=e.start&&i<e.start+(t?e.fragmentLength:e.lengthOnRef);let n;for(let r=0;r<this.alignments.length;r++){const s=this.alignments[r];if(e>=s.start&&e<s.start+(t?s.fragmentLength:s.lengthOnRef)){s.paired?s.firstAlignment&&i(s.firstAlignment,e)?n=s.firstAlignment:s.secondAlignment&&i(s.secondAlignment,e)&&(n=s.secondAlignment):n=s;break}}return n}getSortValue({position:e,option:t,tag:i,sortAsPairs:n},r){t||(t="BASE");const s=this.findAlignment(e,n);if(void 0===s)return Number.MAX_VALUE;switch(t){case"NUCLEOTIDE":case"BASE":return function(e,t,i){let n;const r=Math.floor(i)-t.start;r<t.sequence.length&&(n=t.sequence.charAt(r));if(!n)return 0;const s=e.readBaseAt(i),o=e.readBaseQualityAt(i),a=t.coverageMap,c=Math.floor(i-a.bpStart),l=a.coverage[c];let h=0;if(e.insertions)for(let t of e.insertions)t.start===i&&(h=-l.ins);if(s)if(n=n.toUpperCase(),"N"===s&&0===h)h=2;else if(n!==s&&"="!==s||0!==h){if("X"===s||n!==s){h-=l["pos"+s]+l["neg"+s]+o/1e3}}else h=4-o/1e3;else{const e=l.del;e>0?h-=e:0===h&&(h=1)}return h}(s,r,e);case"strand":return s.strand?1:-1;case"START":return s.start;case"TAG":return s.tags()[i];case"READ_NAME":return s.readName;case"INSERT_SIZE":return-Math.abs(s.fragmentLength);case"GAP_SIZE":return-s.gapSizeAt(e);case"MATE_CHR":return s.mate?s.mate.chr:Number.MAX_VALUE;case"MQ":return void 0===s.mq?Number.MAX_VALUE:-s.mq;case"ALIGNED_READ_LENGTH":return-s.lengthOnRef;default:return Number.MAX_VALUE}}}var Jf={fr:{F1R2:"LR",F2R1:"LR",F1F2:"LL",F2F1:"LL",R1R2:"RR",R2R1:"RR",R1F2:"RL",R2F1:"RL"},rf:{R1F2:"LR",R2F1:"LR",R1R2:"LL",R2R1:"LL",F1F2:"RR",F2F1:"RR",F1R2:"RL",F2R1:"RL"},ff:{F2F1:"LR",R1R2:"LR",F2R1:"LL",R1F2:"LL",R2F1:"RR",F1R2:"RR",R2R1:"RL",F1F2:"RL"}};class ep{#F=[];baseModificationKeys=new Set;constructor(e,t,i,{samplingWindowSize:n,samplingDepth:r,alleleFreqThreshold:s,colorBy:o}){this.alleleFreqThreshold=void 0===s?.2:s,this.samplingWindowSize=n||100,this.samplingDepth=r||1e3,this.chr=e,this.start=Math.floor(t),this.end=Math.ceil(i),this.length=i-t,this.coverageMap=new ip(e,t,i,this.alleleFreqThreshold),this.downsampledIntervals=[],o&&o.startsWith("basemod")&&(this.baseModCounts=new Xf),this.alignments=[],this.pairsCache=new Map,this.downsampledReads=new Set,this.currentBucket=new tp(this.start,this.start+this.samplingWindowSize,this),this.hasPairs=!1}pack({viewAsPairs:e,showSoftClips:t,expectedPairOrientation:i,groupBy:n,displayMode:r}){let s=this.allAlignments();s=e?function(e){const t=new Map,i=e.map((e=>{if(op(e)){let i=t.get(e.readName);return i?(i.setSecondAlignment(e),t.delete(e.readName),i):(i=new qf(e),t.set(e.readName,i),i)}return e}));return i}(s):function(e){return e.flatMap((e=>e instanceof qf?[e.firstAlignment,e.secondAlignment].filter(Boolean):[e]))}(s),this.packAlignmentRows(s,t,i,n,r),this.alignments&&delete this.alignments}packAlignmentRows(e,t,i,n,r){this.#F=[];const s=(e,i)=>{e.sort((function(e,i){return t?e.scStart-i.scStart:e.start-i.start}));const n=new sp(i);let r,s=0,o=0;const a=new Set,c=()=>{r=new Zf,n.push(r),s=0,o=0,a.clear()};for(c();e.length>0;)if(o>=0&&o<e.length){const i=e[o];a.add(i),r.alignments.push(i),s=t?i.scStart+i.scLengthOnRef+2:i.start+i.lengthOnRef+2,o=ap(e,(e=>(t?e.scStart:e.start)>s),o)}else e=e.filter((e=>!a.has(e))),c();return n},o=(e,t)=>{e.sort((function(e,t){return e.start-t.start}));const i=new sp(t),{start:n,end:r}=this.viewport.genomicRange();for(let t of e)if(t.end<n||t.start>r)this.#F.push(t);else{const e=new Zf;e.alignments.push(t),i.push(e)}return i};if(!e||0===e.length)return new Map;{const t=new Map;if(n)for(let r of e){const e=cp(r,n,i)||"";t.has(e)||t.set(e,[]),t.get(e).push(r)}else t.set("",e);const a=new Map,c=Array.from(t.keys()).sort(function(e){switch(e){case"pairOrientation":return function(){const e=["LL","RR","RL","LR",""];return(t,i)=>e.indexOf(t)-e.indexOf(i)}();case"strand":case"firstOfPairStrand":return dp;default:return e&&e.startsWith("base:")?hp:up}}(n));for(let e of c){const i=t.get(e),n="FULL"===r?o(i,e):s(i,e);a.set(e,n)}this.packedGroups=a}}push(e){this.hasPairs=this.hasPairs||e.isPaired(),this.coverageMap.incCounts(e);const t=e.getBaseModificationSets();if(t)for(let e of t)this.baseModificationKeys.add(e.key);this.baseModCounts&&this.baseModCounts.incrementCounts(e),this.downsampledReads.has(e.readName)?this.currentBucket.downsampledCount++:(e.start>=this.currentBucket.end&&(this.finishBucket(),this.currentBucket=new tp(e.start,e.start+this.samplingWindowSize,this)),this.currentBucket.addAlignment(e))}finish(){void 0!==this.currentBucket&&this.finishBucket(),this.hasAlignments=this.alignments.length>0,this.alignments.sort((function(e,t){return e.start-t.start})),this.baseModCounts&&this.baseModCounts.computeSimplex(),delete this.currentBucket,delete this.pairsCache,delete this.downsampledReads}contains(e,t,i){return this.chr===e&&this.start<=t&&this.end>=i}hasDownsampledIntervals(){return this.downsampledIntervals&&this.downsampledIntervals.length>0}finishBucket(){this.alignments=this.alignments.concat(this.currentBucket.alignments),this.currentBucket.downsampledCount>0&&this.downsampledIntervals.push(new rp(this.currentBucket.start,this.currentBucket.end,this.currentBucket.downsampledCount))}allAlignments(){if(this.alignments)return this.alignments;{const e=Array.from(this.packedGroups.values()).flatMap((e=>e.rows.flatMap((e=>e.alignments))));if(this.#F&&this.#F.length>0)for(let t of this.#F)e.push(t);return e}}getMax(e,t){return this.coverageMap.getMax(e,t)}sortRows(e){for(let t of this.packedGroups.values())t.sortRows(e,this)}}class tp{constructor(e,t,{samplingDepth:i,downsampledReads:n,pairsCache:r}){this.start=e,this.end=t,this.alignments=[],this.downsampledCount=0,this.samplingDepth=i,this.downsampledReads=n,this.pairsCache=r,this.hasPairs=!1}addAlignment(e){this.hasPairs=this.hasPairs||e.isPaired();const t=this.hasPairs?Math.ceil(this.samplingDepth/2):this.samplingDepth;if(op(e)){const t=this.pairsCache.get(e.readName);if(t)return t.setSecondAlignment(e),void this.pairsCache.delete(e.readName)}if(this.alignments.length<t)if(op(e)){const t=new qf(e);this.pairsCache.set(e.readName,t),this.alignments.push(t)}else this.alignments.push(e);else{const i=Math.floor(Math.random()*(t+this.downsampledCount-1));if(i<t){const t=this.alignments[i];if(this.pairsCache.has(t.readName)&&this.pairsCache.delete(t.readName),op(e)){const t=new qf(e);this.pairsCache.set(e.readName,t),this.alignments[i]=t}else this.alignments[i]=e;this.downsampledReads.add(t.readName)}else this.downsampledReads.add(e.readName);this.downsampledCount++}}}class ip{constructor(e,t,i,n){this.chr=e,this.bpStart=t,this.length=i-t,this.coverage=new Array(this.length),this.maximum=0,this.threshold=n,this.qualityWeight=!0}getMax(e,t){let i=0;const n=this.coverage.length;for(let r=0;r<n;r++){const n=this.bpStart+r;if(n>t)break;const s=this.coverage[r];n>=e&&s&&(i=Math.max(i,s.total))}return i}incCounts(e){var t=this;if(void 0===e.blocks?i(e):e.blocks.forEach((function(e){i(e)})),e.gaps)for(let i of e.gaps)if("D"===i.type){const e=i.start-t.bpStart;for(let n=e;n<e+i.len;n++)n<0||(this.coverage[n]||(this.coverage[n]=new np(t.threshold)),this.coverage[n].del++)}if(e.insertions)for(let i of e.insertions){const e=i.start-this.bpStart;e<0||(this.coverage[e]||(this.coverage[e]=new np(t.threshold)),this.coverage[e].ins++)}function i(i){if("S"===i.type)return;const n=e.seq,r=e.qual,s=i.seqOffset;for(let o=i.start-t.bpStart,a=0;a<i.len;o++,a++){t.coverage[o]||(t.coverage[o]=new np(t.threshold));const i=null==n?"N":n.charAt(s+a),c=e.strand?"pos"+i:"neg"+i,l=r&&s+a<r.length?r[s+a]:30;t.coverage[o][c]+=1,t.coverage[o]["qual"+i]+=l,t.coverage[o].total+=1,t.coverage[o].qual+=l,t.maximum=Math.max(t.coverage[o].total,t.maximum)}}}getPosCount(e,t){const i=e-this.bpStart;if(i<0||i>=this.coverage.length)return 0;const n=this.coverage[i];switch(t){case"A":case"a":return n.posA;case"C":case"c":return n.posC;case"T":case"t":return n.posT;case"G":case"g":return n.posG;case"N":case"n":return n.posN;default:return 0}}getNegCount(e,t){const i=e-this.bpStart;if(i<0||i>=this.coverage.length)return 0;const n=this.coverage[i];switch(t){case"A":case"a":return n.negA;case"C":case"c":return n.negC;case"T":case"t":return n.negT;case"G":case"g":return n.negG;case"N":case"n":return n.negN;default:return 0}}getCount(e,t){return this.getPosCount(e,t)+this.getNegCount(e,t)}getTotalCount(e){const t=e-this.bpStart;return t>=0&&t<this.coverage.length?this.coverage[t].total:0}}class np{constructor(e){this.qualityWeight=!0,this.posA=0,this.negA=0,this.posT=0,this.negT=0,this.posC=0,this.negC=0,this.posG=0,this.negG=0,this.posN=0,this.negN=0,this.pos=0,this.neg=0,this.qualA=0,this.qualT=0,this.qualC=0,this.qualG=0,this.qualN=0,this.qual=0,this.total=0,this.del=0,this.ins=0,this.threshold=e}hoverText(){const e=this.posA+this.posT+this.posC+this.posG+this.posN,t=this.negA+this.negT+this.negC+this.negG+this.negN;return`${this.total} (${e}+, ${t}-)`}isMismatch(e){const t=this.threshold*(this.qualityWeight&&this.qual?this.qual:this.total);let i=0;for(let t of["A","T","C","G"])t!==e&&(i+=this.qualityWeight&&this.qual?this["qual"+t]:this["pos"+t]+this["neg"+t]);return i>=t}}class rp{constructor(e,t,i){this.start=e,this.end=t,this.counts=i}popupData(e){return[{name:"start",value:Math.floor(this.start+1)},{name:"end",value:this.end},{name:"# downsampled:",value:this.counts}]}}class sp{pixelTop=0;pixelBottom=0;rows=[];constructor(e){this.name=this.name}push(e){this.rows.push(e)}get length(){return this.rows.length}sortRows(e,t){const i=[],n=[];for(let t of this.rows){void 0!==t.findAlignment(e.position,e.sortAsPairs)?i.push(t):n.push(t)}i.sort(((i,n)=>{const r=e.direction,s=i.getSortValue(e,t),o=n.getSortValue(e,t);if(void 0===o&&void 0!==o)return 1;if(void 0!==s&&void 0===o)return-1;const a=s>o?1:s<o?-1:0;return!0===r?a:-a}));for(let e of n)i.push(e);this.rows=i}}function op(e){return e.isPaired()&&e.mate&&e.isMateMapped()&&e.chr===e.mate.chr&&(e.isFirstOfPair()||e.isSecondOfPair())&&!(e.isSecondary()||e.isSupplementary())}function ap(e,t,i){let n=i-1,r=e.length;for(;1+n<r;){const i=n+(r-n>>1);t(e[i])?r=i:n=i}return r}function cp(e,t,i){let n,r,s;if(t.startsWith("tag:"))n=t.substring(4),t="tag";else if(t.startsWith("base:")){const e=t.split(":");3===e.length&&(t="base",r=e[1],s=Number.parseInt(e[2].replaceAll(",",""))-1)}switch(t){case"strand":return e.strand?"+":"-";case"firstOfPairStrand":const t=e.firstOfPairStrand;return void 0===t?"":t?"+":"-";case"mateChr":return e.mate&&e.isMateMapped()?e.mate.chr:"";case"pairOrientation":return Jf[i][e.pairOrientation]||"";case"chimeric":return e.tags().SA?"chimeric":"";case"supplementary":return e.isSupplementary?"supplementary":"";case"readOrder":return e.isPaired()&&e.isFirstOfPair()?"first":e.isPaired()&&e.isSecondOfPair()?"second":"";case"phase":return e.tags().HP||"";case"tag":return e.tags()[n]||"";case"base":if(e.chr===r&&e.start<=s&&e.end>s){const t=e.readBaseAt(s);return t||"GAP"}return"";default:return}}const lp=new Map([["A",1],["T",2],["C",3],["G",4],["N",5],["GAP",5],["",7]]);function hp(e,t){return lp.has(e)&&lp.has(t)?lp.get(e)-lp.get(t):e.localeCompare(t,void 0,{sensitivity:"base"})}function dp(e,t){return e===t?0:e&&t?-e.localeCompare(t):e?1:-1}function up(e,t){if(e||t){if(e){if(t){if(e===t)return 0;if(ja(e)&&(ja(t),1))return Number.parseFloat(e)-Number.parseFloat(t);{let i=e.toString(),n=t.toString();return i.localeCompare(n,void 0,{sensitivity:"base"})}}return-1}return 1}return 0}class fp{constructor(e){const t=e.split(",");this.chr=t[0],this.start=parseInt(t[1]),this.strand=t[2].charAt(0),this.mapQ=parseInt(t[4]),this.numMismatches=parseInt(t[5]),this.lenOnRef=function(e){let t=0,i="";for(let n=0;n<e.length;n++){const r=e.charCodeAt(n);if(r>47&&r<58)i+=e.charAt(n);else{switch(r){case 78:case 68:case 77:case 61:case 88:t+=parseInt(i.toString())}i=""}}return t}(t[3])}printString(){return this.chr+":"+Rt(this.start)+"-"+Rt(this.start+this.lenOnRef)+" ("+this.strand+") = "+Rt(this.lenOnRef)+"bp @MAPQ: "+this.mapQ+" NM: "+this.numMismatches}}function pp(e){return e.split(";").filter((e=>e.length>0)).map((e=>new fp(e)))}const gp={c:1,C:1,s:2,S:2,i:4,I:4,f:4};class mp{constructor(){this.hidden=!1}isMapped(){return!(4&this.flags)}isPaired(){return!!(1&this.flags)}isProperPair(){return!!(2&this.flags)}isFirstOfPair(){return!!(64&this.flags)}isSecondOfPair(){return!!(128&this.flags)}isSecondary(){return!!(256&this.flags)}isSupplementary(){return!!(2048&this.flags)}isFailsVendorQualityCheck(){return!!(512&this.flags)}isDuplicate(){return!!(1024&this.flags)}isMateMapped(){return!(8&this.flags)}isNegativeStrand(){return!!(16&this.flags)}isMateNegativeStrand(){return!!(32&this.flags)}hasTag(e){return(this.tagDict||Fp(this.tagBA)).hasOwnProperty(e)}tags(){return this.tagDict||(this.tagBA?(this.tagDict=Fp(this.tagBA),this.tagBA=void 0):this.tagDict={}),this.tagDict}getTag(e){return this.tags()[e]}get firstOfPairStrand(){if(this.isPaired()){if(this.isFirstOfPair())return this.strand;if(this.isMateMapped())return this.mate.strand}}containsLocation(e,t){const i=t?this.scStart:this.start,n=t?this.scLengthOnRef:this.lengthOnRef;return e>=i&&e<=i+n}popupData(e){const t=[];if(e=Math.floor(e),this.insertions){const n=this.seq;for(let r of this.insertions){var i=r.start;if(e===i||e===i-1)return t.push({name:"Insertion",value:n.substr(r.seqOffset,r.len)}),t.push({name:"Location",value:i}),t}}t.push({name:"Read Name",value:this.readName}),t.push("<hr/>"),t.push({name:"Alignment Start",value:Rt(1+this.start),borderTop:!0}),t.push({name:"Read Strand",value:!0===this.strand?"(+)":"(-)",borderTop:!0});let n=this.cigar;if(n&&n.length>50){const e=25;n=`${n.substring(0,e-2)} ... ${n.substring(n.length-e+2)}`}t.push({name:"Cigar",value:n}),t.push({name:"Mapping Quality",value:this.mq}),t.push({name:"Secondary",value:a(this.isSecondary())}),t.push({name:"Supplementary",value:a(this.isSupplementary())}),t.push({name:"Duplicate",value:a(this.isDuplicate())}),t.push({name:"Failed QC",value:a(this.isFailsVendorQualityCheck())}),this.isPaired()&&(t.push("<hr/>"),t.push({name:"First in Pair",value:!this.isSecondOfPair(),borderTop:!0}),t.push({name:"Mate is Mapped",value:a(this.isMateMapped())}),this.pairOrientation&&t.push({name:"Pair Orientation",value:this.pairOrientation}),this.isMateMapped()&&(t.push({name:"Mate Chromosome",value:this.mate.chr}),t.push({name:"Mate Start",value:this.mate.position+1}),t.push({name:"Mate Strand",value:!0===this.mate.strand?"(+)":"(-)"}),t.push({name:"Insert Size",value:this.fragmentLength})));const r=this.tags();if(r.hasOwnProperty("SA")){t.push("<hr/>"),t.push({name:"Supplementary Alignments",value:""});const e=pp(r.SA);if(e){t.push("<ul>");for(let i of e)t.push(`<li>${i.printString()}</li>`);t.push("</ul>")}}const s=new Set(["SA","MD"]);t.push("<hr/>");for(let e in r)s.has(e)||t.push({name:e,value:r[e]});t.push({name:"Hidden Tags",value:"SA, MD"}),t.push("<hr/>"),t.push({name:"Genomic Location: ",value:Rt(1+e)}),t.push({name:"Read Base:",value:this.readBaseAt(e)}),t.push({name:"Base Quality:",value:this.readBaseQualityAt(e)});const o=this.getBaseModificationSets();if(o){const i=this.positionToReadIndex(e);if(void 0!==i){let e=!1;for(let n of o)if(n.containsPosition(i)){e||(t.push("<hr/>"),t.push("<b>Base modifications:</b>"),e=!0);const r=Math.round(100/255*Yf(n.likelihoods.get(i)));t.push(`${n.fullName()} @ likelihood =  ${r}%`)}}}return t;function a(e){return e?"Yes":"No"}}readBaseAt(e){const t=bp(this.blocks,e);if(t){if("*"===this.seq)return"*";{const i=t.seqIndexAt(e);return this.seq[i]}}}readBaseQualityAt(e){const t=bp(this.blocks,e);if(t){if("*"===this.qual)return 30;{const i=t.seqIndexAt(e);return i>=0&&this.qual&&i<this.qual.length?this.qual[i]:30}}}gapSizeAt(e){if(this.gaps)for(let t of this.gaps)if(e>=t.start&&e<t.start+t.len)return t.len;return 0}softClippedBlocks(){let e,t,i;for(let n of this.blocks)"S"===n.type?i?t=n:e=n:"H"!==n.type&&(i=!0);return{left:e,right:t}}getBaseModificationSets(){if(this.tags(),!this.baseModificationSets&&(this.tagDict.MM||this.tagDict.Mm)){const e=this.tagDict.MM||this.tagDict.Mm,t=this.tagDict.ML||this.tagDict.Ml;!Mt(e)||t&&!Array.isArray(t)||(0===e.length?this.baseModificationSets=wp:this.baseModificationSets=function(e,t,i,n){n&&(i=lc(i));const r=[],s=e.split(";");let o=0;for(let e of s){const s=e.split(","),a=s[0].charAt(0),c=s[0].charAt(1),l=s[0].endsWith(".");if(1==s.length);else{const e=s[0].endsWith(".")||s[0].endsWith("?")?s[0].substring(2,s[0].length-1):s[0].substring(2);let h=[];if(e.length>1)if(Kf(e))h.push(e);else for(let t=0;t<e.length;t++)h.push(e.substring(t,t+1));else h.push(e);const d=new Map;for(let e of h)d.set(e,new Map);let u=1,f=Number.parseInt(s[u++]),p=0,g=0;for(;p<i.length;){if("N"===a||i[p]===a){const e=n?i.length-1-p:p;if(g===f){for(let i of h){const n=t?t[o++]:255;d.get(i).set(e,n)}if(u<s.length)f=Number.parseInt(s[u++]),g=0;else{if(!l)break;f=-1}}else{if(l)for(let t of h)d.get(t).set(e,0);g++}}p++}for(let e of h)r.push(new jf(a,c,e,d.get(e)))}}return r}(e,t,this.seq,this.isNegativeStrand()))}return this.baseModificationSets}getGroupValue(e,t,i){const n=this;switch(e){case"strand":return n.strand?"+":"-";case"firstOfPairStrand":const e=n.firstOfPairStrand;return void 0===e?"":e?"+":"-";case"mateChr":return n.mate&&n.isMateMapped()?n.mate.chr:"";case"pairOrientation":return Jf[i][n.pairOrientation]||"";case"chimeric":return n.tags().SA?"chimeric":"";case"supplementary":return n.isSupplementary?"supplementary":"";case"readOrder":return n.isPaired()&&n.isFirstOfPair()?"first":n.isPaired()&&n.isSecondOfPair()?"second":"";case"phase":return n.tags().HP||"";case"tag":return n.tags()[t]||"";default:return}}positionToReadIndex(e){const t=bp(this.blocks,e);return t?e-t.start+t.seqOffset:void 0}}const wp=new Set;function bp(e,t){for(let i=0;i<e.length;i++){const n=e[i];if(t>=n.start&&t<n.start+n.len)return n}}function Fp(e){let t=0;const i=e.length,n={};for(;t<i;){const i=String.fromCharCode(e[t])+String.fromCharCode(e[t+1]);t+=2;const s=String.fromCharCode(e[t++]);let o;if("A"===s)o=String.fromCharCode(e[t]),t++;else if("i"===s||"I"===s)o=vp(e,t),t+=4;else if("c"===s)o=Cp(e,t),t++;else if("C"===s)o=_p(e,t),t++;else if("s"===s||"S"===s)o=yp(e,t),t+=2;else if("f"===s)o=Ap(e,t),t+=4;else if("Z"===s)for(o="";;){var r=e[t++];if(0===r)break;o+=String.fromCharCode(r)}else{if("B"!==s){o="Error unknown type: "+s,n[i]=o;break}{const r=String.fromCharCode(e[t++]);let s=gp[r];if(void 0===s){n[i]=`Error: unknown element type '${r}'`;break}const a=vp(e,t);t+=4;const c=t+a*s;o=[];const l=new DataView(e.buffer);for(;t<c;){switch(r){case"c":o.push(l.getInt8(t));break;case"C":o.push(l.getUint8(t));break;case"s":o.push(l.getInt16(t));break;case"S":o.push(l.getUint16(t));break;case"i":o.push(l.getInt32(t));break;case"I":o.push(l.getUint32(t));break;case"f":o.push(l.getFloat32(t))}t+=s}}}n[i]=o}return n}function vp(e,t){return e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t]}function yp(e,t){return e[t+1]<<8|e[t]}function Ap(e,t){return new DataView(e.buffer).getFloat32(t)}function Cp(e,t){return new DataView(e.buffer).getInt8(t)}function _p(e,t){return new DataView(e.buffer).getUint8(t)}class xp{constructor(e){e&&Object.assign(this,e)}seqIndexAt(e){return Math.floor(e)-this.start+this.seqOffset}}class kp{constructor(e){e||(e={}),this.vendorFailed=e.vendorFailed=!1!==e.vendorFailed,this.duplicate=e.duplicate=!1!==e.duplicate,this.secondary=e.secondary||!1,this.supplementary=e.supplementary||!1,this.mq=e.mq||0,e.readgroups&&(this.readgroups=new Set(e.readgroups))}pass(e){if(!e.isMapped())return!1;if(this.vendorFailed&&e.isFailsVendorQualityCheck())return!1;if(this.duplicate&&e.isDuplicate())return!1;if(this.secondary&&e.isSecondary())return!1;if(this.supplementary&&e.isSupplementary())return!1;if(e.mq<this.mq)return!1;if(this.readgroups){const t=e.tags().RG;return this.readgroups.has(t)}return!0}}const Ip=["=","A","C","M","G","R","S","V","T","W","Y","H","K","D","B","N"],Sp=["M","I","D","N","S","H","P","=","X","?","?","?","?","?","?","?"],Ep=Rp(new Uint8Array([66,65,77,1]),0),Np=1e4,Bp={readHeader:async function(e,t,i){const n=gs(await Qs.loadArrayBuffer(e,t));return Bp.decodeBamHeader(n,i)},decodeBamHeader:function(e){const t=Rp(e,0);if(t!==Ep)throw new Error("BAM header errror: bad magic number.  This could be caused by either a corrupt or missing file.");const i=Rp(e,4);let n="";for(var r=0;r<i;++r)n+=String.fromCharCode(e[r+8]);const s=Rp(e,i+8);let o=i+12;const a={},c=[];for(r=0;r<s;++r){const t=Rp(e,o);let i="";for(var l=0;l<t-1;++l)i+=String.fromCharCode(e[o+4+l]);a[i]=r,c[r]=i,o=o+8+t}return{magicNumber:t,size:o,chrNames:c,chrToIndex:a}},bam_tag2cigar:function(e,t,i,n,r,s){function o(e){return"C"===e||"c"===e||"A"===e?1:"S"===e||"s"===e?2:"I"===e||"i"===e||"f"===e?4:0}if(1!==s.length||r.start<0)return!1;for(var a=i+(n+1>>1)+n;a+4<t;){if("CG"===String.fromCharCode(e[a])+String.fromCharCode(e[a+1]))break;var c=String.fromCharCode(e[a+2]);if("B"===c)a+=8+o(c=String.fromCharCode(e[a+3]))*Rp(e,a+4);else if("Z"===c||"H"===c)for(a+=3;0!==e[a++];);else a+=3+o(c)}if(a>=t)return!1;if("B"!==String.fromCharCode(e[a+2])||"I"!==String.fromCharCode(e[a+3]))return!1;var l=Rp(e,a+4),h=a+8;if(h+4*l>t)return!1;var d="",u=0;s.length=0,a=h;for(var f=0;f<l;++f,a+=4){var p=Rp(e,a),g=p>>4,m=Sp[15&p];"M"!==m&&"EQ"!==m&&"X"!==m&&"D"!==m&&"N"!==m&&"="!==m||(u+=g),d=d+g+m,s.push({len:g,ltr:m})}return r.cigar=d,r.lengthOnRef=u,!0},decodeBamRecords:function(e,t,i,n,r,s,o,a){for(;t<e.length;){const u=t+Rp(e,t)+4,f=new mp,p=Rp(e,t+4),g=Rp(e,t+8);if(u>e.length)return;if(p<0){t=u;continue}if(void 0!==r&&(p>r||g>o))return!0;if(void 0!==r&&p<r){t=u;continue}const m=Rp(e,t+12),w=(65280&m)>>8,b=255&m,F=Rp(e,t+16),v=(4294901760&F)>>16,y=65535&F,A=Rp(e,t+20),C=Rp(e,t+24),_=Rp(e,t+28),x=Rp(e,t+32);let k=[];for(let i=0;i<b-1;++i)k.push(String.fromCharCode(e[t+36+i]));k=k.join("");let I=0,S="",E=t+36+b;const N=[];let B;for(let t=0;t<y;++t){var c=Rp(e,E),l=c>>4,h=Sp[15&c];"M"!==h&&"EQ"!==h&&"X"!==h&&"D"!==h&&"N"!==h&&"="!==h||(I+=l),S=S+l+h,E+=4,B={len:l,ltr:h},N.push(B)}if(f.chr=n[p],f.start=g,f.flags=v,f.strand=!(16&v),f.readName=k,f.cigar=S,f.lengthOnRef=I,f.fragmentLength=x,f.mq=w,Bp.bam_tag2cigar(e,u,E,A,f,N),f.end=f.start+f.lengthOnRef,f.end<s){t=u;continue}let M=[];const R=A+1>>1;for(let t=0;t<R;++t){var d=e[E+t];M.push(Ip[(240&d)>>4]),M.push(Ip[15&d])}M=M.slice(0,A).join(""),E+=R;const D=[];for(let t=0;t<A;++t)D.push(e[E+t]);E+=A,C>=0&&(f.mate={chr:n[C],position:_,strand:!(32&v)}),f.seq=M,f.qual=D,f.tagBA=new Uint8Array(e.buffer.slice(E,u)),this.setPairOrientation(f),(void 0===a||a.pass(f))&&(Mp(f,N),i.push(f)),t=u}},decodeSamRecords:function(e,t,i,n,r,s){var o,a,c,l,h,d,u,f,p,g;for(l=(o=Dt(e)).length,a=0;a<l;a++)if(h=o[a].split("\t"),(p=new mp).chr=h[2],p.start=Number.parseInt(h[3])-1,p.flags=Number.parseInt(h[1]),p.readName=h[0],p.strand=!(16&p.flags),p.mq=Number.parseInt(h[4]),p.cigar=h[5],p.fragmentLength=Number.parseInt(h[8]),p.seq=h[9],"*"!==p.chr&&p.isMapped()&&p.chr===i){if(p.start>r)break;if(f=0,(g=Dp(p.cigar)).forEach((function(e){var t=e.len,i=e.ltr;"M"!==i&&"EQ"!==i&&"X"!==i&&"D"!==i&&"N"!==i&&"="!==i||(f+=t)})),p.lengthOnRef=f,!(p.start+f<n)){for(d=h[10],p.qual=[],c=0;c<d.length;c++)p.qual[c]=d.charCodeAt(c)-33;p.tagDict=h.length<11?{}:Tp(h.slice(11)),p.isMateMapped()&&(u=h[6],p.mate={chr:"="===u?p.chr:u,position:Number.parseInt(h[7]),strand:!(32&p.flags)}),this.setPairOrientation(p),(void 0===s||s.pass(p))&&(Mp(p,g),t.push(p))}}},setReaderDefaults:function(e,t){e.filter="function"==typeof t.filter?{pass:t.filter}:new kp(t.filter),t.readgroup&&(e.filter.readgroups=new Set([t.readgroup])),e.alleleFreqThreshold=void 0===t.alleleFreqThreshold?.2:t.alleleFreqThreshold,e.samplingWindowSize=void 0===t.samplingWindowSize?100:t.samplingWindowSize,e.samplingDepth=void 0===t.samplingDepth?500:t.samplingDepth,e.samplingDepth>Np&&(console.log("Warning: attempt to set sampling depth > maximum value of "+Np),e.samplingDepth=Np)},setPairOrientation:function(e){if(e.isMapped()&&e.mate&&e.isMateMapped()&&e.mate.chr===e.chr){var t=e.strand?"F":"R",i=e.mate,n=i.strand?"F":"R",r=" ",s=" ";e.isFirstOfPair()?(r="1",s="2"):e.isSecondOfPair()&&(r="2",s="1");var o=[],a=e.fragmentLength,c=e.end-e.start;if(0===a)a=(e.start<i.position?i.position+c:i.position-c)-e.start;a>0?(o[0]=t,o[1]=r,o[2]=n,o[3]=s):(o[2]=t,o[3]=r,o[0]=n,o[1]=s),e.pairOrientation=o.join("")}}};function Mp(e,t){const i=[];let n,r,s=0,o=e.start;e.scStart=e.start,e.scLengthOnRef=e.lengthOnRef;for(let a of t){let t;switch(a.ltr){case"H":case"P":break;case"S":t=o,e.scLengthOnRef+=a.len,0===i.length&&(e.scStart-=a.len,t-=a.len),i.push(new xp({start:t,seqOffset:s,len:a.len,type:"S"})),s+=a.len;break;case"N":case"D":void 0===r&&(r=[]),r.push({start:o,len:a.len,type:a.ltr}),o+=a.len;break;case"I":void 0===n&&(n=[]),n.push(new xp({start:o,len:a.len,seqOffset:s,type:"I"})),s+=a.len;break;case"M":case"EQ":case"=":case"X":i.push(new xp({start:o,seqOffset:s,len:a.len,type:"M"})),s+=a.len,o+=a.len;break;default:console.log("Error processing cigar element: "+a.len+a.ltr)}}e.blocks=i,e.insertions=n,e.gaps=r}function Rp(e,t){return e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t]}function Dp(e){var t,i,n,r,s,o,a,c,l;for(t=[],i=[],s=null,r=e.length,n=0;n<r;n++)o=e.charAt(n),l=void 0,(l=o.charCodeAt(0))>=48&&l<=57?i.push(o):(a=o,c=Number.parseInt(i.join("")),i=[],null!==s&&s.ltr===a?s.len+=c:(s={len:c,ltr:a},t.push(s)));return t}function Tp(e){var t={};return e.forEach((function(e){var i=e.split(":");t[i[0]]=i[2]})),t}class Lp{chrAliasTable=new Map;constructor(e,t){this.config=e,this.genome=t,this.bamPath=e.url,this.isDataUri=$a(e.url),Bp.setReaderDefaults(this,e)}async readAlignments(e,t,i){if(!this.alignmentCache){let e;if(this.isDataUri){const t=function(e){const t=e.split(","),i=t[0].split(":")[1];let n=t[1];n=i.indexOf("base64")>=0?atob(n):decodeURI(n);const r=new Uint8Array(n.length);for(var s=0;s<n.length;s++)r[s]=n.charCodeAt(s);return r}(this.bamPath);e=gs(t.buffer)}else{e=gs(await Qs.loadArrayBuffer(this.bamPath,qa(this.config)))}this.alignmentCache=this.#v(e)}const n=await this.#y(e),r=this.alignmentCache.queryFeatures(n,t,i),s=new ep(e,t,i,this.config);for(let e of r)s.push(e);return s.finish(),s}#v(e){const t=[];return this.header=Bp.decodeBamHeader(e),Bp.decodeBamRecords(e,this.header.size,t,this.header.chrNames,void 0,0,Number.MAX_SAFE_INTEGER,this.filter),new Zs(t,this.genome)}async#y(e){const t=new Set(this.header.chrNames);if(t.has(e))return e;if(this.chrAliasTable.has(e))return this.chrAliasTable.get(e);if(this.genome){const i=await this.genome.getAliasRecord(e);let n;if(i){const e=Object.keys(i).filter((e=>"start"!==e&&"end"!==e)).map((e=>i[e])).filter((e=>t.has(e)));e.length>0&&(n=e[0])}return this.chrAliasTable.set(e,n),n}return e}}class zp{chrAliasTable=new Map;constructor(e,t){this.config=e,this.genome=t,this.bamPath=e.url,this.baiPath=e.indexURL,Bp.setReaderDefaults(this,e),this._blockLoader=new yh(e)}async readAlignments(e,t,i){const n=await this.#A(e),r=new ep(e,t,i,this.config);if(void 0===n)return r;{const e=(await this.getIndex()).chunksForRange(n,t,i);if(!e||0===e.length)return r;for(let s of e){const e=await this._blockLoader.getData(s.minv,s.maxv);if(Bp.decodeBamRecords(e,s.minv.offset,r,this.header.chrNames,n,t,i,this.filter))break}return r.finish(),r}}async#A(e){if(await this.getHeader(),this.chrAliasTable.has(e)&&void 0===(e=this.chrAliasTable.get(e)))return;let t=this.header.chrToIndex[e];if(void 0===t){const i=await this.genome.getAliasRecord(e);let n;if(i){const e=Object.keys(i).filter((e=>"start"!==e&&"end"!==e)).map((e=>i[e])).filter((e=>void 0!==this.header.chrToIndex[e]));e.length>0&&(n=e[0],t=this.header.chrToIndex[e[0]])}this.chrAliasTable.set(e,n)}return t}async getHeader(){if(!this.header){const e=this.genome,t=await this.getIndex();let i;if(t.firstBlockPosition){const e=qa(this.config,{range:{start:t.firstBlockPosition,size:26}}),n=ms(await Qs.loadArrayBuffer(this.bamPath,e));i=t.firstBlockPosition+n}else i=64e3;const n=qa(this.config,{range:{start:0,size:i}});this.header=await Bp.readHeader(this.bamPath,n,e)}return this.header}async getIndex(){return this.index||(this.index=await gh(this.baiPath,this.config)),this.index}async getChrIndex(){if(this.chrToIndex)return this.chrToIndex;{const e=await this.getHeader();return this.chrToIndex=e.chrToIndex,this.indexToChr=e.chrNames,this.chrNames=new Set(e.chrNames),this.chrToIndex}}}class Hp{constructor(e,t){this.config=e,this.genome=t;const i={};e.sources.sequences.forEach((function(n){const r=t?t.getChromosomeName(n):n;i[r]=function(e,t,i){const n={url:e.sources.url.replace("$CHR",i)};e.sources.indexURL&&(n.indexURL=e.sources.indexURL.replace("$CHR",i));const r=Object.assign(e,n);return new zp(r,t)}(e,t,n)})),this.bamReaders=i,Bp.setReaderDefaults(this,e)}async readAlignments(e,t,i){if(this.bamReaders.hasOwnProperty(e)){let n=this.bamReaders[e];return await n.readAlignments(e,t,i)}return new ep(e,t,i,this.config)}}const Pp=function(e,t){this.config=e,this.genome=t,Bp.setReaderDefaults(this,e)};function Op(){const e=this,t=this.genome;if(this.header)return Promise.resolve(this.header);{const i=this.config.url+"?file="+this.config.alignmentFile+"&options=-b,-H",n=qa(this.config);return Bp.readHeader(i,n,t).then((function(t){return e.header=t,t}))}}Pp.prototype.readAlignments=function(e,t,i){var n=this;return Op.call(n).then((function(r){var s,o;return s=r.chrAliasTable.hasOwnProperty(e)?r.chrAliasTable[e]:e,o=n.config.url+"?reference="+n.config.referenceFile+"&file="+n.config.alignmentFile+"&region="+s+":"+t+"-"+i,Qs.loadString(o,qa(n.config)).then((function(o){var a;return r.chrToIndex[s],a=new ep(e,t,i,n.config),Bp.decodeSamRecords(o,a,s,t,i,n.filter),a}))}))};class Up extends Rh{constructor(e,t){super(e,t),Bp.setReaderDefaults(this,e)}async readAlignments(e,t,i){if(!this.header){const e=gs((await this.readHeaderData()).buffer);this.header=Bp.decodeBamHeader(e,this.genome),this.chrAliasTable=new Map;for(let e of this.header.chrNames)this.chrAliasTable.set(e,this.genome.getChromosomeName(e))}let n=this.chrAliasTable.has(e)?this.chrAliasTable.get(e):e;const r=gs((await this.readData(n,t,i)).buffer);this.header=Bp.decodeBamHeader(r,this.genome);const s=this.header.chrToIndex[e],o=new ep(e,t,i,this.config);return Bp.decodeBamRecords(r,this.header.size,o,this.header.chrNames,s,t,i,this.filter),o.finish(),o}}
/*! For license information please see cram-bundle.js.LICENSE.txt */for(var qp=(()=>{var e={4923:function(e,t,i){var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i(7430)),o=r(i(7392)),a=i(8712),c=i(5931),l=i(9747);function h(e,t){const[i,n,r,s,o,a]=t;e[i]||(e[i]=[]),e[i].push({start:n,span:r,containerStart:s,sliceStart:o,sliceBytes:a})}t.default=class{constructor(e){this.filehandle=(0,c.open)(e.url,e.path,e.filehandle),this._parseCache=new s.default({cache:new o.default({maxSize:1}),fill:(e,t)=>this.parseIndex()})}parseIndex(){const e={};return this.filehandle.readFile().then((e=>31===e[0]&&139===e[1]?(0,a.unzip)(e):e)).then((t=>{if(t.length>4&&21578050===t.readUInt32LE(0))throw new l.CramMalformedError("invalid .crai index file. note: file appears to be a .bai index. this is technically legal but please open a github issue if you need support");let i=[],n="";for(const r of t)if(r>=48&&r<=57||!n&&45===r)n+=String.fromCharCode(r);else if(9===r)i.push(Number.parseInt(n,10)),n="";else if(10===r)i.push(Number.parseInt(n,10)),n="",h(e,i),i=[];else if(13!==r&&32!==r)throw new l.CramMalformedError("invalid .crai index file");return n&&i.push(Number.parseInt(n,10)),6===i.length&&h(e,i),Object.entries(e).forEach((([t,i])=>{e[t]=i.sort(((e,t)=>e.start-t.start||e.span-t.span))})),e}))}getIndex(e={}){return this._parseCache.get("index",null,e.signal)}hasDataForReferenceSequence(e){return n(this,void 0,void 0,(function*(){return!!(yield this.getIndex())[e]}))}getEntriesForRange(e,t,i){return n(this,void 0,void 0,(function*(){const n=(yield this.getIndex())[e];if(!n)return[];const r=e=>{const n=e.start,r=e.start+e.span;return n>i?-1:r<=t?1:0},s=[];for(const e of n)0===r(e)&&s.push(e);return s}))}}},9508:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.parameters=e,this.dataType=t}}},368:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(9747),s=n(i(9508)),o=i(612);class a extends s.default{constructor(e,t){if(super(e,t),"int"!==this.dataType)throw new r.CramUnimplementedError(`${this.dataType} decoding not yet implemented by BETA codec`)}decode(e,t,i,n){return(0,o.getBits)(t.content,n.coreBlock,this.parameters.length)-this.parameters.offset}}t.default=a},8635:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(i(9508)),s=i(400);class o extends r.default{constructor(e,t,i){if(super(e,t),this.instantiateCodec=i,"byteArray"!==t)throw new TypeError(`byteArrayLength does not support data type ${t}`)}decode(e,t,i,n){const r=this._getLengthCodec().decode(e,t,i,n),s=this._getDataCodec(),o=new Uint8Array(r);for(let a=0;a<r;a+=1)o[a]=s.decode(e,t,i,n);return o}_getLengthCodec(){const e=this.parameters.lengthsEncoding;return this.instantiateCodec(e,"int")}_getDataCodec(){const e=this.parameters.valuesEncoding;return this.instantiateCodec(e,"byte")}}t.default=o,"_getLengthCodec _getDataCodec".split(" ").forEach((e=>(0,s.tinyMemoize)(o,e)))},4839:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(9747),s=n(i(9508)),o=i(612);class a extends s.default{constructor(e,t){if(super(e,t),"byteArray"!==t)throw new TypeError(`byteArrayStop codec does not support data type ${t}`)}decode(e,t,i,n){const{blockContentId:s}=this.parameters,o=i[s];if(!o)throw new r.CramMalformedError(`no block found with content ID ${s}`);const a=n.externalBlocks.getCursor(s);return this._decodeByteArray(o,a)}_decodeByteArray(e,t){const i=e.content,{stopByte:n}=this.parameters,r=t.bytePosition;let s=t.bytePosition;for(;i[s]!==n&&s<i.length;){if(s===i.length)throw new o.CramBufferOverrunError("byteArrayStop reading beyond length of data buffer?");s+=1}return t.bytePosition=s+1,i.subarray(r,s)}}t.default=a},8153:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(9747),s=n(i(9508)),o=i(400),a=i(612);class c extends s.default{constructor(e,t){if(super(e,t),"int"===this.dataType)this._decodeData=this._decodeInt;else{if("byte"!==this.dataType)throw new r.CramUnimplementedError(`${this.dataType} decoding not yet implemented by EXTERNAL codec`);this._decodeData=this._decodeByte}}decode(e,t,i,n){const{blockContentId:s}=this.parameters,o=i[s];if(!o)throw new r.CramMalformedError(`no block found with content ID ${s}}`);const a=n.externalBlocks.getCursor(s);return this._decodeData(o,a)}_decodeInt(e,t){const[i,n]=(0,o.parseItf8)(e.content,t.bytePosition);return t.bytePosition=t.bytePosition+n,i}_decodeByte(e,t){if(t.bytePosition>=e.content.length)throw new a.CramBufferOverrunError("attempted to read beyond end of block. this file seems truncated.");return e.content[t.bytePosition++]}}t.default=c},8185:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(9747),s=n(i(9508)),o=i(612);class a extends s.default{constructor(e,t){if(super(e,t),"int"!==this.dataType)throw new r.CramUnimplementedError(`${this.dataType} decoding not yet implemented by GAMMA codec`)}decode(e,t,i,n){let r=1;for(;0===(0,o.getBits)(t.content,n.coreBlock,1);)r+=1;return((0,o.getBits)(t.content,n.coreBlock,r-1)|1<<r-1)-this.parameters.offset}}t.default=a},612:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CramBufferOverrunError=void 0,t.getBits=function(e,t,n){let r=0;if(t.bytePosition+(7-t.bitPosition+n)/8>e.length)throw new i("read error during decoding. the file seems to be truncated.");for(let i=n;i;i--)r<<=1,r|=e[t.bytePosition]>>t.bitPosition&1,t.bitPosition-=1,t.bitPosition<0&&(t.bytePosition+=1),t.bitPosition&=7;return r};class i extends Error{}t.CramBufferOverrunError=i},4341:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(9747),s=n(i(9508)),o=i(612);class a extends s.default{constructor(e,t){if(super(e,t),this.codes={},this.codeBook={},this.sortedCodes=[],this.sortedValuesByBitCode=[],this.sortedBitCodes=[],this.sortedBitLengthsByBitCode=[],this.bitCodeToValue=[],!["byte","int"].includes(this.dataType))throw new TypeError(`${this.dataType} decoding not yet implemented by HUFFMAN_INT codec`);this.buildCodeBook(),this.buildCodes(),this.buildCaches(),0===this.sortedCodes[0].bitLength&&(this._decode=this._decodeZeroLengthCode)}buildCodeBook(){let e=new Array(this.parameters.numCodes);for(let t=0;t<this.parameters.numCodes;t+=1)e[t]={symbol:this.parameters.symbols[t],bitLength:this.parameters.bitLengths[t]};e=e.sort(((e,t)=>e.bitLength-t.bitLength||e.symbol-t.symbol)),this.codeBook={},e.forEach((e=>{this.codeBook[e.bitLength]||(this.codeBook[e.bitLength]=[]),this.codeBook[e.bitLength].push(e.symbol)}))}buildCodes(){this.codes={};let e=0,t=-1;Object.entries(this.codeBook).forEach((([i,n])=>{const s=parseInt(i,10);n.forEach((i=>{const n={bitLength:s,value:i,bitCode:0};t+=1;const o=s-e;if(t<<=o,n.bitCode=t,e+=o,function(e){let t=e-(e>>1)&1431655765;return t=(858993459&t)+(t>>2&858993459),16843009*(t+(t>>4)&252645135)>>24}(t)>s)throw new r.CramMalformedError("Symbol out of range");this.codes[i]=n}))}))}buildCaches(){this.sortedCodes=Object.values(this.codes).sort(((e,t)=>e.bitLength-t.bitLength||e.bitCode-t.bitCode)),this.sortedValuesByBitCode=this.sortedCodes.map((e=>e.value)),this.sortedBitCodes=this.sortedCodes.map((e=>e.bitCode)),this.sortedBitLengthsByBitCode=this.sortedCodes.map((e=>e.bitLength));const e=Math.max(...this.sortedBitCodes);this.bitCodeToValue=new Array(e+1).fill(-1);for(let e=0;e<this.sortedBitCodes.length;e+=1)this.bitCodeToValue[this.sortedCodes[e].bitCode]=e}decode(e,t,i,n){return this._decode(e,t,n.coreBlock)}_decodeZeroLengthCode(){return this.sortedCodes[0].value}_decode(e,t,i){const n=t.content;let s=0,a=0;for(let e=0;e<this.sortedCodes.length;e+=1){const t=this.sortedCodes[e].bitLength;a<<=t-s,a|=(0,o.getBits)(n,i,t-s),s=t;{const i=this.bitCodeToValue[a];if(i>-1&&this.sortedBitLengthsByBitCode[i]===t)return this.sortedValuesByBitCode[i];for(let i=e;this.sortedCodes[i+1].bitLength===t&&i<this.sortedCodes.length;i+=1)e+=1}}throw new r.CramMalformedError("Huffman symbol not found.")}}t.default=a},6524:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.instantiateCodec=function e(t,i){const n=(s="ignore"===i?0:t.codecId,u[s]);var s;if(!n)throw new r.CramUnimplementedError(`no codec implemented for codec ID ${t.codecId}`);return new n(t.parameters,i,e)};const r=i(9747),s=n(i(4341)),o=n(i(8153)),a=n(i(4839)),c=n(i(8635)),l=n(i(368)),h=n(i(8185)),d=n(i(99)),u={1:o.default,3:s.default,4:c.default,5:a.default,6:l.default,7:d.default,9:h.default}},99:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(9747),s=n(i(9508)),o=i(612);class a extends s.default{constructor(e,t){if(super(e,t),"int"!==this.dataType)throw new r.CramUnimplementedError(`${this.dataType} decoding not yet implemented by SUBEXP codec`)}decode(e,t,i,n){let r,s,a=0;for(;(0,o.getBits)(t.content,n.coreBlock,1);)a+=1;return 0===a?(r=this.parameters.K,s=(0,o.getBits)(t.content,n.coreBlock,r)):(r=a+this.parameters.K-1,s=1<<r|(0,o.getBits)(t.content,n.coreBlock,r)),s-this.parameters.offset}}t.default=a},7295:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={CRAM_FLAG_PRESERVE_QUAL_SCORES:1,CRAM_FLAG_DETACHED:2,CRAM_FLAG_MATE_DOWNSTREAM:4,CRAM_FLAG_NO_SEQ:8,CRAM_FLAG_MASK:15,CRAM_M_REVERSE:1,CRAM_M_UNMAP:2,BAM_FPAIRED:1,BAM_FPROPER_PAIR:2,BAM_FUNMAP:4,BAM_FMUNMAP:8,BAM_FREVERSE:16,BAM_FMREVERSE:32,BAM_FREAD1:64,BAM_FREAD2:128,BAM_FSECONDARY:256,BAM_FQCFAIL:512,BAM_FDUP:1024,BAM_FSUPPLEMENTARY:2048,BAM_CMATCH:0,BAM_CINS:1,BAM_CDEL:2,BAM_CREF_SKIP:3,BAM_CSOFT_CLIP:4,BAM_CHARD_CLIP:5,BAM_CPAD:6,BAM_CEQUAL:7,BAM_CDIFF:8,BAM_CBACK:9,BAM_CIGAR_STR:"MIDNSHP:XB",BAM_CIGAR_SHIFT:4,BAM_CIGAR_MASK:15,BAM_CIGAR_TYPE:246183}},7219:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=i(6524),r=i(9747),s={BF:"int",CF:"int",RI:"int",RL:"int",AP:"int",RG:"int",MF:"int",NS:"int",NP:"int",TS:"int",NF:"int",TC:"byte",TN:"int",FN:"int",FC:"byte",FP:"int",BS:"byte",IN:"byteArray",SC:"byteArray",DL:"int",BA:"byte",BB:"byteArray",RS:"int",PD:"int",HC:"int",MQ:"int",RN:"byteArray",QS:"byte",QQ:"byteArray",TL:"int"};t.default=class{constructor(e){this.dataSeriesCodecCache={},this.tagCodecCache={},this.tagEncoding={},this.readNamesIncluded=e.preservation.RN,this.APdelta=e.preservation.AP,this.referenceRequired=!!e.preservation.RR,this.tagIdsDictionary=e.preservation.TD,this.substitutionMatrix=function(e){const t=new Array(5);for(let e=0;e<5;e+=1)t[e]=new Array(4);return t[0][e[0]>>6&3]="C",t[0][e[0]>>4&3]="G",t[0][e[0]>>2&3]="T",t[0][3&e[0]]="N",t[1][e[1]>>6&3]="A",t[1][e[1]>>4&3]="G",t[1][e[1]>>2&3]="T",t[1][3&e[1]]="N",t[2][e[2]>>6&3]="A",t[2][e[2]>>4&3]="C",t[2][e[2]>>2&3]="T",t[2][3&e[2]]="N",t[3][e[3]>>6&3]="A",t[3][e[3]>>4&3]="C",t[3][e[3]>>2&3]="G",t[3][3&e[3]]="N",t[4][e[4]>>6&3]="A",t[4][e[4]>>4&3]="C",t[4][e[4]>>2&3]="G",t[4][3&e[4]]="T",t}(e.preservation.SM),this.dataSeriesEncoding=e.dataSeriesEncoding,this.tagEncoding=e.tagEncoding}getCodecForTag(e){if(!this.tagCodecCache[e]){const t=this.tagEncoding[e];t&&(this.tagCodecCache[e]=(0,n.instantiateCodec)(t,"byteArray"))}return this.tagCodecCache[e]}getTagNames(e){return this.tagIdsDictionary[e]}getCodecForDataSeries(e){let t=this.dataSeriesCodecCache[e];if(void 0===t){const i=this.dataSeriesEncoding[e];if(i){const o=s[e];if(!o)throw new r.CramMalformedError(`data series name ${e} not defined in file compression header`);t=(0,n.instantiateCodec)(i,o),this.dataSeriesCodecCache[e]=t}}return t}toJSON(){const e={};return Object.keys(this).forEach((t=>{t.endsWith("Cache")||(e[t]=this[t])})),e}}},78:function(e,t,i){var n=i(8287).Buffer,r=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(9747),a=i(400),c=s(i(6771)),l=s(i(7219)),h=i(3165);class d{constructor(e,t){this.file=e,this.filePosition=t}getHeader(){return this._readContainerHeader(this.filePosition)}getCompressionHeaderBlock(){return r(this,void 0,void 0,(function*(){const e=yield this.getHeader();if(!(null==e?void 0:e.numRecords))return null;const{majorVersion:t}=yield this.file.getDefinition(),i=(0,h.getSectionParsers)(t),n=yield this.getFirstBlock();if(void 0===n)return;if("COMPRESSION_HEADER"!==n.contentType)throw new o.CramMalformedError(`invalid content type ${n.contentType} in what is supposed to be the compression header block`);const r=(0,a.parseItem)(n.content,i.cramCompressionHeader.parser,0,n.contentPosition);return Object.assign(Object.assign({},n),{parsedContent:r})}))}getFirstBlock(){return r(this,void 0,void 0,(function*(){const e=yield this.getHeader();if(e)return this.file.readBlock(e._endPosition)}))}getCompressionScheme(){return r(this,void 0,void 0,(function*(){const e=yield this.getCompressionHeaderBlock();if(e)return new l.default(e.parsedContent)}))}getSlice(e,t){return new c.default(this,e,t)}_readContainerHeader(e){return r(this,void 0,void 0,(function*(){const{majorVersion:t}=yield this.file.getDefinition(),i=(0,h.getSectionParsers)(t),{cramContainerHeader1:r,cramContainerHeader2:s}=i,{size:o}=yield this.file.stat();if(e>=o)return void console.warn(`position:${e}>=fileSize:${o} in cram container`);const c=n.allocUnsafe(r.maxLength);yield this.file.read(c,0,r.maxLength,e);const l=(0,a.parseItem)(c,r.parser),d=(0,a.itf8Size)(l.numLandmarks);if(e+l.length>=o)return void console.warn(`container header at ${e} indicates that the container has length ${l.length}, which extends beyond the length of the file. Skipping this container.`);const u=n.allocUnsafe(s.maxLength(l.numLandmarks));yield this.file.read(u,0,s.maxLength(l.numLandmarks),e+l._size-d);const f=(0,a.parseItem)(u,s.parser);return this.file.validateChecksums&&void 0!==f.crc32&&(yield this.file.checkCrc32(e,l._size+f._size-d-4,f.crc32,`container header beginning at position ${e}`)),Object.assign(l,f,{_size:l._size+f._size-d,_endPosition:l._size+f._size-d+e})}))}}t.default=d,"getHeader getCompressionHeaderBlock getCompressionScheme".split(" ").forEach((e=>(0,a.tinyMemoize)(d,e)))},6794:function(e,t,i){var n=i(8287).Buffer,r=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(8712),a=s(i(4132)),c=s(i(7392)),l=s(i(6960)),h=s(i(235)),d=i(1307),u=i(9747),f=s(i(9989)),p=i(3165),g=s(i(78)),m=i(5931),w=i(400),b=i(5417);class F{constructor(e){var t;if(this.file=(0,m.open)(e.url,e.path,e.filehandle),this.validateChecksums=!0,this.fetchReferenceSequenceCallback=e.seqFetch,this.options={checkSequenceMD5:e.checkSequenceMD5,cacheSize:null!==(t=e.cacheSize)&&void 0!==t?t:2e4},this.featureCache=new c.default({maxSize:this.options.cacheSize}),function(){const e=new Uint32Array([287454020]),t=new Uint8Array(e.buffer);return 68===t[0]?0:17===t[0]?1:2}()>0)throw new Error("Detected big-endian machine, may be unable to run")}read(e,t,i,n){return this.file.read(e,t,i,n)}stat(){return this.file.stat()}getDefinition(){return r(this,void 0,void 0,(function*(){const{maxLength:e,parser:t}=(0,p.cramFileDefinition)(),i=n.allocUnsafe(e);yield this.file.read(i,0,e,0);const r=t(i).value;if(2!==r.majorVersion&&3!==r.majorVersion)throw new u.CramUnimplementedError(`CRAM version ${r.majorVersion} not supported`);return r}))}getSamHeader(){return r(this,void 0,void 0,(function*(){const e=yield this.getContainerById(0);if(!e)throw new u.CramMalformedError("file contains no containers");const t=yield e.getFirstBlock();if(void 0===t)return(0,b.parseHeaderText)("");const i=t.content,n=i.readInt32LE(0),r=i.toString("utf8",4,4+n);return this.header=r,(0,b.parseHeaderText)(r)}))}getHeaderText(){return r(this,void 0,void 0,(function*(){return yield this.getSamHeader(),this.header}))}getContainerById(e){return r(this,void 0,void 0,(function*(){const{majorVersion:t}=yield this.getDefinition(),i=(0,p.getSectionParsers)(t);let n=i.cramFileDefinition.maxLength;const{size:r}=yield this.file.stat(),{cramContainerHeader1:s}=i;let o;for(let t=0;t<=e;t++){if(n+s.maxLength+8>=r)return;o=this.getContainerAtPosition(n);const i=yield o.getHeader();if(!i)throw new u.CramMalformedError(`container ${e} not found in file`);if(0===t){n=i._endPosition;for(let e=0;e<i.numBlocks;e++){const e=yield this.readBlock(n);if(void 0===e)return;n=e._endPosition}}else n+=i._size+i.length}return o}))}checkCrc32(e,t,i,s){return r(this,void 0,void 0,(function*(){const r=n.allocUnsafe(t);yield this.file.read(r,0,t,e);const o=a.default.unsigned(r);if(o!==i)throw new u.CramMalformedError(`crc mismatch in ${s}: recorded CRC32 = ${i}, but calculated CRC32 = ${o}`)}))}containerCount(){return r(this,void 0,void 0,(function*(){const{majorVersion:e}=yield this.getDefinition(),t=(0,p.getSectionParsers)(e),{size:i}=yield this.file.stat(),{cramContainerHeader1:n}=t;let r=0,s=t.cramFileDefinition.maxLength;for(;s+n.maxLength+8<i;){const e=yield this.getContainerAtPosition(s).getHeader();if(!e)break;if(0===r){s=e._endPosition;for(let t=0;t<e.numBlocks;t++){const e=yield this.readBlock(s);if(void 0===e)return;s=e._endPosition}}else s+=e._size+e.length;r+=1}return r}))}getContainerAtPosition(e){return new g.default(this,e)}readBlockHeader(e){return r(this,void 0,void 0,(function*(){const{majorVersion:t}=yield this.getDefinition(),i=(0,p.getSectionParsers)(t),{cramBlockHeader:r}=i,{size:s}=yield this.file.stat();if(e+r.maxLength>=s)return;const o=n.allocUnsafe(r.maxLength);return yield this.file.read(o,0,r.maxLength,e),(0,w.parseItem)(o,r.parser,0,e)}))}_parseSection(e,t){return r(this,arguments,void 0,(function*(e,t,i=e.maxLength,r=void 0){let s;if(r)s=r;else{const{size:e}=yield this.file.stat();if(t+i>=e)return;s=n.allocUnsafe(i),yield this.file.read(s,0,i,t)}const o=(0,w.parseItem)(s,e.parser,0,t);if(o._size!==i)throw new u.CramMalformedError(`section read error: requested size ${i} does not equal parsed size ${o._size}`);return o}))}_uncompress(e,t,i){return r(this,void 0,void 0,(function*(){if("gzip"===e)(0,o.unzip)(t).copy(i);else if("bzip2"===e){const e=h.default.array(t);let r,s=h.default.header(e),o=0;do{r=h.default.decompress(e,s),-1!=r&&(n.from(r).copy(i,o),o+=r.length,s-=r.length)}while(-1!=r)}else if("lzma"===e){const e=new Response(new d.XzReadableStream((r=t,new ReadableStream({start(e){e.enqueue(r),e.close()}}))));n.from(yield e.arrayBuffer()).copy(i)}else if("rans"===e)(0,f.default)(t,i);else if("rans4x16"===e)l.default.r4x16_uncompress(t,i);else if("arith"===e)l.default.arith_uncompress(t,i);else if("fqzcomp"===e)l.default.fqzcomp_uncompress(t,i);else{if("tok3"!==e)throw new u.CramUnimplementedError(`${e} decompression not yet implemented`);l.default.tok3_uncompress(t,i)}var r}))}readBlock(e){return r(this,void 0,void 0,(function*(){const{majorVersion:t}=yield this.getDefinition(),i=(0,p.getSectionParsers)(t),r=yield this.readBlockHeader(e);if(void 0===r)return;const s=r._endPosition,o=n.allocUnsafe(r.uncompressedSize),a=Object.assign(Object.assign({},r),{_endPosition:s,contentPosition:s,content:o});if("raw"!==r.compressionMethod){const e=n.allocUnsafe(r.compressedSize);yield this.read(e,0,r.compressedSize,s),yield this._uncompress(r.compressionMethod,e,o)}else yield this.read(o,0,r.uncompressedSize,s);if(t>=3){const t=yield this._parseSection(i.cramBlockCrc32,s+r.compressedSize);if(void 0===t)return;a.crc32=t.crc32,this.validateChecksums&&(yield this.checkCrc32(e,r._size+r.compressedSize,t.crc32,"block data")),a._endPosition=t._endPosition,a._size=a.compressedSize+i.cramBlockCrc32.maxLength}else a._endPosition=s+a.compressedSize,a._size=a.compressedSize;return a}))}}t.default=F,"getDefinition getSectionParsers getSamHeader".split(" ").forEach((e=>(0,w.tinyMemoize)(F,e)))},7390:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.CramRecord=void 0;var r=i(8401);Object.defineProperty(t,"CramRecord",{enumerable:!0,get:function(){return n(r).default}});var s=i(6794);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(s).default}})},8401:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MateFlagsDecoder=t.CramFlagsDecoder=t.BamFlagsDecoder=t.MateFlags=t.CramFlags=t.BamFlags=void 0;const r=n(i(7295)),s={a:0,A:0,c:1,C:1,g:2,G:2,t:3,T:3,n:4,N:4};function o(e){const t={};for(const[i,n]of e)t["is"+n]=e=>!!(e&i),t["set"+n]=e=>e|i;return t}t.BamFlags=[[1,"Paired"],[2,"ProperlyPaired"],[4,"SegmentUnmapped"],[8,"MateUnmapped"],[16,"ReverseComplemented"],[32,"MateReverseComplemented"],[64,"Read1"],[128,"Read2"],[256,"Secondary"],[512,"FailedQc"],[1024,"Duplicate"],[2048,"Supplementary"]],t.CramFlags=[[1,"PreservingQualityScores"],[2,"Detached"],[4,"WithMateDownstream"],[8,"DecodeSequenceAsStar"]],t.MateFlags=[[1,"OnNegativeStrand"],[2,"Unmapped"]],t.BamFlagsDecoder=o(t.BamFlags),t.CramFlagsDecoder=o(t.CramFlags),t.MateFlagsDecoder=o(t.MateFlags),t.default=class{constructor({flags:e,cramFlags:t,readLength:i,mappingQuality:n,lengthOnRef:r,qualityScores:s,mateRecordNumber:o,readBases:a,readFeatures:c,mateToUse:l,readGroupId:h,readName:d,sequenceId:u,uniqueId:f,templateSize:p,alignmentStart:g,tags:m}){this.flags=e,this.cramFlags=t,this.readLength=i,this.mappingQuality=n,this.lengthOnRef=r,this.qualityScores=s,a&&(this.readBases=a),this.readGroupId=h,this.readName=d,this.sequenceId=u,this.uniqueId=f,this.templateSize=p,this.alignmentStart=g,this.tags=m,c&&(this.readFeatures=c),l&&(this.mate={flags:l.mateFlags,readName:l.mateReadName,sequenceId:l.mateSequenceId,alignmentStart:l.mateAlignmentStart}),o&&(this.mateRecordNumber=o)}isPaired(){return!!(this.flags&r.default.BAM_FPAIRED)}isProperlyPaired(){return!!(this.flags&r.default.BAM_FPROPER_PAIR)}isSegmentUnmapped(){return!!(this.flags&r.default.BAM_FUNMAP)}isMateUnmapped(){return!!(this.flags&r.default.BAM_FMUNMAP)}isReverseComplemented(){return!!(this.flags&r.default.BAM_FREVERSE)}isMateReverseComplemented(){return!!(this.flags&r.default.BAM_FMREVERSE)}isRead1(){return!!(this.flags&r.default.BAM_FREAD1)}isRead2(){return!!(this.flags&r.default.BAM_FREAD2)}isSecondary(){return!!(this.flags&r.default.BAM_FSECONDARY)}isFailedQc(){return!!(this.flags&r.default.BAM_FQCFAIL)}isDuplicate(){return!!(this.flags&r.default.BAM_FDUP)}isSupplementary(){return!!(this.flags&r.default.BAM_FSUPPLEMENTARY)}isDetached(){return!!(this.cramFlags&r.default.CRAM_FLAG_DETACHED)}hasMateDownStream(){return!!(this.cramFlags&r.default.CRAM_FLAG_MATE_DOWNSTREAM)}isPreservingQualityScores(){return!!(this.cramFlags&r.default.CRAM_FLAG_PRESERVE_QUAL_SCORES)}isUnknownBases(){return!!(this.cramFlags&r.default.CRAM_FLAG_NO_SEQ)}getReadBases(){if(!this.readBases&&this._refRegion){const e=function(e,t){if(!e.lengthOnRef&&!e.readLength)return null;if(e.isUnknownBases())return null;const i=e.alignmentStart-t.start;if(!e.readFeatures)return t.seq.slice(i,i+(e.lengthOnRef||0)).toUpperCase();let n="",r=i,s=0;for(;n.length<e.readLength;)if(s<e.readFeatures.length){const i=e.readFeatures[s];if("Q"===i.code||"q"===i.code)s+=1;else if(i.pos===n.length+1)if(s+=1,"b"===i.code){const e=i.data;n+=e,r+=e.length}else"B"===i.code?(n+=i.data[0],r+=1):"X"===i.code?(n+=i.sub,r+=1):"I"===i.code?n+=i.data:"D"===i.code?r+=i.data:"i"===i.code?n+=i.data:"N"===i.code?r+=i.data:"S"===i.code?n+=i.data:"P"===i.code||i.code;else if(s<e.readFeatures.length){const i=t.seq.slice(r,r+e.readFeatures[s].pos-n.length-1);n+=i,r+=i.length}}else{const i=t.seq.slice(r,r+e.readLength-n.length);n+=i,r+=i.length}return n.toUpperCase()}(this,this._refRegion);e&&(this.readBases=e)}return this.readBases}getPairOrientation(){if(!this.isSegmentUnmapped()&&this.isPaired()&&!this.isMateUnmapped()&&this.mate&&this.sequenceId===this.mate.sequenceId){const e=this.isReverseComplemented()?"R":"F",t=this.isMateReverseComplemented()?"R":"F";let i=" ",n=" ";this.isRead1()?(i="1",n="2"):this.isRead2()&&(i="2",n="1");const r=[];let s=this.templateLength||this.templateSize;if(void 0===s)throw new Error("One of templateSize and templateLength must be set");return this.alignmentStart>this.mate.alignmentStart&&s>0&&(s=-s),s>0?(r[0]=e,r[1]=i,r[2]=t,r[3]=n):(r[2]=e,r[3]=i,r[0]=t,r[1]=n),r.join("")}return null}addReferenceSequence(e,t){this.readFeatures&&this.readFeatures.forEach((i=>{"X"===i.code&&function(e,t,i,n){if(!t)return;const r=n.refPos-t.start,o=t.seq.charAt(r);o&&(n.ref=o);let a=s[o];void 0===a&&(a=4);const c=i.substitutionMatrix[a][n.data];c&&(n.sub=c)}(0,e,t,i)})),!this.readBases&&e.start<=this.alignmentStart&&e.end>=this.alignmentStart+(this.lengthOnRef||this.readLength)-1&&(this._refRegion=e)}toJSON(){const e={};return Object.keys(this).forEach((t=>{t.startsWith("_")||(e[t]=this[t])})),e.readBases=this.getReadBases(),e}}},3165:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cramFileDefinition=r,t.cramBlockHeader=s,t.cramBlockCrc32=o,t.cramTagDictionary=c,t.cramPreservationMap=l,t.isMappedSliceHeader=function(e){return"number"==typeof e.refSeqId},t.getSectionParsers=function(e){return{cramFileDefinition:r(),cramBlockHeader:s(),cramBlockCrc32:o(),cramDataSeriesEncodingMap:p(),cramTagEncodingMap:g(),cramCompressionHeader:{parser:(e,t)=>{const{value:i,offset:n}=l().parser(e,t);t=n;const{value:r,offset:s}=p().parser(e,t);t=s;const{value:o,offset:a}=g().parser(e,t);return t=a,{value:{dataSeriesEncoding:h(r),preservation:h(i),tagEncoding:h(o)},offset:t}}},cramEncoding:{parser:(e,t)=>f(e,t)},cramUnmappedSliceHeader:d(e),cramMappedSliceHeader:u(e),cramContainerHeader1:m(e),cramContainerHeader2:w(e)}};const n=i(400);function r(){return{parser:(e,t=0)=>{const i=e,n=new DataView(i.buffer,i.byteOffset,i.length);let r=0;const s=e.subarray(r,r+4).toString();r+=4;const o=n.getUint8(r);r+=1;const a=n.getUint8(r);r+=1;const c=i.subarray(r,r+20).toString().replaceAll("\0","");return r+=20,{value:{magic:s,majorVersion:o,minorVersion:a,fileId:c},offset:r}},maxLength:26}}function s(){return{parser:(e,t=0)=>{const i=e,r=new DataView(i.buffer,i.byteOffset,i.length);let s=0;const o=r.getUint8(s),a=["raw","gzip","bzip2","lzma","rans","rans4x16","arith","fqzcomp","tok3"][o];if(!a)throw new Error(`compression method number ${o} not implemented`);s+=1;const c=r.getUint8(s),l=["FILE_HEADER","COMPRESSION_HEADER","MAPPED_SLICE_HEADER","UNMAPPED_SLICE_HEADER","EXTERNAL_DATA","CORE_DATA"][c];if(!l)throw new Error(`invalid block content type id ${c}`);s+=1;const[h,d]=(0,n.parseItf8)(e,s);s+=d;const[u,f]=(0,n.parseItf8)(e,s);s+=f;const[p,g]=(0,n.parseItf8)(e,s);return s+=g,{offset:s,value:{uncompressedSize:p,compressedSize:u,contentId:h,contentType:l,compressionMethod:a}}},maxLength:17}}function o(){return{parser:(e,t)=>{const i=e,n=new DataView(i.buffer,i.byteOffset,i.length).getUint32(t,!0);return{offset:t+=4,value:{crc32:n}}},maxLength:4}}function a(e,t,i){const n=e.toString("utf8",t,i),r=[];for(let e=0;e<n.length;e+=3)r.push(n.slice(e,e+3));return r}function c(){return{parser:(e,t)=>{const[i,r]=(0,n.parseItf8)(e,t);t+=r;const s=e.subarray(t,t+i);t+=i;const o=[];let c=0,l=0;for(;l<s.length;l++)s[l]||(o.push(a(s,c,l)),c=l+1);return l>c&&o.push(a(s,c,l)),{value:{size:i,ents:o},offset:t}}}}function l(){return{parser:(e,t)=>{const i=e,r=new DataView(i.buffer,i.byteOffset,i.length),[s,o]=(0,n.parseItf8)(e,t);t+=o;const[a,l]=(0,n.parseItf8)(e,t);t+=l;const h=[];for(let i=0;i<a;i++){const i=String.fromCharCode(e[t])+String.fromCharCode(e[t+1]);if(t+=2,"MI"===i||"UI"===i||"PI"===i||"RN"===i||"AP"===i||"RR"===i)h.push({key:i,value:!!r.getUint8(t)}),t+=1;else if("SM"===i)h.push({key:i,value:[r.getUint8(t),r.getUint8(t+1),r.getUint8(t+2),r.getUint8(t+3),r.getUint8(t+4)]}),t+=5;else{if("TD"!==i)throw new Error(`unknown key ${i}`);{const{offset:n,value:r}=c().parser(e,t);h.push({key:i,value:r.ents}),t=n}}}return{value:{mapSize:s,mapCount:a,ents:h},offset:t}}}}function h(e){const t={};for(const{key:i,value:n}of e.ents)t[i]&&console.warn(`duplicate key ${i} in map`),t[i]=n;return t}function d(e){return{parser:(t,i)=>{const[r,s]=(0,n.parseItf8)(t,i);i+=s;let o=0;if(e>=3){const[e,r]=(0,n.parseLtf8)(t,i);i+=r,o=e}else if(2===e){const[e,r]=(0,n.parseItf8)(t,i);i+=r,o=e}else console.warn("recordCounter=0");const[a,c]=(0,n.parseItf8)(t,i);i+=c;const[l,h]=(0,n.parseItf8)(t,i);i+=h;const d=[];for(let e=0;e<l;e++){const[e,r]=(0,n.parseItf8)(t,i);i+=r,d.push(e)}let u;return e>=2&&(u=[...t.subarray(i,i+16)],i+=16),{value:{recordCounter:o,md5:u,contentIds:d,numContentIds:l,numBlocks:a,numRecords:r},offset:i}},maxLength:e=>40+5*e}}function u(e){return{parser:(t,i)=>{const[r,s]=(0,n.parseItf8)(t,i);i+=s;const[o,a]=(0,n.parseItf8)(t,i);i+=a;const[c,l]=(0,n.parseItf8)(t,i);i+=l;const[h,d]=(0,n.parseItf8)(t,i);i+=d;let u=0;if(e>=3){const[e,r]=(0,n.parseLtf8)(t,i);i+=r,u=e}else if(2===e){const[e,r]=(0,n.parseItf8)(t,i);i+=r,u=e}else console.warn("majorVersion is <2, recordCounter set to 0");const[f,p]=(0,n.parseItf8)(t,i);i+=p;const[g,m]=(0,n.parseItf8)(t,i);i+=m;const w=[];for(let e=0;e<g;e++){const[e,r]=(0,n.parseItf8)(t,i);i+=r,w.push(e)}const[b,F]=(0,n.parseItf8)(t,i);let v;return i+=F,e>=2&&(v=[...t.subarray(i,i+16)],i+=16),{value:{md5:v,numBlocks:f,numRecords:h,numContentIds:g,refSeqSpan:c,refSeqId:r,refSeqStart:o,recordCounter:u,refBaseBlockId:b,contentIds:w},offset:i}},maxLength:e=>60+5*e}}function f(e,t){const i=e,r=new DataView(i.buffer,i.byteOffset,i.length),[s,o]=(0,n.parseItf8)(e,t);t+=o;const[a,c]=(0,n.parseItf8)(e,t);t+=c;const l={};if(0===s);else if(1===s){const[i,r]=(0,n.parseItf8)(e,t);l.blockContentId=i,t+=r}else if(2===s){const[i,r]=(0,n.parseItf8)(e,t);l.offset=i,t+=r;const[s,o]=(0,n.parseItf8)(e,t);l.M=s,t+=o}else if(3===s){const i=(0,n.parseItf8)(e,t),r=i[0];t+=i[1];const s=[];for(let i=0;i<r;i++){const i=(0,n.parseItf8)(e,t);s.push(i[0]),t+=i[1]}l.symbols=s;const o=(0,n.parseItf8)(e,t),a=i[0];l.numLengths=a,l.numCodes=r,l.numLengths=a,t+=o[1];const c=[];for(let i=0;i<a;i++){const i=(0,n.parseItf8)(e,t);t+=i[1],c.push(i[0])}l.bitLengths=c}else if(4===s){const{value:i,offset:n}=f(e,t);l.lengthsEncoding=i,t=n;const{value:r,offset:s}=f(e,t);l.valuesEncoding=r,t=s}else if(5===s){l.stopByte=r.getUint8(t),t+=1;const[i,s]=(0,n.parseItf8)(e,t);l.blockContentId=i,t+=s}else if(6===s){const[i,r]=(0,n.parseItf8)(e,t);l.offset=i,t+=r;const[s,o]=(0,n.parseItf8)(e,t);l.length=s,t+=o}else if(7===s){const[i,r]=(0,n.parseItf8)(e,t);l.offset=i,t+=r;const[s,o]=(0,n.parseItf8)(e,t);l.K=s,t+=o}else if(8===s){const[i,r]=(0,n.parseItf8)(e,t);l.offset=i,t+=r;const[s,o]=(0,n.parseItf8)(e,t);l.log2m=s,t+=o}else{if(9!==s)throw new Error(`unknown codecId ${s}`);{const[i,r]=(0,n.parseItf8)(e,t);l.offset=i,t+=r}}return{value:{codecId:s,parametersBytes:a,parameters:l},offset:t}}function p(){return{parser:(e,t)=>{const[i,r]=(0,n.parseItf8)(e,t);t+=r;const[s,o]=(0,n.parseItf8)(e,t);t+=o;const a=[];for(let i=0;i<s;i++){const i=String.fromCharCode(e[t])+String.fromCharCode(e[t+1]);t+=2;const{value:n,offset:r}=f(e,t);t=r,a.push({key:i,value:n})}return{value:{mapSize:i,ents:a,mapCount:s},offset:t}}}}function g(){return{parser:(e,t)=>{const[i,r]=(0,n.parseItf8)(e,t);t+=r;const[s,o]=(0,n.parseItf8)(e,t);t+=o;const a=[];for(let i=0;i<s;i++){const[i,r]=(0,n.parseItf8)(e,t);t+=r;const s=String.fromCharCode(i>>16&255)+String.fromCharCode(i>>8&255)+String.fromCharCode(255&i),{value:o,offset:c}=f(e,t);t=c,a.push({key:s,value:o})}return{value:{mapSize:i,ents:a,mapCount:s},offset:t}}}}function m(e){return{maxLength:52,parser:(t,i)=>{const r=t,s=new DataView(r.buffer,r.byteOffset,r.length).getInt32(i,!0);i+=4;const[o,a]=(0,n.parseItf8)(t,i);i+=a;const[c,l]=(0,n.parseItf8)(t,i);i+=l;const[h,d]=(0,n.parseItf8)(t,i);i+=d;const[u,f]=(0,n.parseItf8)(t,i);i+=f;let p,g=0;if(e>=3){const[e,r]=(0,n.parseLtf8)(t,i);g=e,i+=r}else if(2===e){const[e,r]=(0,n.parseItf8)(t,i);g=e,i+=r}else console.warn("setting recordCounter=0");if(e>1){const[e,r]=(0,n.parseLtf8)(t,i);p=e,i+=r}const[m,w]=(0,n.parseItf8)(t,i);i+=w;const[b,F]=(0,n.parseItf8)(t,i);return{value:{length:s,refSeqId:o,refSeqStart:c,alignmentSpan:h,numBlocks:m,numLandmarks:b,numBases:p,recordCounter:g,numRecords:u},offset:i+=F}}}}function w(e){return{parser:(t,i)=>{const r=t,s=new DataView(r.buffer,r.byteOffset,r.length),[o,a]=(0,n.parseItf8)(t,i);i+=a;const c=[];for(let e=0;e<o;e++){const[e,r]=(0,n.parseItf8)(t,i);i+=r,c.push(e)}let l;return e>=3&&(l=s.getUint32(i,!0),i+=4),{value:Object.assign(Object.assign({},void 0===l?{}:{crc32:l}),{numLandmarks:o,landmarks:c}),offset:i}},maxLength:e=>5+5*e+4}}},6484:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,n,r,h,d,u,f){let p=t("BF");const g=t("CF");if(!(0,a.isMappedSliceHeader)(n.parsedContent))throw new Error("slice header not mapped");const m=u>1&&-2===n.parsedContent.refSeqId?t("RI"):n.parsedContent.refSeqId,w=t("RL");let b=t("AP");i.APdelta&&(b+=d.lastAlignmentStart),d.lastAlignmentStart=b;const F=t("RG");let v,y,A,C;if(i.readNamesIncluded&&(v=c(t("RN"))),o.CramFlagsDecoder.isDetached(g)){const e=t("MF");let n;i.readNamesIncluded||(n=c(t("RN")),v=n);const r=t("NS"),s=t("NP");(e||r>-1)&&(y={mateFlags:e,mateSequenceId:r,mateAlignmentStart:s,mateReadName:n}),A=t("TS"),o.MateFlagsDecoder.isUnmapped(e)&&(p=o.BamFlagsDecoder.setMateUnmapped(p)),o.MateFlagsDecoder.isOnNegativeStrand(e)&&(p=o.BamFlagsDecoder.setMateReverseComplemented(p))}else o.CramFlagsDecoder.isWithMateDownstream(g)&&(C=t("NF")+f+1);const _=t("TL");if(_<0)throw new s.CramMalformedError("invalid TL index");const x={},k=i.getTagNames(_),I=k.length;for(let t=0;t<I;t+=1){const n=k[t],o=n.slice(0,2),a=n.slice(2,3),c=i.getCodecForTag(n);if(!c)throw new s.CramMalformedError(`no codec defined for auxiliary tag ${n}`);const u=c.decode(e,r,h,d);x[o]=l(a,u)}let S,E,N,B,M;if(o.BamFlagsDecoder.isSegmentUnmapped(p))if(o.CramFlagsDecoder.isDecodeSequenceAsStar(g))M=null,B=null;else{const e=new Array(w);for(let i=0;i<e.length;i+=1)e[i]=t("BA");if(M=String.fromCharCode(...e),o.CramFlagsDecoder.isPreservingQualityScores(g)){B=new Array(w);for(let i=0;i<e.length;i+=1)B[i]=t("QS")}}else{const e=t("FN");if(e&&(S=function(e,t,i,n,r){let o=0,a=e-1;const c=new Array(t);function l([e,t]){const n=i(t);if("character"===e)return String.fromCharCode(n);if("string"===e){let e="";for(let t=0;t<n.byteLength;t++)e+=String.fromCharCode(n[t]);return e}return"numArray"===e?n.toArray():n}for(let e=0;e<t;e+=1){const t=String.fromCharCode(i("FC")),n=i("FP"),h={B:["character","BA"],S:["string",r>1?"SC":"IN"],X:["number","BS"],D:["number","DL"],I:["string","IN"],i:["character","BA"],b:["string","BB"],q:["numArray","QQ"],Q:["number","QS"],H:["number","HC"],P:["number","PD"],N:["number","RS"]}[t];if(!h)throw new s.CramMalformedError(`invalid read feature code "${t}"`);let d=l(h);const u={B:["number","QS"]}[t];u&&(d=[d,l(u)]),o+=n;const f=o;a+=n;const p=a;"D"===t||"N"===t?a+=d:"I"===t||"S"===t?a-=d.length:"i"===t&&(a-=1),c[e]={code:t,pos:f,refPos:p,data:d}}return c}(b,e,t,0,u)),E=w,S)for(const{code:e,data:t}of S)"D"===e||"N"===e?E+=t:"I"===e||"S"===e?E-=t.length:"i"===e&&(E-=1);if(Number.isNaN(E)&&(console.warn(`${v||`${m}:${b}`} record has invalid read features`),E=w),N=t("MQ"),o.CramFlagsDecoder.isPreservingQualityScores(g)){B=new Array(w);for(let e=0;e<B.length;e++)B[e]=t("QS")}}return{readLength:w,sequenceId:m,cramFlags:g,flags:p,alignmentStart:b,readGroupId:F,readName:v,mateToUse:y,templateSize:A,mateRecordNumber:C,readFeatures:S,lengthOnRef:E,mappingQuality:N,qualityScores:B,readBases:M,tags:x}};const r=n(i(8570)),s=i(9747),o=i(8401),a=i(3165);function c(e){let t="";for(let i=0;i<e.length&&0!==e[i];i++)t+=String.fromCharCode(e[i]);return t}function l(e,t){if("Z"===e)return c(t);if("A"===e)return String.fromCharCode(t[0]);if("I"===e)return r.default.fromBytesLE(t).toNumber();if("i"===e)return new Int32Array(t.buffer)[0];if("s"===e)return new Int16Array(t.buffer)[0];if("S"===e)return new Uint16Array(t.buffer)[0];if("c"===e)return new Int8Array(t.buffer)[0];if("C"===e)return t[0];if("f"===e)return new Float32Array(t.buffer)[0];if("H"===e)return Number.parseInt(c(t).replace(/^0x/,""),16);if("B"===e)return function(e){const t=String.fromCharCode(e[0]),i=Int32Array.from(e.slice(1))[0],n=new Array(i);if(e=e.slice(5),"c"===t){const t=new Int8Array(e.buffer);for(let e=0;e<i;e+=1)n[e]=t[e]}else if("C"===t){const t=new Uint8Array(e.buffer);for(let e=0;e<i;e+=1)n[e]=t[e]}else if("s"===t){const t=new Int16Array(e.buffer);for(let e=0;e<i;e+=1)n[e]=t[e]}else if("S"===t){const t=new Uint16Array(e.buffer);for(let e=0;e<i;e+=1)n[e]=t[e]}else if("i"===t){const t=new Int32Array(e.buffer);for(let e=0;e<i;e+=1)n[e]=t[e]}else if("I"===t){const t=new Uint32Array(e.buffer);for(let e=0;e<i;e+=1)n[e]=t[e]}else{if("f"!==t)throw new Error("unknown type: "+t);{const t=new Float32Array(e.buffer);for(let e=0;e<i;e+=1)n[e]=t[e]}}return n}(t);throw new s.CramMalformedError(`Unrecognized tag type ${e}`)}},6771:function(e,t,i){var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(9747),o=i(400),a=r(i(7295)),c=r(i(6484)),l=r(i(8401)),h=i(3165),d=i(612);function u(e,t,i,n){if(!n)throw new s.CramMalformedError("could not resolve intra-slice mate pairs, file seems truncated or malformed");const r=!!(n.mate||void 0!==n.mateRecordNumber&&n.mateRecordNumber!==t);i.readName||(i.readName=String(i.uniqueId),n.readName=i.readName),i.mate={sequenceId:n.sequenceId,alignmentStart:n.alignmentStart,uniqueId:n.uniqueId},n.readName&&(i.mate.readName=n.readName),n.mate||void 0!==n.mateRecordNumber||(n.mate={sequenceId:i.sequenceId,alignmentStart:i.alignmentStart,uniqueId:i.uniqueId},i.readName&&(n.mate.readName=i.readName)),i.flags|=a.default.BAM_FPAIRED,n.flags&a.default.BAM_FUNMAP&&(i.flags|=a.default.BAM_FMUNMAP),i.flags&a.default.BAM_FUNMAP&&(n.flags|=a.default.BAM_FMUNMAP),n.flags&a.default.BAM_FREVERSE&&(i.flags|=a.default.BAM_FMREVERSE),i.flags&a.default.BAM_FREVERSE&&(n.flags|=a.default.BAM_FMREVERSE),void 0===i.templateLength&&(r?function(e,t,i){const n=function t(i){const n=[i];if(void 0!==i.mateRecordNumber&&i.mateRecordNumber>=0){const r=e[i.mateRecordNumber];if(!r)throw new s.CramMalformedError("intra-slice mate record not found, this file seems malformed");n.push(...t(r))}return n}(i),r=n.map((e=>e.alignmentStart)),o=n.map((e=>e.alignmentStart+e.readLength-1)),a=Math.max(...o)-Math.min(...r)+1;a>=0&&n.forEach((e=>{if(void 0!==e.templateLength)throw new s.CramMalformedError("mate pair group has some members that have template lengths already, this file seems malformed");e.templateLength=a}))}(e,0,i):function(e,t){const i=Math.min(e.alignmentStart,t.alignmentStart),n=Math.max(e.alignmentStart+e.readLength-1,t.alignmentStart+t.readLength-1)-i+1;e.templateLength=n,t.templateLength=n}(i,n)),delete i.mateRecordNumber}class f{constructor(e,t,i){this.container=e,this.containerPosition=t,this.file=e.file}getHeader(){return n(this,void 0,void 0,(function*(){const{majorVersion:e}=yield this.file.getDefinition(),t=(0,h.getSectionParsers)(e),i=yield this.container.getHeader();if(!i)throw new Error("wow");const n=yield this.file.readBlock(i._endPosition+this.containerPosition);if(void 0===n)throw new Error("block header undefined");if("MAPPED_SLICE_HEADER"===n.contentType){const e=(0,o.parseItem)(n.content,t.cramMappedSliceHeader.parser,0,i._endPosition);return Object.assign(Object.assign({},n),{parsedContent:e})}if("UNMAPPED_SLICE_HEADER"===n.contentType){const e=(0,o.parseItem)(n.content,t.cramUnmappedSliceHeader.parser,0,i._endPosition);return Object.assign(Object.assign({},n),{parsedContent:e})}throw new s.CramMalformedError(`error reading slice header block, invalid content type ${n.contentType}`)}))}getBlocks(){return n(this,void 0,void 0,(function*(){const e=yield this.getHeader();let t=e._endPosition;const i=new Array(e.parsedContent.numBlocks);for(let e=0;e<i.length;e++){const n=yield this.file.readBlock(t);if(void 0===n)throw new Error("block undefined");i[e]=n,t=i[e]._endPosition}return i}))}getCoreDataBlock(){return n(this,void 0,void 0,(function*(){return(yield this.getBlocks())[0]}))}_getBlocksContentIdIndex(){return n(this,void 0,void 0,(function*(){const e=yield this.getBlocks(),t={};return e.forEach((e=>{"EXTERNAL_DATA"===e.contentType&&(t[e.contentId]=e)})),t}))}getBlockByContentId(e){return n(this,void 0,void 0,(function*(){return(yield this._getBlocksContentIdIndex())[e]}))}getReferenceRegion(){return n(this,void 0,void 0,(function*(){const e=(yield this.getHeader()).parsedContent;if(!(0,h.isMappedSliceHeader)(e))throw new Error("slice header not mapped");if(e.refSeqId<0)return;const t=yield this.container.getCompressionScheme();if(void 0===t)throw new Error("compression scheme undefined");if(e.refBaseBlockId>=0){const t=yield this.getBlockByContentId(e.refBaseBlockId);if(!t)throw new s.CramMalformedError("embedded reference specified, but reference block does not exist");return{seq:t.data.toString("utf8"),start:e.refSeqStart,end:e.refSeqStart+e.refSeqSpan-1,span:e.refSeqSpan}}if(t.referenceRequired||this.file.fetchReferenceSequenceCallback){if(!this.file.fetchReferenceSequenceCallback)throw new Error("reference sequence not embedded, and seqFetch callback not provided, cannot fetch reference sequence");const t=yield this.file.fetchReferenceSequenceCallback(e.refSeqId,e.refSeqStart,e.refSeqStart+e.refSeqSpan-1);if(t.length!==e.refSeqSpan)throw new s.CramArgumentError("seqFetch callback returned a reference sequence of the wrong length");return{seq:t,start:e.refSeqStart,end:e.refSeqStart+e.refSeqSpan-1,span:e.refSeqSpan}}}))}getAllRecords(){return this.getRecords((()=>!0))}_fetchRecords(){return n(this,void 0,void 0,(function*(){var e,t;const{majorVersion:i}=yield this.file.getDefinition(),n=yield this.container.getCompressionScheme();if(void 0===n)throw new Error("compression scheme undefined");const r=yield this.getHeader();if(void 0===r)throw new Error("slice header undefined");const a=yield this._getBlocksContentIdIndex();if(i>1&&this.file.options.checkSequenceMD5&&(0,h.isMappedSliceHeader)(r.parsedContent)&&r.parsedContent.refSeqId>=0&&"0000000000000000"!==(null===(e=r.parsedContent.md5)||void 0===e?void 0:e.join(""))){const e=yield this.getReferenceRegion();if(e){const{seq:i,start:n,end:a}=e,c=(0,o.sequenceMD5)(i),l=null===(t=r.parsedContent.md5)||void 0===t?void 0:t.map((e=>(e<16?"0":"")+e.toString(16))).join("");if(c!==l)throw new s.CramMalformedError(`MD5 checksum reference mismatch for ref ${r.parsedContent.refSeqId} pos ${n}..${a}. recorded MD5: ${l}, calculated MD5: ${c}`)}}const f=yield this.getCoreDataBlock(),p={lastAlignmentStart:(0,h.isMappedSliceHeader)(r.parsedContent)?r.parsedContent.refSeqStart:0,coreBlock:{bitPosition:7,bytePosition:0},externalBlocks:{map:new Map,getCursor(e){let t=this.map.get(e);return void 0===t&&(t={bitPosition:7,bytePosition:0},this.map.set(e,t)),t}}},g=e=>{const t=n.getCodecForDataSeries(e);if(!t)throw new s.CramMalformedError(`no codec defined for ${e} data series`);return t.decode(this,f,a,p)};let m=new Array(r.parsedContent.numRecords);for(let t=0;t<m.length;t+=1)try{const e=(0,c.default)(this,g,n,r,f,a,p,i,t);m[t]=new l.default(Object.assign(Object.assign({},e),{uniqueId:r.contentPosition+r.parsedContent.recordCounter+t+1}))}catch(e){if(e instanceof d.CramBufferOverrunError){console.warn("read attempted beyond end of buffer, file seems truncated."),m=m.filter((e=>!!e));break}throw e}for(let e=0;e<m.length;e+=1){const{mateRecordNumber:t}=m[e];void 0!==t&&t>=0&&u(m,e,m[e],m[t])}return m}))}getRecords(e){return n(this,void 0,void 0,(function*(){const t=this.container.filePosition+this.containerPosition;let i=this.file.featureCache.get(t.toString());i||(i=this._fetchRecords(),this.file.featureCache.set(t.toString(),i));const r=(yield i).filter(e);if(r.length&&this.file.fetchReferenceSequenceCallback){const e=yield this.getHeader();if((0,h.isMappedSliceHeader)(e.parsedContent)&&(e.parsedContent.refSeqId>=0||-2===e.parsedContent.refSeqId)){const t=e.parsedContent.refSeqId>=0?e.parsedContent.refSeqId:void 0,i=yield this.container.getCompressionScheme();if(void 0===i)throw new Error("compression scheme undefined");const s={};for(const e of r){const i=void 0!==t?t:e.sequenceId;let n=s[i];n||(n={id:i,start:e.alignmentStart,end:-1/0,seq:null},s[i]=n);const r=e.alignmentStart+(e.lengthOnRef||e.readLength)-1;r>n.end&&(n.end=r),e.alignmentStart<n.start&&(n.start=e.alignmentStart)}yield Promise.all(Object.values(s).map((e=>n(this,void 0,void 0,(function*(){-1!==e.id&&e.start<=e.end&&this.file.fetchReferenceSequenceCallback&&(e.seq=yield this.file.fetchReferenceSequenceCallback(e.id,e.start,e.end))})))));for(const e of r){const n=s[void 0!==t?t:e.sequenceId];if(null==n?void 0:n.seq){const t=n.seq;e.addReferenceSequence(Object.assign(Object.assign({},n),{seq:t}),i)}}}}return r}))}}t.default=f,"getHeader getBlocks _getBlocksContentIdIndex".split(" ").forEach((e=>(0,o.tinyMemoize)(f,e)))},400:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.itf8Size=function(e){return-128&e?-16384&e?-2097152&e?-268435456&e?5:4:3:2:1},t.parseItf8=function(e,t){let i=t;const n=e[i];let r;if(n<128?(r=n,i+=1):n<192?(r=16383&(n<<8|e[i+1]),i+=2):n<224?(r=2097151&(n<<16|e[i+1]<<8|e[i+2]),i+=3):n<240?(r=268435455&(n<<24|e[i+1]<<16|e[i+2]<<8|e[i+3]),i+=4):(r=(15&n)<<28|e[i+1]<<20|e[i+2]<<12|e[i+3]<<4|15&e[i+4],i+=5),i>e.length)throw new o.CramBufferOverrunError("Attempted to read beyond end of buffer; this file seems truncated.");return[r,i-t]},t.parseLtf8=function(e,t){let i=t;const n=e[i];let r;if(n<128)r=n,i+=1;else if(n<192)r=16383&(e[i]<<8|e[i+1]),i+=2;else if(n<224)r=2097151&(e[i]<<16|e[i+1]<<8|e[i+2]),r=(63&n)<<16|e.readUInt16LE(i+1),i+=3;else if(n<240)r=268435455&(e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3]),i+=4;else if(n<248)r=(15&e[i])*Math.pow(2,32)+(e[i+1]<<24)|e[i+2]<<16|e[i+3]<<8|e[i+4],i+=5;else if(n<252)r=((7&e[i])<<8|e[i+1])*Math.pow(2,32)+(e[i+2]<<24)|e[i+3]<<16|e[i+4]<<8|e[i+5],i+=6;else if(n<254)r=((3&e[i])<<16|e[i+1]<<8|e[i+2])*Math.pow(2,32)+(e[i+3]<<24)|e[i+4]<<16|e[i+5]<<8|e[i+6],i+=7;else if(n<255){if(r=s.default.fromBytesBE(e.slice(i+1,i+8)),r.greaterThan(Number.MAX_SAFE_INTEGER)||r.lessThan(Number.MIN_SAFE_INTEGER))throw new Error("integer overflow");r=r.toNumber(),i+=8}else{if(r=s.default.fromBytesBE(e.slice(i+1,i+9)),r.greaterThan(Number.MAX_SAFE_INTEGER)||r.lessThan(Number.MIN_SAFE_INTEGER))throw new Error("integer overflow");r=r.toNumber(),i+=9}return[r,i-t]},t.parseItem=function(e,t,i=0,n=0){const{offset:r,value:s}=t(e,i);return Object.assign(Object.assign({},s),{_endPosition:r+n,_size:r-i})},t.tinyMemoize=function(e,t){const i=e.prototype[t],n=`_memo_${t}`;e.prototype[t]=function(){if(!(n in this)){const e=i.call(this);this[n]=e,Promise.resolve(e).catch((()=>{delete this[n]}))}return this[n]}},t.sequenceMD5=function(e){return(0,r.default)(e.toUpperCase().replaceAll(/[^\u0021-\u007e]/g,""))};const r=n(i(3503)),s=n(i(8570)),o=i(612)},9747:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CramArgumentError=t.CramSizeLimitError=t.CramMalformedError=t.CramUnimplementedError=t.CramError=void 0;class i extends Error{}t.CramError=i;class n extends Error{}t.CramUnimplementedError=n,t.CramMalformedError=class extends i{},t.CramSizeLimitError=class extends i{},t.CramArgumentError=class extends i{}},7806:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IndexedCramFile=t.CraiIndex=t.CramRecord=t.CramFile=void 0;const r=i(8287);window.Buffer=r.Buffer;var s=i(7390);Object.defineProperty(t,"CramFile",{enumerable:!0,get:function(){return n(s).default}}),Object.defineProperty(t,"CramRecord",{enumerable:!0,get:function(){return s.CramRecord}});var o=i(4923);Object.defineProperty(t,"CraiIndex",{enumerable:!0,get:function(){return n(o).default}});var a=i(6014);Object.defineProperty(t,"IndexedCramFile",{enumerable:!0,get:function(){return n(a).default}})},6014:function(e,t,i){var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(r,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(9747),o=r(i(7390));t.default=class{constructor(e){var t;if(this.cram=null!==(t=e.cram)&&void 0!==t?t:new o.default({url:e.cramUrl,path:e.cramPath,filehandle:e.cramFilehandle,seqFetch:e.seqFetch,checkSequenceMD5:e.checkSequenceMD5,cacheSize:e.cacheSize}),!(this.cram instanceof o.default))throw new Error("invalid arguments: no cramfile");if(this.index=e.index,!this.index.getEntriesForRange)throw new Error("invalid arguments: not an index")}getRecordsForRange(e,t,i){return n(this,arguments,void 0,(function*(e,t,i,n={}){if(n.viewAsPairs=n.viewAsPairs||!1,n.pairAcrossChr=n.pairAcrossChr||!1,n.maxInsertSize=n.maxInsertSize||2e5,"string"==typeof e)throw new s.CramUnimplementedError("string sequence names not yet supported");const r=e,o=yield this.index.getEntriesForRange(r,t,i),a=n=>n.sequenceId===e&&n.alignmentStart<=i&&void 0!==n.lengthOnRef&&n.alignmentStart+n.lengthOnRef-1>=t,c=yield Promise.all(o.map((e=>this.getRecordsInSlice(e,a))));let l=Array.prototype.concat(...c);if(n.viewAsPairs){const e={},t={};for(const i of l){const n=i.readName;if(void 0===n)throw new Error("readName undefined");const r=i.uniqueId;e[n]||(e[n]=0),e[n]+=1,t[r]=1}const i={};Object.entries(e).forEach((([e,t])=>{1===t&&(i[e]=!0)}));const s=[];for(const e of l){const t=e.readName;if(void 0===t)throw new Error("readName undefined");if(i[t]&&e.mate&&(e.mate.sequenceId===r||n.pairAcrossChr)&&Math.abs(e.alignmentStart-e.mate.alignmentStart)<n.maxInsertSize){const t=this.index.getEntriesForRange(e.mate.sequenceId,e.mate.alignmentStart,e.mate.alignmentStart+1);s.push(t)}}const o=yield Promise.all(s);let a=[];for(const e of o)a.push(...e);a=a.sort(((e,t)=>e.toString().localeCompare(t.toString()))).filter(((e,t,i)=>!t||e.toString()!==i[t-1].toString()));const c=[];for(const e of a){let n=this.cram.featureCache.get(e.toString());n||(n=this.getRecordsInSlice(e,(()=>!0)),this.cram.featureCache.set(e.toString(),n));const r=n.then((e=>{const n=[];for(const r of e){if(void 0===r.readName)throw new Error("readName undefined");i[r.readName]&&!t[r.uniqueId]&&n.push(r)}return n}));c.push(r)}const h=yield Promise.all(c);if(h.length){const e=h.reduce(((e,t)=>e.concat(t)));l=l.concat(e)}}return l}))}getRecordsInSlice({containerStart:e,sliceStart:t,sliceBytes:i},n){return this.cram.getContainerAtPosition(e).getSlice(t,i).getRecords(n)}hasDataForReferenceSequence(e){return this.index.hasDataForReferenceSequence(e)}}},5931:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RemoteFile=t.LocalFile=void 0,t.open=function(e,t,i){if(i)return i;if(e)return new n.RemoteFile(e);if(t)return new n.LocalFile(t);throw new Error("no url, path, or filehandle provided, cannot open")};const n=i(1113);var r=i(1113);Object.defineProperty(t,"LocalFile",{enumerable:!0,get:function(){return r.LocalFile}}),Object.defineProperty(t,"RemoteFile",{enumerable:!0,get:function(){return r.RemoteFile}})},6476:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RANS_BYTE_L=t.TOTFREQ=t.TF_SHIFT=void 0,t.TF_SHIFT=12,t.TOTFREQ=4096,t.RANS_BYTE_L=1<<23},997:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,n){let a=e.getInt(),c=e.getInt(),l=e.getInt(),h=e.getInt();const d=n.remaining(),u=-4&d;for(let r=0;r<u;r+=4){const d=t.R[o.default.get(a,s.TF_SHIFT)],u=t.R[o.default.get(c,s.TF_SHIFT)],f=t.R[o.default.get(l,s.TF_SHIFT)],p=t.R[o.default.get(h,s.TF_SHIFT)];n.putAt(r,d),n.putAt(r+1,u),n.putAt(r+2,f),n.putAt(r+3,p),a=o.default.advanceSymbolStep(a,i[255&d],s.TF_SHIFT),c=o.default.advanceSymbolStep(c,i[255&u],s.TF_SHIFT),l=o.default.advanceSymbolStep(l,i[255&f],s.TF_SHIFT),h=o.default.advanceSymbolStep(h,i[255&p],s.TF_SHIFT),a=o.default.renormalize(a,e),c=o.default.renormalize(c,e),l=o.default.renormalize(l,e),h=o.default.renormalize(h,e)}let f;switch(n.setPosition(u),3&d){case 0:break;case 1:f=t.R[o.default.get(a,s.TF_SHIFT)],o.default.advanceSymbol(a,e,i[255&f],s.TF_SHIFT),n.put(f);break;case 2:f=t.R[o.default.get(a,s.TF_SHIFT)],o.default.advanceSymbol(a,e,i[255&f],s.TF_SHIFT),n.put(f),f=t.R[o.default.get(c,s.TF_SHIFT)],o.default.advanceSymbol(c,e,i[255&f],s.TF_SHIFT),n.put(f);break;case 3:f=t.R[o.default.get(a,s.TF_SHIFT)],o.default.advanceSymbol(a,e,i[255&f],s.TF_SHIFT),n.put(f),f=t.R[o.default.get(c,s.TF_SHIFT)],o.default.advanceSymbol(c,e,i[255&f],s.TF_SHIFT),n.put(f),f=t.R[o.default.get(l,s.TF_SHIFT)],o.default.advanceSymbol(l,e,i[255&f],s.TF_SHIFT),n.put(f);break;default:throw new r.CramMalformedError("invalid output size encountered during rANS decoding")}n.setPosition(0)};const r=i(9747),s=i(6476),o=n(i(488))},7960:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,n){const o=t.remaining();let a=e.getInt(),c=e.getInt(),l=e.getInt(),h=e.getInt();const d=o>>2;let u=0,f=d,p=2*d,g=3*d,m=0,w=0,b=0,F=0;for(;u<d;u+=1,f+=1,p+=1,g+=1){const o=255&i[m].R[s.default.get(a,r.TF_SHIFT)],d=255&i[w].R[s.default.get(c,r.TF_SHIFT)],v=255&i[b].R[s.default.get(l,r.TF_SHIFT)],y=255&i[F].R[s.default.get(h,r.TF_SHIFT)];t.putAt(u,o),t.putAt(f,d),t.putAt(p,v),t.putAt(g,y),a=s.default.advanceSymbolStep(a,n[m][o],r.TF_SHIFT),c=s.default.advanceSymbolStep(c,n[w][d],r.TF_SHIFT),l=s.default.advanceSymbolStep(l,n[b][v],r.TF_SHIFT),h=s.default.advanceSymbolStep(h,n[F][y],r.TF_SHIFT),a=s.default.renormalize(a,e),c=s.default.renormalize(c,e),l=s.default.renormalize(l,e),h=s.default.renormalize(h,e),m=o,w=d,b=v,F=y}for(;g<o;g+=1){const o=255&i[F].R[s.default.get(h,r.TF_SHIFT)];t.putAt(g,o),h=s.default.advanceSymbol(h,e,n[F][o],r.TF_SHIFT),F=o}};const r=i(6476),s=n(i(488))},488:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=i(9747),r=i(6476);class s{constructor(){this.F=void 0,this.C=void 0}}function o(e,t,i,n){return i*(e>>n)+(e&(1<<n)-1)-t}const a={FC:s,AriDecoder:class{constructor(){this.fc=new Array(256);for(let e=0;e<this.fc.length;e+=1)this.fc[e]=new s;this.R=null}},Symbol:class{constructor(){this.start=void 0,this.freq=void 0}},symbolInit:function(e,t,i){if(!(t<=65536))throw new n.CramMalformedError("assertion failed: start <= 1<<16");if(!(i<=65536-t))throw new n.CramMalformedError("assertion failed: freq <= 1<<16");e.start=t,e.freq=i},advanceStep:o,advanceSymbolStep:function(e,t,i){return o(e,t.start,t.freq,i)},get:function(e,t){return e&(1<<t)-1},advanceSymbol:function(e,t,i,n){return function(e,t,i,n,s){if((e=n*(e>>s)+(e&(1<<s)-1)-i)<r.RANS_BYTE_L)do{e=e<<8|255&t.get()}while(e<r.RANS_BYTE_L);return e}(e,t,i.start,i.freq,n)},renormalize:function(e,t){if(e<r.RANS_BYTE_L)do{e=e<<8|255&t.get()}while(e<r.RANS_BYTE_L);return e}};t.default=a},1971:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.readStatsO0=function(e,t,i){let n=0,r=0,c=255&e.get();do{null==t.fc[c]&&(t.fc[c]=new o.default.FC),t.fc[c].F=255&e.get(),t.fc[c].F>=128&&(t.fc[c].F&=-129,t.fc[c].F=(127&t.fc[c].F)<<8|255&e.get()),t.fc[c].C=r,o.default.symbolInit(i[c],t.fc[c].C,t.fc[c].F),t.R||(t.R=new Array(s.TOTFREQ)),t.R.fill(c,r,r+t.fc[c].F),r+=t.fc[c].F,0===n&&c+1===(255&e.getByteAt(e.position()))?(c=255&e.get(),n=255&e.get()):0!==n?(n-=1,c+=1):c=255&e.get()}while(0!==c);a(r<s.TOTFREQ)},t.readStatsO1=function(e,t,i){let n=0,r=255&e.get();do{let c=0,l=0,h=255&e.get();null==t[r]&&(t[r]=new o.default.AriDecoder);do{null==t[r].fc[h]&&(t[r].fc[h]=new o.default.FC),t[r].fc[h].F=255&e.get(),t[r].fc[h].F>=128&&(t[r].fc[h].F&=-129,t[r].fc[h].F=(127&t[r].fc[h].F)<<8|255&e.get()),t[r].fc[h].C=l,0===t[r].fc[h].F&&(t[r].fc[h].F=s.TOTFREQ),null==i[r][h]&&(i[r][h]=new o.default.RansDecSymbol),o.default.symbolInit(i[r][h],t[r].fc[h].C,t[r].fc[h].F),null==t[r].R&&(t[r].R=new Array(s.TOTFREQ)),t[r].R.fill(h,l,l+t[r].fc[h].F),l+=t[r].fc[h].F,a(l<=s.TOTFREQ),0===c&&h+1===(255&e.getByteAt(e.position()))?(h=255&e.get(),c=255&e.get()):0!==c?(c-=1,h+=1):h=255&e.get()}while(0!==h);0===n&&r+1===(255&e.getByteAt(e.position()))?(r=255&e.get(),n=255&e.get()):0!==n?(n-=1,r+=1):r=255&e.get()}while(0!==r)};const r=i(9747),s=i(6476),o=n(i(488));function a(e){if(!e)throw new r.CramMalformedError("assertion failed")}},9989:function(e,t,i){var n=i(8287).Buffer,r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i=0){if(0===e.length)return t.fill(0),t;const r=new d(e,i),u=r.get();if(0!==u&&1!==u)throw new s.CramMalformedError(`Invalid rANS order ${u}`);if(r.getInt()!==r.remaining()-h)throw new s.CramMalformedError("Incorrect input length.");const f=r.getInt(),p=new d(t||n.allocUnsafe(f));if(p.length<f)throw new s.CramMalformedError(`Output buffer too small to fit ${f} bytes.`);switch(u){case 0:return function(e,t){const i=new o.default.AriDecoder,n=new Array(256);for(let e=0;e<n.length;e+=1)n[e]=new o.default.Symbol;return(0,a.readStatsO0)(e,i,n),(0,c.default)(e,i,n,t),t}(r,p);case 1:return function(e,t){const i=new Array(256);for(let e=0;e<i.length;e+=1)i[e]=new o.default.AriDecoder;const n=new Array(256);for(let e=0;e<n.length;e+=1){n[e]=new Array(256);for(let t=0;t<n[e].length;t+=1)n[e][t]=new o.default.Symbol}return(0,a.readStatsO1)(e,i,n),(0,l.default)(e,t,i,n),t}(r,p);default:throw new s.CramMalformedError(`Invalid rANS order: ${u}`)}};const s=i(9747),o=r(i(488)),a=i(1971),c=r(i(997)),l=r(i(7960)),h=4;class d{constructor(e,t=0){this._buffer=e,this._position=t,this.length=e.length}get(){const e=this._buffer[this._position];return this._position+=1,e}getByte(){return this.get()}getByteAt(e){return this._buffer[e]}position(){return this._position}put(e){return this._buffer[this._position]=e,this._position+=1,e}putAt(e,t){return this._buffer[e]=t,t}setPosition(e){return this._position=e,e}getInt(){const e=this._buffer.readInt32LE(this._position);return this._position+=4,e}remaining(){return this._buffer.length-this._position}}},5417:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parseHeaderText=function(e){const t=e.split(/\r?\n/),i=[];for(const e of t){const[t,...n]=e.split(/\t/);t&&i.push({tag:t.slice(1),data:n.map((e=>{const t=e.indexOf(":");return-1!==t?{tag:e.slice(0,t),value:e.slice(t+1)}:{tag:e,value:""}}))})}return i}},8712:(e,t,i)=>{var n=i(8287).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.unzip=function(e){return n.from((0,r.inflate)(e))};const r=i(1668)},7430:(e,t,i)=>{i.r(t),i.d(t,{default:()=>o});class n{}class r{constructor(){this.signals=new Set,this.abortController=new AbortController}addSignal(e=new n){if(this.signal.aborted)throw new Error("cannot add a signal, already aborted!");this.signals.add(e),e.aborted?this.handleAborted(e):"function"==typeof e.addEventListener&&e.addEventListener("abort",(()=>{this.handleAborted(e)}))}handleAborted(e){this.signals.delete(e),0===this.signals.size&&this.abortController.abort()}get signal(){return this.abortController.signal}abort(){this.abortController.abort()}}class s{constructor(){this.callbacks=new Set}addCallback(e=()=>{}){this.callbacks.add(e),e(this.currentMessage)}callback(e){this.currentMessage=e;for(const t of this.callbacks)t(e)}}class o{constructor({fill:e,cache:t}){if("function"!=typeof e)throw new TypeError("must pass a fill function");if("object"!=typeof t)throw new TypeError("must pass a cache object");if("function"!=typeof t.get||"function"!=typeof t.set||"function"!=typeof t.delete)throw new TypeError("cache must implement get(key), set(key, val), and and delete(key)");this.cache=t,this.fillCallback=e}static isAbortException(e){return"AbortError"===e.name||"ERR_ABORTED"===e.code||"AbortError: aborted"===e.message||"Error: aborted"===e.message}evict(e,t){this.cache.get(e)===t&&this.cache.delete(e)}fill(e,t,i,n){const o=new r,a=new s;a.addCallback(n);const c={aborter:o,promise:this.fillCallback(t,o.signal,(e=>{a.callback(e)})),settled:!1,statusReporter:a,get aborted(){return this.aborter.signal.aborted}};c.aborter.addSignal(i),c.aborter.signal.addEventListener("abort",(()=>{c.settled||this.evict(e,c)})),c.promise.then((()=>{c.settled=!0}),(()=>{c.settled=!0,this.evict(e,c)})).catch((e=>{throw console.error(e),e})),this.cache.set(e,c)}static checkSinglePromise(e,t){function i(){if(null==t?void 0:t.aborted)throw Object.assign(new Error("aborted"),{code:"ERR_ABORTED"})}return e.then((e=>(i(),e)),(e=>{throw i(),e}))}has(e){return this.cache.has(e)}get(e,t,i,n){if(!i&&t instanceof AbortSignal)throw new TypeError("second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?");const r=this.cache.get(e);return r?r.aborted&&!r.settled?(this.evict(e,r),this.get(e,t,i,n)):r.settled?r.promise:(r.aborter.addSignal(i),r.statusReporter.addCallback(n),o.checkSinglePromise(r.promise,i)):(this.fill(e,t,i,n),o.checkSinglePromise(this.cache.get(e).promise,i))}delete(e){const t=this.cache.get(e);t&&(t.settled||t.aborter.abort(),this.cache.delete(e))}clear(){const e=this.cache.keys();let t=0;for(let i=e.next();!i.done;i=e.next())this.delete(i.value),t+=1;return t}}},635:(e,t,i)=>{var n=i(8287).Buffer;const r=i(4646),s=i(8706),o=i(9614),a=i(235),c=128;e.exports=class{decode(e){return this.stream=new s(e),this.decodeStream(this.stream)}decodeStream(e,t=0){var i=this.stream.ReadByte();16&i||(t=this.stream.ReadUint7());var n,r=t,s=1&i;if(8&i)return this.decodeStripe(this.stream,t);if(i&c&&([n,r]=this.decodePackMeta(this.stream)),32&i)var o=this.decodeCat(this.stream,r);else o=4&i?this.decodeExt(this.stream,r):64&i?s?this.decodeRLE1(this.stream,r):this.decodeRLE0(this.stream,r):s?this.decode1(this.stream,r):this.decode0(this.stream,r);return i&c&&(o=this.decodePack(o,n,t)),o}encode(e,t){if(this.stream=new s("",0,1.1*e.length+100),this.stream.WriteByte(t),16&t||this.stream.WriteUint7(e.length),8&t)return n.concat([this.stream.buf.slice(0,this.stream.pos),this.encodeStripe(this.stream,e,t>>8)]);var i,r=1&t,o=e.length;return t&c&&([i,e,o]=this.encodePack(e)),t&c&&this.stream.WriteStream(i),64&t?r?this.encodeRLE1(e,o,this.stream):this.encodeRLE0(e,o,this.stream):r?this.encode1(e,o,this.stream):this.encode0(e,o,this.stream)}decode0(e,t){var i=new n.allocUnsafe(t),s=e.ReadByte();0==s&&(s=256);var a=new o(s),c=new r(e);c.RangeStartDecode(e);for(var l=0;l<t;l++)i[l]=a.ModelDecode(e,c);return i}encode0(e,t,i){for(var n=0,s=0;s<t;s++)n<e[s]&&(n=e[s]);n++;var a=new o(n);i.WriteByte(n);var c=new r(i);for(s=0;s<t;s++)a.ModelEncode(i,c,e[s]);return c.RangeFinishEncode(i),i.buf.slice(0,i.pos)}decode1(e,t){var i=new n.allocUnsafe(t),s=e.ReadByte();0==s&&(s=256);for(var a=new Array(s),c=0;c<s;c++)a[c]=new o(s);var l=new r(e);l.RangeStartDecode(e);var h=0;for(c=0;c<t;c++)i[c]=a[h].ModelDecode(e,l),h=i[c];return i}encode1(e,t,i){for(var n=0,s=0;s<t;s++)n<e[s]&&(n=e[s]);n++;var a=new Array(n);for(s=0;s<n;s++)a[s]=new o(n);i.WriteByte(n);var c=new r(i),l=0;for(s=0;s<t;s++)a[l].ModelEncode(i,c,e[s]),l=e[s];return c.RangeFinishEncode(i),i.buf.slice(0,i.pos)}decodeExt(e,t){var i=new n.allocUnsafe(t),r=a.array(e.buf.slice(e.pos)),s=a.header(r),o=0;do{var c=a.decompress(r,s);-1!=c&&(n.from(c).copy(i,o),o+=c.length,s-=c.length)}while(-1!=c);return i}encodeExt(e,t){}decodeRLE0(e,t){var i=new n.allocUnsafe(t),s=e.ReadByte();0==s&&(s=256);for(var a=new o(s),c=new Array(258),l=0;l<=257;l++)c[l]=new o(4);var h=new r(e);for(h.RangeStartDecode(e),l=0;l<t;){i[l]=a.ModelDecode(e,h);for(var d=c[i[l]].ModelDecode(e,h),u=d,f=256;3==d;)d=c[f].ModelDecode(e,h),f=257,u+=d;for(var p=1;p<=u;p++)i[l+p]=i[l];l+=u+1}return i}encodeRLE0(e,t,i){for(var n=0,s=0;s<t;s++)n<e[s]&&(n=e[s]);n++;var a=new o(n),c=new Array(258);for(s=0;s<=257;s++)c[s]=new o(4);i.WriteByte(n);var l=new r(i);for(s=0;s<t;){a.ModelEncode(i,l,e[s]);for(var h=1;s+h<t&&e[s+h]==e[s];)h++;h--;var d=e[s];e[s],s+=h+1;var u=h>=3?3:h;for(c[d].ModelEncode(i,l,u),h-=u,d=256;3==u;)u=h>=3?3:h,c[d].ModelEncode(i,l,u),d=257,h-=u}return l.RangeFinishEncode(i),i.buf.slice(0,i.pos)}decodeRLE1(e,t){var i=new n.allocUnsafe(t),s=e.ReadByte();0==s&&(s=256);for(var a=new Array(s),c=0;c<s;c++)a[c]=new o(s);var l=new Array(258);for(c=0;c<=257;c++)l[c]=new o(4);var h=new r(e);h.RangeStartDecode(e);var d=0;for(c=0;c<t;){i[c]=a[d].ModelDecode(e,h),d=i[c];for(var u=l[i[c]].ModelDecode(e,h),f=u,p=256;3==u;)u=l[p].ModelDecode(e,h),p=257,f+=u;for(var g=1;g<=f;g++)i[c+g]=i[c];c+=f+1}return i}encodeRLE1(e,t,i){for(var n=0,s=0;s<t;s++)n<e[s]&&(n=e[s]);n++;var a=new Array(n);for(s=0;s<n;s++)a[s]=new o(n);var c=new Array(258);for(s=0;s<=257;s++)c[s]=new o(4);i.WriteByte(n);for(var l=new r(i),h=(s=0,0);s<t;){a[h].ModelEncode(i,l,e[s]);for(var d=1;s+d<t&&e[s+d]==e[s];)d++;d--;var u=e[s];h=e[s],s+=d+1;var f=d>=3?3:d;for(c[u].ModelEncode(i,l,f),d-=f,u=256;3==f;)f=d>=3?3:d,c[u].ModelEncode(i,l,f),u=257,d-=f}return l.RangeFinishEncode(i),i.buf.slice(0,i.pos)}decodePackMeta(e){this.nsym=e.ReadByte();for(var t=new Array(this.nsym),i=0;i<this.nsym;i++)t[i]=e.ReadByte();return[t,e.ReadUint7()]}decodePack(e,t,i){var r=new n.allocUnsafe(i);if(this.nsym<=1)for(var s=0;s<i;s++)r[s]=t[0];else if(this.nsym<=2){s=0;for(var o=0;s<i;s++){if(s%8==0)var a=e[o++];r[s]=t[1&a],a>>=1}}else if(this.nsym<=4)for(s=0,o=0;s<i;s++)s%4==0&&(a=e[o++]),r[s]=t[3&a],a>>=2;else{if(!(this.nsym<=16))return e;for(s=0,o=0;s<i;s++)s%2==0&&(a=e[o++]),r[s]=t[15&a],a>>=4}return r}packMeta(e){for(var t=new s("",0,1024),i=new Array(256),n=0;n<e.length;n++)i[e[n]]=1;var r=0;for(n=0;n<256;n++)i[n]&&(i[n]=++r);for(t.WriteByte(r),n=0;n<256;n++)i[n]&&(t.WriteByte(n),i[n]--);return[t,i,r]}encodePack(e){var t,i,r;[t,i,r]=this.packMeta(e);var s=e.length,o=0;if(r<=1)return t.WriteUint7(0),[t,new n.allocUnsafe(0),0];if(r<=2){for(var a=new n.allocUnsafe(Math.floor((s+7)/8)),c=(o=0,0);o<(-8&s);o+=8,c++)a[c]=(0|i[e[o+0]])+(i[e[o+1]]<<1)+(i[e[o+2]]<<2)+(i[e[o+3]]<<3)+(i[e[o+4]]<<4)+(i[e[o+5]]<<5)+(i[e[o+6]]<<6)+(i[e[o+7]]<<7);if(o<s){a[c]=0;for(var l=0;o<s;)a[c]|=i[e[o++]]<<l,l++;c++}return t.WriteUint7(c),[t,a,a.length]}if(r<=4){for(a=new n.allocUnsafe(Math.floor((s+3)/4)),o=0,c=0;o<(-4&s);o+=4,c++)a[c]=(0|i[e[o+0]])+(i[e[o+1]]<<2)+(i[e[o+2]]<<4)+(i[e[o+3]]<<6);if(o<s){for(a[c]=0,l=0;o<s;)a[c]|=i[e[o++]]<<l,l+=2;c++}return t.WriteUint7(c),[t,a,a.length]}if(r<=16){for(a=new n.allocUnsafe(Math.floor((s+1)/2)),o=0,c=0;o<(-2&s);o+=2,c++)a[c]=(0|i[e[o+0]])+(i[e[o+1]]<<4);return o<s&&(a[c++]=i[e[o++]]),t.WriteUint7(c),[t,a,a.length]}return t.WriteUint7(e.length),[t,e,e.length]}encodeStripe(e,t,i){0==i&&(i=4);for(var n=new Array(i),r=new Array(i),o=0;o<i;o++)r[o]=Math.floor(t.length/i)+(t.length%i>o),n[o]=new Array(r[o]);for(var a=0,c=0;c<t.length;c+=i,a++)for(var l=0;l<i;l++)a<n[l].length&&(n[l][a]=t[c+l]);var h=new Array(i),d=0;for(o=0;o<i;o++){var u=this.encode(n[o],0),f=this.encode(n[o],1);h[o]=f.length<u.length?f:u,d+=h[o].length}var p=new s("",0,d+5*i+1);for(p.WriteByte(i),o=0;o<i;o++)p.WriteUint7(h[o].length);for(o=0;o<i;o++)p.WriteData(h[o],h[o].length);return p.buf.slice(0,p.buf.pos)}decodeStripe(e,t){for(var i=e.ReadByte(),r=new Array(i),s=new Array(i),o=0;o<i;o++)r[o]=e.ReadUint7();var a=new Array(i);for(o=0;o<i;o++)s[o]=Math.floor(t/i)+(t%i>o),a[o]=this.decodeStream(e,s[o]);var c=new n.allocUnsafe(t);for(o=0;o<i;o++)for(var l=0;l<s[o];l++)c[l*i+o]=a[o][l];return c}decodeCat(e,t){for(var i=new n.allocUnsafe(t),r=0;r<t;r++)i[r]=e.ReadByte();return i}}},4646:e=>{e.exports=class{constructor(e){this.low=0,this.range=4294967295,this.code=0,this.FFnum=0,this.carry=0,this.cache=0}RangeStartDecode(e){for(var t=0;t<5;t++)this.code=(this.code<<8)+e.ReadByte();this.code&=4294967295,this.code>>>=0}RangeGetFrequency(e){return this.range=Math.floor(this.range/e),Math.floor(this.code/this.range)}RangeDecode(e,t,i,n){for(this.code-=t*this.range,this.range*=i;this.range<1<<24;)this.range*=256,this.code=256*this.code+e.ReadByte()}RangeShiftLow(e){if(this.low<4278190080|this.carry){for(e.WriteByte(this.cache+this.carry);this.FFnum;)e.WriteByte(this.carry-1),this.FFnum--;this.cache=this.low>>>24,this.carry=0}else this.FFnum++;this.low<<=8,this.low>>>=0}RangeEncode(e,t,i,n){var r=this.low;for(this.range=Math.floor(this.range/n),this.low+=t*this.range,this.low>>>=0,this.range*=i,this.low<r&&(0!=this.carry&&console.log("ERROR: Multiple carry"),this.carry=1);this.range<1<<24;)this.range*=256,this.RangeShiftLow(e)}RangeFinishEncode(e){for(var t=0;t<5;t++)this.RangeShiftLow(e)}}},9614:e=>{e.exports=class{constructor(e=256){this.total_freq=e,this.max_sym=e-1,this.S=new Array,this.F=new Array;for(var t=0;t<=this.max_sym;t++)this.S[t]=t,this.F[t]=1}ModelDecode(e,t){for(var i=t.RangeGetFrequency(this.total_freq),n=0,r=0;n+this.F[r]<=i;)n+=this.F[r++];t.RangeDecode(e,n,this.F[r],this.total_freq),this.F[r]+=16,this.total_freq+=16,this.total_freq>65519&&this.ModelRenormalise();var s=this.S[r];if(r>0&&this.F[r]>this.F[r-1]){var o=this.F[r];this.F[r]=this.F[r-1],this.F[r-1]=o,o=this.S[r],this.S[r]=this.S[r-1],this.S[r-1]=o}return s}ModelRenormalise(){this.total_freq=0;for(var e=0;e<=this.max_sym;e++)this.F[e]-=Math.floor(this.F[e]/2),this.total_freq+=this.F[e]}ModelEncode(e,t,i){for(var n=0,r=0;this.S[r]!=i;r++)n+=this.F[r];if(t.RangeEncode(e,n,this.F[r],this.total_freq),this.F[r]+=16,this.total_freq+=16,this.total_freq>65519&&this.ModelRenormalise(),i=this.S[r],r>0&&this.F[r]>this.F[r-1]){var s=this.F[r];this.F[r]=this.F[r-1],this.F[r-1]=s,s=this.S[r],this.S[r]=this.S[r-1],this.S[r-1]=s}}}},6038:(e,t,i)=>{var n=i(8287).Buffer;const r=i(8706),s=i(9614),o=i(4646);function a(e,t,i){for(var n=0,r=0,s=-1,o=new Array(1024);r<i;){var a=e.ReadByte();if(o[n++]=a,r+=a,a==s){var c=e.ReadByte();for(r+=a*c;c--;)o[n++]=a}s=a}var l=0;for(n=0,r=0;r<i;){var h=0;do{var d=o[n++];h+=d}while(255==d);for(;h--;)t[r++]=l;l++}}function c(e,t,i){var n=e.context;return t.qctx=(t.qctx<<e.qshift)+e.qtab[i],n+=(t.qctx&(1<<e.qbits)-1)<<e.qloc,e.do_pos&&(n+=e.ptab[Math.min(t.p,1023)]<<e.ploc),e.do_delta&&(n+=e.dtab[Math.min(t.delta,255)]<<e.dloc,t.delta+=t.prevq!=i?1:0,t.prevq=i),e.do_sel&&(n+=t.s<<e.sloc),t.p--,65535&n}function l(e){var t={};t.context=e.ReadUint16(),t.pflags=e.ReadByte(),t.do_dedup=2&t.pflags,t.fixed_len=4&t.pflags,t.do_sel=8&t.pflags,t.do_qmap=16&t.pflags,t.do_pos=32&t.pflags,t.do_delta=64&t.pflags,t.do_qtab=128&t.pflags,t.max_sym=e.ReadByte();var i=e.ReadByte();if(t.qbits=i>>4,t.qshift=15&i,i=e.ReadByte(),t.qloc=i>>4,t.sloc=15&i,i=e.ReadByte(),t.ploc=i>>4,t.dloc=15&i,t.qmap=new Array(256),16&t.pflags)for(var n=0;n<t.max_sym;n++)t.qmap[n]=e.ReadByte();else for(n=0;n<256;n++)t.qmap[n]=n;if(t.qtab=new Array(1024),t.qbits>0&&128&t.pflags)a(e,t.qtab,256);else for(n=0;n<256;n++)t.qtab[n]=n;return t.ptab=new Array(1024),32&t.pflags&&a(e,t.ptab,1024),t.dtab=new Array(256),64&t.pflags&&a(e,t.dtab,256),t}function h(e,t,i,n,r,s){i.max_sel>0?r.s=n.sel.ModelDecode(e,t):r.s=0,r.x=i.stab[r.s];var o=i.params[r.x];if(o.fixed_len>=0){var a=n.len[0].ModelDecode(e,t);a|=n.len[1].ModelDecode(e,t)<<8,a|=n.len[2].ModelDecode(e,t)<<16,a|=n.len[3].ModelDecode(e,t)<<24,o.fixed_len>0&&(o.fixed_len=-a)}else a=-o.fixed_len;r.len=a,i.do_rev&&(s[r.rec]=n.rev.ModelDecode(e,t)),r.is_dup=0,2&o.pflags&&n.dup.ModelDecode(e,t)&&(r.is_dup=1),r.p=a,r.delta=0,r.qctx=0,r.prevq=0,r.rec++}function d(e,t,i){for(var n=0,r=0,s=new Array(2*i),o=0;n<i;){for(var a=n;n<i&&t[n]==r;)n++;var c=n-a;do{var l=Math.min(255,c);s[o++]=l,c-=l}while(255==l);r++}var h=-1,d=new Array(2*i),u=0;for(n=0;n<o;){var f=s[n++];if(d[u++]=f,f==h){for(a=n;n<o&&s[n]==h&&n-a<255;)n++;d[u++]=n-a}else h=f}e.WriteData(d,u)}e.exports={decode:function(e,t){return function(e,t){var i=e.ReadUint7(),r=function(e){var t={max_sym:0};if(5==e.ReadByte()){var i=e.ReadByte(),n=1&i?e.ReadByte():1,r=i.nparam>1?i.nparam-1:0,s=new Array(256);if(2&i)r=e.ReadByte(),a(e,s,256);else{for(var o=0;o<n;o++)s[o]=o;for(;o<256;o++)s[o]=n-1}t.do_rev=4&i,t.stab=s,t.max_sel=r,t.params=new Array(t.nparam);for(var c=0;c<n;c++)t.params[c]=l(e),t.max_sym<t.params[c].max_sym&&(t.max_sym=t.params[c].max_sym);return t}console.error("Invalid FQZComp version number")}(e);if(r){var d=r.params,u=new Array(t.length),f=function(e){var t={};t.qual=new Array(65536);for(var i=0;i<65536;i++)t.qual[i]=new s(e.max_sym+1);for(t.len=new Array(4),i=0;i<4;i++)t.len[i]=new s(256);return t.rev=new s(2),t.dup=new s(2),e.max_sel>0&&(t.sel=new s(e.max_sel+1)),t}(r),p=new o(e);p.RangeStartDecode(e);for(var g=new n.allocUnsafe(i),m={qctx:0,prevq:0,delta:0,p:0,s:0,x:0,len:0,is_dup:0,rec:0},w=0;w<i;){if(0==m.p){if(h(e,p,r,f,m,u),m.is_dup>0&&f.dup.ModelDecode(e,p)){for(var b=0;b<len;b++)g[w+b]=g[w+b-m.len];w+=m.len,m.p=0;continue}t.push(m.len);var F=(d=r.params[m.x]).context}var v=f.qual[F].ModelDecode(e,p);g[w++]=d.qmap[v],F=c(d,m,v)}return r.do_rev&&function(e,t,i,n){for(var r=0,s=0;s<t;){if(i[r])for(var o=0,a=n[r]-1;o<a;){var c=e[s+o];e[s+o]=e[s+a],e[s+a]=c,o++,a--}s+=n[r++]}}(g,i,u,t),g}}(new r(e),t)},encode:function(e,t,i){for(var n=new Array(2),a=new Array(2),c=new Array(2),l=new Array(2),h=new Array(256),u=0;u<2;u++)n[u]=new Array(256),a[u]=new Array(256),c[u]=new Array(1024),l[u]=new Array(256);(p=new r("",0,1.1*e.length+100)).WriteUint7(e.length);var f=function(e,t,i,n){for(var r=i[0],s=0;s<i.length&&i[s]==r;s++);var o=s==i.length?1:0,a=0,c=0;for(s=0;s<256;s++)n[0][s]=0;var l=0,h=0;for(s=0;s<e.length;s++)0==h&&(h=t[l<t.length-1?l++:l]),n[0][e[s]]++,h--;for(s=0;s<256;s++)n[0][s]&&(c<s&&(c=s),a++);var d=5,u=0;return a<=16&&(u=1,d=a<=2?1:a<=4?2:a<=8?3:4),[{qbits:8+(d>4),qshift:d,qloc:7,pbits:7,pshift:t[0]>128?1:0,ploc:0,dbits:d>4?0:1,dshift:3,dloc:15,sbits:0,sloc:15,do_stab:0,context:0,max_sym:c,nsym:a,do_qmap:u,do_dedup:0,fixed_len:1==t.length?1:0,do_sel:0,do_rev:0,do_pos:1,do_delta:d<=4?1:0,do_qtab:0,qbits:8+(d>4)-(0==o),sbits:1,sloc:15-(d<=4),do_stab:1,do_sel:1}]}(e,t,i,n),p=function(e,t,i,n,r,s,o){for(var a=[0,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],c=0;c<t.length;c++)o[c]=c;for(;c<256;c++)o[c]=t.length-1;e.WriteByte(5);var l=(t.length>1?1:0)|(t[0].do_stab?2:0);if(e.WriteByte(l),1&l&&e.WriteByte(t.length),2&l){var h=1<<t[0].sbits;h>0&&h--,e.WriteByte(h),d(e,o,256)}for(var u=0;u<t.length;u++){if(e.WriteUint16(t[u].context),e.WriteByte((t[u].do_qtab?128:0)|(t[u].do_delta?64:0)|(t[u].do_pos?32:0)|(t[u].do_qmap?16:0)|(t[u].do_sel?8:0)|(t[u].fixed_len?4:0)|(t[u].do_dedup?2:0)),t[u].do_qmap?e.WriteByte(t[u].nsym):e.WriteByte(t[u].max_sym),e.WriteByte(t[u].qbits<<4|t[u].qshift),e.WriteByte(t[u].qloc<<4|t[u].sloc),e.WriteByte(t[u].ploc<<4|t[u].dloc),t[u].do_qmap){t[u].max_sym=t[u].nsym;var f=0;for(c=0;c<256;c++)i[u][c]&&(e.WriteByte(c),i[u][c]=f++);for(;f<t[u].nsym;f++)e.WriteByte(0)}else for(c=0;c<256;c++)i[u][c]=c;if(t[u].qbits>0){for(c=0;c<256;c++)n[u][c]=c;t[u].do_qtab&&d(e,n[u],256)}if(t[u].pbits>0){for(c=0;c<1024;c++)r[u][c]=Math.min((1<<t[u].pbits)-1,c>>t[u].pshift);d(e,r[u],1024)}if(t[u].dbits>0){for(c=0;c<256;c++)a[c]>(1<<t[u].dbits)-1&&(a[c]=(1<<t[u].dbits)-1);for(c=0;c<256;c++)s[u][c]=a[Math.min(a.length-1,c>>t[u].dshift)];d(e,s[u],256)}}return e}(p,f,n,a,c,l,h);return function(e,t,i,n,r,a,c,l,h,d){var u=1<<r[0].sbits;u>0&&u--;for(var f=t.length,p=0,g=0;g<r.length;g++)p<r[g].max_sym&&(p=r[g].max_sym);for(var m=new Array(65536),w=0;w<65536;w++)m[w]=new s(p+1);var b=new Array(4);for(w=0;w<4;w++)b[w]=new s(256);new s(2),new s(2);for(var F=new s(u+1),v=new o(t),y=(g=0,w=0,0);w<f;){if(0==g){var A=n[y];r[0].sbits>0&&F.ModelEncode(e,v,A);var C=d[A],_=i[Math.min(i.length-1,y++)];r[C].fixed_len?r[C].fixed_len>0&&(b[0].ModelEncode(e,v,255&_),b[1].ModelEncode(e,v,_>>8&255),b[2].ModelEncode(e,v,_>>16&255),b[3].ModelEncode(e,v,_>>24&255),r[C].fixed_len=-1):(b[0].ModelEncode(e,v,255&_),b[1].ModelEncode(e,v,_>>8&255),b[2].ModelEncode(e,v,_>>16&255),b[3].ModelEncode(e,v,_>>24&255)),r[C].do_dedup&&process.exit(1),g=_;var x=0,k=r[C].context,I=0,S=0}var E=t[w++],N=a[C][E];m[k].ModelEncode(e,v,N),I=(I<<r[C].qshift)+c[C][N],k=r[C].context,k+=(I&(1<<r[C].qbits)-1)<<r[C].qloc,r[C].pbits>0&&(k+=l[C][Math.min(g,1023)]<<r[C].ploc),r[C].dbits>0&&(k+=h[C][Math.min(x,255)]<<r[C].dloc,x+=S!=N?1:0,S=N),r[C].do_sel&&(k+=A<<r[C].sloc),k&=65535,g--}return v.RangeFinishEncode(e),e.buf.slice(0,e.pos)}(p,e,t,i,f,n,a,c,l,h)}}},6960:(e,t,i)=>{var n=i(8287).Buffer,r=i(5460),s=i(8223),o=i(635),a=i(6038),c=i(5997);e.exports={r4x8_uncompress:function(e,t){r.decode(e).copy(t,0,0)},r4x16_uncompress:function(e,t){s.decode(e).copy(t,0,0)},arith_uncompress:function(e,t){o.decode(e).copy(t,0,0)},fqzcomp_uncompress:function(e,t){var i=new Array;a.decode(e,i).copy(t,0,0)},tok3_uncompress:function(e,t){var i=c.decode(e,0,"\0");n.from(i,"binary").copy(t,0,0)}}},8706:(e,t,i)=>{var n=i(8287).Buffer;e.exports=class{constructor(e,t=0,i=0){0!=i?(this.buf=n.allocUnsafe(i),this.length=i):(this.buf=e,this.length=e.length),this.pos=t}EOF(){return this.pos>=this.length}ReadData(e){var t=this.buf.slice(this.pos,this.pos+e);return this.pos+=e,t}ReadByte(){const e=this.buf[this.pos];return this.pos++,e}ReadChar(){const e=this.buf[this.pos];return this.pos++,String.fromCharCode(e)}ReadUint16(){return this.ReadByte()|this.ReadByte()<<8}ReadUint32(){const e=this.buf.readInt32LE(this.pos);return this.pos+=4,e}ReadString(){var e="";do{var t=this.buf[this.pos++];t&&(e+=String.fromCharCode(t))}while(t);return e}ReadUint7(){var e=0;do{var t=this.ReadByte();e=e<<7|127&t}while(128&t);return e}ReadITF8(){var e=this.buf[this.pos];return this.pos++,e>=240?(e=(15&e)<<28,e+=(this.buf[this.pos+0]<<20)+(this.buf[this.pos+1]<<12)+(this.buf[this.pos+2]<<4)+(this.buf[this.pos+3]>>4),this.pos+=4):e>=224?(e=(15&e)<<24,e+=(this.buf[this.pos+0]<<16)+(this.buf[this.pos+1]<<8)+(0|this.buf[this.pos+2]),this.pos+=3):e>=192?(e=(31&e)<<16,e+=(this.buf[this.pos+0]<<8)+(0|this.buf[this.pos+1]),this.pos+=2):e>=128&&(e=(63&e)<<8,e+=this.buf[this.pos],this.pos++),e}WriteByte(e){this.buf[this.pos++]=e}WriteChar(e){this.buf[this.pos++]=e.charCodeAt(0)}WriteString(e){for(var t=0;t<e.length;t++)this.buf[this.pos++]=e.charCodeAt(t);this.buf[this.pos++]=0}WriteData(e,t){for(var i=0;i<t;i++)this.buf[this.pos++]=e[i]}WriteStream(e){this.WriteData(e.buf,e.pos)}WriteUint16(e){this.WriteByte(255&e),this.WriteByte(e>>8&255)}WriteUint32(e){this.buf.writeInt32LE(e,this.pos),this.pos+=4}WriteUint7(e){var t=0,i=e;do{t+=7,i>>=7}while(i>0);do{t-=7,this.WriteByte((e>>t&127)+((t>0)<<7))}while(t>0)}WriteITF8(e){e<0&&(e=1+e),e<=127?this.buf[this.pos++]=e:e<=16383?(this.buf[this.pos++]=128|Math.floor(e/256),this.buf[this.pos++]=255&e):e<131071?(this.buf[this.pos++]=192|Math.floor(e/65536),this.buf[this.pos++]=255&Math.floor(e/256),this.buf[this.pos++]=255&e):e<268435455?(this.buf[this.pos++]=224|Math.floor(e/16777216),this.buf[this.pos++]=255&Math.floor(e/65536),this.buf[this.pos++]=255&Math.floor(e/256),this.buf[this.pos++]=255&e):(this.buf[this.pos++]=240|Math.floor(e/268435456),this.buf[this.pos++]=255&Math.floor(e/1048576),this.buf[this.pos++]=255&Math.floor(e/4096),this.buf[this.pos++]=255&Math.floor(e/4),this.buf[this.pos++]=15&e)}WriteByteNeg(e){this.buf[--this.pos]=e}}},5460:(e,t,i)=>{var n=i(8287).Buffer;const r=i(8706);function s(e){return 4095&e}function o(e,t){for(var i=0;t>=e[i+1];)i++;return i}function a(e){for(var t=new Array(4096),i=0,n=0;n<4096;n++){for(;n>=e[i+1];)i++;t[n]=i}return t}function c(e,t,i){return i*(e>>12)+(4095&e)-t}function l(e,t){for(;t<1<<23;)t=(t<<8)+e.ReadByte();return t}function h(e,t){t.WriteByteNeg(e>>24&255),t.WriteByteNeg(e>>16&255),t.WriteByteNeg(e>>8&255),t.WriteByteNeg(255&e)}function d(e,t,i,n,r){return e=function(e,t,i,n){for(var r=(1<<23>>n<<8)*i;e>=r;)t.WriteByteNeg(255&e),e>>=8;return e}(e,t,n,r),(Math.floor(e/n)<<r)+e%n+i}function u(e,t,i){for(var n=0;n<256;n++)t[n]=0;var r=e.ReadByte(),s=r,o=0;do{var a=e.ReadITF8();t[r]=a,o>0?(o--,r++):(r=e.ReadByte())==s+1&&(o=e.ReadByte()),s=r}while(0!=r);for(i[0]=0,n=0;n<=255;n++)i[n+1]=i[n]+t[n]}function f(e){for(var t=0,i=0;i<256;i++)t+=e[i];const n=4096;var r=n/t;do{var s=0,o=0,a=0;for(t=0,i=0;i<256;i++)0!=e[i]&&(s<e[i]&&(s=e[i],o=i),e[i]=Math.floor(e[i]*r),0==e[i]&&(e[i]=1),t+=e[i]);t<n?e[o]+=n-t:t-n<e[o]/2&&e[o]>2?e[o]-=t-n:t!=n&&(r*=.99,a=1)}while(a)}function p(e,t){for(var i=0,n=0;n<256;n++)if(t[n]){if(i>0)i--;else if(e.WriteByte(n),n>0&&t[n-1]>0){for(i=n+1;i<256&&t[i];i++);i-=n+1,e.WriteByte(i)}e.WriteITF8(t[n])}e.WriteByte(0)}e.exports={decode:function(e){var t=new r(e),i=t.ReadByte(),h=(t.ReadUint32(),t.ReadUint32());return 0==i?function(e,t){var i=new Array(256),r=new Array(256);u(e,i,r);for(var o=a(r),h=new Array(4),d=0;d<4;d++)h[d]=e.ReadUint32();var f=new n.allocUnsafe(t);for(d=0;d<t;d++){var p=d%4,g=o[s(h[p])];f[d]=g,h[p]=c(h[p],r[g],i[g]),h[p]=l(e,h[p])}return f}(t,h):function(e,t){var i=new Array(256),r=new Array(256);!function(e,t,i){for(var n=0;n<256;n++){t[n]=new Array(256),i[n]=new Array(256);for(var r=0;r<256;r++)t[n][r]=0}var s=e.ReadByte(),o=s,a=0;do{u(e,t[s],i[s]),a>0?(a--,s++):(s=e.ReadByte())==o+1&&(a=e.ReadByte()),o=s}while(0!=s)}(e,i,r);for(var h=new Array(256),d=0;d<256;d++)h[d]=a(r[d]);for(var f=new Array(4),p=new Array(4),g=0;g<4;g++)f[g]=e.ReadUint32(),p[g]=0;var m=new n.allocUnsafe(t),w=Math.floor(t/4);for(d=0;d<w;d++)for(g=0;g<4;g++){var b=s(f[g]),F=h[p[g]][b];m[d+g*w]=F,f[g]=c(f[g],r[p[g]][F],i[p[g]][F]),f[g]=l(e,f[g]),p[g]=F}for(d*=4;d<t;)b=s(f[3]),F=o(r[p[3]],b),m[d++]=F,f[3]=c(f[3],r[p[3]][F],i[p[3]][F]),f[3]=l(e,f[3]),p[3]=F;return m}(t,h)},encode:function(e,t){return 0==t?function(e){const t=e.length;var i=new r("",0,780);i.WriteByte(0),i.WriteUint32(0),i.WriteUint32(0);var s=new Array(256);(function(e,t){for(var i=0;i<256;i++)t[i]=0;for(i=0;i<e.length;i++)t[e[i]]++})(e,s),f(s),p(i,s);var o=new Array(256);o[0]=0;for(var a=1;a<256;a++)o[a]=o[a-1]+s[a-1];var c=new Array(4);for(a=0;a<4;a++)c[a]=1<<23;var l=Math.floor(1.05*t+100),u=new r("",l,l);for(a=t-1;a>=0;a--)c[a%4]=d(c[a%4],u,o[e[a]],s[e[a]],12);for(a=3;a>=0;a--)h(c[a],u);var g=i.pos;return i.buf.writeInt32LE(g-9+(u.length-u.pos),1),i.buf.writeInt32LE(t,5),n.concat([i.buf.slice(0,i.pos),u.buf.slice(u.pos,u.length)],i.pos+u.length-u.pos)}(e):function(e){const t=e.length;var i=new r("",0,198156);i.WriteByte(1),i.WriteUint32(0),i.WriteUint32(0);for(var s=new Array(256),o=new Array(256),a=new Array(256),c=0;c<256;c++)o[c]=new Array(256),a[c]=new Array(256);for(function(e,t,i){for(var n=0;n<256;n++){i[n]=0;for(var r=0;r<256;r++)t[n][r]=0}var s=0;for(n=0;n<e.length;n++)i[e[n]]++,t[s][e[n]]++,s=e[n];t[0][e[1*(e.length>>2)]]++,t[0][e[2*(e.length>>2)]]++,t[0][e[3*(e.length>>2)]]++,i[0]+=3}(e,o,s),function(e,t){for(var i=0;i<256;i++)t[i]&&f(e[i])}(o,s),function(e,t,i){for(var n=0,r=0;r<256;r++)if(i[r]){if(n>0)n--;else if(e.WriteByte(r),r>0&&i[r-1]>0){for(n=r+1;n<256&&i[n];n++);n-=r+1,e.WriteByte(n)}p(e,t[r])}e.WriteByte(0)}(i,o,s),c=0;c<256;c++)if(s[c]){a[c][0]=0;for(var l=1;l<256;l++)a[c][l]=a[c][l-1]+o[c][l-1]}var u=new Array(4),g=new Array(4);for(l=0;l<4;l++)u[l]=1<<23,g[l]=0;var m=new r("",t,t),w=Math.floor(t/4),b=new Array(4),F=new Array(4);for(l=0;l<4;l++)b[l]=(l+1)*w-2,F[l]=e[b[l]+1];for(F[3]=e[t-1],c=t-2;c>4*w-2;c--)u[3]=d(u[3],m,a[e[c]][F[3]],o[e[c]][F[3]],12),F[3]=e[c];for(;b[0]>=0;)for(l=3;l>=0;l--){var v=e[b[l]];u[l]=d(u[l],m,a[v][F[l]],o[v][F[l]],12),F[l]=v,b[l]--}for(l=3;l>=0;l--)u[l]=d(u[l],m,a[0][F[l]],o[0][F[l]],12);for(c=3;c>=0;c--)h(u[c],m);var y=i.pos;return i.buf.writeInt32LE(y-9+(m.length-m.pos),1),i.buf.writeInt32LE(t,5),n.concat([i.buf.slice(0,i.pos),m.buf.slice(m.pos,m.length)],i.pos+m.length-m.pos)}(e)}}},8223:(e,t,i)=>{var n=i(8287).Buffer;const r=i(8706);function s(e,t){return e&(1<<t)-1}function o(e,t){for(var i=0;t>=e[i+1];)i++;return i}function a(e,t){for(var i=1<<t,n=new Array(i),r=0,s=0;s<i;s++){for(;s>=e[r+1];)r++;n[s]=r}return n}function c(e,t,i,n){return i*(e>>n)+(e&(1<<n)-1)-t}function l(e,t){return t<32768&&(t=(t<<16)+e.ReadUint16()),t}function h(e,t){t.WriteByteNeg(e>>24&255),t.WriteByteNeg(e>>16&255),t.WriteByteNeg(e>>8&255),t.WriteByteNeg(255&e)}function d(e,t,i,n,r){return e=function(e,t,i,n){for(var r=(1<<31-n)*i;e>=r;)t.WriteByteNeg(e>>8&255),t.WriteByteNeg(255&e),e>>=16;return e}(e,t,n,r),(Math.floor(e/n)<<r)+e%n+i}function u(e,t,i){0==i&&(i=4);for(var n=new Array(i),s=new Array(i),o=0;o<i;o++)s[o]=Math.floor(t.length/i)+(t.length%i>o),n[o]=new Array(s[o]);for(var a=0,c=0;c<t.length;c+=i,a++)for(var l=0;l<i;l++)a<n[l].length&&(n[l][a]=t[c+l]);var h=new Array(i),d=0;for(o=0;o<i;o++){var u=p(n[o],0),f=p(n[o],1);h[o]=f.length<u.length?f:u,d+=h[o].length}var g=new r("",0,d+5*i+1);for(g.WriteByte(i),o=0;o<i;o++)g.WriteUint7(h[o].length);for(o=0;o<i;o++)g.WriteData(h[o],h[o].length);return g.buf.slice(0,g.buf.pos)}function f(e,t){var i=e.ReadByte(),h=1&i,d=8&i,u=32&i,p=64&i,w=128&i;if(16&i||(t=e.ReadUint7()),d)return function(e,t){for(var i=e.ReadByte(),r=new Array(i),s=new Array(i),o=0;o<i;o++)r[o]=e.ReadUint7();var a=new Array(i);for(o=0;o<i;o++)s[o]=Math.floor(t/i)+(t%i>o),a[o]=f(e,s[o]);var c=new n.allocUnsafe(t);for(o=0;o<i;o++)for(var l=0;l<s[o];l++)c[l*i+o]=a[o][l];return c}(e,t);if(w)var F=t,[v,y,t]=function(e){for(var t=e.ReadByte(),i=new Array(t),n=0;n<t;n++)i[n]=e.ReadByte();return[i,t,e.ReadUint7()]}(e);if(p)var A=t,[C,_,t]=function(e){var t=e.ReadUint7(),i=e.ReadUint7();if(1&t)var n=e.ReadData((t-1)/2);else{var s=e.ReadUint7();n=e.ReadData(s),n=m(new r(n),t/2)}n=new r(n);var o=new Array(256),a=n.ReadByte();0==a&&(a=256);for(var c=0;c<a;c++)o[n.ReadByte()]=1;return[o,n,i]}(e);if(u)var x=e.ReadData(t);else x=0==h?m(e,t):function(e,t){var i=(f=e.ReadByte())>>4,h=e;if(1&f){var d=e.ReadUint7(),u=e.ReadUint7(),f=new r(e.ReadData(u));h=new r(m(f,d))}var p=new Array(256),w=new Array(256);!function(e,t,i,n){for(var r=0;r<256;r++){t[r]=new Array(256),i[r]=new Array(256);for(var s=0;s<256;s++)t[r][s]=0}var o=g(e);for(r=0;r<256;r++)if(o[r]){var a=0;for(s=0;s<256;s++)o[s]&&(a>0?a--:(t[r][s]=e.ReadUint7(),0==t[r][s]&&(a=e.ReadByte())));for(b(t[r],n),i[r][0]=0,s=0;s<256;s++)i[r][s+1]=i[r][s]+t[r][s]}}(h,p,w,i);for(var F=new Array(256),v=0;v<256;v++)F[v]=a(w[v],i);for(var y=new Array(4),A=new Array(4),C=0;C<4;C++)y[C]=e.ReadUint32(),A[C]=0;var _=new n.allocUnsafe(t),x=Math.floor(t/4);for(v=0;v<x;v++)for(C=0;C<4;C++){var k=s(y[C],i),I=F[A[C]][k];_[v+C*x]=I,y[C]=c(y[C],w[A[C]][I],p[A[C]][I],i),y[C]=l(e,y[C]),A[C]=I}for(v*=4;v<t;)k=s(y[3],i),I=o(w[A[3]],k),_[v++]=I,y[3]=c(y[3],w[A[3]][I],p[A[3]][I],i),y[3]=l(e,y[3]),A[3]=I;return _}(e,t);return p&&(x=function(e,t,i,s){new r(e);for(var o=new n.allocUnsafe(s),a=0,c=0;a<s;c++){var l=e[c];if(t[l])for(var h=i.ReadUint7(),d=0;d<=h;d++)o[a++]=l;else o[a++]=l}return o}(x,C,_,A)),w&&(x=function(e,t,i,r){var s=new n.allocUnsafe(r),o=0;if(i<=1)for(var a=0;a<r;a++)s[a]=t[0];else if(i<=2)for(a=0;a<r;a++){if(a%8==0)var c=e[o++];s[a]=t[1&c],c>>=1}else if(i<=4)for(a=0;a<r;a++)a%4==0&&(c=e[o++]),s[a]=t[3&c],c>>=2;else if(i<=16)for(a=0;a<r;a++)a%2==0&&(c=e[o++]),s[a]=t[15&c],c>>=4;return s}(x,v,y,F)),x}function p(e,t){var i=new r("",0,10);i.WriteByte(t);var s=1&t,o=8&t,a=32&t,c=64&t,l=128&t,f=t>>8;if(16&t||i.WriteUint7(e.length),o)return n.concat([i.buf.slice(0,i.pos),u(0,e,f)]);var p=new n.alloc(0);l&&([p,e]=function(e){for(var t=new Array(256),i=0;i<256;i++)t[i]=0;for(i=0;i<e.length;i++)t[e[i]]++;var s=new Array(256),o=0;for(i=0;i<256;i++)t[i]>0&&(s[i]=o++);if(!(o>16)){if(o<=1)var a=new n.allocUnsafe(0);else if(o<=2){a=new n.allocUnsafe(Math.ceil(e.length/8));var c=-1;for(i=0;i<e.length;i++)i%8==0&&(a[++c]=0),a[c]+=s[e[i]]<<i%8}else if(o<=4)for(a=new n.allocUnsafe(Math.ceil(e.length/4)),c=-1,i=0;i<e.length;i++)i%4==0&&(a[++c]=0),a[c]+=s[e[i]]<<i%4*2;else for(a=new n.allocUnsafe(Math.ceil(e.length/2)),c=-1,i=0;i<e.length;i++)i%2==0&&(a[++c]=0),a[c]+=s[e[i]]<<i%2*4;var l=new r("",0,o+5);for(l.WriteByte(o),c=0,i=0;i<256;i++)t[i]>0&&(t[i]=c++,l.WriteByte(i));return l.WriteUint7(a.length),[l.buf.slice(0,l.pos),a]}}(e));var g=new n.alloc(0);if(c&&([g,e]=function(e){for(var t=new Array(256),i=0;i<256;i++)t[i]=0;var s=-1;for(i=0;i<e.length;i++)t[e[i]]+=e[i]==s?1:-1,s=e[i];var o=0;for(i=0;i<256;i++)t[i]>0&&o++;for(o||(o=1,t[0]=1),(h=new r("",0,o+1+e.length)).WriteByte(o),i=0;i<256;i++)t[i]>0&&h.WriteByte(i);var a=new n.allocUnsafe(e.length),c=0;for(i=0;i<e.length;i++)if(a[c++]=e[i],t[e[i]]>0){s=e[i];for(var l=0;i+l+1<e.length&&e[i+l+1]==s;)l++;h.WriteUint7(l),i+=l}var h,d=v(h.buf.slice(0,h.pos)),u=new r("",0,16);return u.WriteUint7(2*h.pos),u.WriteUint7(c),u.WriteUint7(d.length),[h=n.concat([u.buf.slice(0,u.pos),d]),a.slice(0,c)]}(e)),e.length<4&&1==s&&(s=0,i.buf[0]&=-2),a)var m=e;else m=0==s?v(e):function(e){const t=e.length;for(var i=new r("",0,198156),s=new Array(256),o=new Array(256),a=new Array(256),c=0;c<256;c++)o[c]=new Array(256),a[c]=new Array(256);(function(e,t,i){for(var n=0;n<256;n++){i[n]=0;for(var r=0;r<256;r++)t[n][r]=0}var s=0;for(n=0;n<e.length;n++)i[s]++,t[s][e[n]]++,s=e[n];i[s]++,t[0][e[1*(e.length>>2)]]++,t[0][e[2*(e.length>>2)]]++,t[0][e[3*(e.length>>2)]]++,i[0]+=3})(e,o,s),function(e,t){for(var i=0;i<256;i++)if(t[i]){var n=Math.ceil(Math.log2(t[i]));n>12&&(n=12),w(e[i],n)}}(o,s);var l=new r("",0,198156);!function(e,t,i){F(e,i);for(var n=0;n<256;n++)if(i[n])for(var r=0,s=0;s<256;s++)if(i[s])if(r)r--;else if(e.WriteUint7(t[n][s]),!t[n][s]){for(var o=s+1;o<256;o++)if(i[o]){if(0!=t[n][o])break;r++}e.WriteByte(r)}}(l,o,s);var u=v(l.buf.slice(0,l.pos));for(u.length<l.pos?(i.WriteByte(193),i.WriteUint7(l.pos),i.WriteUint7(u.length),i.WriteData(u,u.length)):(i.WriteByte(192),i.WriteData(l.buf,l.pos)),function(e,t){for(var i=0;i<256;i++)t[i]&&b(e[i],12)}(o,s),c=0;c<256;c++)if(s[c]){a[c][0]=0;for(var f=1;f<256;f++)a[c][f]=a[c][f-1]+o[c][f-1]}var p=new Array(4),g=new Array(4);for(f=0;f<4;f++)p[f]=32768,g[f]=0;var m=new r("",1.05*t+100|0,1.05*t+100|0),y=Math.floor(t/4),A=new Array(4),C=new Array(4);for(f=0;f<4;f++)A[f]=(f+1)*y-2,C[f]=e[A[f]+1];for(C[3]=e[t-1],c=t-2;c>4*y-2;c--)p[3]=d(p[3],m,a[e[c]][C[3]],o[e[c]][C[3]],12),C[3]=e[c];for(;A[0]>=0;)for(f=3;f>=0;f--){var _=e[A[f]];p[f]=d(p[f],m,a[_][C[f]],o[_][C[f]],12),C[f]=_,A[f]--}for(f=3;f>=0;f--)p[f]=d(p[f],m,a[0][C[f]],o[0][C[f]],12);for(c=3;c>=0;c--)h(p[c],m);return n.concat([i.buf.slice(0,i.pos),m.buf.slice(m.pos,m.length)],i.pos+m.length-m.pos)}(e);return n.concat([i.buf.slice(0,i.pos),p,g,m])}function g(e){for(var t=new Array(256),i=0;i<256;i++)t[i]=0;var n=0,r=e.ReadByte(),s=r;do{t[r]=1,n>0?(n--,r++):(r=e.ReadByte())==s+1&&(n=e.ReadByte()),s=r}while(0!=r);return t}function m(e,t){var i=new Array(256),r=new Array(256);!function(e,t,i){for(var n=0;n<256;n++)t[n]=0;var r=g(e);for(n=0;n<256;n++)r[n]>0&&(t[n]=e.ReadUint7());for(b(t,12),i[0]=0,n=0;n<=255;n++)i[n+1]=i[n]+t[n]}(e,i,r);for(var o=a(r,12),h=new Array(4),d=0;d<4;d++)h[d]=e.ReadUint32();var u=new n.allocUnsafe(t);for(d=0;d<t;d++){var f=d%4,p=o[s(h[f],12)];u[d]=p,h[f]=c(h[f],r[p],i[p],12),h[f]=l(e,h[f])}return u}function w(e,t){for(var i=0,n=0;n<256;n++)i+=e[n];const r=1<<t;var s=r/i;do{var o=0,a=0,c=0;for(i=0,n=0;n<256;n++)0!=e[n]&&(o<e[n]&&(o=e[n],a=n),e[n]=Math.floor(e[n]*s),0==e[n]&&(e[n]=1),i+=e[n]);i<r?e[a]+=r-i:i-r<e[a]/2&&e[a]>2?e[a]-=i-r:i!=r&&(s=r/i,c=1)}while(c)}function b(e,t){for(var i=0,n=0;n<256;n++)i+=e[n];if(0!=i&&i!=1<<t){for(var r=0;i<1<<t;)i*=2,r++;for(n=0;n<256;n++)e[n]<<=r}}function F(e,t){for(var i=0,n=0;n<256;n++)if(t[n])if(i>0)i--;else if(e.WriteByte(n),n>0&&t[n-1]>0){for(i=n+1;i<256&&t[i];i++);i-=n+1,e.WriteByte(i)}e.WriteByte(0)}function v(e){const t=e.length;var i=new r("",0,780),s=new Array(256);!function(e,t){for(var i=0;i<256;i++)t[i]=0;for(i=0;i<e.length;i++)t[e[i]]++}(e,s);var o=Math.ceil(Math.log2(t));o>12&&(o=12),w(s,o),function(e,t){F(e,t);for(var i=0;i<256;i++)t[i]&&e.WriteUint7(t[i])}(i,s),w(s,12);var a=new Array(256);a[0]=0;for(var c=1;c<256;c++)a[c]=a[c-1]+s[c-1];var l=new Array(4);for(c=0;c<4;c++)l[c]=32768;var u=new r("",1.05*t+100|0,1.05*t+100|0);for(c=t-1;c>=0;c--)l[c%4]=d(l[c%4],u,a[e[c]],s[e[c]],12);for(c=3;c>=0;c--)h(l[c],u);return n.concat([i.buf.slice(0,i.pos),u.buf.slice(u.pos,u.length)],i.pos+u.length-u.pos)}e.exports={decode:function(e){return f(new r(e),0)},encode:p}},5997:(e,t,i)=>{var n=i(8287).Buffer;const r=i(8706),s=i(8223);var o=new(i(635));function a(e,t){for(var i=e+"";i.length<t;)i="0"+i;return i}function c(e,t,i,n){var r=e[0][0].ReadByte(),s=n-e[0][r].ReadUint32();if(5==r)return t[n]=t[s],i[n]=i[s],t[n];var o=1;t[n]="",i[n]=new Array(256);do{switch(r=e[o][0].ReadByte()){case 2:i[n][o]=e[o][2].ReadChar();break;case 1:i[n][o]=e[o][1].ReadString();break;case 7:i[n][o]=e[o][7].ReadUint32();break;case 3:var c=e[o][3].ReadUint32(),l=e[o][4].ReadByte();i[n][o]=a(c,l);break;case 8:i[n][o]=(0|i[s][o])+e[o][8].ReadByte();break;case 9:c=(0|i[s][o])+e[o][9].ReadByte(),l=i[s][o].length,i[n][o]=a(c,l);break;case 10:i[n][o]=i[s][o];break;default:i[n][o]=""}t[n]+=i[n][o++]}while(12!=r);return t[n]}function l(e,t,i,n,r,s){for(var o=0;o<n.length;o++)if(!(i>0&&5==t[o][0].type)&&t[o][i])switch(e[0].WriteByte(t[o][i].type),t[o][i].type){case 6:e[6].WriteUint32(t[o][i].val);break;case 5:e[5].WriteUint32(t[o][i].val);break;case 1:e[1].WriteString(t[o][i].val);break;case 2:e[2].WriteChar(t[o][i].val);break;case 7:e[7].WriteUint32(t[o][i].val);break;case 3:e[3].WriteUint32(t[o][i].val),e[4].WriteByte(t[o][i].val.length);break;case 8:case 9:e[t[o][i].type].WriteByte(t[o][i].val)}}function h(e,t,i,n){for(var r=0;r<=12;r++)if(!(e[r].pos<=0)){n.WriteByte(r+(0==r?128:0)),e[r]=e[r].buf.slice(0,e[r].pos);var s=d(e[r],i);n.WriteUint7(s.length),n.WriteData(s,s.length)}}function d(e,t){var i,n=1<<30,r=[0,1,64,65,128,129,201];for(var a in r){var c=r[a];if(!(1&c&&e.length<100||8&c&&e.length%4!=0)){try{var l=t?o.encode(e,c):s.encode(e,c)}catch(e){l=0}l&&n>l.length&&(n=l.length,i=l)}}return i}function u(e,t,i,n,r){var s=0,o=r-1;e[r]=new Array(256),t[n]?e[r][0]={type:5,val:r-t[n]}:e[r][0]={type:6,val:0==r?0:1},t[n]=r;for(var a=n.match(/([a-zA-Z0-9]{1,9})|([^a-zA-Z0-9]+)/g),c=0;c<a.length;c++){var l=c+1,h=1,d=a[c];if(a[c].match(/^0+[0-9]*$/g)?h=3:a[c].match(/^[0-9]+$/g)?h=7:1==a[c].length&&(h=2),o>=0&&e[o][l])if(e[o][l].str==a[c])h=10,d="";else if(7==e[o][l].type||8==e[o][l].type){var u=d-e[o][l].str;i[l]++,u>=0&&u<256&&i[l]>r/2&&(h=8,d=u)}else 3!=e[o][l].type&&9!=e[o][l].type||e[o][l].str.length!=d.length||(u=d-e[o][l].str,i[l]++,u>=0&&u<256&&i[l]>r/2&&(h=9,d=u));e[r][l]={str:a[c],val:d,type:h},s<e[r][l].val.length+3&&(s=e[r][l].val.length+3)}return e[r][++l]={type:12},[l+1,s]}e.exports={encode:function(e,t){var i=e.toString();"\n"==i[i.length-1]&&(i=i.substring(0,i.length-1));var n=i.split("\n"),s=new r("",0,2*i.length+1e4);s.WriteUint32(i.length),s.WriteUint32(n.length),s.WriteByte(t);for(var o=new Array(n.length),a={},c=new Array(256).fill(0),d=0,f=0,p=0;p<n.length;p++){var[g,m]=u(o,a,c,n[p],p);d<g&&(d=g),f<m&&(f=m)}for(var w=0;w<d;w++){for(var b=new Array(13),F=0;F<=12;F++)b[F]=new r("",0,n.length*f);l(b,o,w,n),h(b,0,t,s)}return s.buf.slice(0,s.pos)},decode:function(e,t,i){(e=new r(e)).ReadUint32();var a=e.ReadUint32(),l=e.ReadByte(),h=function(e,t,i,a){for(var c=-1,l=new Array(256);!e.EOF();){var h=e.ReadByte(),d=128&h,u=64&h,f=63&h;if(d&&(l[++c]=new Array(13)),0!=f&&d){var p=new Array(a-1).fill(10);l[c][0]=new r(n.from([f].concat(p)))}if(u){var g=e.ReadByte(),m=e.ReadByte();l[c][f]=new r(l[g][m].buf)}else{var w=e.ReadUint7(),b=e.ReadData(w);l[c][f]=i?o.decode(b):s.decode(b),l[c][f]=new r(l[c][f])}}return l}(e,0,l,a),d=new Array(a),u=new Array(a),f="";void 0===i&&(i="\n");for(var p=0;p<a;p++)f+=c(h,d,u,p)+i;return f}}},7526:(e,t)=>{t.byteLength=function(e){var t=a(e),i=t[0],n=t[1];return 3*(i+n)/4-n},t.toByteArray=function(e){var t,i,s=a(e),o=s[0],c=s[1],l=new r(function(e,t,i){return 3*(t+i)/4-i}(0,o,c)),h=0,d=c>0?o-4:o;for(i=0;i<d;i+=4)t=n[e.charCodeAt(i)]<<18|n[e.charCodeAt(i+1)]<<12|n[e.charCodeAt(i+2)]<<6|n[e.charCodeAt(i+3)],l[h++]=t>>16&255,l[h++]=t>>8&255,l[h++]=255&t;return 2===c&&(t=n[e.charCodeAt(i)]<<2|n[e.charCodeAt(i+1)]>>4,l[h++]=255&t),1===c&&(t=n[e.charCodeAt(i)]<<10|n[e.charCodeAt(i+1)]<<4|n[e.charCodeAt(i+2)]>>2,l[h++]=t>>8&255,l[h++]=255&t),l},t.fromByteArray=function(e){for(var t,n=e.length,r=n%3,s=[],o=16383,a=0,l=n-r;a<l;a+=o)s.push(c(e,a,a+o>l?l:a+o));return 1===r?(t=e[n-1],s.push(i[t>>2]+i[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],s.push(i[t>>10]+i[t>>4&63]+i[t<<2&63]+"=")),s.join("")};for(var i=[],n=[],r="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0;o<64;++o)i[o]=s[o],n[s.charCodeAt(o)]=o;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=e.indexOf("=");return-1===i&&(i=t),[i,i===t?0:4-i%4]}function c(e,t,n){for(var r,s,o=[],a=t;a<n;a+=3)r=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(i[(s=r)>>18&63]+i[s>>12&63]+i[s>>6&63]+i[63&s]);return o.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},8287:(e,t,i)=>{const n=i(7526),r=i(251),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=c,t.SlowBuffer=function(e){return+e!=e&&(e=0),c.alloc(+e)},t.INSPECT_MAX_BYTES=50;const o=2147483647;function a(e){if(e>o)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,i){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return d(e)}return l(e,t,i)}function l(e,t,i){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const i=0|g(e,t);let n=a(i);const r=n.write(e,t);return r!==i&&(n=n.slice(0,r)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(K(e,Uint8Array)){const t=new Uint8Array(e);return f(t.buffer,t.byteOffset,t.byteLength)}return u(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(K(e,ArrayBuffer)||e&&K(e.buffer,ArrayBuffer))return f(e,t,i);if("undefined"!=typeof SharedArrayBuffer&&(K(e,SharedArrayBuffer)||e&&K(e.buffer,SharedArrayBuffer)))return f(e,t,i);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,i);const r=function(e){if(c.isBuffer(e)){const t=0|p(e.length),i=a(t);return 0===i.length||e.copy(i,0,0,t),i}return void 0!==e.length?"number"!=typeof e.length||Y(e.length)?a(0):u(e):"Buffer"===e.type&&Array.isArray(e.data)?u(e.data):void 0}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function h(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function d(e){return h(e),a(e<0?0:0|p(e))}function u(e){const t=e.length<0?0:0|p(e.length),i=a(t);for(let n=0;n<t;n+=1)i[n]=255&e[n];return i}function f(e,t,i){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(i||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===i?new Uint8Array(e):void 0===i?new Uint8Array(e,t):new Uint8Array(e,t,i),Object.setPrototypeOf(n,c.prototype),n}function p(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function g(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||K(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const i=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===i)return 0;let r=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return W(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return G(e).length;default:if(r)return n?-1:W(e).length;t=(""+t).toLowerCase(),r=!0}}function m(e,t,i){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return N(this,t,i);case"utf8":case"utf-8":return k(this,t,i);case"ascii":return S(this,t,i);case"latin1":case"binary":return E(this,t,i);case"base64":return x(this,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,i);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function w(e,t,i){const n=e[t];e[t]=e[i],e[i]=n}function b(e,t,i,n,r){if(0===e.length)return-1;if("string"==typeof i?(n=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),Y(i=+i)&&(i=r?0:e.length-1),i<0&&(i=e.length+i),i>=e.length){if(r)return-1;i=e.length-1}else if(i<0){if(!r)return-1;i=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:F(e,t,i,n,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,i):Uint8Array.prototype.lastIndexOf.call(e,t,i):F(e,[t],i,n,r);throw new TypeError("val must be string, number or Buffer")}function F(e,t,i,n,r){let s,o=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,a/=2,c/=2,i/=2}function l(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(r){let n=-1;for(s=i;s<a;s++)if(l(e,s)===l(t,-1===n?0:s-n)){if(-1===n&&(n=s),s-n+1===c)return n*o}else-1!==n&&(s-=s-n),n=-1}else for(i+c>a&&(i=a-c),s=i;s>=0;s--){let i=!0;for(let n=0;n<c;n++)if(l(e,s+n)!==l(t,n)){i=!1;break}if(i)return s}return-1}function v(e,t,i,n){i=Number(i)||0;const r=e.length-i;n?(n=Number(n))>r&&(n=r):n=r;const s=t.length;let o;for(n>s/2&&(n=s/2),o=0;o<n;++o){const n=parseInt(t.substr(2*o,2),16);if(Y(n))return o;e[i+o]=n}return o}function y(e,t,i,n){return $(W(t,e.length-i),e,i,n)}function A(e,t,i,n){return $(function(e){const t=[];for(let i=0;i<e.length;++i)t.push(255&e.charCodeAt(i));return t}(t),e,i,n)}function C(e,t,i,n){return $(G(t),e,i,n)}function _(e,t,i,n){return $(function(e,t){let i,n,r;const s=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)i=e.charCodeAt(o),n=i>>8,r=i%256,s.push(r),s.push(n);return s}(t,e.length-i),e,i,n)}function x(e,t,i){return 0===t&&i===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,i))}function k(e,t,i){i=Math.min(e.length,i);const n=[];let r=t;for(;r<i;){const t=e[r];let s=null,o=t>239?4:t>223?3:t>191?2:1;if(r+o<=i){let i,n,a,c;switch(o){case 1:t<128&&(s=t);break;case 2:i=e[r+1],128==(192&i)&&(c=(31&t)<<6|63&i,c>127&&(s=c));break;case 3:i=e[r+1],n=e[r+2],128==(192&i)&&128==(192&n)&&(c=(15&t)<<12|(63&i)<<6|63&n,c>2047&&(c<55296||c>57343)&&(s=c));break;case 4:i=e[r+1],n=e[r+2],a=e[r+3],128==(192&i)&&128==(192&n)&&128==(192&a)&&(c=(15&t)<<18|(63&i)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(s=c))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),r+=o}return function(e){const t=e.length;if(t<=I)return String.fromCharCode.apply(String,e);let i="",n=0;for(;n<t;)i+=String.fromCharCode.apply(String,e.slice(n,n+=I));return i}(n)}t.kMaxLength=o,c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,i){return l(e,t,i)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,i){return function(e,t,i){return h(e),e<=0?a(e):void 0!==t?"string"==typeof i?a(e).fill(t,i):a(e).fill(t):a(e)}(e,t,i)},c.allocUnsafe=function(e){return d(e)},c.allocUnsafeSlow=function(e){return d(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(K(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),K(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let i=e.length,n=t.length;for(let r=0,s=Math.min(i,n);r<s;++r)if(e[r]!==t[r]){i=e[r],n=t[r];break}return i<n?-1:n<i?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let i;if(void 0===t)for(t=0,i=0;i<e.length;++i)t+=e[i].length;const n=c.allocUnsafe(t);let r=0;for(i=0;i<e.length;++i){let t=e[i];if(K(t,Uint8Array))r+t.length>n.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(n,r)):Uint8Array.prototype.set.call(n,t,r);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,r)}r+=t.length}return n},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)w(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)w(this,t,t+3),w(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)w(this,t,t+7),w(this,t+1,t+6),w(this,t+2,t+5),w(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?k(this,0,e):m.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const i=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,i).replace(/(.{2})/g,"$1 ").trim(),this.length>i&&(e+=" ... "),"<Buffer "+e+">"},s&&(c.prototype[s]=c.prototype.inspect),c.prototype.compare=function(e,t,i,n,r){if(K(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===i&&(i=e?e.length:0),void 0===n&&(n=0),void 0===r&&(r=this.length),t<0||i>e.length||n<0||r>this.length)throw new RangeError("out of range index");if(n>=r&&t>=i)return 0;if(n>=r)return-1;if(t>=i)return 1;if(this===e)return 0;let s=(r>>>=0)-(n>>>=0),o=(i>>>=0)-(t>>>=0);const a=Math.min(s,o),l=this.slice(n,r),h=e.slice(t,i);for(let e=0;e<a;++e)if(l[e]!==h[e]){s=l[e],o=h[e];break}return s<o?-1:o<s?1:0},c.prototype.includes=function(e,t,i){return-1!==this.indexOf(e,t,i)},c.prototype.indexOf=function(e,t,i){return b(this,e,t,i,!0)},c.prototype.lastIndexOf=function(e,t,i){return b(this,e,t,i,!1)},c.prototype.write=function(e,t,i,n){if(void 0===t)n="utf8",i=this.length,t=0;else if(void 0===i&&"string"==typeof t)n=t,i=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(i)?(i>>>=0,void 0===n&&(n="utf8")):(n=i,i=void 0)}const r=this.length-t;if((void 0===i||i>r)&&(i=r),e.length>0&&(i<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let s=!1;for(;;)switch(n){case"hex":return v(this,e,t,i);case"utf8":case"utf-8":return y(this,e,t,i);case"ascii":case"latin1":case"binary":return A(this,e,t,i);case"base64":return C(this,e,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,e,t,i);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const I=4096;function S(e,t,i){let n="";i=Math.min(e.length,i);for(let r=t;r<i;++r)n+=String.fromCharCode(127&e[r]);return n}function E(e,t,i){let n="";i=Math.min(e.length,i);for(let r=t;r<i;++r)n+=String.fromCharCode(e[r]);return n}function N(e,t,i){const n=e.length;(!t||t<0)&&(t=0),(!i||i<0||i>n)&&(i=n);let r="";for(let n=t;n<i;++n)r+=X[e[n]];return r}function B(e,t,i){const n=e.slice(t,i);let r="";for(let e=0;e<n.length-1;e+=2)r+=String.fromCharCode(n[e]+256*n[e+1]);return r}function M(e,t,i){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>i)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,i,n,r,s){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<s)throw new RangeError('"value" argument is out of bounds');if(i+n>e.length)throw new RangeError("Index out of range")}function D(e,t,i,n,r){q(t,n,r,e,i,7);let s=Number(t&BigInt(4294967295));e[i++]=s,s>>=8,e[i++]=s,s>>=8,e[i++]=s,s>>=8,e[i++]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[i++]=o,o>>=8,e[i++]=o,o>>=8,e[i++]=o,o>>=8,e[i++]=o,i}function T(e,t,i,n,r){q(t,n,r,e,i,7);let s=Number(t&BigInt(4294967295));e[i+7]=s,s>>=8,e[i+6]=s,s>>=8,e[i+5]=s,s>>=8,e[i+4]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[i+3]=o,o>>=8,e[i+2]=o,o>>=8,e[i+1]=o,o>>=8,e[i]=o,i+8}function L(e,t,i,n,r,s){if(i+n>e.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function z(e,t,i,n,s){return t=+t,i>>>=0,s||L(e,0,i,4),r.write(e,t,i,n,23,4),i+4}function H(e,t,i,n,s){return t=+t,i>>>=0,s||L(e,0,i,8),r.write(e,t,i,n,52,8),i+8}c.prototype.slice=function(e,t){const i=this.length;(e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,i){e>>>=0,t>>>=0,i||M(e,t,this.length);let n=this[e],r=1,s=0;for(;++s<t&&(r*=256);)n+=this[e+s]*r;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,i){e>>>=0,t>>>=0,i||M(e,t,this.length);let n=this[e+--t],r=1;for(;t>0&&(r*=256);)n+=this[e+--t]*r;return n},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||M(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||M(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||M(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||M(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||M(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=Z((function(e){Q(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||V(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,r=this[++e]+256*this[++e]+65536*this[++e]+i*2**24;return BigInt(n)+(BigInt(r)<<BigInt(32))})),c.prototype.readBigUInt64BE=Z((function(e){Q(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||V(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],r=this[++e]*2**24+65536*this[++e]+256*this[++e]+i;return(BigInt(n)<<BigInt(32))+BigInt(r)})),c.prototype.readIntLE=function(e,t,i){e>>>=0,t>>>=0,i||M(e,t,this.length);let n=this[e],r=1,s=0;for(;++s<t&&(r*=256);)n+=this[e+s]*r;return r*=128,n>=r&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,i){e>>>=0,t>>>=0,i||M(e,t,this.length);let n=t,r=1,s=this[e+--n];for(;n>0&&(r*=256);)s+=this[e+--n]*r;return r*=128,s>=r&&(s-=Math.pow(2,8*t)),s},c.prototype.readInt8=function(e,t){return e>>>=0,t||M(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||M(e,2,this.length);const i=this[e]|this[e+1]<<8;return 32768&i?4294901760|i:i},c.prototype.readInt16BE=function(e,t){e>>>=0,t||M(e,2,this.length);const i=this[e+1]|this[e]<<8;return 32768&i?4294901760|i:i},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||M(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||M(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=Z((function(e){Q(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||V(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(i<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=Z((function(e){Q(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||V(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+i)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||M(e,4,this.length),r.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||M(e,4,this.length),r.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||M(e,8,this.length),r.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||M(e,8,this.length),r.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,i,n){e=+e,t>>>=0,i>>>=0,n||R(this,e,t,i,Math.pow(2,8*i)-1,0);let r=1,s=0;for(this[t]=255&e;++s<i&&(r*=256);)this[t+s]=e/r&255;return t+i},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,i,n){e=+e,t>>>=0,i>>>=0,n||R(this,e,t,i,Math.pow(2,8*i)-1,0);let r=i-1,s=1;for(this[t+r]=255&e;--r>=0&&(s*=256);)this[t+r]=e/s&255;return t+i},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=Z((function(e,t=0){return D(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Z((function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,i,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*i-1);R(this,e,t,i,n-1,-n)}let r=0,s=1,o=0;for(this[t]=255&e;++r<i&&(s*=256);)e<0&&0===o&&0!==this[t+r-1]&&(o=1),this[t+r]=(e/s|0)-o&255;return t+i},c.prototype.writeIntBE=function(e,t,i,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*i-1);R(this,e,t,i,n-1,-n)}let r=i-1,s=1,o=0;for(this[t+r]=255&e;--r>=0&&(s*=256);)e<0&&0===o&&0!==this[t+r+1]&&(o=1),this[t+r]=(e/s|0)-o&255;return t+i},c.prototype.writeInt8=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,i){return e=+e,t>>>=0,i||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=Z((function(e,t=0){return D(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Z((function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,i){return z(this,e,t,!0,i)},c.prototype.writeFloatBE=function(e,t,i){return z(this,e,t,!1,i)},c.prototype.writeDoubleLE=function(e,t,i){return H(this,e,t,!0,i)},c.prototype.writeDoubleBE=function(e,t,i){return H(this,e,t,!1,i)},c.prototype.copy=function(e,t,i,n){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(i||(i=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<i&&(n=i),n===i)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-i&&(n=e.length-t+i);const r=n-i;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,i,n):Uint8Array.prototype.set.call(e,this.subarray(i,n),t),r},c.prototype.fill=function(e,t,i,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,i=this.length):"string"==typeof i&&(n=i,i=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<i)throw new RangeError("Out of range index");if(i<=t)return this;let r;if(t>>>=0,i=void 0===i?this.length:i>>>0,e||(e=0),"number"==typeof e)for(r=t;r<i;++r)this[r]=e;else{const s=c.isBuffer(e)?e:c.from(e,n),o=s.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(r=0;r<i-t;++r)this[r+t]=s[r%o]}return this};const P={};function O(e,t,i){P[e]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function U(e){let t="",i=e.length;const n="-"===e[0]?1:0;for(;i>=n+4;i-=3)t=`_${e.slice(i-3,i)}${t}`;return`${e.slice(0,i)}${t}`}function q(e,t,i,n,r,s){if(e>i||e<t){const n="bigint"==typeof t?"n":"";let r;throw r=s>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(s+1)}${n}`:`>= -(2${n} ** ${8*(s+1)-1}${n}) and < 2 ** ${8*(s+1)-1}${n}`:`>= ${t}${n} and <= ${i}${n}`,new P.ERR_OUT_OF_RANGE("value",r,e)}!function(e,t,i){Q(t,"offset"),void 0!==e[t]&&void 0!==e[t+i]||V(t,e.length-(i+1))}(n,r,s)}function Q(e,t){if("number"!=typeof e)throw new P.ERR_INVALID_ARG_TYPE(t,"number",e)}function V(e,t,i){if(Math.floor(e)!==e)throw Q(e,i),new P.ERR_OUT_OF_RANGE(i||"offset","an integer",e);if(t<0)throw new P.ERR_BUFFER_OUT_OF_BOUNDS;throw new P.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${t}`,e)}O("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),O("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),O("ERR_OUT_OF_RANGE",(function(e,t,i){let n=`The value of "${e}" is out of range.`,r=i;return Number.isInteger(i)&&Math.abs(i)>2**32?r=U(String(i)):"bigint"==typeof i&&(r=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(r=U(r)),r+="n"),n+=` It must be ${t}. Received ${r}`,n}),RangeError);const j=/[^+/0-9A-Za-z-_]/g;function W(e,t){let i;t=t||1/0;const n=e.length;let r=null;const s=[];for(let o=0;o<n;++o){if(i=e.charCodeAt(o),i>55295&&i<57344){if(!r){if(i>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&s.push(239,191,189);continue}r=i;continue}if(i<56320){(t-=3)>-1&&s.push(239,191,189),r=i;continue}i=65536+(r-55296<<10|i-56320)}else r&&(t-=3)>-1&&s.push(239,191,189);if(r=null,i<128){if((t-=1)<0)break;s.push(i)}else if(i<2048){if((t-=2)<0)break;s.push(i>>6|192,63&i|128)}else if(i<65536){if((t-=3)<0)break;s.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return s}function G(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function $(e,t,i,n){let r;for(r=0;r<n&&!(r+i>=t.length||r>=e.length);++r)t[r+i]=e[r];return r}function K(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Y(e){return e!=e}const X=function(){const e="0123456789abcdef",t=new Array(256);for(let i=0;i<16;++i){const n=16*i;for(let r=0;r<16;++r)t[n+r]=e[i]+e[r]}return t}();function Z(e){return"undefined"==typeof BigInt?J:e}function J(){throw new Error("BigInt not supported")}},235:e=>{var t={array:function(e){var t=0,i=0,n=[0,1,3,7,15,31,63,127,255];return function(r){for(var s=0;r>0;){var o=8-t;r>=o?(s<<=o,s|=n[o]&e[i++],t=0,r-=o):(s<<=r,s|=(e[i]&n[r]<<8-r-t)>>8-r-t,t+=r,r=0)}return s}},simple:function(e){var i,n,r=t.header(e),s=[],o=0;do{-1!=(n=t.decompress(e,r))&&(s.push(n),o+=n.byteLength)}while(-1!=n);i=new Uint8Array(o),o=0;for(var a=0;a<s.length;++a)n=s[a],i.set(n,o),o+=n.byteLength;return i},header:function(e){if(4348520!=e(24))throw"No magic number found";var t=e(8)-48;if(t<1||t>9)throw"Not a BZIP archive";return t},decompress:function(e,t,i){for(var n=9e5,r="",s=0;s<6;s++)r+=e(8).toString(16);if("177245385090"==r)return-1;if("314159265359"!=r)throw"eek not valid bzip data";if(e(32),e(1))throw"unsupported obsolete version";var o=e(24);if(o>n)throw"Initial position larger than buffer size";var a=e(16),c=new Uint8Array(256),l=0;for(s=0;s<16;s++)if(a&1<<15-s){var h=e(16);for(g=0;g<16;g++)h&1<<15-g&&(c[l++]=16*s+g)}var d=e(3);if(d<2||d>6)throw"another error";var u=e(15);if(0==u)throw"meh";var f=[];for(s=0;s<d;s++)f[s]=s;var p=new Uint8Array(32768);for(s=0;s<u;s++){for(var g=0;e(1);g++)if(g>=d)throw"whoops another error";var m=f[g];f.splice(g,1),f.splice(0,0,m),p[s]=m}var w=l+2,b=[];for(g=0;g<d;g++){var F,v,y,A=new Uint8Array(258),C=new Uint8Array(21);for(a=e(5),s=0;s<w;s++){for(;;){if(a<1||a>20)throw"I gave up a while ago on writing error messages";if(!e(1))break;e(1)?a--:a++}A[s]=a}for(F=v=A[0],s=1;s<w;s++)A[s]>v?v=A[s]:A[s]<F&&(F=A[s]);(y=b[g]={}).permute=new Uint32Array(258),y.limit=new Uint32Array(21),y.base=new Uint32Array(21),y.minLen=F,y.maxLen=v;var _=y.base.subarray(1),x=y.limit.subarray(1),k=0;for(s=F;s<=v;s++)for(a=0;a<w;a++)A[a]==s&&(y.permute[k++]=a);for(s=F;s<=v;s++)C[s]=x[s]=0;for(s=0;s<w;s++)C[A[s]]++;for(k=a=0,s=F;s<v;s++)k+=C[s],x[s]=k-1,k<<=1,_[s+1]=k-(a+=C[s]);x[v]=k+C[v]-1,_[F]=0}var I,S,E,N=new Uint32Array(256);for(s=0;s<256;s++)f[s]=s;I=S=w=E=0;for(var B=new Uint32Array(n);;){if(!w--){if(w=49,E>=u)throw"meow i'm a kitty, that's an error";_=(y=b[p[E++]]).base.subarray(1),x=y.limit.subarray(1)}for(g=e(s=y.minLen);;){if(s>y.maxLen)throw"rawr i'm a dinosaur";if(g<=x[s])break;s++,g=g<<1|e(1)}if((g-=_[s])<0||g>=258)throw"moo i'm a cow";var M=y.permute[g];if(0!=M&&1!=M){if(I){if(I=0,S+a>=n)throw"Boom.";for(N[m=c[f[0]]]+=a;a--;)B[S++]=m}if(M>l)break;if(S>=n)throw"I can't think of anything. Error";m=f[s=M-1],f.splice(s,1),f.splice(0,0,m),N[m=c[m]]++,B[S++]=m}else I||(I=1,a=0),a+=0==M?I:2*I,I<<=1}if(o<0||o>=S)throw"I'm a monkey and I'm throwing something at someone, namely you";for(g=0,s=0;s<256;s++)h=g+N[s],N[s]=g,g=h;for(s=0;s<S;s++)B[N[m=255&B[s]]]|=s<<8,N[m]++;var R=0,D=0,T=0;S&&(D=255&(R=B[o]),R>>=8,T=-1);var L,z,H,P=new Uint8Array(n),O=0;for(i||(i=1/0);S;){for(S--,z=D,D=255&(R=B[R]),R>>=8,3==T++?(L=D,H=z,D=-1):(L=1,H=D);L--;)if(P[O++]=H,! --i)return P;D!=z&&(T=0)}return P.subarray(0,O)}};e.exports=t},2151:e=>{var t={utf8:{stringToBytes:function(e){return t.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(t.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],i=0;i<e.length;i++)t.push(255&e.charCodeAt(i));return t},bytesToString:function(e){for(var t=[],i=0;i<e.length;i++)t.push(String.fromCharCode(e[i]));return t.join("")}}};e.exports=t},3939:e=>{var t,i;t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&i.rotl(e,8)|4278255360&i.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=i.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],i=0,n=0;i<e.length;i++,n+=8)t[n>>>5]|=e[i]<<24-n%32;return t},wordsToBytes:function(e){for(var t=[],i=0;i<32*e.length;i+=8)t.push(e[i>>>5]>>>24-i%32&255);return t},bytesToHex:function(e){for(var t=[],i=0;i<e.length;i++)t.push((e[i]>>>4).toString(16)),t.push((15&e[i]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],i=0;i<e.length;i+=2)t.push(parseInt(e.substr(i,2),16));return t},bytesToBase64:function(e){for(var i=[],n=0;n<e.length;n+=3)for(var r=e[n]<<16|e[n+1]<<8|e[n+2],s=0;s<4;s++)8*n+6*s<=8*e.length?i.push(t.charAt(r>>>6*(3-s)&63)):i.push("=");return i.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var i=[],n=0,r=0;n<e.length;r=++n%4)0!=r&&i.push((t.indexOf(e.charAt(n-1))&Math.pow(2,-2*r+8)-1)<<2*r|t.indexOf(e.charAt(n))>>>6-2*r);return i}},e.exports=i},1113:(e,t,i)=>{i.r(t),i.d(t,{BlobFile:()=>l,LocalFile:()=>r(),RemoteFile:()=>a,fromUrl:()=>h,open:()=>d});var n=i(3617),r=i.n(n),s=i(8287);function o(e){return("object"==typeof e&&null!==e&&"message"in e?e.message:`${e}`).replace(/\.$/,"")}class a{async getBufferFromResponse(e){const t=await e.arrayBuffer();return s.Buffer.from(t)}constructor(e,t={}){this.baseOverrides={},this.url=e;const i=t.fetch||globalThis.fetch.bind(globalThis);if(!i)throw new TypeError("no fetch function supplied, and none found in global environment");t.overrides&&(this.baseOverrides=t.overrides),this.fetchImplementation=i}async fetch(e,t){let i;try{i=await this.fetchImplementation(e,t)}catch(n){if(!`${n}`.includes("Failed to fetch"))throw new Error(`${o(n)} fetching ${e}`,{cause:n});console.warn(`generic-filehandle: refetching ${e} to attempt to work around chrome CORS header caching bug`);try{i=await this.fetchImplementation(e,{...t,cache:"reload"})}catch(t){throw new Error(`${o(t)} fetching ${e}`,{cause:t})}}return i}async read(e,t=0,i,n=0,r={}){const{headers:s={},signal:o,overrides:a={}}=r;i<1/0?s.range=`bytes=${n}-${n+i}`:i===1/0&&0!==n&&(s.range=`bytes=${n}-`);const c=await this.fetch(this.url,{...this.baseOverrides,...a,headers:{...s,...a.headers,...this.baseOverrides.headers},method:"GET",redirect:"follow",mode:"cors",signal:o});if(!c.ok)throw new Error(`HTTP ${c.status} fetching ${this.url}`);if(200===c.status&&0===n||206===c.status){const n=await this.getBufferFromResponse(c),r=n.copy(e,t,0,Math.min(i,n.length)),s=c.headers.get("content-range"),o=/\/(\d+)$/.exec(s||"");return(null==o?void 0:o[1])&&(this._stat={size:parseInt(o[1],10)}),{bytesRead:r,buffer:e}}if(200===c.status)throw new Error(`${this.url} fetch returned status 200, expected 206`);throw new Error(`HTTP ${c.status} fetching ${this.url}`)}async readFile(e={}){let t,i;"string"==typeof e?(t=e,i={}):(t=e.encoding,i=e,delete i.encoding);const{headers:n={},signal:r,overrides:s={}}=i,o=await this.fetch(this.url,{headers:n,method:"GET",redirect:"follow",mode:"cors",signal:r,...this.baseOverrides,...s});if(200!==o.status)throw new Error(`HTTP ${o.status} fetching ${this.url}`);if("utf8"===t)return o.text();if(t)throw new Error(`unsupported encoding: ${t}`);return this.getBufferFromResponse(o)}async stat(){if(!this._stat){const e=s.Buffer.allocUnsafe(10);if(await this.read(e,0,10,0),!this._stat)throw new Error(`unable to determine size of file at ${this.url}`)}return this._stat}async close(){}}function c(e){const t=new FileReader;return new Promise(((i,n)=>{t.onerror=()=>{t.abort(),n(new Error("problem reading blob"))},t.onabort=()=>{n(new Error("blob reading was aborted"))},t.onload=()=>{t.result&&"string"!=typeof t.result?i(t.result):n(new Error("unknown error reading blob"))},t.readAsArrayBuffer(e)}))}class l{constructor(e){this.blob=e,this.size=e.size}async read(e,t=0,i,n=0){if(!i)return{bytesRead:0,buffer:e};const r=n,o=r+i,a=await c(this.blob.slice(r,o)),l=s.Buffer.from(a);return{bytesRead:l.copy(e,t),buffer:l}}async readFile(e){const t="string"==typeof e?e:null==e?void 0:e.encoding;if("utf8"===t)return function(e){const t=new FileReader;return new Promise(((i,n)=>{t.onerror=()=>{t.abort(),n(new Error("problem reading blob"))},t.onabort=()=>{n(new Error("blob reading was aborted"))},t.onload=()=>{t.result&&"string"==typeof t.result?i(t.result):n(new Error("unknown error reading blob"))},t.readAsText(e)}))}(this.blob);if(t)throw new Error(`unsupported encoding: ${t}`);const i=await c(this.blob);return s.Buffer.from(i)}async stat(){return{size:this.size}}async close(){}}function h(e,t={}){return new a(e,t)}function d(e,t,i,n={}){if(void 0!==i)return i;if(void 0!==e)return h(e,n);if(void 0!==t)return new(r())(t,n);throw new Error("no url, path, or filehandle provided, cannot open")}},251:(e,t)=>{t.read=function(e,t,i,n,r){var s,o,a=8*r-n-1,c=(1<<a)-1,l=c>>1,h=-7,d=i?r-1:0,u=i?-1:1,f=e[t+d];for(d+=u,s=f&(1<<-h)-1,f>>=-h,h+=a;h>0;s=256*s+e[t+d],d+=u,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=n;h>0;o=256*o+e[t+d],d+=u,h-=8);if(0===s)s=1-l;else{if(s===c)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,n),s-=l}return(f?-1:1)*o*Math.pow(2,s-n)},t.write=function(e,t,i,n,r,s){var o,a,c,l=8*s-r-1,h=(1<<l)-1,d=h>>1,u=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:s-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=h):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+d>=1?u/c:u*Math.pow(2,1-d))*c>=2&&(o++,c/=2),o+d>=h?(a=0,o=h):o+d>=1?(a=(t*c-1)*Math.pow(2,r),o+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,r),o=0));r>=8;e[i+f]=255&a,f+=p,a/=256,r-=8);for(o=o<<r|a,l+=r;l>0;e[i+f]=255&o,f+=p,o/=256,l-=8);e[i+f-p]|=128*g}},8570:e=>{e.exports=i;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function i(e,t,i){this.low=0|e,this.high=0|t,this.unsigned=!!i}function n(e){return!0===(e&&e.__isLong__)}i.prototype.__isLong__,Object.defineProperty(i.prototype,"__isLong__",{value:!0}),i.isLong=n;var r={},s={};function o(e,t){var i,n,o;return t?(o=0<=(e>>>=0)&&e<256)&&(n=s[e])?n:(i=c(e,(0|e)<0?-1:0,!0),o&&(s[e]=i),i):(o=-128<=(e|=0)&&e<128)&&(n=r[e])?n:(i=c(e,e<0?-1:0,!1),o&&(r[e]=i),i)}function a(e,t){if(isNaN(e))return t?w:m;if(t){if(e<0)return w;if(e>=f)return A}else{if(e<=-p)return C;if(e+1>=p)return y}return e<0?a(-e,t).neg():c(e%u|0,e/u|0,t)}function c(e,t,n){return new i(e,t,n)}i.fromInt=o,i.fromNumber=a,i.fromBits=c;var l=Math.pow;function h(e,t,i){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return m;if("number"==typeof t?(i=t,t=!1):t=!!t,(i=i||10)<2||36<i)throw RangeError("radix");var n;if((n=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return h(e.substring(1),t,i).neg();for(var r=a(l(i,8)),s=m,o=0;o<e.length;o+=8){var c=Math.min(8,e.length-o),d=parseInt(e.substring(o,o+c),i);if(c<8){var u=a(l(i,c));s=s.mul(u).add(a(d))}else s=(s=s.mul(r)).add(a(d))}return s.unsigned=t,s}function d(e,t){return"number"==typeof e?a(e,t):"string"==typeof e?h(e,t):c(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}i.fromString=h,i.fromValue=d;var u=4294967296,f=u*u,p=f/2,g=o(1<<24),m=o(0);i.ZERO=m;var w=o(0,!0);i.UZERO=w;var b=o(1);i.ONE=b;var F=o(1,!0);i.UONE=F;var v=o(-1);i.NEG_ONE=v;var y=c(-1,2147483647,!1);i.MAX_VALUE=y;var A=c(-1,-1,!0);i.MAX_UNSIGNED_VALUE=A;var C=c(0,-2147483648,!1);i.MIN_VALUE=C;var _=i.prototype;_.toInt=function(){return this.unsigned?this.low>>>0:this.low},_.toNumber=function(){return this.unsigned?(this.high>>>0)*u+(this.low>>>0):this.high*u+(this.low>>>0)},_.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(C)){var t=a(e),i=this.div(t),n=i.mul(t).sub(this);return i.toString(e)+n.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=a(l(e,6),this.unsigned),s=this,o="";;){var c=s.div(r),h=(s.sub(c.mul(r)).toInt()>>>0).toString(e);if((s=c).isZero())return h+o;for(;h.length<6;)h="0"+h;o=""+h+o}},_.getHighBits=function(){return this.high},_.getHighBitsUnsigned=function(){return this.high>>>0},_.getLowBits=function(){return this.low},_.getLowBitsUnsigned=function(){return this.low>>>0},_.getNumBitsAbs=function(){if(this.isNegative())return this.eq(C)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},_.isZero=function(){return 0===this.high&&0===this.low},_.eqz=_.isZero,_.isNegative=function(){return!this.unsigned&&this.high<0},_.isPositive=function(){return this.unsigned||this.high>=0},_.isOdd=function(){return!(1&~this.low)},_.isEven=function(){return!(1&this.low)},_.equals=function(e){return n(e)||(e=d(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},_.eq=_.equals,_.notEquals=function(e){return!this.eq(e)},_.neq=_.notEquals,_.ne=_.notEquals,_.lessThan=function(e){return this.comp(e)<0},_.lt=_.lessThan,_.lessThanOrEqual=function(e){return this.comp(e)<=0},_.lte=_.lessThanOrEqual,_.le=_.lessThanOrEqual,_.greaterThan=function(e){return this.comp(e)>0},_.gt=_.greaterThan,_.greaterThanOrEqual=function(e){return this.comp(e)>=0},_.gte=_.greaterThanOrEqual,_.ge=_.greaterThanOrEqual,_.compare=function(e){if(n(e)||(e=d(e)),this.eq(e))return 0;var t=this.isNegative(),i=e.isNegative();return t&&!i?-1:!t&&i?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},_.comp=_.compare,_.negate=function(){return!this.unsigned&&this.eq(C)?C:this.not().add(b)},_.neg=_.negate,_.add=function(e){n(e)||(e=d(e));var t=this.high>>>16,i=65535&this.high,r=this.low>>>16,s=65535&this.low,o=e.high>>>16,a=65535&e.high,l=e.low>>>16,h=0,u=0,f=0,p=0;return f+=(p+=s+(65535&e.low))>>>16,u+=(f+=r+l)>>>16,h+=(u+=i+a)>>>16,h+=t+o,c((f&=65535)<<16|(p&=65535),(h&=65535)<<16|(u&=65535),this.unsigned)},_.subtract=function(e){return n(e)||(e=d(e)),this.add(e.neg())},_.sub=_.subtract,_.multiply=function(e){if(this.isZero())return m;if(n(e)||(e=d(e)),t)return c(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return m;if(this.eq(C))return e.isOdd()?C:m;if(e.eq(C))return this.isOdd()?C:m;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(g)&&e.lt(g))return a(this.toNumber()*e.toNumber(),this.unsigned);var i=this.high>>>16,r=65535&this.high,s=this.low>>>16,o=65535&this.low,l=e.high>>>16,h=65535&e.high,u=e.low>>>16,f=65535&e.low,p=0,w=0,b=0,F=0;return b+=(F+=o*f)>>>16,w+=(b+=s*f)>>>16,b&=65535,w+=(b+=o*u)>>>16,p+=(w+=r*f)>>>16,w&=65535,p+=(w+=s*u)>>>16,w&=65535,p+=(w+=o*h)>>>16,p+=i*f+r*u+s*h+o*l,c((b&=65535)<<16|(F&=65535),(p&=65535)<<16|(w&=65535),this.unsigned)},_.mul=_.multiply,_.divide=function(e){if(n(e)||(e=d(e)),e.isZero())throw Error("division by zero");var i,r,s;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?c((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?w:m;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return w;if(e.gt(this.shru(1)))return F;s=w}else{if(this.eq(C))return e.eq(b)||e.eq(v)?C:e.eq(C)?b:(i=this.shr(1).div(e).shl(1)).eq(m)?e.isNegative()?b:v:(r=this.sub(e.mul(i)),s=i.add(r.div(e)));if(e.eq(C))return this.unsigned?w:m;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=m}for(r=this;r.gte(e);){i=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(i)/Math.LN2),h=o<=48?1:l(2,o-48),u=a(i),f=u.mul(e);f.isNegative()||f.gt(r);)f=(u=a(i-=h,this.unsigned)).mul(e);u.isZero()&&(u=b),s=s.add(u),r=r.sub(f)}return s},_.div=_.divide,_.modulo=function(e){return n(e)||(e=d(e)),t?c((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},_.mod=_.modulo,_.rem=_.modulo,_.not=function(){return c(~this.low,~this.high,this.unsigned)},_.and=function(e){return n(e)||(e=d(e)),c(this.low&e.low,this.high&e.high,this.unsigned)},_.or=function(e){return n(e)||(e=d(e)),c(this.low|e.low,this.high|e.high,this.unsigned)},_.xor=function(e){return n(e)||(e=d(e)),c(this.low^e.low,this.high^e.high,this.unsigned)},_.shiftLeft=function(e){return n(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?c(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):c(0,this.low<<e-32,this.unsigned)},_.shl=_.shiftLeft,_.shiftRight=function(e){return n(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?c(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):c(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},_.shr=_.shiftRight,_.shiftRightUnsigned=function(e){if(n(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?c(this.low>>>e|t<<32-e,t>>>e,this.unsigned):c(32===e?t:t>>>e-32,0,this.unsigned)},_.shru=_.shiftRightUnsigned,_.shr_u=_.shiftRightUnsigned,_.toSigned=function(){return this.unsigned?c(this.low,this.high,!1):this},_.toUnsigned=function(){return this.unsigned?this:c(this.low,this.high,!0)},_.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},_.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},_.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},i.fromBytes=function(e,t,n){return n?i.fromBytesLE(e,t):i.fromBytesBE(e,t)},i.fromBytesLE=function(e,t){return new i(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},i.fromBytesBE=function(e,t){return new i(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},3503:(e,t,i)=>{var n,r,s,o,a;n=i(3939),r=i(2151).utf8,s=i(652),o=i(2151).bin,(a=function(e,t){e.constructor==String?e=t&&"binary"===t.encoding?o.stringToBytes(e):r.stringToBytes(e):s(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||e.constructor===Uint8Array||(e=e.toString());for(var i=n.bytesToWords(e),c=8*e.length,l=1732584193,h=-271733879,d=-1732584194,u=271733878,f=0;f<i.length;f++)i[f]=16711935&(i[f]<<8|i[f]>>>24)|4278255360&(i[f]<<24|i[f]>>>8);i[c>>>5]|=128<<c%32,i[14+(c+64>>>9<<4)]=c;var p=a._ff,g=a._gg,m=a._hh,w=a._ii;for(f=0;f<i.length;f+=16){var b=l,F=h,v=d,y=u;l=p(l,h,d,u,i[f+0],7,-680876936),u=p(u,l,h,d,i[f+1],12,-389564586),d=p(d,u,l,h,i[f+2],17,606105819),h=p(h,d,u,l,i[f+3],22,-1044525330),l=p(l,h,d,u,i[f+4],7,-176418897),u=p(u,l,h,d,i[f+5],12,1200080426),d=p(d,u,l,h,i[f+6],17,-1473231341),h=p(h,d,u,l,i[f+7],22,-45705983),l=p(l,h,d,u,i[f+8],7,1770035416),u=p(u,l,h,d,i[f+9],12,-1958414417),d=p(d,u,l,h,i[f+10],17,-42063),h=p(h,d,u,l,i[f+11],22,-1990404162),l=p(l,h,d,u,i[f+12],7,1804603682),u=p(u,l,h,d,i[f+13],12,-40341101),d=p(d,u,l,h,i[f+14],17,-1502002290),l=g(l,h=p(h,d,u,l,i[f+15],22,1236535329),d,u,i[f+1],5,-165796510),u=g(u,l,h,d,i[f+6],9,-1069501632),d=g(d,u,l,h,i[f+11],14,643717713),h=g(h,d,u,l,i[f+0],20,-373897302),l=g(l,h,d,u,i[f+5],5,-701558691),u=g(u,l,h,d,i[f+10],9,38016083),d=g(d,u,l,h,i[f+15],14,-660478335),h=g(h,d,u,l,i[f+4],20,-405537848),l=g(l,h,d,u,i[f+9],5,568446438),u=g(u,l,h,d,i[f+14],9,-1019803690),d=g(d,u,l,h,i[f+3],14,-187363961),h=g(h,d,u,l,i[f+8],20,1163531501),l=g(l,h,d,u,i[f+13],5,-1444681467),u=g(u,l,h,d,i[f+2],9,-51403784),d=g(d,u,l,h,i[f+7],14,1735328473),l=m(l,h=g(h,d,u,l,i[f+12],20,-1926607734),d,u,i[f+5],4,-378558),u=m(u,l,h,d,i[f+8],11,-2022574463),d=m(d,u,l,h,i[f+11],16,1839030562),h=m(h,d,u,l,i[f+14],23,-35309556),l=m(l,h,d,u,i[f+1],4,-1530992060),u=m(u,l,h,d,i[f+4],11,1272893353),d=m(d,u,l,h,i[f+7],16,-155497632),h=m(h,d,u,l,i[f+10],23,-1094730640),l=m(l,h,d,u,i[f+13],4,681279174),u=m(u,l,h,d,i[f+0],11,-358537222),d=m(d,u,l,h,i[f+3],16,-722521979),h=m(h,d,u,l,i[f+6],23,76029189),l=m(l,h,d,u,i[f+9],4,-640364487),u=m(u,l,h,d,i[f+12],11,-421815835),d=m(d,u,l,h,i[f+15],16,530742520),l=w(l,h=m(h,d,u,l,i[f+2],23,-995338651),d,u,i[f+0],6,-198630844),u=w(u,l,h,d,i[f+7],10,1126891415),d=w(d,u,l,h,i[f+14],15,-1416354905),h=w(h,d,u,l,i[f+5],21,-57434055),l=w(l,h,d,u,i[f+12],6,1700485571),u=w(u,l,h,d,i[f+3],10,-1894986606),d=w(d,u,l,h,i[f+10],15,-1051523),h=w(h,d,u,l,i[f+1],21,-2054922799),l=w(l,h,d,u,i[f+8],6,1873313359),u=w(u,l,h,d,i[f+15],10,-30611744),d=w(d,u,l,h,i[f+6],15,-1560198380),h=w(h,d,u,l,i[f+13],21,1309151649),l=w(l,h,d,u,i[f+4],6,-145523070),u=w(u,l,h,d,i[f+11],10,-1120210379),d=w(d,u,l,h,i[f+2],15,718787259),h=w(h,d,u,l,i[f+9],21,-343485551),l=l+b>>>0,h=h+F>>>0,d=d+v>>>0,u=u+y>>>0}return n.endian([l,h,d,u])})._ff=function(e,t,i,n,r,s,o){var a=e+(t&i|~t&n)+(r>>>0)+o;return(a<<s|a>>>32-s)+t},a._gg=function(e,t,i,n,r,s,o){var a=e+(t&n|i&~n)+(r>>>0)+o;return(a<<s|a>>>32-s)+t},a._hh=function(e,t,i,n,r,s,o){var a=e+(t^i^n)+(r>>>0)+o;return(a<<s|a>>>32-s)+t},a._ii=function(e,t,i,n,r,s,o){var a=e+(i^(t|~n))+(r>>>0)+o;return(a<<s|a>>>32-s)+t},a._blocksize=16,a._digestsize=16,e.exports=function(e,t){if(null==e)throw new Error("Illegal argument "+e);var i=n.wordsToBytes(a(e,t));return t&&t.asBytes?i:t&&t.asString?o.bytesToString(i):n.bytesToHex(i)}},652:e=>{function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},1668:(e,t,i)=>{var n={};(0,i(9805).assign)(n,i(3303),i(7083),i(9681)),e.exports=n},3303:(e,t,i)=>{var n=i(8411),r=i(9805),s=i(1996),o=i(4674),a=i(4442),c=Object.prototype.toString,l=0,h=-1,d=0,u=8;function f(e){if(!(this instanceof f))return new f(e);this.options=r.assign({level:h,method:u,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var i=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(i!==l)throw new Error(o[i]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var p;if(p="string"==typeof t.dictionary?s.string2buf(t.dictionary):"[object ArrayBuffer]"===c.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(i=n.deflateSetDictionary(this.strm,p))!==l)throw new Error(o[i]);this._dict_set=!0}}function p(e,t){var i=new f(t);if(i.push(e,!0),i.err)throw i.msg||o[i.err];return i.result}f.prototype.push=function(e,t){var i,o,a=this.strm,h=this.options.chunkSize;if(this.ended)return!1;o=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=s.string2buf(e):"[object ArrayBuffer]"===c.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new r.Buf8(h),a.next_out=0,a.avail_out=h),1!==(i=n.deflate(a,o))&&i!==l)return this.onEnd(i),this.ended=!0,!1;0!==a.avail_out&&(0!==a.avail_in||4!==o&&2!==o)||("string"===this.options.to?this.onData(s.buf2binstring(r.shrinkBuf(a.output,a.next_out))):this.onData(r.shrinkBuf(a.output,a.next_out)))}while((a.avail_in>0||0===a.avail_out)&&1!==i);return 4===o?(i=n.deflateEnd(this.strm),this.onEnd(i),this.ended=!0,i===l):2!==o||(this.onEnd(l),a.avail_out=0,!0)},f.prototype.onData=function(e){this.chunks.push(e)},f.prototype.onEnd=function(e){e===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=r.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Deflate=f,t.deflate=p,t.deflateRaw=function(e,t){return(t=t||{}).raw=!0,p(e,t)},t.gzip=function(e,t){return(t=t||{}).gzip=!0,p(e,t)}},7083:(e,t,i)=>{var n=i(1447),r=i(9805),s=i(1996),o=i(9681),a=i(4674),c=i(4442),l=i(7414),h=Object.prototype.toString;function d(e){if(!(this instanceof d))return new d(e);this.options=r.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new c,this.strm.avail_out=0;var i=n.inflateInit2(this.strm,t.windowBits);if(i!==o.Z_OK)throw new Error(a[i]);if(this.header=new l,n.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=s.string2buf(t.dictionary):"[object ArrayBuffer]"===h.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(i=n.inflateSetDictionary(this.strm,t.dictionary))!==o.Z_OK))throw new Error(a[i])}function u(e,t){var i=new d(t);if(i.push(e,!0),i.err)throw i.msg||a[i.err];return i.result}d.prototype.push=function(e,t){var i,a,c,l,d,u=this.strm,f=this.options.chunkSize,p=this.options.dictionary,g=!1;if(this.ended)return!1;a=t===~~t?t:!0===t?o.Z_FINISH:o.Z_NO_FLUSH,"string"==typeof e?u.input=s.binstring2buf(e):"[object ArrayBuffer]"===h.call(e)?u.input=new Uint8Array(e):u.input=e,u.next_in=0,u.avail_in=u.input.length;do{if(0===u.avail_out&&(u.output=new r.Buf8(f),u.next_out=0,u.avail_out=f),(i=n.inflate(u,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&p&&(i=n.inflateSetDictionary(this.strm,p)),i===o.Z_BUF_ERROR&&!0===g&&(i=o.Z_OK,g=!1),i!==o.Z_STREAM_END&&i!==o.Z_OK)return this.onEnd(i),this.ended=!0,!1;u.next_out&&(0!==u.avail_out&&i!==o.Z_STREAM_END&&(0!==u.avail_in||a!==o.Z_FINISH&&a!==o.Z_SYNC_FLUSH)||("string"===this.options.to?(c=s.utf8border(u.output,u.next_out),l=u.next_out-c,d=s.buf2string(u.output,c),u.next_out=l,u.avail_out=f-l,l&&r.arraySet(u.output,u.output,c,l,0),this.onData(d)):this.onData(r.shrinkBuf(u.output,u.next_out)))),0===u.avail_in&&0===u.avail_out&&(g=!0)}while((u.avail_in>0||0===u.avail_out)&&i!==o.Z_STREAM_END);return i===o.Z_STREAM_END&&(a=o.Z_FINISH),a===o.Z_FINISH?(i=n.inflateEnd(this.strm),this.onEnd(i),this.ended=!0,i===o.Z_OK):a!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),u.avail_out=0,!0)},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===o.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=r.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Inflate=d,t.inflate=u,t.inflateRaw=function(e,t){return(t=t||{}).raw=!0,u(e,t)},t.ungzip=u},9805:(e,t)=>{var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var i=t.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(var r in i)n(i,r)&&(e[r]=i[r])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var r={arraySet:function(e,t,i,n,r){if(t.subarray&&e.subarray)e.set(t.subarray(i,i+n),r);else for(var s=0;s<n;s++)e[r+s]=t[i+s]},flattenChunks:function(e){var t,i,n,r,s,o;for(n=0,t=0,i=e.length;t<i;t++)n+=e[t].length;for(o=new Uint8Array(n),r=0,t=0,i=e.length;t<i;t++)s=e[t],o.set(s,r),r+=s.length;return o}},s={arraySet:function(e,t,i,n,r){for(var s=0;s<n;s++)e[r+s]=t[i+s]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,r)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,s))},t.setTyped(i)},1996:(e,t,i)=>{var n=i(9805),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var o=new n.Buf8(256),a=0;a<256;a++)o[a]=a>=252?6:a>=248?5:a>=240?4:a>=224?3:a>=192?2:1;function c(e,t){if(t<65534&&(e.subarray&&s||!e.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var i="",o=0;o<t;o++)i+=String.fromCharCode(e[o]);return i}o[254]=o[254]=1,t.string2buf=function(e){var t,i,r,s,o,a=e.length,c=0;for(s=0;s<a;s++)55296==(64512&(i=e.charCodeAt(s)))&&s+1<a&&56320==(64512&(r=e.charCodeAt(s+1)))&&(i=65536+(i-55296<<10)+(r-56320),s++),c+=i<128?1:i<2048?2:i<65536?3:4;for(t=new n.Buf8(c),o=0,s=0;o<c;s++)55296==(64512&(i=e.charCodeAt(s)))&&s+1<a&&56320==(64512&(r=e.charCodeAt(s+1)))&&(i=65536+(i-55296<<10)+(r-56320),s++),i<128?t[o++]=i:i<2048?(t[o++]=192|i>>>6,t[o++]=128|63&i):i<65536?(t[o++]=224|i>>>12,t[o++]=128|i>>>6&63,t[o++]=128|63&i):(t[o++]=240|i>>>18,t[o++]=128|i>>>12&63,t[o++]=128|i>>>6&63,t[o++]=128|63&i);return t},t.buf2binstring=function(e){return c(e,e.length)},t.binstring2buf=function(e){for(var t=new n.Buf8(e.length),i=0,r=t.length;i<r;i++)t[i]=e.charCodeAt(i);return t},t.buf2string=function(e,t){var i,n,r,s,a=t||e.length,l=new Array(2*a);for(n=0,i=0;i<a;)if((r=e[i++])<128)l[n++]=r;else if((s=o[r])>4)l[n++]=65533,i+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&i<a;)r=r<<6|63&e[i++],s--;s>1?l[n++]=65533:r<65536?l[n++]=r:(r-=65536,l[n++]=55296|r>>10&1023,l[n++]=56320|1023&r)}return c(l,n)},t.utf8border=function(e,t){var i;for((t=t||e.length)>e.length&&(t=e.length),i=t-1;i>=0&&128==(192&e[i]);)i--;return i<0||0===i?t:i+o[e[i]]>t?i:t}},3269:e=>{e.exports=function(e,t,i,n){for(var r=65535&e,s=e>>>16&65535,o=0;0!==i;){i-=o=i>2e3?2e3:i;do{s=s+(r=r+t[n++]|0)|0}while(--o);r%=65521,s%=65521}return r|s<<16}},9681:e=>{e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},4823:e=>{var t=function(){for(var e,t=[],i=0;i<256;i++){e=i;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[i]=e}return t}();e.exports=function(e,i,n,r){var s=t,o=r+n;e^=-1;for(var a=r;a<o;a++)e=e>>>8^s[255&(e^i[a])];return~e}},8411:(e,t,i)=>{var n,r=i(9805),s=i(3665),o=i(3269),a=i(4823),c=i(4674),l=0,h=0,d=-2,u=2,f=8,p=286,g=30,m=19,w=2*p+1,b=15,F=3,v=258,y=v+F+1,A=42,C=103,_=113,x=666;function k(e,t){return e.msg=c[t],t}function I(e){return(e<<1)-(e>4?9:0)}function S(e){for(var t=e.length;--t>=0;)e[t]=0}function E(e){var t=e.state,i=t.pending;i>e.avail_out&&(i=e.avail_out),0!==i&&(r.arraySet(e.output,t.pending_buf,t.pending_out,i,e.next_out),e.next_out+=i,t.pending_out+=i,e.total_out+=i,e.avail_out-=i,t.pending-=i,0===t.pending&&(t.pending_out=0))}function N(e,t){s._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,E(e.strm)}function B(e,t){e.pending_buf[e.pending++]=t}function M(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function R(e,t,i,n){var s=e.avail_in;return s>n&&(s=n),0===s?0:(e.avail_in-=s,r.arraySet(t,e.input,e.next_in,s,i),1===e.state.wrap?e.adler=o(e.adler,t,s,i):2===e.state.wrap&&(e.adler=a(e.adler,t,s,i)),e.next_in+=s,e.total_in+=s,s)}function D(e,t){var i,n,r=e.max_chain_length,s=e.strstart,o=e.prev_length,a=e.nice_match,c=e.strstart>e.w_size-y?e.strstart-(e.w_size-y):0,l=e.window,h=e.w_mask,d=e.prev,u=e.strstart+v,f=l[s+o-1],p=l[s+o];e.prev_length>=e.good_match&&(r>>=2),a>e.lookahead&&(a=e.lookahead);do{if(l[(i=t)+o]===p&&l[i+o-1]===f&&l[i]===l[s]&&l[++i]===l[s+1]){s+=2,i++;do{}while(l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&s<u);if(n=v-(u-s),s=u-v,n>o){if(e.match_start=t,o=n,n>=a)break;f=l[s+o-1],p=l[s+o]}}}while((t=d[t&h])>c&&0!=--r);return o<=e.lookahead?o:e.lookahead}function T(e){var t,i,n,s,o,a=e.w_size;do{if(s=e.window_size-e.lookahead-e.strstart,e.strstart>=a+(a-y)){r.arraySet(e.window,e.window,a,a,0),e.match_start-=a,e.strstart-=a,e.block_start-=a,t=i=e.hash_size;do{n=e.head[--t],e.head[t]=n>=a?n-a:0}while(--i);t=i=a;do{n=e.prev[--t],e.prev[t]=n>=a?n-a:0}while(--i);s+=a}if(0===e.strm.avail_in)break;if(i=R(e.strm,e.window,e.strstart+e.lookahead,s),e.lookahead+=i,e.lookahead+e.insert>=F)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+F-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<F)););}while(e.lookahead<y&&0!==e.strm.avail_in)}function L(e,t){for(var i,n;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===l)return 1;if(0===e.lookahead)break}if(i=0,e.lookahead>=F&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+F-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==i&&e.strstart-i<=e.w_size-y&&(e.match_length=D(e,i)),e.match_length>=F)if(n=s._tr_tally(e,e.strstart-e.match_start,e.match_length-F),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=F){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+F-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<F-1?e.strstart:F-1,4===t?(N(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?1:2}function z(e,t){for(var i,n,r;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===l)return 1;if(0===e.lookahead)break}if(i=0,e.lookahead>=F&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+F-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=F-1,0!==i&&e.prev_length<e.max_lazy_match&&e.strstart-i<=e.w_size-y&&(e.match_length=D(e,i),e.match_length<=5&&(1===e.strategy||e.match_length===F&&e.strstart-e.match_start>4096)&&(e.match_length=F-1)),e.prev_length>=F&&e.match_length<=e.prev_length){r=e.strstart+e.lookahead-F,n=s._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-F),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=r&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+F-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=F-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=s._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=s._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<F-1?e.strstart:F-1,4===t?(N(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?1:2}function H(e,t,i,n,r){this.good_length=e,this.max_lazy=t,this.nice_length=i,this.max_chain=n,this.func=r}function P(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=f,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new r.Buf16(2*w),this.dyn_dtree=new r.Buf16(2*(2*g+1)),this.bl_tree=new r.Buf16(2*(2*m+1)),S(this.dyn_ltree),S(this.dyn_dtree),S(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new r.Buf16(b+1),this.heap=new r.Buf16(2*p+1),S(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new r.Buf16(2*p+1),S(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function O(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=u,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?A:_,e.adler=2===t.wrap?0:1,t.last_flush=l,s._tr_init(t),h):k(e,d)}function U(e){var t,i=O(e);return i===h&&((t=e.state).window_size=2*t.w_size,S(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=F-1,t.match_available=0,t.ins_h=0),i}function q(e,t,i,n,s,o){if(!e)return d;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):n>15&&(a=2,n-=16),s<1||s>9||i!==f||n<8||n>15||t<0||t>9||o<0||o>4)return k(e,d);8===n&&(n=9);var c=new P;return e.state=c,c.strm=e,c.wrap=a,c.gzhead=null,c.w_bits=n,c.w_size=1<<c.w_bits,c.w_mask=c.w_size-1,c.hash_bits=s+7,c.hash_size=1<<c.hash_bits,c.hash_mask=c.hash_size-1,c.hash_shift=~~((c.hash_bits+F-1)/F),c.window=new r.Buf8(2*c.w_size),c.head=new r.Buf16(c.hash_size),c.prev=new r.Buf16(c.w_size),c.lit_bufsize=1<<s+6,c.pending_buf_size=4*c.lit_bufsize,c.pending_buf=new r.Buf8(c.pending_buf_size),c.d_buf=1*c.lit_bufsize,c.l_buf=3*c.lit_bufsize,c.level=t,c.strategy=o,c.method=i,U(e)}n=[new H(0,0,0,0,(function(e,t){var i=65535;for(i>e.pending_buf_size-5&&(i=e.pending_buf_size-5);;){if(e.lookahead<=1){if(T(e),0===e.lookahead&&t===l)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+i;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-y&&(N(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(N(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),1)})),new H(4,4,8,4,L),new H(4,5,16,8,L),new H(4,6,32,32,L),new H(4,4,16,16,z),new H(8,16,32,32,z),new H(8,16,128,128,z),new H(8,32,128,256,z),new H(32,128,258,1024,z),new H(32,258,258,4096,z)],t.deflateInit=function(e,t){return q(e,t,f,15,8,0)},t.deflateInit2=q,t.deflateReset=U,t.deflateResetKeep=O,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?d:(e.state.gzhead=t,h):d},t.deflate=function(e,t){var i,r,o,c;if(!e||!e.state||t>5||t<0)return e?k(e,d):d;if(r=e.state,!e.output||!e.input&&0!==e.avail_in||r.status===x&&4!==t)return k(e,0===e.avail_out?-5:d);if(r.strm=e,i=r.last_flush,r.last_flush=t,r.status===A)if(2===r.wrap)e.adler=0,B(r,31),B(r,139),B(r,8),r.gzhead?(B(r,(r.gzhead.text?1:0)+(r.gzhead.hcrc?2:0)+(r.gzhead.extra?4:0)+(r.gzhead.name?8:0)+(r.gzhead.comment?16:0)),B(r,255&r.gzhead.time),B(r,r.gzhead.time>>8&255),B(r,r.gzhead.time>>16&255),B(r,r.gzhead.time>>24&255),B(r,9===r.level?2:r.strategy>=2||r.level<2?4:0),B(r,255&r.gzhead.os),r.gzhead.extra&&r.gzhead.extra.length&&(B(r,255&r.gzhead.extra.length),B(r,r.gzhead.extra.length>>8&255)),r.gzhead.hcrc&&(e.adler=a(e.adler,r.pending_buf,r.pending,0)),r.gzindex=0,r.status=69):(B(r,0),B(r,0),B(r,0),B(r,0),B(r,0),B(r,9===r.level?2:r.strategy>=2||r.level<2?4:0),B(r,3),r.status=_);else{var u=f+(r.w_bits-8<<4)<<8;u|=(r.strategy>=2||r.level<2?0:r.level<6?1:6===r.level?2:3)<<6,0!==r.strstart&&(u|=32),u+=31-u%31,r.status=_,M(r,u),0!==r.strstart&&(M(r,e.adler>>>16),M(r,65535&e.adler)),e.adler=1}if(69===r.status)if(r.gzhead.extra){for(o=r.pending;r.gzindex<(65535&r.gzhead.extra.length)&&(r.pending!==r.pending_buf_size||(r.gzhead.hcrc&&r.pending>o&&(e.adler=a(e.adler,r.pending_buf,r.pending-o,o)),E(e),o=r.pending,r.pending!==r.pending_buf_size));)B(r,255&r.gzhead.extra[r.gzindex]),r.gzindex++;r.gzhead.hcrc&&r.pending>o&&(e.adler=a(e.adler,r.pending_buf,r.pending-o,o)),r.gzindex===r.gzhead.extra.length&&(r.gzindex=0,r.status=73)}else r.status=73;if(73===r.status)if(r.gzhead.name){o=r.pending;do{if(r.pending===r.pending_buf_size&&(r.gzhead.hcrc&&r.pending>o&&(e.adler=a(e.adler,r.pending_buf,r.pending-o,o)),E(e),o=r.pending,r.pending===r.pending_buf_size)){c=1;break}c=r.gzindex<r.gzhead.name.length?255&r.gzhead.name.charCodeAt(r.gzindex++):0,B(r,c)}while(0!==c);r.gzhead.hcrc&&r.pending>o&&(e.adler=a(e.adler,r.pending_buf,r.pending-o,o)),0===c&&(r.gzindex=0,r.status=91)}else r.status=91;if(91===r.status)if(r.gzhead.comment){o=r.pending;do{if(r.pending===r.pending_buf_size&&(r.gzhead.hcrc&&r.pending>o&&(e.adler=a(e.adler,r.pending_buf,r.pending-o,o)),E(e),o=r.pending,r.pending===r.pending_buf_size)){c=1;break}c=r.gzindex<r.gzhead.comment.length?255&r.gzhead.comment.charCodeAt(r.gzindex++):0,B(r,c)}while(0!==c);r.gzhead.hcrc&&r.pending>o&&(e.adler=a(e.adler,r.pending_buf,r.pending-o,o)),0===c&&(r.status=C)}else r.status=C;if(r.status===C&&(r.gzhead.hcrc?(r.pending+2>r.pending_buf_size&&E(e),r.pending+2<=r.pending_buf_size&&(B(r,255&e.adler),B(r,e.adler>>8&255),e.adler=0,r.status=_)):r.status=_),0!==r.pending){if(E(e),0===e.avail_out)return r.last_flush=-1,h}else if(0===e.avail_in&&I(t)<=I(i)&&4!==t)return k(e,-5);if(r.status===x&&0!==e.avail_in)return k(e,-5);if(0!==e.avail_in||0!==r.lookahead||t!==l&&r.status!==x){var p=2===r.strategy?function(e,t){for(var i;;){if(0===e.lookahead&&(T(e),0===e.lookahead)){if(t===l)return 1;break}if(e.match_length=0,i=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,i&&(N(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(N(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?1:2}(r,t):3===r.strategy?function(e,t){for(var i,n,r,o,a=e.window;;){if(e.lookahead<=v){if(T(e),e.lookahead<=v&&t===l)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=F&&e.strstart>0&&(n=a[r=e.strstart-1])===a[++r]&&n===a[++r]&&n===a[++r]){o=e.strstart+v;do{}while(n===a[++r]&&n===a[++r]&&n===a[++r]&&n===a[++r]&&n===a[++r]&&n===a[++r]&&n===a[++r]&&n===a[++r]&&r<o);e.match_length=v-(o-r),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=F?(i=s._tr_tally(e,1,e.match_length-F),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(i=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),i&&(N(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(N(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?1:2}(r,t):n[r.level].func(r,t);if(3!==p&&4!==p||(r.status=x),1===p||3===p)return 0===e.avail_out&&(r.last_flush=-1),h;if(2===p&&(1===t?s._tr_align(r):5!==t&&(s._tr_stored_block(r,0,0,!1),3===t&&(S(r.head),0===r.lookahead&&(r.strstart=0,r.block_start=0,r.insert=0))),E(e),0===e.avail_out))return r.last_flush=-1,h}return 4!==t?h:r.wrap<=0?1:(2===r.wrap?(B(r,255&e.adler),B(r,e.adler>>8&255),B(r,e.adler>>16&255),B(r,e.adler>>24&255),B(r,255&e.total_in),B(r,e.total_in>>8&255),B(r,e.total_in>>16&255),B(r,e.total_in>>24&255)):(M(r,e.adler>>>16),M(r,65535&e.adler)),E(e),r.wrap>0&&(r.wrap=-r.wrap),0!==r.pending?h:1)},t.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==A&&69!==t&&73!==t&&91!==t&&t!==C&&t!==_&&t!==x?k(e,d):(e.state=null,t===_?k(e,-3):h):d},t.deflateSetDictionary=function(e,t){var i,n,s,a,c,l,u,f,p=t.length;if(!e||!e.state)return d;if(2===(a=(i=e.state).wrap)||1===a&&i.status!==A||i.lookahead)return d;for(1===a&&(e.adler=o(e.adler,t,p,0)),i.wrap=0,p>=i.w_size&&(0===a&&(S(i.head),i.strstart=0,i.block_start=0,i.insert=0),f=new r.Buf8(i.w_size),r.arraySet(f,t,p-i.w_size,i.w_size,0),t=f,p=i.w_size),c=e.avail_in,l=e.next_in,u=e.input,e.avail_in=p,e.next_in=0,e.input=t,T(i);i.lookahead>=F;){n=i.strstart,s=i.lookahead-(F-1);do{i.ins_h=(i.ins_h<<i.hash_shift^i.window[n+F-1])&i.hash_mask,i.prev[n&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=n,n++}while(--s);i.strstart=n,i.lookahead=F-1,T(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=F-1,i.match_available=0,e.next_in=l,e.input=u,e.avail_in=c,i.wrap=a,h},t.deflateInfo="pako deflate (from Nodeca project)"},7414:e=>{e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},7293:e=>{e.exports=function(e,t){var i,n,r,s,o,a,c,l,h,d,u,f,p,g,m,w,b,F,v,y,A,C,_,x,k;i=e.state,n=e.next_in,x=e.input,r=n+(e.avail_in-5),s=e.next_out,k=e.output,o=s-(t-e.avail_out),a=s+(e.avail_out-257),c=i.dmax,l=i.wsize,h=i.whave,d=i.wnext,u=i.window,f=i.hold,p=i.bits,g=i.lencode,m=i.distcode,w=(1<<i.lenbits)-1,b=(1<<i.distbits)-1;e:do{p<15&&(f+=x[n++]<<p,p+=8,f+=x[n++]<<p,p+=8),F=g[f&w];t:for(;;){if(f>>>=v=F>>>24,p-=v,0==(v=F>>>16&255))k[s++]=65535&F;else{if(!(16&v)){if(64&v){if(32&v){i.mode=12;break e}e.msg="invalid literal/length code",i.mode=30;break e}F=g[(65535&F)+(f&(1<<v)-1)];continue t}for(y=65535&F,(v&=15)&&(p<v&&(f+=x[n++]<<p,p+=8),y+=f&(1<<v)-1,f>>>=v,p-=v),p<15&&(f+=x[n++]<<p,p+=8,f+=x[n++]<<p,p+=8),F=m[f&b];;){if(f>>>=v=F>>>24,p-=v,16&(v=F>>>16&255)){if(A=65535&F,p<(v&=15)&&(f+=x[n++]<<p,(p+=8)<v&&(f+=x[n++]<<p,p+=8)),(A+=f&(1<<v)-1)>c){e.msg="invalid distance too far back",i.mode=30;break e}if(f>>>=v,p-=v,A>(v=s-o)){if((v=A-v)>h&&i.sane){e.msg="invalid distance too far back",i.mode=30;break e}if(C=0,_=u,0===d){if(C+=l-v,v<y){y-=v;do{k[s++]=u[C++]}while(--v);C=s-A,_=k}}else if(d<v){if(C+=l+d-v,(v-=d)<y){y-=v;do{k[s++]=u[C++]}while(--v);if(C=0,d<y){y-=v=d;do{k[s++]=u[C++]}while(--v);C=s-A,_=k}}}else if(C+=d-v,v<y){y-=v;do{k[s++]=u[C++]}while(--v);C=s-A,_=k}for(;y>2;)k[s++]=_[C++],k[s++]=_[C++],k[s++]=_[C++],y-=3;y&&(k[s++]=_[C++],y>1&&(k[s++]=_[C++]))}else{C=s-A;do{k[s++]=k[C++],k[s++]=k[C++],k[s++]=k[C++],y-=3}while(y>2);y&&(k[s++]=k[C++],y>1&&(k[s++]=k[C++]))}break}if(64&v){e.msg="invalid distance code",i.mode=30;break e}F=m[(65535&F)+(f&(1<<v)-1)]}}break}}while(n<r&&s<a);n-=y=p>>3,f&=(1<<(p-=y<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<r?r-n+5:5-(n-r),e.avail_out=s<a?a-s+257:257-(s-a),i.hold=f,i.bits=p}},1447:(e,t,i)=>{var n=i(9805),r=i(3269),s=i(4823),o=i(7293),a=i(1998),c=0,l=-2,h=1,d=12,u=30,f=852,p=592;function g(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function m(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function w(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=h,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(f),t.distcode=t.distdyn=new n.Buf32(p),t.sane=1,t.back=-1,c):l}function b(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,w(e)):l}function F(e,t){var i,n;return e&&e.state?(n=e.state,t<0?(i=0,t=-t):(i=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?l:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=i,n.wbits=t,b(e))):l}function v(e,t){var i,n;return e?(n=new m,e.state=n,n.window=null,(i=F(e,t))!==c&&(e.state=null),i):l}var y,A,C=!0;function _(e){if(C){var t;for(y=new n.Buf32(512),A=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(a(1,e.lens,0,288,y,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;a(2,e.lens,0,32,A,0,e.work,{bits:5}),C=!1}e.lencode=y,e.lenbits=9,e.distcode=A,e.distbits=5}function x(e,t,i,r){var s,o=e.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new n.Buf8(o.wsize)),r>=o.wsize?(n.arraySet(o.window,t,i-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((s=o.wsize-o.wnext)>r&&(s=r),n.arraySet(o.window,t,i-r,s,o.wnext),(r-=s)?(n.arraySet(o.window,t,i-r,r,0),o.wnext=r,o.whave=o.wsize):(o.wnext+=s,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=s))),0}t.inflateReset=b,t.inflateReset2=F,t.inflateResetKeep=w,t.inflateInit=function(e){return v(e,15)},t.inflateInit2=v,t.inflate=function(e,t){var i,f,p,m,w,b,F,v,y,A,C,k,I,S,E,N,B,M,R,D,T,L,z,H,P=0,O=new n.Buf8(4),U=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return l;(i=e.state).mode===d&&(i.mode=13),w=e.next_out,p=e.output,F=e.avail_out,m=e.next_in,f=e.input,b=e.avail_in,v=i.hold,y=i.bits,A=b,C=F,L=c;e:for(;;)switch(i.mode){case h:if(0===i.wrap){i.mode=13;break}for(;y<16;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(2&i.wrap&&35615===v){i.check=0,O[0]=255&v,O[1]=v>>>8&255,i.check=s(i.check,O,2,0),v=0,y=0,i.mode=2;break}if(i.flags=0,i.head&&(i.head.done=!1),!(1&i.wrap)||(((255&v)<<8)+(v>>8))%31){e.msg="incorrect header check",i.mode=u;break}if(8!=(15&v)){e.msg="unknown compression method",i.mode=u;break}if(y-=4,T=8+(15&(v>>>=4)),0===i.wbits)i.wbits=T;else if(T>i.wbits){e.msg="invalid window size",i.mode=u;break}i.dmax=1<<T,e.adler=i.check=1,i.mode=512&v?10:d,v=0,y=0;break;case 2:for(;y<16;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(i.flags=v,8!=(255&i.flags)){e.msg="unknown compression method",i.mode=u;break}if(57344&i.flags){e.msg="unknown header flags set",i.mode=u;break}i.head&&(i.head.text=v>>8&1),512&i.flags&&(O[0]=255&v,O[1]=v>>>8&255,i.check=s(i.check,O,2,0)),v=0,y=0,i.mode=3;case 3:for(;y<32;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}i.head&&(i.head.time=v),512&i.flags&&(O[0]=255&v,O[1]=v>>>8&255,O[2]=v>>>16&255,O[3]=v>>>24&255,i.check=s(i.check,O,4,0)),v=0,y=0,i.mode=4;case 4:for(;y<16;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}i.head&&(i.head.xflags=255&v,i.head.os=v>>8),512&i.flags&&(O[0]=255&v,O[1]=v>>>8&255,i.check=s(i.check,O,2,0)),v=0,y=0,i.mode=5;case 5:if(1024&i.flags){for(;y<16;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}i.length=v,i.head&&(i.head.extra_len=v),512&i.flags&&(O[0]=255&v,O[1]=v>>>8&255,i.check=s(i.check,O,2,0)),v=0,y=0}else i.head&&(i.head.extra=null);i.mode=6;case 6:if(1024&i.flags&&((k=i.length)>b&&(k=b),k&&(i.head&&(T=i.head.extra_len-i.length,i.head.extra||(i.head.extra=new Array(i.head.extra_len)),n.arraySet(i.head.extra,f,m,k,T)),512&i.flags&&(i.check=s(i.check,f,k,m)),b-=k,m+=k,i.length-=k),i.length))break e;i.length=0,i.mode=7;case 7:if(2048&i.flags){if(0===b)break e;k=0;do{T=f[m+k++],i.head&&T&&i.length<65536&&(i.head.name+=String.fromCharCode(T))}while(T&&k<b);if(512&i.flags&&(i.check=s(i.check,f,k,m)),b-=k,m+=k,T)break e}else i.head&&(i.head.name=null);i.length=0,i.mode=8;case 8:if(4096&i.flags){if(0===b)break e;k=0;do{T=f[m+k++],i.head&&T&&i.length<65536&&(i.head.comment+=String.fromCharCode(T))}while(T&&k<b);if(512&i.flags&&(i.check=s(i.check,f,k,m)),b-=k,m+=k,T)break e}else i.head&&(i.head.comment=null);i.mode=9;case 9:if(512&i.flags){for(;y<16;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(v!==(65535&i.check)){e.msg="header crc mismatch",i.mode=u;break}v=0,y=0}i.head&&(i.head.hcrc=i.flags>>9&1,i.head.done=!0),e.adler=i.check=0,i.mode=d;break;case 10:for(;y<32;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}e.adler=i.check=g(v),v=0,y=0,i.mode=11;case 11:if(0===i.havedict)return e.next_out=w,e.avail_out=F,e.next_in=m,e.avail_in=b,i.hold=v,i.bits=y,2;e.adler=i.check=1,i.mode=d;case d:if(5===t||6===t)break e;case 13:if(i.last){v>>>=7&y,y-=7&y,i.mode=27;break}for(;y<3;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}switch(i.last=1&v,y-=1,3&(v>>>=1)){case 0:i.mode=14;break;case 1:if(_(i),i.mode=20,6===t){v>>>=2,y-=2;break e}break;case 2:i.mode=17;break;case 3:e.msg="invalid block type",i.mode=u}v>>>=2,y-=2;break;case 14:for(v>>>=7&y,y-=7&y;y<32;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if((65535&v)!=(v>>>16^65535)){e.msg="invalid stored block lengths",i.mode=u;break}if(i.length=65535&v,v=0,y=0,i.mode=15,6===t)break e;case 15:i.mode=16;case 16:if(k=i.length){if(k>b&&(k=b),k>F&&(k=F),0===k)break e;n.arraySet(p,f,m,k,w),b-=k,m+=k,F-=k,w+=k,i.length-=k;break}i.mode=d;break;case 17:for(;y<14;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(i.nlen=257+(31&v),v>>>=5,y-=5,i.ndist=1+(31&v),v>>>=5,y-=5,i.ncode=4+(15&v),v>>>=4,y-=4,i.nlen>286||i.ndist>30){e.msg="too many length or distance symbols",i.mode=u;break}i.have=0,i.mode=18;case 18:for(;i.have<i.ncode;){for(;y<3;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}i.lens[U[i.have++]]=7&v,v>>>=3,y-=3}for(;i.have<19;)i.lens[U[i.have++]]=0;if(i.lencode=i.lendyn,i.lenbits=7,z={bits:i.lenbits},L=a(0,i.lens,0,19,i.lencode,0,i.work,z),i.lenbits=z.bits,L){e.msg="invalid code lengths set",i.mode=u;break}i.have=0,i.mode=19;case 19:for(;i.have<i.nlen+i.ndist;){for(;N=(P=i.lencode[v&(1<<i.lenbits)-1])>>>16&255,B=65535&P,!((E=P>>>24)<=y);){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(B<16)v>>>=E,y-=E,i.lens[i.have++]=B;else{if(16===B){for(H=E+2;y<H;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(v>>>=E,y-=E,0===i.have){e.msg="invalid bit length repeat",i.mode=u;break}T=i.lens[i.have-1],k=3+(3&v),v>>>=2,y-=2}else if(17===B){for(H=E+3;y<H;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}y-=E,T=0,k=3+(7&(v>>>=E)),v>>>=3,y-=3}else{for(H=E+7;y<H;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}y-=E,T=0,k=11+(127&(v>>>=E)),v>>>=7,y-=7}if(i.have+k>i.nlen+i.ndist){e.msg="invalid bit length repeat",i.mode=u;break}for(;k--;)i.lens[i.have++]=T}}if(i.mode===u)break;if(0===i.lens[256]){e.msg="invalid code -- missing end-of-block",i.mode=u;break}if(i.lenbits=9,z={bits:i.lenbits},L=a(1,i.lens,0,i.nlen,i.lencode,0,i.work,z),i.lenbits=z.bits,L){e.msg="invalid literal/lengths set",i.mode=u;break}if(i.distbits=6,i.distcode=i.distdyn,z={bits:i.distbits},L=a(2,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,z),i.distbits=z.bits,L){e.msg="invalid distances set",i.mode=u;break}if(i.mode=20,6===t)break e;case 20:i.mode=21;case 21:if(b>=6&&F>=258){e.next_out=w,e.avail_out=F,e.next_in=m,e.avail_in=b,i.hold=v,i.bits=y,o(e,C),w=e.next_out,p=e.output,F=e.avail_out,m=e.next_in,f=e.input,b=e.avail_in,v=i.hold,y=i.bits,i.mode===d&&(i.back=-1);break}for(i.back=0;N=(P=i.lencode[v&(1<<i.lenbits)-1])>>>16&255,B=65535&P,!((E=P>>>24)<=y);){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(N&&!(240&N)){for(M=E,R=N,D=B;N=(P=i.lencode[D+((v&(1<<M+R)-1)>>M)])>>>16&255,B=65535&P,!(M+(E=P>>>24)<=y);){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}v>>>=M,y-=M,i.back+=M}if(v>>>=E,y-=E,i.back+=E,i.length=B,0===N){i.mode=26;break}if(32&N){i.back=-1,i.mode=d;break}if(64&N){e.msg="invalid literal/length code",i.mode=u;break}i.extra=15&N,i.mode=22;case 22:if(i.extra){for(H=i.extra;y<H;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}i.length+=v&(1<<i.extra)-1,v>>>=i.extra,y-=i.extra,i.back+=i.extra}i.was=i.length,i.mode=23;case 23:for(;N=(P=i.distcode[v&(1<<i.distbits)-1])>>>16&255,B=65535&P,!((E=P>>>24)<=y);){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(!(240&N)){for(M=E,R=N,D=B;N=(P=i.distcode[D+((v&(1<<M+R)-1)>>M)])>>>16&255,B=65535&P,!(M+(E=P>>>24)<=y);){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}v>>>=M,y-=M,i.back+=M}if(v>>>=E,y-=E,i.back+=E,64&N){e.msg="invalid distance code",i.mode=u;break}i.offset=B,i.extra=15&N,i.mode=24;case 24:if(i.extra){for(H=i.extra;y<H;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}i.offset+=v&(1<<i.extra)-1,v>>>=i.extra,y-=i.extra,i.back+=i.extra}if(i.offset>i.dmax){e.msg="invalid distance too far back",i.mode=u;break}i.mode=25;case 25:if(0===F)break e;if(k=C-F,i.offset>k){if((k=i.offset-k)>i.whave&&i.sane){e.msg="invalid distance too far back",i.mode=u;break}k>i.wnext?(k-=i.wnext,I=i.wsize-k):I=i.wnext-k,k>i.length&&(k=i.length),S=i.window}else S=p,I=w-i.offset,k=i.length;k>F&&(k=F),F-=k,i.length-=k;do{p[w++]=S[I++]}while(--k);0===i.length&&(i.mode=21);break;case 26:if(0===F)break e;p[w++]=i.length,F--,i.mode=21;break;case 27:if(i.wrap){for(;y<32;){if(0===b)break e;b--,v|=f[m++]<<y,y+=8}if(C-=F,e.total_out+=C,i.total+=C,C&&(e.adler=i.check=i.flags?s(i.check,p,C,w-C):r(i.check,p,C,w-C)),C=F,(i.flags?v:g(v))!==i.check){e.msg="incorrect data check",i.mode=u;break}v=0,y=0}i.mode=28;case 28:if(i.wrap&&i.flags){for(;y<32;){if(0===b)break e;b--,v+=f[m++]<<y,y+=8}if(v!==(4294967295&i.total)){e.msg="incorrect length check",i.mode=u;break}v=0,y=0}i.mode=29;case 29:L=1;break e;case u:L=-3;break e;case 31:return-4;default:return l}return e.next_out=w,e.avail_out=F,e.next_in=m,e.avail_in=b,i.hold=v,i.bits=y,(i.wsize||C!==e.avail_out&&i.mode<u&&(i.mode<27||4!==t))&&x(e,e.output,e.next_out,C-e.avail_out)?(i.mode=31,-4):(A-=e.avail_in,C-=e.avail_out,e.total_in+=A,e.total_out+=C,i.total+=C,i.wrap&&C&&(e.adler=i.check=i.flags?s(i.check,p,C,e.next_out-C):r(i.check,p,C,e.next_out-C)),e.data_type=i.bits+(i.last?64:0)+(i.mode===d?128:0)+(20===i.mode||15===i.mode?256:0),(0===A&&0===C||4===t)&&L===c&&(L=-5),L)},t.inflateEnd=function(e){if(!e||!e.state)return l;var t=e.state;return t.window&&(t.window=null),e.state=null,c},t.inflateGetHeader=function(e,t){var i;return e&&e.state&&2&(i=e.state).wrap?(i.head=t,t.done=!1,c):l},t.inflateSetDictionary=function(e,t){var i,n=t.length;return e&&e.state?0!==(i=e.state).wrap&&11!==i.mode?l:11===i.mode&&r(1,t,n,0)!==i.check?-3:x(e,t,n,n)?(i.mode=31,-4):(i.havedict=1,c):l},t.inflateInfo="pako inflate (from Nodeca project)"},1998:(e,t,i)=>{var n=i(9805),r=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],s=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,i,c,l,h,d,u){var f,p,g,m,w,b,F,v,y,A=u.bits,C=0,_=0,x=0,k=0,I=0,S=0,E=0,N=0,B=0,M=0,R=null,D=0,T=new n.Buf16(16),L=new n.Buf16(16),z=null,H=0;for(C=0;C<=15;C++)T[C]=0;for(_=0;_<c;_++)T[t[i+_]]++;for(I=A,k=15;k>=1&&0===T[k];k--);if(I>k&&(I=k),0===k)return l[h++]=20971520,l[h++]=20971520,u.bits=1,0;for(x=1;x<k&&0===T[x];x++);for(I<x&&(I=x),N=1,C=1;C<=15;C++)if(N<<=1,(N-=T[C])<0)return-1;if(N>0&&(0===e||1!==k))return-1;for(L[1]=0,C=1;C<15;C++)L[C+1]=L[C]+T[C];for(_=0;_<c;_++)0!==t[i+_]&&(d[L[t[i+_]]++]=_);if(0===e?(R=z=d,b=19):1===e?(R=r,D-=257,z=s,H-=257,b=256):(R=o,z=a,b=-1),M=0,_=0,C=x,w=h,S=I,E=0,g=-1,m=(B=1<<I)-1,1===e&&B>852||2===e&&B>592)return 1;for(;;){F=C-E,d[_]<b?(v=0,y=d[_]):d[_]>b?(v=z[H+d[_]],y=R[D+d[_]]):(v=96,y=0),f=1<<C-E,x=p=1<<S;do{l[w+(M>>E)+(p-=f)]=F<<24|v<<16|y}while(0!==p);for(f=1<<C-1;M&f;)f>>=1;if(0!==f?(M&=f-1,M+=f):M=0,_++,0==--T[C]){if(C===k)break;C=t[i+d[_]]}if(C>I&&(M&m)!==g){for(0===E&&(E=I),w+=x,N=1<<(S=C-E);S+E<k&&!((N-=T[S+E])<=0);)S++,N<<=1;if(B+=1<<S,1===e&&B>852||2===e&&B>592)return 1;l[g=M&m]=I<<24|S<<16|w-h}}return 0!==M&&(l[w+M]=C-E<<24|64<<16),u.bits=I,0}},4674:e=>{e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},3665:(e,t,i)=>{var n=i(9805);function r(e){for(var t=e.length;--t>=0;)e[t]=0}var s=15,o=16,a=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],c=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],h=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);r(d);var u=new Array(60);r(u);var f=new Array(512);r(f);var p=new Array(256);r(p);var g=new Array(29);r(g);var m,w,b,F=new Array(30);function v(e,t,i,n,r){this.static_tree=e,this.extra_bits=t,this.extra_base=i,this.elems=n,this.max_length=r,this.has_stree=e&&e.length}function y(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function A(e){return e<256?f[e]:f[256+(e>>>7)]}function C(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function _(e,t,i){e.bi_valid>o-i?(e.bi_buf|=t<<e.bi_valid&65535,C(e,e.bi_buf),e.bi_buf=t>>o-e.bi_valid,e.bi_valid+=i-o):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=i)}function x(e,t,i){_(e,i[2*t],i[2*t+1])}function k(e,t){var i=0;do{i|=1&e,e>>>=1,i<<=1}while(--t>0);return i>>>1}function I(e,t,i){var n,r,o=new Array(s+1),a=0;for(n=1;n<=s;n++)o[n]=a=a+i[n-1]<<1;for(r=0;r<=t;r++){var c=e[2*r+1];0!==c&&(e[2*r]=k(o[c]++,c))}}function S(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function E(e){e.bi_valid>8?C(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function N(e,t,i,n){var r=2*t,s=2*i;return e[r]<e[s]||e[r]===e[s]&&n[t]<=n[i]}function B(e,t,i){for(var n=e.heap[i],r=i<<1;r<=e.heap_len&&(r<e.heap_len&&N(t,e.heap[r+1],e.heap[r],e.depth)&&r++,!N(t,n,e.heap[r],e.depth));)e.heap[i]=e.heap[r],i=r,r<<=1;e.heap[i]=n}function M(e,t,i){var n,r,s,o,l=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*l]<<8|e.pending_buf[e.d_buf+2*l+1],r=e.pending_buf[e.l_buf+l],l++,0===n?x(e,r,t):(x(e,(s=p[r])+256+1,t),0!==(o=a[s])&&_(e,r-=g[s],o),x(e,s=A(--n),i),0!==(o=c[s])&&_(e,n-=F[s],o))}while(l<e.last_lit);x(e,256,t)}function R(e,t){var i,n,r,o=t.dyn_tree,a=t.stat_desc.static_tree,c=t.stat_desc.has_stree,l=t.stat_desc.elems,h=-1;for(e.heap_len=0,e.heap_max=573,i=0;i<l;i++)0!==o[2*i]?(e.heap[++e.heap_len]=h=i,e.depth[i]=0):o[2*i+1]=0;for(;e.heap_len<2;)o[2*(r=e.heap[++e.heap_len]=h<2?++h:0)]=1,e.depth[r]=0,e.opt_len--,c&&(e.static_len-=a[2*r+1]);for(t.max_code=h,i=e.heap_len>>1;i>=1;i--)B(e,o,i);r=l;do{i=e.heap[1],e.heap[1]=e.heap[e.heap_len--],B(e,o,1),n=e.heap[1],e.heap[--e.heap_max]=i,e.heap[--e.heap_max]=n,o[2*r]=o[2*i]+o[2*n],e.depth[r]=(e.depth[i]>=e.depth[n]?e.depth[i]:e.depth[n])+1,o[2*i+1]=o[2*n+1]=r,e.heap[1]=r++,B(e,o,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var i,n,r,o,a,c,l=t.dyn_tree,h=t.max_code,d=t.stat_desc.static_tree,u=t.stat_desc.has_stree,f=t.stat_desc.extra_bits,p=t.stat_desc.extra_base,g=t.stat_desc.max_length,m=0;for(o=0;o<=s;o++)e.bl_count[o]=0;for(l[2*e.heap[e.heap_max]+1]=0,i=e.heap_max+1;i<573;i++)(o=l[2*l[2*(n=e.heap[i])+1]+1]+1)>g&&(o=g,m++),l[2*n+1]=o,n>h||(e.bl_count[o]++,a=0,n>=p&&(a=f[n-p]),c=l[2*n],e.opt_len+=c*(o+a),u&&(e.static_len+=c*(d[2*n+1]+a)));if(0!==m){do{for(o=g-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[g]--,m-=2}while(m>0);for(o=g;0!==o;o--)for(n=e.bl_count[o];0!==n;)(r=e.heap[--i])>h||(l[2*r+1]!==o&&(e.opt_len+=(o-l[2*r+1])*l[2*r],l[2*r+1]=o),n--)}}(e,t),I(o,h,e.bl_count)}function D(e,t,i){var n,r,s=-1,o=t[1],a=0,c=7,l=4;for(0===o&&(c=138,l=3),t[2*(i+1)+1]=65535,n=0;n<=i;n++)r=o,o=t[2*(n+1)+1],++a<c&&r===o||(a<l?e.bl_tree[2*r]+=a:0!==r?(r!==s&&e.bl_tree[2*r]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,a=0,s=r,0===o?(c=138,l=3):r===o?(c=6,l=3):(c=7,l=4))}function T(e,t,i){var n,r,s=-1,o=t[1],a=0,c=7,l=4;for(0===o&&(c=138,l=3),n=0;n<=i;n++)if(r=o,o=t[2*(n+1)+1],!(++a<c&&r===o)){if(a<l)do{x(e,r,e.bl_tree)}while(0!=--a);else 0!==r?(r!==s&&(x(e,r,e.bl_tree),a--),x(e,16,e.bl_tree),_(e,a-3,2)):a<=10?(x(e,17,e.bl_tree),_(e,a-3,3)):(x(e,18,e.bl_tree),_(e,a-11,7));a=0,s=r,0===o?(c=138,l=3):r===o?(c=6,l=3):(c=7,l=4)}}r(F);var L=!1;function z(e,t,i,r){_(e,0+(r?1:0),3),function(e,t,i){E(e),C(e,i),C(e,~i),n.arraySet(e.pending_buf,e.window,t,i,e.pending),e.pending+=i}(e,t,i)}t._tr_init=function(e){L||(function(){var e,t,i,n,r,o=new Array(s+1);for(i=0,n=0;n<28;n++)for(g[n]=i,e=0;e<1<<a[n];e++)p[i++]=n;for(p[i-1]=n,r=0,n=0;n<16;n++)for(F[n]=r,e=0;e<1<<c[n];e++)f[r++]=n;for(r>>=7;n<30;n++)for(F[n]=r<<7,e=0;e<1<<c[n]-7;e++)f[256+r++]=n;for(t=0;t<=s;t++)o[t]=0;for(e=0;e<=143;)d[2*e+1]=8,e++,o[8]++;for(;e<=255;)d[2*e+1]=9,e++,o[9]++;for(;e<=279;)d[2*e+1]=7,e++,o[7]++;for(;e<=287;)d[2*e+1]=8,e++,o[8]++;for(I(d,287,o),e=0;e<30;e++)u[2*e+1]=5,u[2*e]=k(e,5);m=new v(d,a,257,286,s),w=new v(u,c,0,30,s),b=new v(new Array(0),l,0,19,7)}(),L=!0),e.l_desc=new y(e.dyn_ltree,m),e.d_desc=new y(e.dyn_dtree,w),e.bl_desc=new y(e.bl_tree,b),e.bi_buf=0,e.bi_valid=0,S(e)},t._tr_stored_block=z,t._tr_flush_block=function(e,t,i,n){var r,s,o=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,i=4093624447;for(t=0;t<=31;t++,i>>>=1)if(1&i&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),R(e,e.l_desc),R(e,e.d_desc),o=function(e){var t;for(D(e,e.dyn_ltree,e.l_desc.max_code),D(e,e.dyn_dtree,e.d_desc.max_code),R(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*h[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),r=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=r&&(r=s)):r=s=i+5,i+4<=r&&-1!==t?z(e,t,i,n):4===e.strategy||s===r?(_(e,2+(n?1:0),3),M(e,d,u)):(_(e,4+(n?1:0),3),function(e,t,i,n){var r;for(_(e,t-257,5),_(e,i-1,5),_(e,n-4,4),r=0;r<n;r++)_(e,e.bl_tree[2*h[r]+1],3);T(e,e.dyn_ltree,t-1),T(e,e.dyn_dtree,i-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),M(e,e.dyn_ltree,e.dyn_dtree)),S(e),n&&E(e)},t._tr_tally=function(e,t,i){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&i,e.last_lit++,0===t?e.dyn_ltree[2*i]++:(e.matches++,t--,e.dyn_ltree[2*(p[i]+256+1)]++,e.dyn_dtree[2*A(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){_(e,2,3),x(e,256,d),function(e){16===e.bi_valid?(C(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},4442:e=>{e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},7392:e=>{class t{constructor(e={}){if(!(e.maxSize&&e.maxSize>0))throw new TypeError("`maxSize` must be a number greater than 0");this.maxSize=e.maxSize,this.cache=new Map,this.oldCache=new Map,this._size=0}_set(e,t){this.cache.set(e,t),this._size++,this._size>=this.maxSize&&(this._size=0,this.oldCache=this.cache,this.cache=new Map)}get(e){if(this.cache.has(e))return this.cache.get(e);if(this.oldCache.has(e)){const t=this.oldCache.get(e);return this.oldCache.delete(e),this._set(e,t),t}}set(e,t){return this.cache.has(e)?this.cache.set(e,t):this._set(e,t),this}has(e){return this.cache.has(e)||this.oldCache.has(e)}peek(e){return this.cache.has(e)?this.cache.get(e):this.oldCache.has(e)?this.oldCache.get(e):void 0}delete(e){const t=this.cache.delete(e);return t&&this._size--,this.oldCache.delete(e)||t}clear(){this.cache.clear(),this.oldCache.clear(),this._size=0}*keys(){for(const[e]of this)yield e}*values(){for(const[,e]of this)yield e}*[Symbol.iterator](){for(const e of this.cache)yield e;for(const e of this.oldCache){const[t]=e;this.cache.has(t)||(yield e)}}get size(){let e=0;for(const t of this.oldCache.keys())this.cache.has(t)||e++;return this._size+e}}e.exports=t},1307:function(e,t,i){var n;n=e=>(()=>{var t=[,e=>{e.exports="data:application/wasm;base64,"},t=>{t.exports=e}],i={};function n(e){var r=i[e];if(void 0!==r)return r.exports;var s=i[e]={exports:{}};return t[e](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{n.r(r),n.d(r,{XzReadableStream:()=>s});var e=n(1);const t=globalThis.ReadableStream||n(2).ReadableStream;class i{constructor(e){this.exports=e.exports,this.memory=this.exports.memory,this.ptr=this.exports.create_context(),this._refresh(),this.bufSize=this.mem32[0],this.inStart=this.mem32[1]-this.ptr,this.inEnd=this.inStart+this.bufSize,this.outStart=this.mem32[4]-this.ptr}supplyInput(e){this._refresh(),this.mem8.subarray(this.inStart,this.inEnd).set(e,0),this.exports.supply_input(this.ptr,e.byteLength),this._refresh()}getNextOutput(){const e=this.exports.get_next_output(this.ptr);if(this._refresh(),0!==e&&1!==e)throw new Error(`get_next_output failed with error code ${e}`);return{outChunk:this.mem8.slice(this.outStart,this.outStart+this.mem32[5]),finished:1===e}}needsMoreInput(){return this.mem32[2]===this.mem32[3]}outputBufferIsFull(){return this.mem32[5]===this.bufSize}resetOutputBuffer(){this.outPos=this.mem32[5]=0}dispose(){this.exports.destroy_context(this.ptr),this.exports=null}_refresh(){this.memory.buffer!==this.mem8?.buffer&&(this.mem8=new Uint8Array(this.memory.buffer,this.ptr),this.mem32=new Uint32Array(this.memory.buffer,this.ptr))}}class s extends t{static _moduleInstancePromise;static _moduleInstance;static async _getModuleInstance(){const t=e.replace("data:application/wasm;base64,",""),i=Uint8Array.from(atob(t),(e=>e.charCodeAt(0))).buffer,n=await WebAssembly.instantiate(i,{});s._moduleInstance=n.instance}constructor(e){let t,n=null;const r=e.getReader();super({async start(e){s._moduleInstance||await(s._moduleInstancePromise||(s._moduleInstancePromise=s._getModuleInstance())),t=new i(s._moduleInstance)},async pull(e){if(t.needsMoreInput()){if(null===n||0===n.byteLength){const{done:e,value:t}=await r.read();e||(n=t)}const e=Math.min(t.bufSize,n.byteLength);t.supplyInput(n.subarray(0,e)),n=n.subarray(e)}const i=t.getNextOutput();e.enqueue(i.outChunk),t.resetOutputBuffer(),i.finished&&(t.dispose(),e.close())},cancel:()=>(t.dispose(),r.cancel())})}}})(),r})(),e.exports=n(i(772))},3617:()=>{},772:()=>{},4132:(e,t,i)=>{var n=i(8287).Buffer;const r=new Int32Array([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]);function s(e){if(n.isBuffer(e))return e;if("number"==typeof e)return n.alloc(e);if("string"==typeof e)return n.from(e);throw new Error("input must be buffer, number, or string, received "+typeof e)}function o(e,t){e=s(e),n.isBuffer(t)&&(t=t.readUInt32BE(0));let i=~t;for(var o=0;o<e.length;o++)i=r[255&(i^e[o])]^i>>>8;return~i}function a(){return function(e){const t=s(4);return t.writeInt32BE(e,0),t}(o.apply(null,arguments))}a.signed=function(){return o.apply(null,arguments)},a.unsigned=function(){return o.apply(null,arguments)>>>0};const c=function(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}(a);e.exports=c}},t={};function i(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,i),s.exports}return i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i(7806)})(),Qp=[],Vp=[],jp="undefined"!=typeof Uint8Array?Uint8Array:Array,Wp="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Gp=0;Gp<64;++Gp)Qp[Gp]=Wp[Gp],Vp[Wp.charCodeAt(Gp)]=Gp;function $p(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=e.indexOf("=");return-1===i&&(i=t),[i,i===t?0:4-i%4]}function Kp(e,t,i){for(var n,r,s=[],o=t;o<i;o+=3)n=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),s.push(Qp[(r=n)>>18&63]+Qp[r>>12&63]+Qp[r>>6&63]+Qp[63&r]);return s.join("")}Vp["-".charCodeAt(0)]=62,Vp["_".charCodeAt(0)]=63;var Yp={byteLength:function(e){var t=$p(e),i=t[0],n=t[1];return 3*(i+n)/4-n},toByteArray:function(e){var t,i,n=$p(e),r=n[0],s=n[1],o=new jp(function(e,t,i){return 3*(t+i)/4-i}(0,r,s)),a=0,c=s>0?r-4:r;for(i=0;i<c;i+=4)t=Vp[e.charCodeAt(i)]<<18|Vp[e.charCodeAt(i+1)]<<12|Vp[e.charCodeAt(i+2)]<<6|Vp[e.charCodeAt(i+3)],o[a++]=t>>16&255,o[a++]=t>>8&255,o[a++]=255&t;return 2===s&&(t=Vp[e.charCodeAt(i)]<<2|Vp[e.charCodeAt(i+1)]>>4,o[a++]=255&t),1===s&&(t=Vp[e.charCodeAt(i)]<<10|Vp[e.charCodeAt(i+1)]<<4|Vp[e.charCodeAt(i+2)]>>2,o[a++]=t>>8&255,o[a++]=255&t),o},fromByteArray:function(e){for(var t,i=e.length,n=i%3,r=[],s=16383,o=0,a=i-n;o<a;o+=s)r.push(Kp(e,o,o+s>a?a:o+s));return 1===n?(t=e[i-1],r.push(Qp[t>>2]+Qp[t<<4&63]+"==")):2===n&&(t=(e[i-2]<<8)+e[i-1],r.push(Qp[t>>10]+Qp[t>>4&63]+Qp[t<<2&63]+"=")),r.join("")}};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */var Xp={read:function(e,t,i,n,r){var s,o,a=8*r-n-1,c=(1<<a)-1,l=c>>1,h=-7,d=i?r-1:0,u=i?-1:1,f=e[t+d];for(d+=u,s=f&(1<<-h)-1,f>>=-h,h+=a;h>0;s=256*s+e[t+d],d+=u,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=n;h>0;o=256*o+e[t+d],d+=u,h-=8);if(0===s)s=1-l;else{if(s===c)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,n),s-=l}return(f?-1:1)*o*Math.pow(2,s-n)},write:function(e,t,i,n,r,s){var o,a,c,l=8*s-r-1,h=(1<<l)-1,d=h>>1,u=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:s-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=h):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+d>=1?u/c:u*Math.pow(2,1-d))*c>=2&&(o++,c/=2),o+d>=h?(a=0,o=h):o+d>=1?(a=(t*c-1)*Math.pow(2,r),o+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,r),o=0));r>=8;e[i+f]=255&a,f+=p,a/=256,r-=8);for(o=o<<r|a,l+=r;l>0;e[i+f]=255&o,f+=p,o/=256,l-=8);e[i+f-p]|=128*g}};
/*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */const Zp="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null,Jp=2147483647;function eg(e){if(e>Jp)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,tg.prototype),t}function tg(e,t,i){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return rg(e)}return ig(e,t,i)}function ig(e,t,i){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!tg.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const i=0|cg(e,t);let n=eg(i);const r=n.write(e,t);r!==i&&(n=n.slice(0,r));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(qg(e,Uint8Array)){const t=new Uint8Array(e);return og(t.buffer,t.byteOffset,t.byteLength)}return sg(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(qg(e,ArrayBuffer)||e&&qg(e.buffer,ArrayBuffer))return og(e,t,i);if("undefined"!=typeof SharedArrayBuffer&&(qg(e,SharedArrayBuffer)||e&&qg(e.buffer,SharedArrayBuffer)))return og(e,t,i);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return tg.from(n,t,i);const r=function(e){if(tg.isBuffer(e)){const t=0|ag(e.length),i=eg(t);return 0===i.length||e.copy(i,0,0,t),i}if(void 0!==e.length)return"number"!=typeof e.length||Qg(e.length)?eg(0):sg(e);if("Buffer"===e.type&&Array.isArray(e.data))return sg(e.data)}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return tg.from(e[Symbol.toPrimitive]("string"),t,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function ng(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function rg(e){return ng(e),eg(e<0?0:0|ag(e))}function sg(e){const t=e.length<0?0:0|ag(e.length),i=eg(t);for(let n=0;n<t;n+=1)i[n]=255&e[n];return i}function og(e,t,i){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(i||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===i?new Uint8Array(e):void 0===i?new Uint8Array(e,t):new Uint8Array(e,t,i),Object.setPrototypeOf(n,tg.prototype),n}function ag(e){if(e>=Jp)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Jp.toString(16)+" bytes");return 0|e}function cg(e,t){if(tg.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||qg(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const i=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===i)return 0;let r=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return Pg(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return Og(e).length;default:if(r)return n?-1:Pg(e).length;t=(""+t).toLowerCase(),r=!0}}function lg(e,t,i){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Cg(this,t,i);case"utf8":case"utf-8":return Fg(this,t,i);case"ascii":return yg(this,t,i);case"latin1":case"binary":return Ag(this,t,i);case"base64":return bg(this,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _g(this,t,i);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function hg(e,t,i){const n=e[t];e[t]=e[i],e[i]=n}function dg(e,t,i,n,r){if(0===e.length)return-1;if("string"==typeof i?(n=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),Qg(i=+i)&&(i=r?0:e.length-1),i<0&&(i=e.length+i),i>=e.length){if(r)return-1;i=e.length-1}else if(i<0){if(!r)return-1;i=0}if("string"==typeof t&&(t=tg.from(t,n)),tg.isBuffer(t))return 0===t.length?-1:ug(e,t,i,n,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,i):Uint8Array.prototype.lastIndexOf.call(e,t,i):ug(e,[t],i,n,r);throw new TypeError("val must be string, number or Buffer")}function ug(e,t,i,n,r){let s,o=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,a/=2,c/=2,i/=2}function l(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(r){let n=-1;for(s=i;s<a;s++)if(l(e,s)===l(t,-1===n?0:s-n)){if(-1===n&&(n=s),s-n+1===c)return n*o}else-1!==n&&(s-=s-n),n=-1}else for(i+c>a&&(i=a-c),s=i;s>=0;s--){let i=!0;for(let n=0;n<c;n++)if(l(e,s+n)!==l(t,n)){i=!1;break}if(i)return s}return-1}function fg(e,t,i,n){i=Number(i)||0;const r=e.length-i;n?(n=Number(n))>r&&(n=r):n=r;const s=t.length;let o;for(n>s/2&&(n=s/2),o=0;o<n;++o){const n=parseInt(t.substr(2*o,2),16);if(Qg(n))return o;e[i+o]=n}return o}function pg(e,t,i,n){return Ug(Pg(t,e.length-i),e,i,n)}function gg(e,t,i,n){return Ug(function(e){const t=[];for(let i=0;i<e.length;++i)t.push(255&e.charCodeAt(i));return t}(t),e,i,n)}function mg(e,t,i,n){return Ug(Og(t),e,i,n)}function wg(e,t,i,n){return Ug(function(e,t){let i,n,r;const s=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)i=e.charCodeAt(o),n=i>>8,r=i%256,s.push(r),s.push(n);return s}(t,e.length-i),e,i,n)}function bg(e,t,i){return 0===t&&i===e.length?Yp.fromByteArray(e):Yp.fromByteArray(e.slice(t,i))}function Fg(e,t,i){i=Math.min(e.length,i);const n=[];let r=t;for(;r<i;){const t=e[r];let s=null,o=t>239?4:t>223?3:t>191?2:1;if(r+o<=i){let i,n,a,c;switch(o){case 1:t<128&&(s=t);break;case 2:i=e[r+1],128==(192&i)&&(c=(31&t)<<6|63&i,c>127&&(s=c));break;case 3:i=e[r+1],n=e[r+2],128==(192&i)&&128==(192&n)&&(c=(15&t)<<12|(63&i)<<6|63&n,c>2047&&(c<55296||c>57343)&&(s=c));break;case 4:i=e[r+1],n=e[r+2],a=e[r+3],128==(192&i)&&128==(192&n)&&128==(192&a)&&(c=(15&t)<<18|(63&i)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(s=c))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),r+=o}return function(e){const t=e.length;if(t<=vg)return String.fromCharCode.apply(String,e);let i="",n=0;for(;n<t;)i+=String.fromCharCode.apply(String,e.slice(n,n+=vg));return i}(n)}tg.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),tg.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(tg.prototype,"parent",{enumerable:!0,get:function(){if(tg.isBuffer(this))return this.buffer}}),Object.defineProperty(tg.prototype,"offset",{enumerable:!0,get:function(){if(tg.isBuffer(this))return this.byteOffset}}),tg.poolSize=8192,tg.from=function(e,t,i){return ig(e,t,i)},Object.setPrototypeOf(tg.prototype,Uint8Array.prototype),Object.setPrototypeOf(tg,Uint8Array),tg.alloc=function(e,t,i){return function(e,t,i){return ng(e),e<=0?eg(e):void 0!==t?"string"==typeof i?eg(e).fill(t,i):eg(e).fill(t):eg(e)}(e,t,i)},tg.allocUnsafe=function(e){return rg(e)},tg.allocUnsafeSlow=function(e){return rg(e)},tg.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==tg.prototype},tg.compare=function(e,t){if(qg(e,Uint8Array)&&(e=tg.from(e,e.offset,e.byteLength)),qg(t,Uint8Array)&&(t=tg.from(t,t.offset,t.byteLength)),!tg.isBuffer(e)||!tg.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let i=e.length,n=t.length;for(let r=0,s=Math.min(i,n);r<s;++r)if(e[r]!==t[r]){i=e[r],n=t[r];break}return i<n?-1:n<i?1:0},tg.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},tg.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return tg.alloc(0);let i;if(void 0===t)for(t=0,i=0;i<e.length;++i)t+=e[i].length;const n=tg.allocUnsafe(t);let r=0;for(i=0;i<e.length;++i){let t=e[i];if(qg(t,Uint8Array))r+t.length>n.length?(tg.isBuffer(t)||(t=tg.from(t)),t.copy(n,r)):Uint8Array.prototype.set.call(n,t,r);else{if(!tg.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,r)}r+=t.length}return n},tg.byteLength=cg,tg.prototype._isBuffer=!0,tg.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)hg(this,t,t+1);return this},tg.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)hg(this,t,t+3),hg(this,t+1,t+2);return this},tg.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)hg(this,t,t+7),hg(this,t+1,t+6),hg(this,t+2,t+5),hg(this,t+3,t+4);return this},tg.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?Fg(this,0,e):lg.apply(this,arguments)},tg.prototype.toLocaleString=tg.prototype.toString,tg.prototype.equals=function(e){if(!tg.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===tg.compare(this,e)},tg.prototype.inspect=function(){let e="";const t=exports.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},Zp&&(tg.prototype[Zp]=tg.prototype.inspect),tg.prototype.compare=function(e,t,i,n,r){if(qg(e,Uint8Array)&&(e=tg.from(e,e.offset,e.byteLength)),!tg.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===i&&(i=e?e.length:0),void 0===n&&(n=0),void 0===r&&(r=this.length),t<0||i>e.length||n<0||r>this.length)throw new RangeError("out of range index");if(n>=r&&t>=i)return 0;if(n>=r)return-1;if(t>=i)return 1;if(this===e)return 0;let s=(r>>>=0)-(n>>>=0),o=(i>>>=0)-(t>>>=0);const a=Math.min(s,o),c=this.slice(n,r),l=e.slice(t,i);for(let e=0;e<a;++e)if(c[e]!==l[e]){s=c[e],o=l[e];break}return s<o?-1:o<s?1:0},tg.prototype.includes=function(e,t,i){return-1!==this.indexOf(e,t,i)},tg.prototype.indexOf=function(e,t,i){return dg(this,e,t,i,!0)},tg.prototype.lastIndexOf=function(e,t,i){return dg(this,e,t,i,!1)},tg.prototype.write=function(e,t,i,n){if(void 0===t)n="utf8",i=this.length,t=0;else if(void 0===i&&"string"==typeof t)n=t,i=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(i)?(i>>>=0,void 0===n&&(n="utf8")):(n=i,i=void 0)}const r=this.length-t;if((void 0===i||i>r)&&(i=r),e.length>0&&(i<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let s=!1;for(;;)switch(n){case"hex":return fg(this,e,t,i);case"utf8":case"utf-8":return pg(this,e,t,i);case"ascii":case"latin1":case"binary":return gg(this,e,t,i);case"base64":return mg(this,e,t,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return wg(this,e,t,i);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},tg.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const vg=4096;function yg(e,t,i){let n="";i=Math.min(e.length,i);for(let r=t;r<i;++r)n+=String.fromCharCode(127&e[r]);return n}function Ag(e,t,i){let n="";i=Math.min(e.length,i);for(let r=t;r<i;++r)n+=String.fromCharCode(e[r]);return n}function Cg(e,t,i){const n=e.length;(!t||t<0)&&(t=0),(!i||i<0||i>n)&&(i=n);let r="";for(let n=t;n<i;++n)r+=Vg[e[n]];return r}function _g(e,t,i){const n=e.slice(t,i);let r="";for(let e=0;e<n.length-1;e+=2)r+=String.fromCharCode(n[e]+256*n[e+1]);return r}function xg(e,t,i){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>i)throw new RangeError("Trying to access beyond buffer length")}function kg(e,t,i,n,r,s){if(!tg.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<s)throw new RangeError('"value" argument is out of bounds');if(i+n>e.length)throw new RangeError("Index out of range")}function Ig(e,t,i,n,r){Tg(t,n,r,e,i,7);let s=Number(t&BigInt(4294967295));e[i++]=s,s>>=8,e[i++]=s,s>>=8,e[i++]=s,s>>=8,e[i++]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[i++]=o,o>>=8,e[i++]=o,o>>=8,e[i++]=o,o>>=8,e[i++]=o,i}function Sg(e,t,i,n,r){Tg(t,n,r,e,i,7);let s=Number(t&BigInt(4294967295));e[i+7]=s,s>>=8,e[i+6]=s,s>>=8,e[i+5]=s,s>>=8,e[i+4]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[i+3]=o,o>>=8,e[i+2]=o,o>>=8,e[i+1]=o,o>>=8,e[i]=o,i+8}function Eg(e,t,i,n,r,s){if(i+n>e.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function Ng(e,t,i,n,r){return t=+t,i>>>=0,r||Eg(e,0,i,4),Xp.write(e,t,i,n,23,4),i+4}function Bg(e,t,i,n,r){return t=+t,i>>>=0,r||Eg(e,0,i,8),Xp.write(e,t,i,n,52,8),i+8}tg.prototype.slice=function(e,t){const i=this.length;(e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,tg.prototype),n},tg.prototype.readUintLE=tg.prototype.readUIntLE=function(e,t,i){e>>>=0,t>>>=0,i||xg(e,t,this.length);let n=this[e],r=1,s=0;for(;++s<t&&(r*=256);)n+=this[e+s]*r;return n},tg.prototype.readUintBE=tg.prototype.readUIntBE=function(e,t,i){e>>>=0,t>>>=0,i||xg(e,t,this.length);let n=this[e+--t],r=1;for(;t>0&&(r*=256);)n+=this[e+--t]*r;return n},tg.prototype.readUint8=tg.prototype.readUInt8=function(e,t){return e>>>=0,t||xg(e,1,this.length),this[e]},tg.prototype.readUint16LE=tg.prototype.readUInt16LE=function(e,t){return e>>>=0,t||xg(e,2,this.length),this[e]|this[e+1]<<8},tg.prototype.readUint16BE=tg.prototype.readUInt16BE=function(e,t){return e>>>=0,t||xg(e,2,this.length),this[e]<<8|this[e+1]},tg.prototype.readUint32LE=tg.prototype.readUInt32LE=function(e,t){return e>>>=0,t||xg(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},tg.prototype.readUint32BE=tg.prototype.readUInt32BE=function(e,t){return e>>>=0,t||xg(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},tg.prototype.readBigUInt64LE=jg((function(e){Lg(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||zg(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,r=this[++e]+256*this[++e]+65536*this[++e]+i*2**24;return BigInt(n)+(BigInt(r)<<BigInt(32))})),tg.prototype.readBigUInt64BE=jg((function(e){Lg(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||zg(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],r=this[++e]*2**24+65536*this[++e]+256*this[++e]+i;return(BigInt(n)<<BigInt(32))+BigInt(r)})),tg.prototype.readIntLE=function(e,t,i){e>>>=0,t>>>=0,i||xg(e,t,this.length);let n=this[e],r=1,s=0;for(;++s<t&&(r*=256);)n+=this[e+s]*r;return r*=128,n>=r&&(n-=Math.pow(2,8*t)),n},tg.prototype.readIntBE=function(e,t,i){e>>>=0,t>>>=0,i||xg(e,t,this.length);let n=t,r=1,s=this[e+--n];for(;n>0&&(r*=256);)s+=this[e+--n]*r;return r*=128,s>=r&&(s-=Math.pow(2,8*t)),s},tg.prototype.readInt8=function(e,t){return e>>>=0,t||xg(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},tg.prototype.readInt16LE=function(e,t){e>>>=0,t||xg(e,2,this.length);const i=this[e]|this[e+1]<<8;return 32768&i?4294901760|i:i},tg.prototype.readInt16BE=function(e,t){e>>>=0,t||xg(e,2,this.length);const i=this[e+1]|this[e]<<8;return 32768&i?4294901760|i:i},tg.prototype.readInt32LE=function(e,t){return e>>>=0,t||xg(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},tg.prototype.readInt32BE=function(e,t){return e>>>=0,t||xg(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},tg.prototype.readBigInt64LE=jg((function(e){Lg(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||zg(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(i<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),tg.prototype.readBigInt64BE=jg((function(e){Lg(e>>>=0,"offset");const t=this[e],i=this[e+7];void 0!==t&&void 0!==i||zg(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+i)})),tg.prototype.readFloatLE=function(e,t){return e>>>=0,t||xg(e,4,this.length),Xp.read(this,e,!0,23,4)},tg.prototype.readFloatBE=function(e,t){return e>>>=0,t||xg(e,4,this.length),Xp.read(this,e,!1,23,4)},tg.prototype.readDoubleLE=function(e,t){return e>>>=0,t||xg(e,8,this.length),Xp.read(this,e,!0,52,8)},tg.prototype.readDoubleBE=function(e,t){return e>>>=0,t||xg(e,8,this.length),Xp.read(this,e,!1,52,8)},tg.prototype.writeUintLE=tg.prototype.writeUIntLE=function(e,t,i,n){if(e=+e,t>>>=0,i>>>=0,!n){kg(this,e,t,i,Math.pow(2,8*i)-1,0)}let r=1,s=0;for(this[t]=255&e;++s<i&&(r*=256);)this[t+s]=e/r&255;return t+i},tg.prototype.writeUintBE=tg.prototype.writeUIntBE=function(e,t,i,n){if(e=+e,t>>>=0,i>>>=0,!n){kg(this,e,t,i,Math.pow(2,8*i)-1,0)}let r=i-1,s=1;for(this[t+r]=255&e;--r>=0&&(s*=256);)this[t+r]=e/s&255;return t+i},tg.prototype.writeUint8=tg.prototype.writeUInt8=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,1,255,0),this[t]=255&e,t+1},tg.prototype.writeUint16LE=tg.prototype.writeUInt16LE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},tg.prototype.writeUint16BE=tg.prototype.writeUInt16BE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},tg.prototype.writeUint32LE=tg.prototype.writeUInt32LE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},tg.prototype.writeUint32BE=tg.prototype.writeUInt32BE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},tg.prototype.writeBigUInt64LE=jg((function(e,t=0){return Ig(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),tg.prototype.writeBigUInt64BE=jg((function(e,t=0){return Sg(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),tg.prototype.writeIntLE=function(e,t,i,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*i-1);kg(this,e,t,i,n-1,-n)}let r=0,s=1,o=0;for(this[t]=255&e;++r<i&&(s*=256);)e<0&&0===o&&0!==this[t+r-1]&&(o=1),this[t+r]=(e/s|0)-o&255;return t+i},tg.prototype.writeIntBE=function(e,t,i,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*i-1);kg(this,e,t,i,n-1,-n)}let r=i-1,s=1,o=0;for(this[t+r]=255&e;--r>=0&&(s*=256);)e<0&&0===o&&0!==this[t+r+1]&&(o=1),this[t+r]=(e/s|0)-o&255;return t+i},tg.prototype.writeInt8=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},tg.prototype.writeInt16LE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},tg.prototype.writeInt16BE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},tg.prototype.writeInt32LE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},tg.prototype.writeInt32BE=function(e,t,i){return e=+e,t>>>=0,i||kg(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},tg.prototype.writeBigInt64LE=jg((function(e,t=0){return Ig(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),tg.prototype.writeBigInt64BE=jg((function(e,t=0){return Sg(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),tg.prototype.writeFloatLE=function(e,t,i){return Ng(this,e,t,!0,i)},tg.prototype.writeFloatBE=function(e,t,i){return Ng(this,e,t,!1,i)},tg.prototype.writeDoubleLE=function(e,t,i){return Bg(this,e,t,!0,i)},tg.prototype.writeDoubleBE=function(e,t,i){return Bg(this,e,t,!1,i)},tg.prototype.copy=function(e,t,i,n){if(!tg.isBuffer(e))throw new TypeError("argument should be a Buffer");if(i||(i=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<i&&(n=i),n===i)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-i&&(n=e.length-t+i);const r=n-i;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,i,n):Uint8Array.prototype.set.call(e,this.subarray(i,n),t),r},tg.prototype.fill=function(e,t,i,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,i=this.length):"string"==typeof i&&(n=i,i=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!tg.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<i)throw new RangeError("Out of range index");if(i<=t)return this;let r;if(t>>>=0,i=void 0===i?this.length:i>>>0,e||(e=0),"number"==typeof e)for(r=t;r<i;++r)this[r]=e;else{const s=tg.isBuffer(e)?e:tg.from(e,n),o=s.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(r=0;r<i-t;++r)this[r+t]=s[r%o]}return this};const Mg={};function Rg(e,t,i){Mg[e]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Dg(e){let t="",i=e.length;const n="-"===e[0]?1:0;for(;i>=n+4;i-=3)t=`_${e.slice(i-3,i)}${t}`;return`${e.slice(0,i)}${t}`}function Tg(e,t,i,n,r,s){if(e>i||e<t){const n="bigint"==typeof t?"n":"";let r;throw r=s>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(s+1)}${n}`:`>= -(2${n} ** ${8*(s+1)-1}${n}) and < 2 ** ${8*(s+1)-1}${n}`:`>= ${t}${n} and <= ${i}${n}`,new Mg.ERR_OUT_OF_RANGE("value",r,e)}!function(e,t,i){Lg(t,"offset"),void 0!==e[t]&&void 0!==e[t+i]||zg(t,e.length-(i+1))}(n,r,s)}function Lg(e,t){if("number"!=typeof e)throw new Mg.ERR_INVALID_ARG_TYPE(t,"number",e)}function zg(e,t,i){if(Math.floor(e)!==e)throw Lg(e,i),new Mg.ERR_OUT_OF_RANGE(i||"offset","an integer",e);if(t<0)throw new Mg.ERR_BUFFER_OUT_OF_BOUNDS;throw new Mg.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${t}`,e)}Rg("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Rg("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Rg("ERR_OUT_OF_RANGE",(function(e,t,i){let n=`The value of "${e}" is out of range.`,r=i;return Number.isInteger(i)&&Math.abs(i)>2**32?r=Dg(String(i)):"bigint"==typeof i&&(r=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(r=Dg(r)),r+="n"),n+=` It must be ${t}. Received ${r}`,n}),RangeError);const Hg=/[^+/0-9A-Za-z-_]/g;function Pg(e,t){let i;t=t||1/0;const n=e.length;let r=null;const s=[];for(let o=0;o<n;++o){if(i=e.charCodeAt(o),i>55295&&i<57344){if(!r){if(i>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&s.push(239,191,189);continue}r=i;continue}if(i<56320){(t-=3)>-1&&s.push(239,191,189),r=i;continue}i=65536+(r-55296<<10|i-56320)}else r&&(t-=3)>-1&&s.push(239,191,189);if(r=null,i<128){if((t-=1)<0)break;s.push(i)}else if(i<2048){if((t-=2)<0)break;s.push(i>>6|192,63&i|128)}else if(i<65536){if((t-=3)<0)break;s.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return s}function Og(e){return Yp.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(Hg,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Ug(e,t,i,n){let r;for(r=0;r<n&&!(r+i>=t.length||r>=e.length);++r)t[r+i]=e[r];return r}function qg(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Qg(e){return e!=e}const Vg=function(){const e="0123456789abcdef",t=new Array(256);for(let i=0;i<16;++i){const n=16*i;for(let r=0;r<16;++r)t[n+r]=e[i]+e[r]}return t}();function jg(e){return"undefined"==typeof BigInt?Wg:e}function Wg(){throw new Error("BigInt not supported")}class Gg{constructor(e,t){this.position=0,this.url=e,this.config=t,Ht(e)||!1===t.cacheFetches?this.useCache=!1:(this.useCache=!0,this.cache=new $g({fetch:(e,t)=>this._fetch(e,t),fetchSize:t.fetchSize||1e4}))}async _fetch(e,t){const i={start:e,size:t};this._stat={size:void 0};const n=await Qs.loadArrayBuffer(this.url,qa(this.config,{range:i}));return tg.from(n)}async read(e,t=0,i=1/0,n=0){if(this.useCache)await this.cache.get(e,t,n,i);else{(await this._fetch(n,i)).copy(e,t)}return{bytesRead:i,buffer:e}}async readFile(){const e=await Qs.loadArrayBuffer(this.url,qa(this.config));return tg.from(e)}async stat(){if(!this._stat){const e=tg.allocUnsafe(10);if(await this.read(e,0,10,0),!this._stat)throw new Error(`unable to determine size of file at ${this.url}`)}return this._stat}}class $g{constructor({fetch:e,fetchSize:t=3e4}){this.fetch=e,this.position=0,this.buffer=tg.allocUnsafe(0),this.fetchSize=t}async get(e,t,i,n){if(e.length<t+n)throw new Error("output buffer not big enough for request");if(i>=this.position&&i+n<=this.position+this.buffer.length);else{const e=Math.max(n,this.fetchSize);this.buffer=await this.fetch(i,e),this.position=i}const r=t,s=i-this.position,o=s+n;this.buffer.copy(e,r,s,o)}}class Kg{chrAliasTable=new Map;constructor(e,t,i){this.config=e,this.browser=i,this.genome=t,this.cramFile=new qp.CramFile({filehandle:e.fileHandle?e.fileHandle:new Gg(e.url,e),seqFetch:e.seqFetch||async function(e,t,i){const n=this.genome,r=await this.getHeader(),s=n.getChromosomeName(r.indexToChr[e]);return this.genome.getSequence(s,t-1,i)}.bind(this),checkSequenceMD5:void 0===e.checkSequenceMD5||e.checkSequenceMD5});const n=e.indexFileHandle?e.indexFileHandle:new Gg(e.indexURL,e);this.indexedCramFile=new qp.IndexedCramFile({cram:this.cramFile,index:new qp.CraiIndex({filehandle:n}),fetchSizeLimit:e.fetchSizeLimit||1e9}),Bp.setReaderDefaults(this,e)}async getHeader(){if(!this.header){const e=await this.cramFile.getSamHeader(),t={},i=[],n=[];for(let r of e)if("SQ"===r.tag){for(let e of r.data)if("SN"===e.tag){const n=e.value;t[n]=i.length,i.push(n);break}}else"RG"===r.tag&&n.push(r.data);this.header={indexToChr:i,chrToIndex:t,chrNames:Object.keys(t),readGroups:n}}return this.header}async#A(e){if(await this.getHeader(),this.chrAliasTable.has(e)&&void 0===(e=this.chrAliasTable.get(e)))return;let t=this.header.chrToIndex[e];if(void 0===t){const i=await this.genome.getAliasRecord(e);let n;if(i){const e=Object.keys(i).filter((e=>"start"!==e&&"end"!==e)).map((e=>i[e])).filter((e=>void 0!==this.header.chrToIndex[e]));e.length>0&&(n=e[0],t=this.header.chrToIndex[e[0]])}this.chrAliasTable.set(e,n)}return t}async readAlignments(e,t,i){const n=await this.getHeader(),r=await this.#A(e),s=new ep(e,t,i,this.config);if(void 0===r)return s;try{const e=await this.indexedCramFile.getRecordsForRange(r,t,i);for(let a of e){const e=a.sequenceId,c=a.alignmentStart,l=c+a.lengthOnRef;if(e<0)continue;if(e>r||c>i)return;if(e<r)continue;if(l<t)continue;const h=o(a,n.chrNames);this.filter.pass(h)&&s.push(h)}return s.finish(),s}catch(e){let t=e.message;throw t&&t.indexOf("MD5")>=0&&(t="Sequence mismatch. Is this the correct genome for the loaded CRAM?"),this.browser.alert.present(new Error(t)),e}function o(e,t){const i=new mp;if(i.chr=t[e.sequenceId],i.start=e.alignmentStart-1,i.lengthOnRef=e.lengthOnRef,i.flags=e.flags,i.strand=!(16&e.flags),i.fragmentLength=e.templateLength||e.templateSize,i.mq=e.mappingQuality,i.end=e.alignmentStart+e.lengthOnRef,i.readGroupId=e.readGroupId,e.mate&&void 0!==e.mate.sequenceId){const n=void 0!==e.mate.flags?!(1&e.mate.flags):!(32&e.flags);i.mate={chr:t[e.mate.sequenceId],position:e.mate.alignmentStart,strand:n}}return i.seq=e.getReadBases(),i.qual=e.qualityScores,i.tagDict=e.tags,i.readName=e.readName,function(e,t){const i=[];let n,r,s=0,o="";if(t.scStart=t.start,t.scLengthOnRef=t.lengthOnRef,e.readFeatures)for(let a of e.readFeatures){const e=a.code,c=a.data,l=a.pos-1,h=a.refPos-1;switch(e){case"S":case"I":case"i":case"N":case"D":if(l>s){const e=l-s;i.push(new xp({start:h-e,seqOffset:s,len:e,type:"M"})),s+=e,o+=e+"M"}if("S"===e){let n=h;t.scLengthOnRef+=c.length,0===l&&(t.scStart-=c.length,n-=c.length);const r=c.length;i.push(new xp({start:n,seqOffset:s,len:r,type:"S"})),s+=r,o+=r+e}else if("I"===e||"i"===e){void 0===n&&(n=[]);const t="i"===e?1:c.length;n.push(new xp({start:h,len:t,seqOffset:s,type:"I"})),s+=t,o+=t+e}else"D"!==e&&"N"!==e||(r||(r=[]),r.push({start:h,len:c,type:e}),o+=c+e);break;case"H":case"P":o+=c+e}}const a=e.readLength-s;a>0&&(i.push(new xp({start:e.alignmentStart+e.lengthOnRef-a-1,seqOffset:s,len:a,type:"M"})),o+=a+"M");t.blocks=i,t.insertions=n,t.gaps=r,t.cigar=o}(e,i),i.mate&&i.start>i.mate.position&&i.fragmentLength>0&&(i.fragmentLength=-i.fragmentLength),Bp.setPairOrientation(i),i}}}const Yg=2291137574,Xg=2273964779,Zg=[84,68,70,52],Jg=new Uint8Array([66,65,77,1]),em=[67,82,65,77],tm=[31,139],im=4,nm=new Set(["narrowpeak","broadpeak","regionpeak","peaks","bedgraph","wig","gff3","gff","gtf","fusionjuncspan","refflat","seg","aed","bed","bedMethyl","vcf","bb","bigbed","biginteract","biggenepred","bignarrowpeak","bw","bigwig","bam","tdf","refgene","genepred","genepredext","bedpe","bp","snp","rmsk","cram","gwas","maf","mut","hiccups","fasta","fa","fna","pytor","hic","qtl"]);function rm(e,t){const i=Math.min(e.length,t.length);if(0==i)return!1;for(let n=0;n<i;n++)if(e[n]!==t[n])return!1;return!0}async function sm(e){let t;const i=e.filename||await Wa(e.url);return i&&(t=await function(e){if(!e)return;if((e=e.toLowerCase()).endsWith("refgene.txt.gz")||e.endsWith("refgene.txt.bgz")||e.endsWith("refgene.txt")||e.endsWith("refgene.sorted.txt.gz")||e.endsWith("refgene.sorted.txt.bgz"))return"refgene";e.endsWith(".gz")&&(e=e.substring(0,e.length-3));e.endsWith(".bgz")&&(e=e.substring(0,e.length-4));(e.endsWith(".txt")||e.endsWith(".tab")||e.endsWith(".tsv"))&&(e=e.substring(0,e.length-4));const t=e.lastIndexOf("."),i=t<0?e:e.substring(t+1);switch(i){case"bw":return"bigwig";case"bb":return"bigbed";case"fasta":case"fa":case"fna":return"fasta";default:return nm.has(i)?i:void 0}}(i)),t||(t=await async function(e){const t=e.url;let i=qa(e,{range:{start:0,size:1e3}}),n=await Qs.loadArrayBuffer(t,i),r=new Uint8Array(n);if(rm(r,tm)){if(0!==(r[3]&im)&&66===r[12]&&67===r[13]){i=qa(e,{range:{start:0,size:ms(n)}}),n=await Qs.loadArrayBuffer(t,i),r=gs(n)}else i=qa(e,{}),n=await Qs.loadArrayBuffer(t,i),r=ps(n),e._filecontents=r}if(rm(r,Jg))return"bam";if(rm(r,em))return"cram";const s=!0;let o=new Ac(new DataView(n),s).getUInt();if(o===Yg)return"bigwig";if(o===Xg)return"bigbed";if(rm(r,Zg))return"tdf";const a=new TextDecoder("utf-8").decode(r),c=a.split(/\r?\n/)[0];if(c.startsWith("##fileformat=VCF"))return"vcf";if(c.startsWith("##gff-version 3"))return"gff3";if(c.startsWith("##gff-version"))return"gff";if(xh.isQTL(c))return"qtl";if(Jl.isGWAS(c))return"gwas";if(Tc(c.split("\t")))return"hiccups";return null}(e)),t}class om{constructor(e,t){const i=t.genome;if(this.config=e,this.genome=i,$a(e.url)&&(this.config.indexed=!1),"ga4gh"===e.sourceType)throw Error("Unsupported source type 'ga4gh'");if("pysam"===e.sourceType)this.bamReader=new Pp(e,i);else if("htsget"===e.sourceType)this.bamReader=new Up(e,i);else if("shardedBam"===e.sourceType)this.bamReader=new Hp(e,i);else if("cram"===e.format)this.bamReader=new Kg(e,i,t);else{if(!this.config.indexURL&&!1!==e.indexed)if(Mt(this.config.url)){const e=function(e,t){if(Mt(e)){if(e.includes("?")){const i=e.indexOf("?");return e.substring(0,i)+"."+t+e.substring(i)}return e+"."+t}}(this.config.url,"bai");e?(console.warn(`Warning: no indexURL specified for ${this.config.url}.  Guessing ${e}`),this.config.indexURL=e):(console.warning(`Warning: no indexURL specified for ${this.config.url}.`),this.config.indexed=!1)}else console.warning(`Warning: no indexURL specified for ${this.config.name}.`),this.config.indexed=!1;!1!==this.config.indexed?this.bamReader=new zp(e,i):this.bamReader=new Lp(e,i)}}async getAlignments(e,t,i){const n=this.genome,r=await this.bamReader.readAlignments(e,t,i);if(r.hasAlignments){const t=await n.getSequence(e,r.start,r.end);if(t)return r.coverageMap.refSeq=t,r.sequence=t,r;console.error("No sequence for: "+e+":"+r.start+"-"+r.end)}return r}}class am{constructor({chr:e,start:t,end:i}){this.chr=e,this.start=t,this.end=i}contains(e){return e.chr===this.chr&&e.start>=this.start&&e.end<=this.end}overlaps(e){return e.chr===this.chr&&!(e.end<this.start||e.start>this.end)}extend(e){e.chr===this.chr&&(this.start=Math.min(e.start,this.start),this.end=Math.max(e.end,this.end))}getLocusString(){if("all"===this.chr)return"all";{const e=Rt(Math.floor(this.start)+1),t=Rt(Math.round(this.end));return`${this.chr}:${e}-${t}`}}static fromLocusString(e){if("all"===e)return new am({chr:"all"});const t=e.split(":"),i=t[0],n=t[1].split("-"),r=Number.parseInt(n[0].replace(/,/g,""))-1,s=Number.parseInt(n[1].replace(/,/g,""));return new am({chr:i,start:r,end:s})}}
/*!
     * vanilla-picker v2.12.1
     * https://vanilla-picker.js.org
     *
     * Copyright 2017-2021 Andreas Borgen (https://github.com/Sphinxxxx), Adam Brooks (https://github.com/dissimulate)
     * Released under the ISC license.
     */var cm=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},lm=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),hm=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var i=[],n=!0,r=!1,s=void 0;try{for(var o,a=e[Symbol.iterator]();!(n=(o=a.next()).done)&&(i.push(o.value),!t||i.length!==t);n=!0);}catch(e){r=!0,s=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw s}}return i}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};String.prototype.startsWith=String.prototype.startsWith||function(e){return 0===this.indexOf(e)},String.prototype.padStart=String.prototype.padStart||function(e,t){for(var i=this;i.length<e;)i=t+i;return i};var dm={cb:"0f8ff",tqw:"aebd7",q:"-ffff",qmrn:"7fffd4",zr:"0ffff",bg:"5f5dc",bsq:"e4c4",bck:"---",nch:"ebcd",b:"--ff",bvt:"8a2be2",brwn:"a52a2a",brw:"deb887",ctb:"5f9ea0",hrt:"7fff-",chcT:"d2691e",cr:"7f50",rnw:"6495ed",crns:"8dc",crms:"dc143c",cn:"-ffff",Db:"--8b",Dcn:"-8b8b",Dgnr:"b8860b",Dgr:"a9a9a9",Dgrn:"-64-",Dkhk:"bdb76b",Dmgn:"8b-8b",Dvgr:"556b2f",Drng:"8c-",Drch:"9932cc",Dr:"8b--",Dsmn:"e9967a",Dsgr:"8fbc8f",DsTb:"483d8b",DsTg:"2f4f4f",Dtrq:"-ced1",Dvt:"94-d3",ppnk:"1493",pskb:"-bfff",mgr:"696969",grb:"1e90ff",rbrc:"b22222",rwht:"af0",stg:"228b22",chs:"-ff",gnsb:"dcdcdc",st:"8f8ff",g:"d7-",gnr:"daa520",gr:"808080",grn:"-8-0",grnw:"adff2f",hnw:"0fff0",htpn:"69b4",nnr:"cd5c5c",ng:"4b-82",vr:"0",khk:"0e68c",vnr:"e6e6fa",nrb:"0f5",wngr:"7cfc-",mnch:"acd",Lb:"add8e6",Lcr:"08080",Lcn:"e0ffff",Lgnr:"afad2",Lgr:"d3d3d3",Lgrn:"90ee90",Lpnk:"b6c1",Lsmn:"a07a",Lsgr:"20b2aa",Lskb:"87cefa",LsTg:"778899",Lstb:"b0c4de",Lw:"e0",m:"-ff-",mgrn:"32cd32",nn:"af0e6",mgnt:"-ff",mrn:"8--0",mqm:"66cdaa",mmb:"--cd",mmrc:"ba55d3",mmpr:"9370db",msg:"3cb371",mmsT:"7b68ee","":"-fa9a",mtr:"48d1cc",mmvt:"c71585",mnLb:"191970",ntc:"5fffa",mstr:"e4e1",mccs:"e4b5",vjw:"dead",nv:"--80",c:"df5e6",v:"808-0",vrb:"6b8e23",rng:"a5-",rngr:"45-",rch:"da70d6",pgnr:"eee8aa",pgrn:"98fb98",ptrq:"afeeee",pvtr:"db7093",ppwh:"efd5",pchp:"dab9",pr:"cd853f",pnk:"c0cb",pm:"dda0dd",pwrb:"b0e0e6",prp:"8-080",cc:"663399",r:"--",sbr:"bc8f8f",rb:"4169e1",sbrw:"8b4513",smn:"a8072",nbr:"4a460",sgrn:"2e8b57",ssh:"5ee",snn:"a0522d",svr:"c0c0c0",skb:"87ceeb",sTb:"6a5acd",sTgr:"708090",snw:"afa",n:"-ff7f",stb:"4682b4",tn:"d2b48c",t:"-8080",thst:"d8bfd8",tmT:"6347",trqs:"40e0d0",vt:"ee82ee",whT:"5deb3",wht:"",hts:"5f5f5",w:"-",wgrn:"9acd32"};function um(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(t>0?e.toFixed(t).replace(/0+$/,"").replace(/\.$/,""):e.toString())||"0"}var fm=function(){function e(t,i,n,r){cm(this,e);var s=this;if(void 0===t);else if(Array.isArray(t))this.rgba=t;else if(void 0===n){var o=t&&""+t;o&&function(t){if(t.startsWith("hsl")){var i=t.match(/([\-\d\.e]+)/g).map(Number),n=hm(i,4),r=n[0],o=n[1],a=n[2],c=n[3];void 0===c&&(c=1),r/=360,o/=100,a/=100,s.hsla=[r,o,a,c]}else if(t.startsWith("rgb")){var l=t.match(/([\-\d\.e]+)/g).map(Number),h=hm(l,4),d=h[0],u=h[1],f=h[2],p=h[3];void 0===p&&(p=1),s.rgba=[d,u,f,p]}else t.startsWith("#")?s.rgba=e.hexToRgb(t):s.rgba=e.nameToRgb(t)||e.hexToRgb(t)}(o.toLowerCase())}else this.rgba=[t,i,n,void 0===r?1:r]}return lm(e,[{key:"printRGB",value:function(e){var t=(e?this.rgba:this.rgba.slice(0,3)).map((function(e,t){return um(e,3===t?3:0)}));return e?"rgba("+t+")":"rgb("+t+")"}},{key:"printHSL",value:function(e){var t=[360,100,100,1],i=["","%","%",""],n=(e?this.hsla:this.hsla.slice(0,3)).map((function(e,n){return um(e*t[n],3===n?3:1)+i[n]}));return e?"hsla("+n+")":"hsl("+n+")"}},{key:"printHex",value:function(e){var t=this.hex;return e?t:t.substring(0,7)}},{key:"rgba",get:function(){if(this._rgba)return this._rgba;if(!this._hsla)throw new Error("No color is set");return this._rgba=e.hslToRgb(this._hsla)},set:function(e){3===e.length&&(e[3]=1),this._rgba=e,this._hsla=null}},{key:"rgbString",get:function(){return this.printRGB()}},{key:"rgbaString",get:function(){return this.printRGB(!0)}},{key:"hsla",get:function(){if(this._hsla)return this._hsla;if(!this._rgba)throw new Error("No color is set");return this._hsla=e.rgbToHsl(this._rgba)},set:function(e){3===e.length&&(e[3]=1),this._hsla=e,this._rgba=null}},{key:"hslString",get:function(){return this.printHSL()}},{key:"hslaString",get:function(){return this.printHSL(!0)}},{key:"hex",get:function(){var e=this.rgba.map((function(e,t){return t<3?e.toString(16):Math.round(255*e).toString(16)}));return"#"+e.map((function(e){return e.padStart(2,"0")})).join("")},set:function(t){this.rgba=e.hexToRgb(t)}}],[{key:"hexToRgb",value:function(e){var t=(e.startsWith("#")?e.slice(1):e).replace(/^(\w{3})$/,"$1F").replace(/^(\w)(\w)(\w)(\w)$/,"$1$1$2$2$3$3$4$4").replace(/^(\w{6})$/,"$1FF");if(!t.match(/^([0-9a-fA-F]{8})$/))throw new Error("Unknown hex color; "+e);var i=t.match(/^(\w\w)(\w\w)(\w\w)(\w\w)$/).slice(1).map((function(e){return parseInt(e,16)}));return i[3]=i[3]/255,i}},{key:"nameToRgb",value:function(t){var i=t.toLowerCase().replace("at","T").replace(/[aeiouyldf]/g,"").replace("ght","L").replace("rk","D").slice(-5,4),n=dm[i];return void 0===n?n:e.hexToRgb(n.replace(/\-/g,"00").padStart(6,"f"))}},{key:"rgbToHsl",value:function(e){var t=hm(e,4),i=t[0],n=t[1],r=t[2],s=t[3];i/=255,n/=255,r/=255;var o=Math.max(i,n,r),a=Math.min(i,n,r),c=void 0,l=void 0,h=(o+a)/2;if(o===a)c=l=0;else{var d=o-a;switch(l=h>.5?d/(2-o-a):d/(o+a),o){case i:c=(n-r)/d+(n<r?6:0);break;case n:c=(r-i)/d+2;break;case r:c=(i-n)/d+4}c/=6}return[c,l,h,s]}},{key:"hslToRgb",value:function(e){var t=hm(e,4),i=t[0],n=t[1],r=t[2],s=t[3],o=void 0,a=void 0,c=void 0;if(0===n)o=a=c=r;else{var l=function(e,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e},h=r<.5?r*(1+n):r+n-r*n,d=2*r-h;o=l(d,h,i+1/3),a=l(d,h,i),c=l(d,h,i-1/3)}var u=[255*o,255*a,255*c].map(Math.round);return u[3]=s,u}}]),e}(),pm=function(){function e(){cm(this,e),this._events=[]}return lm(e,[{key:"add",value:function(e,t,i){e.addEventListener(t,i,!1),this._events.push({target:e,type:t,handler:i})}},{key:"remove",value:function(t,i,n){this._events=this._events.filter((function(r){var s=!0;return t&&t!==r.target&&(s=!1),i&&i!==r.type&&(s=!1),n&&n!==r.handler&&(s=!1),s&&e._doRemove(r.target,r.type,r.handler),!s}))}},{key:"destroy",value:function(){this._events.forEach((function(t){return e._doRemove(t.target,t.type,t.handler)})),this._events=[]}}],[{key:"_doRemove",value:function(e,t,i){e.removeEventListener(t,i,!1)}}]),e}();function gm(e,t,i){var n=!1;function r(e,t,i){return Math.max(t,Math.min(e,i))}function s(e,s,o){if(o&&(n=!0),n){e.preventDefault();var a=t.getBoundingClientRect(),c=a.width,l=a.height,h=s.clientX,d=s.clientY,u=r(h-a.left,0,c),f=r(d-a.top,0,l);i(u/c,f/l)}}function o(e,t){1===(void 0===e.buttons?e.which:e.buttons)?s(e,e,t):n=!1}function a(e,t){1===e.touches.length?s(e,e.touches[0],t):n=!1}e.add(t,"mousedown",(function(e){o(e,!0)})),e.add(t,"touchstart",(function(e){a(e,!0)})),e.add(window,"mousemove",o),e.add(t,"touchmove",a),e.add(window,"mouseup",(function(e){n=!1})),e.add(t,"touchend",(function(e){n=!1})),e.add(t,"touchcancel",(function(e){n=!1}))}var mm="keydown",wm="mousedown",bm="focusin";function Fm(e,t){return(t||document).querySelector(e)}function vm(e){e.preventDefault(),e.stopPropagation()}function ym(e,t,i,n,r){e.add(t,mm,(function(e){i.indexOf(e.key)>=0&&(r&&vm(e),n(e))}))}var Am=function(){function e(t){cm(this,e),this.settings={popup:"right",layout:"default",alpha:!0,editor:!0,editorFormat:"hex",cancelButton:!1,defaultColor:"#0cf"},this._events=new pm,this.onChange=null,this.onDone=null,this.onOpen=null,this.onClose=null,this.setOptions(t)}return lm(e,[{key:"setOptions",value:function(e){var t=this;if(e){var i=this.settings;if(e instanceof HTMLElement)i.parent=e;else{i.parent&&e.parent&&i.parent!==e.parent&&(this._events.remove(i.parent),this._popupInited=!1),function(e,t,i){for(var n in e)i&&i.indexOf(n)>=0||(t[n]=e[n])}(e,i),e.onChange&&(this.onChange=e.onChange),e.onDone&&(this.onDone=e.onDone),e.onOpen&&(this.onOpen=e.onOpen),e.onClose&&(this.onClose=e.onClose);var n=e.color||e.colour;n&&this._setColor(n)}var r=i.parent;if(r&&i.popup&&!this._popupInited){var s=function(e){return t.openHandler(e)};this._events.add(r,"click",s),ym(this._events,r,[" ","Spacebar","Enter"],s),this._popupInited=!0}else e.parent&&!i.popup&&this.show()}}},{key:"openHandler",value:function(e){if(this.show()){e&&e.preventDefault(),this.settings.parent.style.pointerEvents="none";var t=e&&e.type===mm?this._domEdit:this.domElement;setTimeout((function(){return t.focus()}),100),this.onOpen&&this.onOpen(this.colour)}}},{key:"closeHandler",value:function(e){var t=e&&e.type,i=!1;if(e)if(t===wm||t===bm){var n=(this.__containedEvent||0)+100;e.timeStamp>n&&(i=!0)}else vm(e),i=!0;else i=!0;i&&this.hide()&&(this.settings.parent.style.pointerEvents="",t!==wm&&this.settings.parent.focus(),this.onClose&&this.onClose(this.colour))}},{key:"movePopup",value:function(e,t){this.closeHandler(),this.setOptions(e),t&&this.openHandler()}},{key:"setColor",value:function(e,t){this._setColor(e,{silent:t})}},{key:"_setColor",value:function(e,t){if("string"==typeof e&&(e=e.trim()),e){t=t||{};var i=void 0;try{i=new fm(e)}catch(e){if(t.failSilently)return;throw e}if(!this.settings.alpha){var n=i.hsla;n[3]=1,i.hsla=n}this.colour=this.color=i,this._setHSLA(null,null,null,null,t)}}},{key:"setColour",value:function(e,t){this.setColor(e,t)}},{key:"show",value:function(){if(!this.settings.parent)return!1;if(this.domElement){var e=this._toggleDOM(!0);return this._setPosition(),e}var t=function(e){var t=document.createElement("div");return t.innerHTML=e,t.firstElementChild}(this.settings.template||'<div class="picker_wrapper" tabindex="-1"><div class="picker_arrow"></div><div class="picker_hue picker_slider"><div class="picker_selector"></div></div><div class="picker_sl"><div class="picker_selector"></div></div><div class="picker_alpha picker_slider"><div class="picker_selector"></div></div><div class="picker_editor"><input aria-label="Type a color name or hex value"/></div><div class="picker_sample"></div><div class="picker_done"><button>Ok</button></div><div class="picker_cancel"><button>Cancel</button></div></div>');return this.domElement=t,this._domH=Fm(".picker_hue",t),this._domSL=Fm(".picker_sl",t),this._domA=Fm(".picker_alpha",t),this._domEdit=Fm(".picker_editor input",t),this._domSample=Fm(".picker_sample",t),this._domOkay=Fm(".picker_done button",t),this._domCancel=Fm(".picker_cancel button",t),t.classList.add("layout_"+this.settings.layout),this.settings.alpha||t.classList.add("no_alpha"),this.settings.editor||t.classList.add("no_editor"),this.settings.cancelButton||t.classList.add("no_cancel"),this._ifPopup((function(){return t.classList.add("popup")})),this._setPosition(),this.colour?this._updateUI():this._setColor(this.settings.defaultColor),this._bindEvents(),!0}},{key:"hide",value:function(){return this._toggleDOM(!1)}},{key:"destroy",value:function(){this._events.destroy(),this.domElement&&this.settings.parent.removeChild(this.domElement)}},{key:"_bindEvents",value:function(){var e=this,t=this,i=this.domElement,n=this._events;function r(e,t,i){n.add(e,t,i)}r(i,"click",(function(e){return e.preventDefault()})),gm(n,this._domH,(function(e,i){return t._setHSLA(e)})),gm(n,this._domSL,(function(e,i){return t._setHSLA(null,e,1-i)})),this.settings.alpha&&gm(n,this._domA,(function(e,i){return t._setHSLA(null,null,null,1-i)}));var s=this._domEdit;r(s,"input",(function(e){t._setColor(this.value,{fromEditor:!0,failSilently:!0})})),r(s,"focus",(function(e){var t=this;t.selectionStart===t.selectionEnd&&t.select()})),this._ifPopup((function(){var t=function(t){return e.closeHandler(t)};r(window,wm,t),r(window,bm,t),ym(n,i,["Esc","Escape"],t);var s=function(t){e.__containedEvent=t.timeStamp};r(i,wm,s),r(i,bm,s),r(e._domCancel,"click",t)}));var o=function(t){e._ifPopup((function(){return e.closeHandler(t)})),e.onDone&&e.onDone(e.colour)};r(this._domOkay,"click",o),ym(n,i,["Enter"],o)}},{key:"_setPosition",value:function(){var e=this.settings.parent,t=this.domElement;e!==t.parentNode&&e.appendChild(t),this._ifPopup((function(i){"static"===getComputedStyle(e).position&&(e.style.position="relative");var n=!0===i?"popup_right":"popup_"+i;["popup_top","popup_bottom","popup_left","popup_right"].forEach((function(e){e===n?t.classList.add(e):t.classList.remove(e)})),t.classList.add(n)}))}},{key:"_setHSLA",value:function(e,t,i,n,r){r=r||{};var s=this.colour,o=s.hsla;[e,t,i,n].forEach((function(e,t){(e||0===e)&&(o[t]=e)})),s.hsla=o,this._updateUI(r),this.onChange&&!r.silent&&this.onChange(s)}},{key:"_updateUI",value:function(e){if(this.domElement){e=e||{};var t=this.colour,i=t.hsla,n="hsl("+360*i[0]+", 100%, 50%)",r=t.hslString,s=t.hslaString,o=this._domH,a=this._domSL,c=this._domA,l=Fm(".picker_selector",o),h=Fm(".picker_selector",a),d=Fm(".picker_selector",c);b(0,l,i[0]),this._domSL.style.backgroundColor=this._domH.style.color=n,b(0,h,i[1]),F(0,h,1-i[2]),a.style.color=r,F(0,d,1-i[3]);var u=r,f=u.replace("hsl","hsla").replace(")",", 0)"),p="linear-gradient("+[u,f]+")";if(this._domA.style.background=p+", linear-gradient(45deg, lightgrey 25%, transparent 25%, transparent 75%, lightgrey 75%) 0 0 / 2em 2em,\n                   linear-gradient(45deg, lightgrey 25%,       white 25%,       white 75%, lightgrey 75%) 1em 1em / 2em 2em",!e.fromEditor){var g=this.settings.editorFormat,m=this.settings.alpha,w=void 0;switch(g){case"rgb":w=t.printRGB(m);break;case"hsl":w=t.printHSL(m);break;default:w=t.printHex(m)}this._domEdit.value=w}this._domSample.style.color=s}function b(e,t,i){t.style.left=100*i+"%"}function F(e,t,i){t.style.top=100*i+"%"}}},{key:"_ifPopup",value:function(e,t){this.settings.parent&&this.settings.popup?e&&e(this.settings.popup):t&&t()}},{key:"_toggleDOM",value:function(e){var t=this.domElement;if(!t)return!1;var i=e?"":"none",n=t.style.display!==i;return n&&(t.style.display=i),n}}]),e}(),Cm=document.createElement("style");function _m(e){if(xm[e])return xm[e];if(xm["chr"+e]){const t=xm["chr"+e];return xm[e]=t,t}{const r=(t=Math.round(255*Math.random()).toString(10),i=Math.round(255*Math.random()).toString(10),n=Math.round(255*Math.random()).toString(10),"rgb("+t+","+i+","+n+")");return xm[e]=r,r}var t,i,n}Cm.textContent='.picker_wrapper.no_alpha .picker_alpha{display:none}.picker_wrapper.no_editor .picker_editor{position:absolute;z-index:-1;opacity:0}.picker_wrapper.no_cancel .picker_cancel{display:none}.layout_default.picker_wrapper{display:flex;flex-flow:row wrap;justify-content:space-between;align-items:stretch;font-size:10px;width:25em;padding:.5em}.layout_default.picker_wrapper input,.layout_default.picker_wrapper button{font-size:1rem}.layout_default.picker_wrapper>*{margin:.5em}.layout_default.picker_wrapper::before{content:"";display:block;width:100%;height:0;order:1}.layout_default .picker_slider,.layout_default .picker_selector{padding:1em}.layout_default .picker_hue{width:100%}.layout_default .picker_sl{flex:1 1 auto}.layout_default .picker_sl::before{content:"";display:block;padding-bottom:100%}.layout_default .picker_editor{order:1;width:6.5rem}.layout_default .picker_editor input{width:100%;height:100%}.layout_default .picker_sample{order:1;flex:1 1 auto}.layout_default .picker_done,.layout_default .picker_cancel{order:1}.picker_wrapper{box-sizing:border-box;background:#f2f2f2;box-shadow:0 0 0 1px silver;cursor:default;font-family:sans-serif;color:#444;pointer-events:auto}.picker_wrapper:focus{outline:none}.picker_wrapper button,.picker_wrapper input{box-sizing:border-box;border:none;box-shadow:0 0 0 1px silver;outline:none}.picker_wrapper button:focus,.picker_wrapper button:active,.picker_wrapper input:focus,.picker_wrapper input:active{box-shadow:0 0 2px 1px #1e90ff}.picker_wrapper button{padding:.4em .6em;cursor:pointer;background-color:#f5f5f5;background-image:linear-gradient(0deg, gainsboro, transparent)}.picker_wrapper button:active{background-image:linear-gradient(0deg, transparent, gainsboro)}.picker_wrapper button:hover{background-color:#fff}.picker_selector{position:absolute;z-index:1;display:block;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);border:2px solid #fff;border-radius:100%;box-shadow:0 0 3px 1px #67b9ff;background:currentColor;cursor:pointer}.picker_slider .picker_selector{border-radius:2px}.picker_hue{position:relative;background-image:linear-gradient(90deg, red, yellow, lime, cyan, blue, magenta, red);box-shadow:0 0 0 1px silver}.picker_sl{position:relative;box-shadow:0 0 0 1px silver;background-image:linear-gradient(180deg, white, rgba(255, 255, 255, 0) 50%),linear-gradient(0deg, black, rgba(0, 0, 0, 0) 50%),linear-gradient(90deg, #808080, rgba(128, 128, 128, 0))}.picker_alpha,.picker_sample{position:relative;background:linear-gradient(45deg, lightgrey 25%, transparent 25%, transparent 75%, lightgrey 75%) 0 0/2em 2em,linear-gradient(45deg, lightgrey 25%, white 25%, white 75%, lightgrey 75%) 1em 1em/2em 2em;box-shadow:0 0 0 1px silver}.picker_alpha .picker_selector,.picker_sample .picker_selector{background:none}.picker_editor input{font-family:monospace;padding:.2em .4em}.picker_sample::before{content:"";position:absolute;display:block;width:100%;height:100%;background:currentColor}.picker_arrow{position:absolute;z-index:-1}.picker_wrapper.popup{position:absolute;z-index:2;margin:1.5em}.picker_wrapper.popup,.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{background:#f2f2f2;box-shadow:0 0 10px 1px rgba(0,0,0,.4)}.picker_wrapper.popup .picker_arrow{width:3em;height:3em;margin:0}.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{content:"";display:block;position:absolute;top:0;left:0;z-index:-99}.picker_wrapper.popup .picker_arrow::before{width:100%;height:100%;-webkit-transform:skew(45deg);transform:skew(45deg);-webkit-transform-origin:0 100%;transform-origin:0 100%}.picker_wrapper.popup .picker_arrow::after{width:150%;height:150%;box-shadow:none}.popup.popup_top{bottom:100%;left:0}.popup.popup_top .picker_arrow{bottom:0;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.popup.popup_bottom{top:100%;left:0}.popup.popup_bottom .picker_arrow{top:0;left:0;-webkit-transform:rotate(90deg) scale(1, -1);transform:rotate(90deg) scale(1, -1)}.popup.popup_left{top:0;right:100%}.popup.popup_left .picker_arrow{top:0;right:0;-webkit-transform:scale(-1, 1);transform:scale(-1, 1)}.popup.popup_right{top:0;left:100%}.popup.popup_right .picker_arrow{top:0;left:0}',document.documentElement.firstElementChild.appendChild(Cm),Am.StyleElement=Cm;const xm={chrX:"rgb(204, 153, 0)",chrY:"rgb(153, 204, 0",chrUn:"rgb(50, 50, 50)",chr1:"rgb(80, 80, 255)",chrI:"rgb(139, 155, 187)",chr2:"rgb(206, 61, 50)",chrII:"rgb(206, 61, 50)",chr2a:"rgb(216, 71, 60)",chr2b:"rgb(226, 81, 70)",chr3:"rgb(116, 155, 88)",chrIII:"rgb(116, 155, 88)",chr4:"rgb(240, 230, 133)",chrIV:"rgb(240, 230, 133)",chr5:"rgb(70, 105, 131)",chr6:"rgb(186, 99, 56)",chr7:"rgb(93, 177, 221)",chr8:"rgb(128, 34, 104)",chr9:"rgb(107, 215, 107)",chr10:"rgb(213, 149, 167)",chr11:"rgb(146, 72, 34)",chr12:"rgb(131, 123, 141)",chr13:"rgb(199, 81, 39)",chr14:"rgb(213, 143, 92)",chr15:"rgb(122, 101, 165)",chr16:"rgb(228, 175, 105)",chr17:"rgb(59, 27, 83)",chr18:"rgb(205, 222, 183)",chr19:"rgb(97, 42, 121)",chr20:"rgb(174, 31, 99)",chr21:"rgb(231, 199, 111)",chr22:"rgb(90, 101, 94)",chr23:"rgb(204, 153, 0)",chr24:"rgb(153, 204, 0)",chr25:"rgb(51, 204, 0)",chr26:"rgb(0, 204, 51)",chr27:"rgb(0, 204, 153)",chr28:"rgb(0, 153, 204)",chr29:"rgb(10, 71, 255)",chr30:"rgb(71, 117, 255)",chr31:"rgb(255, 194, 10)",chr32:"rgb(255, 209, 71)",chr33:"rgb(153, 0, 51)",chr34:"rgb(153, 26, 0)",chr35:"rgb(153, 102, 0)",chr36:"rgb(128, 153, 0)",chr37:"rgb(51, 153, 0)",chr38:"rgb(0, 153, 26)",chr39:"rgb(0, 153, 102)",chr40:"rgb(0, 128, 153)",chr41:"rgb(0, 51, 153)",chr42:"rgb(26, 0, 153)",chr43:"rgb(102, 0, 153)",chr44:"rgb(153, 0, 128)",chr45:"rgb(214, 0, 71)",chr46:"rgb(255, 20, 99)",chr47:"rgb(0, 214, 143)",chr48:"rgb(20, 255, 177)"};class km{constructor(e){this.tracks=[],this.chordSets=[]}addChordSet(e){this.chordSets=this.chordSets.filter((t=>t.name!==e.name)),this.chordSets.push(e);let t=this.tracks.find((t=>e.trackName===t.name));t&&(t.chordSets=t.chordSets.filter((t=>t.name!==e.name)),t.chordSets.push(e)),t||(t=new Im(e),this.tracks.push(t))}clearChords(){this.tracks=[],this.chordSets=[]}getTrack(e){return this.tracks.find((t=>e===t.name))}getChordSet(e){return this.chordSets.find((t=>e===t.name))}}class Im{constructor(e){this.name=e.trackName,this.color=e.trackColor,this.visible=!0,this.chordSets=[e],this.id=("0000"+(Math.random()*Math.pow(36,4)|0).toString(36)).slice(-4)}get chords(){if(1===this.chordSets.length)return this.chordSets[0].chords;const e=[];for(let t of this.chordSets)for(let i of t.chords)e.push(i);return e}}const Sm=Math.exp(5);class Em{static isInstalled(){return void 0!==window.JBrowseReactCircularGenomeView&&void 0!==window.React&&void 0!==window.ReactDOM}constructor(e,t){if(t=t||{},this.config=t,Em.isInstalled()){this.parent=e,this.groupByTrack=!0===t.groupByTrack,this.chordManager=new km(t);const i=document.createElement("div");i.className="igv-circview-container",e.appendChild(i),this.createControls(i),this.resetControlPanel();const n=document.createElement("div");n.className="igv-circview-circular-genome-view",i.appendChild(n),this.container=n,t.assembly&&this.setAssembly(t.assembly),this.width=t.width||500,this.height=t.height||500,this.setSize(this.width,this.height)}else console.error("JBrowse circular view is not installed")}createControls(e){const t=document.createElement("div");t.className="igv-circview-toolbar",e.appendChild(t),this.toolbar=t;const i=document.createElement("div");i.className="igv-circview-track-panel",e.appendChild(i),this.controlPanel=i,this.controlPanel.style.display="none";const n=document.createElement("div");n.className="igv-circview-toolbar-button-container",this.toolbar.appendChild(n),this.showControlsButton=document.createElement("div"),this.showControlsButton.className="igv-circview-button",n.appendChild(this.showControlsButton),this.showControlsButton.innerText="none"===this.controlPanel.style.display?"Show Controls":"Hide Controls",this.showControlsButton.addEventListener("click",(e=>{this.controlPanel.querySelectorAll("div").length>0&&("none"===this.controlPanel.style.display?(this.controlPanel.style.display="flex",e.target.innerText="Hide Controls"):(this.controlPanel.style.display="none",e.target.innerText="Show Controls"))}));let r=document.createElement("div");r.className="igv-circview-button",n.appendChild(r),r.innerText="Clear All",r.addEventListener("click",(()=>{this.clearChords()})),!1!==this.config.showCloseButton&&(r=document.createElement("div"),r.className="igv-circview-button",n.appendChild(r),r.innerText="Close",r.addEventListener("click",(()=>{this.visible=!1})))}resetControlPanel(){this.controlPanel.innerHTML="",this.controlPanel.appendChild(this.createGroupByCB());const e=this.groupByTrack?this.chordManager.tracks:this.chordManager.chordSets;for(let t of e)this.addToControlPanel(t)}createGroupByCB(){const e=document.createElement("input");e.type="checkbox",e.id="groupByCB",e.style.width="1.4em",e.style.height="1.4em",e.checked=this.groupByTrack,e.onclick=e=>{this.groupByTrack=e.target.checked,this.resetControlPanel(),this.render()};const t=document.createElement("label");t.for="groupByCB",t.innerText="Group by track",t.style.color="black",t.style.paddingLeft="10px";const i=document.createElement("div");return i.style.width="100%",i.style.paddingTop="5px",i.style.paddingBottom="5px",i.style.background="rgb(216, 230, 234)",i.appendChild(e),i.appendChild(t),i}addToControlPanel(e){const t=document.createElement("div");this.controlPanel.appendChild(t);const i=document.createElement("div");i.className="igv-circview-button",t.appendChild(i),i.innerText=!0===e.visible?"Hide":"Show",i.addEventListener("click",(t=>{!0===e.visible?(this.hideChordSet(e.name),t.target.innerText="Show"):(this.showChordSet(e.name),t.target.innerText="Hide")}));const n=document.createElement("input"),r=e=>200*Math.log(e*Sm),s=document.createElement("div");s.className="igv-circview-button",s.innerHTML="&nbsp;&nbsp;&nbsp;&nbsp;",t.appendChild(s),s.style.backgroundColor=Nm(e.color,1);const o={parent:s,popup:"right",editorFormat:"rgb",color:e.color,onChange:({rgbaString:t})=>{s.style.backgroundColor=Nm(t,1),this.setColor(e.name,t),n.value=r(Bm(e.color))}},a=new Am(o);n.setAttribute("title","Adjust transparency of arcs"),n.type="range",n.style.width="100px",n.style.marginRight="10px",n.setAttribute("class","range"),n.setAttribute("min","0"),n.setAttribute("max","1000"),n.value=r(Bm(e.color)),n.oninput=()=>{const t=(i=n.value,Math.exp(i/200)/Sm);var i;this.setColor(e.name,Nm(e.color,t)),a.setColor(e.color)},t.appendChild(n);const c=document.createElement("div");c.style.color="black",t.appendChild(c),c.innerText=c.title=e.name}setAssembly(e){const t=this.genomeId||Dm();if(this.genomeId===t)return;this.chordManager.clearChords(),this.genomeId=t,this.chrNames=new Set(e.chromosomes.map((e=>Mm(e.name))));const i=[],n=[];for(let t of e.chromosomes){const e=Mm(t.name);n.push(t.color||_m(e)),i.push({refName:e,uniqueId:e,start:0,end:t.bpLength})}this.assembly={name:e.name,sequence:{trackId:t,type:"ReferenceSequenceTrack",adapter:{type:"FromConfigSequenceAdapter",features:i}},refNameColors:n},this.render()}addChords(e,t={}){const i=t.name||t.track||"*",n=i.split(" ")[0].replaceAll("%20"," "),r={name:i.replaceAll("%20"," "),trackName:n,chords:e,color:t.color||"black",trackColor:t.trackColor||t.color||"black",visible:!0,id:t.id||Dm()};this.chordManager.addChordSet(r),this.resetControlPanel(),this.render()}setSize(e,t){if(t=t||e,this.width=e,this.height=t,this.viewState){const i=this.viewState.session.view;i.setWidth(e),i.setHeight(t),i.setBpPerPx(i.minBpPerPx)}}getSize(){return Math.min(this.width,this.height)}clearChords(){this.chordManager.clearChords(),this.resetControlPanel(),this.render()}clearSelection(){this.viewState.pluginManager.rootModel.session.clearSelection()}show(){this.parent.style.display="block"}hide(){this.parent.style.display="none"}get visible(){return"none"!==this.parent.style.display}set visible(e){this.parent.style.display=e?"block":"none"}hideChordSet(e){let t=this.getChordSet(e);t?(t.visible=!1,this.render()):console.warn(`No track with name: ${name}`)}showChordSet(e){let t=this.getChordSet(e);t?(t.visible=!0,this.render()):console.warn(`No track with name: ${e}`)}deleteTrack(e){let t=this.tracks.findIndex((t=>e===t.name));t>=0&&this.tracks.splice(t,1),this.render()}getChordSet(e){return this.groupByTrack?this.chordManager.getTrack(e):this.chordManager.getChordSet(e)}setColor(e,t){const i=this.getChordSet(e);if(i){i.color=t;const e=i.id;for(let i of this.viewState.config.tracks)if(e===i.trackId){i.displays[0].renderer.strokeColor.set(t);break}}}render(){const{createViewState:e,JBrowseCircularGenomeView:t}=JBrowseReactCircularGenomeView;ReactDOM.unmountComponentAtNode(this.container);const i=(this.groupByTrack?this.chordManager.tracks:this.chordManager.chordSets).filter((e=>e.visible)),n=[],r=[];for(let e of i)n.push({trackId:e.id,name:e.name,assemblyNames:["forIGV"],type:"VariantTrack",adapter:{type:"FromConfigAdapter",features:e.chords}}),r.push(e.color);this.viewState=e({assembly:this.assembly,tracks:n});for(let e=0;e<i.length;e++)this.viewState.config.tracks[e].displays[0].renderer.strokeColor.set(r[e]);this.element=React.createElement(t,{viewState:this.viewState}),this.setSize(this.width,this.height),ReactDOM.render(this.element,this.container);const s=this.config.onChordClick||Rm;for(let e=0;e<i.length;e++)this.viewState.session.view.showTrack(this.viewState.config.tracks[e].trackId),s&&(this.viewState.pluginManager.jexl.addFunction("onChordClick",s),this.viewState.config.tracks[e].displays[0].onChordClick.set("jexl:onChordClick(feature, track, pluginManager)"))}}function Nm(e,t){const[i,n,r,s]=e.split(",");return`${i},${n},${r},${t})`}function Bm(e){return e.startsWith("rgba(")?Number(e.split(",")[3].replace(")","")):1}function Mm(e){return e.startsWith("chr")?e.substring(3):e}function Rm(e,t,i){console.log(e)}function Dm(){return("0000"+(Math.random()*Math.pow(36,4)|0).toString(36)).slice(-4)}if("undefined"!=typeof document){function SA(e){for(let t of document.styleSheets)if(t=t.href?t.href.replace(/^.*[\\\/]/,""):"",t===e)return!0;return!1}SA("circular-view.css")||function(){const e=document.createElement("style");e.setAttribute("type","text/css"),e.innerHTML='.igv-circview-container {\n  width: fit-content;\n  height: fit-content;\n  box-sizing: content-box;\n  color: dimgray;\n  font-family: "Open Sans", sans-serif;\n  font-size: 12px;\n  background-color: white;\n  border-color: dimgray;\n  border-style: solid;\n  border-width: thin;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n}\n\n.igv-circview-toolbar {\n  position: relative;\n  width: 100%;\n  height: 32px;\n  background-color: lightgrey;\n  border-bottom-style: solid;\n  border-bottom-color: dimgray;\n  border-bottom-width: thin;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.igv-circview-toolbar-button-container {\n  height: 100%;\n  width: fit-content;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-circview-toolbar-button-container > div {\n  margin: 4px;\n}\n\n.igv-circview-track-panel {\n  z-index: 1024;\n  position: absolute;\n  top: 33px;\n  left: 0;\n  width: 100%;\n  height: fit-content;\n  border-bottom-style: solid;\n  border-bottom-color: dimgray;\n  border-bottom-width: thin;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n}\n.igv-circview-track-panel > div {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-circview-track-panel > div > div {\n  margin: 4px;\n}\n\n.igv-circview-swatch-button {\n  cursor: pointer;\n  padding: 5px;\n  width: 8px;\n  height: 8px;\n  border: 1px solid #8d8b8b;\n  border-radius: 16px;\n}\n\n.igv-circview-button {\n  cursor: pointer;\n  padding: 5px;\n  color: #444;\n  vertical-align: middle;\n  text-align: center;\n  font-family: "Open Sans", sans-serif;\n  font-size: 12px;\n  border: 1px solid #8d8b8b;\n  border-radius: 4px;\n  background: #efefef;\n  box-shadow: 0 0 5px -1px rgba(0, 0, 0, 0.2);\n}\n\n.igv-circview-button:hover {\n  background: #efefef;\n  box-shadow: 0 0 5px -1px rgba(0, 0, 0, 0.6);\n}\n\n.igv-circview-button:active {\n  color: #007bff;\n  box-shadow: 0 0 5px -1px rgba(0, 0, 0, 0.6);\n}\n\n/*# sourceMappingURL=circular-view.css.map */\n',document.head.insertBefore(e,document.head.childNodes[document.head.childNodes.length-1])}()}const Tm=e=>e.startsWith("chr")?e.substring(3):e;function Lm(e){const t=[],i=[];if(e.wgChromosomeNames)for(let n of e.wgChromosomeNames){const r=e.getChromosome(n);i.push(_u(r.name)),t.push({name:r.name,bpLength:r.bpLength})}return t}function zm(e,t,i,n){const r=t.color||"rgb(0,0,255)",s=_s.addAlpha("all"===i.chr?r:_u(i.chr),n),o=_s.addAlpha(r,n),a=t.name.replaceAll(" ","%20"),c="all"===i.chr?a:`${a}  ${i.chr}:${i.start}-${i.end}`;t.browser.circularView.addChords(e,{track:c,color:s,trackColor:o}),t.browser.circularViewVisible||(t.browser.circularViewVisible=!0)}class Hm{constructor(e,{minTLENPercentile:t,maxTLENPercentile:i}){this.totalCount=0,this.frCount=0,this.rfCount=0,this.ffCount=0,this.sumF=0,this.sumF2=0,this.lp=void 0===t?.1:t,this.up=void 0===i?99.5:i,this.isizes=[],this.compute(e)}compute(e){for(let n of e)if(n.isProperPair()){var t=Math.abs(n.fragmentLength);this.sumF+=t,this.sumF2+=t*t,this.isizes.push(t);var i=n.pairOrientation;if("string"==typeof i&&4===i.length)switch(""+i.charAt(0)+i.charAt(2)){case"FF":case"RR":this.ffCount++;break;case"FR":this.frCount++;break;case"RF":this.rfCount++}this.totalCount++}this.ffCount/this.totalCount>.9?this.orienation="ff":this.frCount/this.totalCount>.9?this.orienation="fr":this.rfCount/this.totalCount>.9&&(this.orienation="rf"),this.minTLEN=0===this.lp?0:Pm(this.isizes,this.lp),this.maxTLEN=Pm(this.isizes,this.up)}}function Pm(e,t){if(0!==e.length){var i=Math.floor(e.length*(t/100));return e.sort((function(e,t){return e-t})),e[i]}}const Om="rgb(255,0,255)",Um="rgb(0,0,255)",qm="rgb(132, 178, 158)",Qm=new Map;Qm.set("m","rgb(255,0,0)"),Qm.set("h",Om),Qm.set("o","rgb(111, 78, 129)"),Qm.set("f","rgb(246, 200, 95)"),Qm.set("c","rgb(157, 216, 102)"),Qm.set("g","rgb(255, 160, 86)"),Qm.set("e","rgb(141, 221, 208)"),Qm.set("b","rgb(202, 71, 47)"),Qm.set("h",Om),Qm.set("a","rgb(51,0,111)"),Qm.set("NONE_A",Um),Qm.set("NONE_C",Um),Qm.set("NONE_T",Um),Qm.set("NONE_G",Um),Qm.set("NONE_N",Um);const Vm=new Map;function jm(e,t,i){let n=function(e){return Qm.has(e)?Qm.get(e):qm}(e),r=Yf(t);if(r>255)return n;const s=e+r+i;if(r<0&&(r=0),!Vm.has(s)){const e="basemod2"===i?Math.max(20,Math.min(255,r*r/50-4*r+200+20)):Math.max(20,Math.min(255,.006127*r*r)),[t,o,a]=_s.rgbComponents(n);Vm.set(s,`rgba(${t},${o},${a},${e/255})`)}return Vm.get(s)}class Wm{constructor(e){this.alignmentTrack=e}updateContext(e){this.context=e}drawModifications(e,t,i,n,r,s){const{ctx:o,pixelEnd:a,bpStart:c,bpPerPixel:l}=n,h=e.getBaseModificationSets();if(h){let n;const d=r.split(":");2==d.length&&(r=d[0],n=d[1]);for(let d of e.blocks){if("S"===d.type)continue;const e=t,u=i;let f=Math.max(1,1/l);for(let t=d.seqOffset;t<d.seqOffset+d.len;t++){let i=(d.start+(t-d.seqOffset)-c)/l;if(i>a)break;if(i+f<0)continue;let p,g=-1,m=255,w=0;for(let e of h)if((!n||e.modification===n)&&e.containsPosition(t)){const i=Yf(e.likelihoods.get(t));m-=i,(!p||i>g)&&(p=e.modification,w=e.canonicalBase,g=i)}if(p){const t=255*s;let n;m>g&&"basemod2"===r&&m>=t?n=jm("NONE_"+w,m,r):g>=t&&(n=jm(p,g,r)),o.fillStyle=n,f<3&&(f=3,i--),o.fillRect(i,e,f,Math.max(1,u-2))}}}}}}const Gm=new Set(["firstOfPairStrand"]);class $m extends Hl{static defaults={viewAsPairs:!1,showSoftClips:!1,showAllBases:!1,showInsertions:!0,showMismatches:!0,colorBy:void 0,groupBy:void 0,displayMode:"EXPANDED",alignmentRowHeight:14,squishedRowHeight:3,negStrandColor:"rgba(150, 150, 230, 0.75)",posStrandColor:"rgba(230, 150, 150, 0.75)",baseModPosStrandColor:"rgb(195, 195, 195)",baseModNegStrandColor:"rgb(195, 210, 195)",insertionColor:"rgb(138, 94, 161)",insertionTextColor:"white",showInsertionText:!1,deletionColor:"black",deletionTextColor:"black",showDeletionText:!1,skippedColor:"rgb(150, 170, 170)",pairConnectorColor:void 0,smallTLENColor:"rgb(0, 0, 150)",largeTLENColor:"rgb(200, 0, 0)",expectedPairOrientation:"fr",rlColor:"rgb(0, 150, 0)",rrColor:"rgb(20, 50, 200)",llColor:"rgb(0, 150, 150)",bamColorTag:"YC",hideSmallIndels:!1,indelSizeThreshold:1,highlightColor:void 0,minTLEN:void 0,maxTLEN:void 0,tagColorPallete:"Set1"};_colorTables=new Map;_baseModifications=new Set;constructor(e,t){super(e,t),(e.colorTable||e.tagColorTable)&&(this.colorTable=new ao(e.tagColorTable)),e.largeFragmentLengthColor&&(this.largeTLENColor=e.largeFragmentLengthColor),e.pairOrienation&&(this.expectedPairOrientation=e.pairOrientation),e.smallFragmentLengthColor&&(this.smallTLENColor=e.smallFragmentLengthColor),e.largeFragmentLengthColor&&(this.largeTLENColor=e.largeFragmentLengthColor),e.minFragmentLength&&(this.minTLEN=e.minFragmentLength),e.maxFragmentLength&&(this.maxTLEN=e.maxFragmentLength),e.displayMode&&(this.displayMode=e.displayMode.toUpperCase()),e.colorBy&&e.colorByTag&&(this.colorBy=e.colorBy+":"+e.colorByTag),this.featureSource=this.parent.featureSource,this.top=0===e.coverageTrackHeight?0:e.coverageTrackHeight+5,this.pairColors={RL:this.rlColor,RR:this.rrColor,LL:this.llColor},e.highlightedReads&&this.setHighlightedReads(e.highlightedReads),this.hasPairs=!1,this.hasSupplemental=!1,this._groupByTags=[],this._groupByPositions=[],e.groupBy&&(this.groupBy=e.groupBy,e.groupBy.startsWith("base:")&&this._groupByPositions.push(e.groupBy.substring(5)),e.groupBy.startsWith("tag:")&&this._groupByTags.push(e.groupBy.substring(4))),this._locusChange=Ym.bind(this),this.browser.on("locuschange",this._locusChange)}init(e){this.parent=e.parent,delete e.parent,super.init(e)}dispose(){this.browser.off("locuschage",this._locusChange)}get baseModRenderer(){return this._baseModRenderer||(this._baseModRenderer=new Wm(this)),this._baseModRenderer}get baseModificationThreshold(){return this.parent.baseModificationThreshold}setTop(e,t){this.top=0===e.height||!1===t?0:5+e.height}setHighlightedReads(e,t){if(!Array.isArray(e)||!e.every((e=>"string"==typeof e)))throw new Error("AlignmentTrack.setHighlightedReads() only accept array of strings");t&&(this.highlightColor=t),this.highlightedReads=new Set(e)}computePixelHeight(e){if(e.packedGroups){let t=e.hasDownsampledIntervals()?15:0;const i="SQUISHED"===this.displayMode?this.squishedRowHeight:this.alignmentRowHeight;for(let n of e.packedGroups.values())t+=i*n.length+10;return t+5}return 0}draw(e){const t=e.features,i=e.context,n=e.bpPerPixel,r=e.bpStart,s=e.pixelWidth,o=r+s*n+1,a=this.showSoftClips,c=this.showAllBases,l=this.browser.nucleotideColors;i.save();for(let e of t.baseModificationKeys)this._baseModifications.add(e.modification);let h=t.sequence;h&&(h=h.toUpperCase());let d=0;this.colorBy||(this.colorBy=this.hasPairs?"unexpectedPair":"none");let u=e.pixelTop;this.top&&i.translate(0,this.top);const f=u+e.pixelHeight;t.hasDownsampledIntervals()?(d=15,t.downsampledIntervals.forEach((function(e){var t=(e.start-r)/n,s=(e.end-r)/n;s-t>5&&(t+=1,s-=1),xo.fillRect(i,t,2,s-t,8,{fillStyle:"black"})}))):d=0,this.alignmentsYOffset=d;const p="SQUISHED"===this.displayMode?this.squishedRowHeight:this.alignmentRowHeight,g=t.packedGroups;if(g){let t=d;for(let n of g.keys()){const a=g.get(n),c=a.rows,l=c.length;a.pixelTop=t;for(let e=0;e<l;e++){const i=c[e],n=p<=4?p:p-2;if(t>f)break;if(t+n<u)t+=p;else{for(let e of i.alignments)if(this.browser.circularView&&(this.hasSupplemental=this.hasSupplemental||e.hasTag("SA")),!(e.start+e.lengthOnRef<r)){if(e.start>o)break;!0!==e.hidden&&(e instanceof qf?(m.call(this,e,t,n),w.call(this,e.firstAlignment,t,n),e.secondAlignment&&w.call(this,e.secondAlignment,t,n)):w.call(this,e,t,n))}t+=p}}if(a.pixelBottom=t,this.groupBy&&n){i.save(),i.font="400 12px sans-serif";const r=i.measureText(n),o=r.width+10,c=-e.pixelShift+e.viewportWidth-o-10,l=r.actualBoundingBoxAscent+r.actualBoundingBoxDescent+10,h=Math.min(a.pixelTop+l-1,a.pixelBottom);i.textAlign="center",i.fillStyle="white",i.strokeStyle="lightGray",i.beginPath(),i.roundRect(c,h-r.actualBoundingBoxAscent-5,o,l,2),i.fill(),i.stroke(),i.fillStyle="black",i.fillText(n,c+o/2,h),xo.dashedLine(i,0,t,s,t),i.restore(),t+=10}}}function m(e,t,s){var a=this.getConnectorColor(e.firstAlignment),c=(e.connectingStart-r)/n,l=(e.connectingEnd-r)/n,h=t+s/2;e.connectingEnd<r||e.connectingStart>o||(e.mq<=0&&(a=_s.addAlpha(a,.15)),xo.setProperties(i,{fillStyle:a,strokeStyle:a}),xo.strokeLine(i,c,h,l,h))}function w(e,d,u){if(e.start+e.lengthOnRef<r||e.start>o)return;const f=a?e.blocks:e.blocks.filter((e=>"S"!==e.type));let g=this.getAlignmentColor(e);const m=g;e.mq<=0&&(g=_s.addAlpha(g,.15)),xo.setProperties(i,{fillStyle:g,strokeStyle:m});const w=[];for(let e=0;e<f.length;e++){const t=f[e];if(!(e!==f.length-1&&f[e+1].start<r)&&(w.push(...b.call(this,t,e)),t.start+t.len>o))break}if(e.gaps){const t=d+u/2;for(let s of e.gaps){const e=(s.start-r)/n,o=(s.start+s.len-r)/n,a=o-e,c=s.len.toString(),l=6*c.length,h=e+a/2,u="D"===s.type?this.deletionColor:this.skippedColor;if(xo.strokeLine(i,e,t,o,t,{strokeStyle:u,lineWidth:2}),this.showDeletionText&&s.len>1&&a>=l+8){const e=h-l/2;xo.fillRect(i,e-1,d-1,l+2,12,{fillStyle:"white"}),xo.fillText(i,c,e,d+10,{font:"normal 10px monospace",fillStyle:this.deletionTextColor})}}}if(e.insertions&&this.showInsertions){let t=-1;for(let s of e.insertions){if(this.hideSmallIndels&&s.len<=this.indelSizeThreshold)continue;if(s.start<r)continue;if(s.start>o)break;const e=s.start-r,a=s.len.toString(),c=2+6*a.length,l=this.showInsertionText&&1!==s.len?Math.round(s.len/n):2,h=Math.max(Math.min(c,l),2),f=e/n-h/2;if(f-t>2){const e={fillStyle:this.insertionColor};xo.fillRect(i,f-2,d,h+4,2,e),xo.fillRect(i,f,d+2,h,u-4,e),xo.fillRect(i,f-2,d+u-2,h+4,2,e),this.showInsertionText&&s.len>1&&l>c&&xo.fillText(i,a,f+1,d+10,{font:"normal 10px monospace",fillStyle:this.insertionTextColor}),t=f}}}for(let{bbox:e,baseColor:t,readChar:r}of w){if(n<=.1&&e.height>=8){const n=Math.min(10,e.height);i.font=n+"px sans-serif";const s=e.x+e.width/2;xo.strokeText(i,r,s-i.measureText(r).width/2,n-1+e.y,{strokeStyle:t})}else xo.fillRect(i,e.x,e.y,e.width,e.height,{fillStyle:t})}if(this.colorBy&&this.colorBy.startsWith("basemod")){const t={ctx:i,bpPerPixel:n,bpStart:r,bpEnd:o,pixelEnd:s};this.baseModRenderer.drawModifications(e,d,u,t,this.colorBy,this.baseModificationThreshold)}function b(o,a){const w=[],b=o.start-t.start,F=(o.start-r)/n,v=(o.start+o.len-r)/n,y=Math.max(1,v-F),A=100/n,C=Math.min(p/2,A/6),_="S"===o.type,x=e.mq<=0||this.selectedReadName===e.readName||_||this.highlightedReads&&this.highlightedReads.has(e.readName);let k=m;this.selectedReadName===e.readName?k="red":_?k="rgb(50,50,50)":this.highlightedReads&&this.highlightedReads.has(e.readName)&&(k=this.highlightColor||"#00ff00");const I=!0===e.strand&&a===f.length-1,S=!1===e.strand&&0===a;if(I|S){let e,t;I?(e=[F,v,v+C,v,F,F],t=[d,d,d+u/2,d+u,d+u,d]):S&&(e=[v,F,F-C,F,v,v],t=[d,d,d+u/2,d+u,d+u,d]),xo.fillPolygon(i,e,t,{fillStyle:g}),x&&xo.strokePolygon(i,e,t,{strokeStyle:k})}else xo.fillRect(i,F,d,y,u,{fillStyle:g}),x&&(i.save(),i.strokeStyle=k,i.strokeRect(F,d,y,u),i.restore());if(_||c||this.showMismatches&&h&&e.seq&&"*"!==e.seq){const t=e.seq?e.seq.toUpperCase():void 0,i=e.qual,a=o.seqOffset,f=Math.max(1,1/n);for(let e=0,p=o.len;e<p;e++){const p=(o.start+e-r)/n;if(p+f<0)continue;if(p>s)break;let g=t?t.charAt(a+e):"";const m=b+e>=0?h.charAt(b+e):"";if("="===g&&(g=m),"X"===g||m!==g||_||c){let t=l[g]||"rgb(0,0,0)";if(!_&&void 0!==i&&i.length>a+e){t=Km(i[a+e],t)}w.push({bbox:{x:p,y:d,width:f,height:u},baseColor:t,readChar:g})}}}return w}}i.restore()}popupData(e){const t=this.getClickedObject(e);return t?t.popupData(e.genomicLocation):void 0}menuItemList(){let e=[];e.push("<hr/>");const t=Bt('<div class="igv-track-menu-category">');t.text("Color by:"),e.push({name:void 0,object:t,click:void 0,init:void 0});const i=[];i.push({key:"none",label:"none"}),i.push({key:"strand",label:"read strand"}),this.hasPairs&&(i.push({key:"firstOfPairStrand",label:"first-of-pair strand"}),i.push({key:"pairOrientation",label:"pair orientation"}),i.push({key:"tlen",label:"insert size (TLEN)"}),i.push({key:"unexpectedPair",label:"pair orientation & insert size (TLEN)"})),i.push({key:"tag",label:"tag"});for(let t of i){const i=void 0===this.colorBy&&"none"===t.key||this.colorBy===t.key;e.push(this.colorByCB(t,i))}const n=this._baseModifications.size;if(n>0){e.push('<hr style="border-top:1px dotted;border-bottom: none;">');let t=1===n?"base modification":"base modification (all)";if(e.push(this.basemodColorByCB({key:"basemod",label:t})),n>1)for(let t of this._baseModifications)e.push(this.basemodColorByCB({key:"basemod:"+t,label:`base modification (${$f(t)})`}));if(e.push('<hr style="border-top:1px dotted;border-bottom: none;">'),t=1===n?"base modification 2-color":"base modification 2-color (all)",e.push(this.basemodColorByCB({key:"basemod2",label:t})),n>1)for(let t of this._baseModifications)e.push(this.basemodColorByCB({key:"basemod2:"+t,label:`base modification 2-color (${$f(t)})`}))}e.push("<hr/>");const r=Bt('<div class="igv-track-menu-category">');r.text("Group by:"),e.push({name:void 0,object:r,click:void 0,init:void 0});const s=[];s.push({key:"none",label:"none"}),s.push({key:"strand",label:"read strand"}),this.hasPairs&&(s.push({key:"firstOfPairStrand",label:"first-of-pair strand"}),s.push({key:"pairOrientation",label:"pair orientation"}),s.push({key:"mateChr",label:"chromosome of mate"})),s.push({key:"chimeric",label:"chimeric"}),s.push({key:"supplementary",label:"supplementary flag"}),s.push({key:"readOrder",label:"read order"});for(let e of this._groupByTags)s.push({key:`tag:${e}`,label:`tag:${e}`});for(let e of this._groupByPositions)s.push({key:`base:${e}`,label:`base:${e}`});s.push({key:"tag",label:"tag..."});for(let t of s){const i=void 0===this.groupBy&&"none"===t.key||this.groupBy===t.key;e.push(this.groupByCB(t,i))}e.push("<hr/>"),e.push({object:Bt(Dl("Show all bases",this.showAllBases)),click:function(){this.alignmentTrack.showAllBases=!this.alignmentTrack.showAllBases,this.trackView.repaintViews()}}),e.push({object:Bt(Dl("Show mismatches",this.showMismatches)),click:function(){this.alignmentTrack.showMismatches=!this.alignmentTrack.showMismatches,this.trackView.repaintViews()}}),e.push({object:Bt(Dl("Show insertions",this.showInsertions)),click:function(){this.alignmentTrack.showInsertions=!this.alignmentTrack.showInsertions,this.trackView.repaintViews()}}),e.push({object:Bt(Dl("Show soft clips",this.showSoftClips)),click:function(){this.alignmentTrack.showSoftClips=!this.alignmentTrack.showSoftClips;const e=this.getCachedAlignmentContainers();for(let t of e)t.pack(this);this.trackView.repaintViews()}}),this.hasPairs&&(e.push("<hr/>"),e.push({object:Bt(Dl("View as pairs",this.viewAsPairs)),click:function(){const e=!this.alignmentTrack.viewAsPairs;if(e&&this.groupBy&&!Gm.has(this.groupBy))return void this.browser.alert.present(`'View as Pairs' is incompatible with 'Group By ${this.groupBy}'`);this.alignmentTrack.viewAsPairs=e;const t=this.getCachedAlignmentContainers();for(let e of t)e.pack(this);this.trackView.checkContentHeight(),this.trackView.repaintViews()}})),this.browser.circularView&&(this.hasPairs||this.hasSupplemental)&&(e.push("<hr/>"),this.hasPairs&&e.push({label:"Add discordant pairs to circular view",click:function(){for(let e of this.trackView.viewports)this.addPairedChordsForViewport(e)}}),this.hasSupplemental&&e.push({label:"Add split reads to circular view",click:function(){for(let e of this.trackView.viewports)this.addSplitChordsForViewport(e)}})),e.push("<hr/>");const o=Bt('<div class="igv-track-menu-category">');o.text("Display mode:"),e.push({name:void 0,object:o,click:void 0,init:void 0});for(let t of["EXPANDED","SQUISHED","FULL"])e.push({object:Bt(Dl(t.toLowerCase(),this.displayMode===t)),click:function(){this.alignmentTrack.setDisplayMode(t)}});return e}setDisplayMode(e){const t="FULL"===this.displayMode||"FULL"===e;if(this.displayMode=e,t){const e=this.getCachedAlignmentContainers();for(let t of e)t.pack(this)}this.trackView.checkContentHeight(),this.trackView.repaintViews()}colorByCB(e,t){const i=Bt(Dl(e.label,t));if("tag"!==e.key){function n(){this.alignmentTrack.colorBy=e.key,this.trackView.repaintViews()}return{name:void 0,object:i,click:n,init:void 0}}{function r(e){const t=this.alignmentTrack.colorBy.startsWith("tag:")?this.alignmentTrack.colorBy.substring(4):"";this.browser.inputDialog.present({label:"Tag Name",value:t,callback:e=>{const t=this.alignmentTrack;e?(t.colorBy="tag:"+e,t.colorTable||(t.colorTable=new oo("Set1"))):t.colorBy=void 0,this.trackView.repaintViews()}},e)}return{name:void 0,object:i,dialog:r,init:void 0}}}basemodColorByCB(e){const t=this.colorBy===e.key;return{name:void 0,object:Bt(Dl(e.label,t)),click:function(){this.alignmentTrack.colorBy=e.key,"strand"!==this.alignmentTrack.groupBy&&(this.alignmentTrack.groupBy="strand",this.alignmentTrack.repackAlignments()),this.trackView.repaintViews()},init:void 0}}groupByCB(e,t){return{name:void 0,object:Bt(Dl(e.label,t)),dialog:function(t){const i=()=>this.alignmentTrack.repackAlignments();if("tag"===e.key){let e="";this.alignmentTrack.groupBy&&this.alignmentTrack.groupBy.startsWith("tag:")&&(e=this.alignmentTrack.groupBy.substring(4)),this.browser.inputDialog.present({label:"Tag Name",value:e,callback:e=>{e&&(this.alignmentTrack.groupBy="tag:"+e,this.alignmentTrack._groupByTags.push(e),i())}},t)}else"none"===e.key?this.alignmentTrack.groupBy=void 0:this.alignmentTrack.groupBy=e.key,i()},init:void 0}}repackAlignments(){const e=this.getCachedAlignmentContainers();for(let t of e)"function"==typeof t.pack&&t.pack(this);this.trackView.checkContentHeight(),this.trackView.repaintViews()}contextMenuItemList(e){const t=e.viewport,i=[],n=i=>{const n=this.sortObject,r=!n||n.position!==Math.floor(e.genomicLocation)||!n.direction,s={chr:t.referenceFrame.chr,position:Math.floor(e.genomicLocation),option:i,direction:r,sortAsPairs:t.trackView.track.viewAsPairs};this.sortObject=s,t.cachedFeatures.sortRows(s),t.repaint()};i.push("<b>Sort by...</b>"),i.push({label:"&nbsp; base",click:()=>n("BASE")}),i.push({label:"&nbsp; read strand",click:()=>n("strand")}),i.push({label:"&nbsp; start location",click:()=>n("START")}),i.push({label:"&nbsp; insert size",click:()=>n("INSERT_SIZE")}),i.push({label:"&nbsp; gap size",click:()=>n("GAP_SIZE")}),i.push({label:"&nbsp; chromosome of mate",click:()=>n("MATE_CHR")}),i.push({label:"&nbsp; mapping quality",click:()=>n("MQ")}),i.push({label:"&nbsp; read name",click:()=>n("READ_NAME")}),i.push({label:"&nbsp; aligned read length",click:()=>n("ALIGNED_READ_LENGTH")}),i.push({label:"&nbsp; tag",click:()=>{const i=this.sortObject,n=!i||i.position!==Math.floor(e.genomicLocation)||!i.direction,r={label:"Tag Name",value:this.sortByTag?this.sortByTag:"",callback:i=>{if(i){const r={chr:t.referenceFrame.chr,position:Math.floor(e.genomicLocation),option:"TAG",tag:i,direction:n};this.sortByTag=i,this.sortObject=r,t.cachedFeatures.sortRows(r),t.repaint()}}};this.browser.inputDialog.present(r,e.event)}}),i.push("<hr/>");const r=`${t.referenceFrame.chr}:${Rt(Math.floor(e.genomicLocation)+1)}`;i.push({label:`Group by base @${r}`,click:()=>{this._groupByPositions.push(r),this.groupBy=`base:${r}`;const e=this.getCachedAlignmentContainers();for(let t of e)t.pack(this);this.trackView.checkContentHeight(),this.trackView.repaintViews()}}),i.push("<hr/>");const s=this.getClickedObject(e);if(s){const t=this.showSoftClips,n="function"==typeof s.alignmentContaining?s.alignmentContaining(e.genomicLocation,t):s;if(n){n.isPaired()&&n.isMateMapped()&&i.push({label:"View mate in split screen",click:()=>{if(n.mate){const t=e.viewport.referenceFrame,i=this.browser.genome.getChromosome(n.mate.chr);if(i){this.selectedReadName=n.readName;const r=t.bpPerPixel*e.viewport.getWidth(),s=n.mate.position-r/2,o=n.mate.position+r/2;this.browser.addMultiLocusPanel(i.name,s,o,t)}else this.browser.alert.present(`Reference does not contain chromosome: ${n.mate.chr}`)}},init:void 0}),i.push({label:"View read sequence",click:()=>{const e=n.seq;e&&"*"!==e?this.browser.alert.present(e):this.browser.alert.present("Read sequence: *")}}),Za()&&i.push({label:"Copy read sequence",click:async()=>{const e=n.seq;try{await navigator.clipboard.writeText(e)}catch(e){console.error(e),this.browser.alert.present(`error copying sequence to clipboard ${e}`)}}});const t=n.seq;if(t&&"*"!==t){t.length<Hd&&i.push({label:"BLAT read sequence",click:()=>{const e=n.isNegativeStrand()?lc(t):t,i=`${n.readName} - blat`,r=`${this.name} - ${i}`;Od({sequence:e,browser:this.browser,name:i,title:r})}});const e=n.softClippedBlocks();e.left&&e.left.len>20&&e.left.len<Hd&&i.push({label:"BLAT left soft-clipped sequence",click:()=>{const i=t.substr(e.left.seqOffset,e.left.len),r=n.isNegativeStrand()?lc(i):i,s=`${n.readName} - blat left clip`,o=`${this.name} - ${s}`;Od({sequence:r,browser:this.browser,name:s,title:o})}}),e.right&&e.right.len>20&&e.right.len<Hd&&i.push({label:"BLAT right soft-clipped sequence",click:()=>{const i=t.substr(e.right.seqOffset,e.right.len),r=n.isNegativeStrand()?lc(i):i,s=`${n.readName} - blat right clip`,o=`${this.name} - ${s}`;Od({sequence:r,browser:this.browser,name:s,title:o})}})}i.push("<hr/>")}}return this.browser.circularView&&(this.hasPairs||this.hasSupplemental)&&(this.hasPairs&&i.push({label:"Add discordant pairs to circular view",click:()=>{this.addPairedChordsForViewport(t)}}),this.hasSupplemental&&i.push({label:"Add split reads to circular view",click:()=>{this.addSplitChordsForViewport(t)}}),i.push("<hr/>")),i}getClickedObject(e){let t=e.viewport.cachedFeatures;if(!t)return;const i=e.y-this.top,n=e.genomicLocation,r=this.showSoftClips;let s=Number.MAX_VALUE;for(let e of t.packedGroups.values())if(s=Math.min(s,e.pixelTop),i>e.pixelTop&&i<=e.pixelBottom){const t="SQUISHED"===this.displayMode?this.squishedRowHeight:this.alignmentRowHeight;let s=Math.floor((i-e.pixelTop)/t);if(s>=0&&s<e.length){const t=e.rows[s].alignments.filter((e=>e.containsLocation(n,r)));if(t.length>0)return t[0]}}if(i<s&&t.downsampledIntervals)for(const e of t.downsampledIntervals)if(e.start<=n&&e.end>=n)return e}getConnectorColor(e){if(this.pairConnectorColor)return this.pairConnectorColor;let t=this.colorBy;switch(t&&t.startsWith("tag:")&&(t.substring(4),t="tag"),t){case"strand":case"firstOfPairStrand":case"pairOrientation":case"tag":return this.color?"function"==typeof this.color?this.color(e):this.color:"rgb(200, 200, 200)";default:return this.getAlignmentColor(e)}}getAlignmentColor(e){let t;t=this.color?"function"==typeof this.color?this.color(e):this.color:"rgb(185, 185, 185)";let i,n=this.colorBy;switch(n&&n.startsWith("tag:")&&(i=n.substring(4),n="tag"),n){case"basemod":case"basemod2":t=e.strand?this.baseModPosStrandColor:this.baseModNegStrandColor;break;case"strand":t=e.strand?this.posStrandColor:this.negStrandColor;break;case"firstOfPairStrand":const r=e.firstOfPairStrand;void 0!==r&&(t=r?this.posStrandColor:this.negStrandColor);break;case"unexpectedPair":case"pairOrientation":if(e.pairOrientation){const i=Jf[this.expectedPairOrientation];if(i){const n=this.pairColors[i[e.pairOrientation]];if(n){t=n;break}}}if("pairOrientation"===n)break;case"tlen":case"fragmentLength":e.mate&&e.isMateMapped()&&(e.mate.chr!==e.chr?t=_u(e.mate.chr):this.minTemplateLength&&Math.abs(e.fragmentLength)<this.minTemplateLength?t=this.smallTLENColor:this.maxTemplateLength&&Math.abs(e.fragmentLength)>this.maxTemplateLength&&(t=this.largeTLENColor));break;case"tag":const s=e.tags()[i];void 0!==s&&(this.bamColorTag===i&&(t=_s.createColorStringSafe(s)),this.colorTable||(this.colorTable=new oo(this.tagColorPallete)),t=this.colorTable.getColor(s))}return t}get nucleotideColors(){return this.browser.nucleotideColors}get minTemplateLength(){return void 0!==this.minTLEN?this.minTLEN:this.parent._pairedEndStats?this.parent._pairedEndStats.minTLEN:0}get maxTemplateLength(){return void 0!==this.maxTLEN?this.maxTLEN:this.parent._pairedEndStats?this.parent._pairedEndStats.maxTLEN:1e3}getState(){const e=super.getState();return this.highlightedReads&&(e.highlightedReads=Array.from(this.highlightedReads)),e}get name(){return this.parent.name}set name(e){this.parent.name=e}get color(){return this.parent.color}set color(e){this.parent.color=e}get trackView(){return this.parent.trackView}get getCachedAlignmentContainers(){return this.parent.getCachedAlignmentContainers}get sortObject(){return this.parent.sortObject}set sortObject(e){this.parent.sortObject=e}addPairedChordsForViewport(e){return this.parent.addPairedChordsForViewport(e)}addSplitChordsForViewport(e){return this.parent.addSplitChordsForViewport(e)}}function Km(e,t){let i;return i=e<5?.1:Math.max(.1,Math.min(1,.1+.9*(e-5)/15)),i=Math.round(10*i)/10,i<1&&(t=_s.addAlpha(t,i)),t}function Ym(){"FULL"!==this.displayMode||this.browser.isTrackPanning()||this.repackAlignments()}function Xm(e,t,i,n,r,s,o,a,c){const l=o.baseModCounts,h=o.coverageMap;if(l){let o;const d=a.split(":");2==d.length&&(a=d[0],o=d[1]);const u=Array.from(l.allModifications);u.sort(Qf.compare);const f=h.getTotalCount(s);if(!u.filter((e=>o?o===e.modification:!e.modification.startsWith("NONE_"))).find((e=>l.getCount(s,e,0,!1)>0)))return;for(let d of u){if(d.modification.startsWith("NONE_")&&"basemod2"!==a)continue;if(o&&o!==d.modification&&!d.modification.startsWith("NONE_"))continue;const u=d.base,p=ac(u),g=h.getCount(s,u)+h.getCount(s,p),m=l.simplexModifications.has(d.modification)?h.getPosCount(s,u)+h.getNegCount(s,p):g;if(0==m)continue;const w="basemod2"===a,b=l.getCount(s,d,c,w);if(0==b)continue;const F=g/f*(b/m),v=Math.round(F*r),y=l.getLikelihoodSum(s,d,c,w)/b,A=i-v,C=jm(d.modification,y,a);e.fillStyle=C,e.fillRect(t,A,n,v),i=A}}}class Zm{constructor(e,t){this.featureType="numeric",this.parent=t,this.featureSource=t.featureSource,this.paintAxis=Yu,this.top=0,this.autoscale=e.autoscale||void 0===e.max,e.coverageColor&&(this.color=e.coverageColor),this.autoscale||(this.dataRange={min:e.min||0,max:e.max})}get height(){return this.parent.coverageTrackHeight}draw(e){const t=e.pixelTop;e.pixelHeight;const i=this.parent.browser.nucleotideColors;if(t>this.height)return;const n=e.context,r=e.features,s=r.coverageMap;let o;s.refSeq&&(o=s.refSeq.toUpperCase());const a=e.bpPerPixel,c=e.bpStart,l=c+e.pixelWidth*a+1;let h;h=this.color?this.color:this.parent.color&&"function"!=typeof this.parent.color?_s.darkenLighten(this.parent.color,-35):"rgb(150, 150, 150)",xo.setProperties(n,{fillStyle:h,strokeStyle:h});const d=Math.max(1,1/a);for(let e=0,t=s.coverage.length;e<t;e++){const t=s.bpStart+e;if(t<c)continue;if(t>l)break;const i=s.coverage[e];if(!i)continue;const r=i.total/this.dataRange.max*this.height,o=this.height-r,h=(t-c)/a;xo.fillRect(n,h,o,d,r)}if(o)for(let e=0,t=s.coverage.length;e<t;e++){const t=s.bpStart+e;if(t<c)continue;if(t>l)break;const h=s.coverage[e];if(!h)continue;const u=h.total/this.dataRange.max*this.height;let f=this.height-u;const p=Math.floor((t-c)/a),g=o[e];if(this.parent.colorBy&&this.parent.colorBy.startsWith("basemod"))Xm(n,p,this.height,d,u,t,r,this.parent.colorBy,this.parent.baseModificationThreshold);else if(h.isMismatch(g)){xo.setProperties(n,{fillStyle:i[g]}),xo.fillRect(n,p,f,d,u);let e=0;for(let t of["A","C","T","G"]){const r=(h["pos"+t]+h["neg"+t])/this.dataRange.max*this.height;f=this.height-r-e,e+=r,xo.setProperties(n,{fillStyle:i[t]}),xo.fillRect(n,p,f,d,r)}}}}getClickedObject(e){let t=e.viewport.cachedFeatures;if(!t||0===t.length)return;const i=Math.floor(e.genomicLocation),n=t.coverageMap,r=Math.floor(i-n.bpStart),s=n.coverage[r];return s?{coverage:s,baseModCounts:t.baseModCounts,hoverText:()=>n.coverage[r].hoverText()}:void 0}popupData(e){const t=[],{coverage:i,baseModCounts:n}=this.getClickedObject(e);if(i){const r=Math.floor(e.genomicLocation),s=e.viewport.referenceFrame;t.push(s.chr+":"+Rt(1+r)),t.push({name:"Total Count",value:i.total});let o=i.posA+i.negA;o>0&&(o=o.toString()+" ("+Math.round(o/i.total*100)+"%, "+i.posA+"+, "+i.negA+"- )"),t.push({name:"A",value:o}),o=i.posC+i.negC,o>0&&(o=o.toString()+" ("+Math.round(o/i.total*100)+"%, "+i.posC+"+, "+i.negC+"- )"),t.push({name:"C",value:o}),o=i.posG+i.negG,o>0&&(o=o.toString()+" ("+Math.round(o/i.total*100)+"%, "+i.posG+"+, "+i.negG+"- )"),t.push({name:"G",value:o}),o=i.posT+i.negT,o>0&&(o=o.toString()+" ("+Math.round(o/i.total*100)+"%, "+i.posT+"+, "+i.negT+"- )"),t.push({name:"T",value:o}),o=i.posN+i.negN,o>0&&(o=o.toString()+" ("+Math.round(o/i.total*100)+"%, "+i.posN+"+, "+i.negN+"- )"),t.push({name:"N",value:o}),t.push("<HR/>"),t.push({name:"DEL",value:i.del.toString()}),t.push({name:"INS",value:i.ins.toString()}),n&&(t.push("<hr/>"),t.push(...n.popupData(r,this.parent.colorBy)))}return t}}class Jm extends Hl{static defaults={alleleFreqThreshold:.2,visibilityWindow:3e4,showCoverage:!0,showAlignments:!0,height:300,coverageTrackHeight:50,baseModificationThreshold:0};constructor(e,t){super(e,t)}init(e){this.type="alignment",this.featureSource=new om(e,this.browser);const t=Object.assign({parent:this},e);this.coverageTrack=new Zm(t,this);const i=Object.assign({parent:this},e);this.alignmentTrack=new $m(i,this.browser),super.init(e),this.showAlignments||(this._height=this.coverageTrackHeight),e.sort&&(Array.isArray(e.sort)?this.assignSort(e.sort[0]):this.assignSort(e.sort))}dispose(){this.alignmentTrack.dispose()}setHighlightedReads(e,t){this.alignmentTrack.setHighlightedReads(e,t),this.updateViews()}get expectedPairOrientation(){return this.alignmentTrack.expectedPairOrientation}get viewAsPairs(){return this.alignmentTrack.viewAsPairs}get colorBy(){return this.alignmentTrack.colorBy}set height(e){this._height=e,this.showAlignments&&(this.alignmentTrack.height=this.showCoverage?e-this.coverageTrackHeight:e)}get height(){return this._height}sort(e){e=this.assignSort(e);for(let t of this.trackView.viewports)if(t.containsPosition(e.chr,e.position)){const i=t.cachedFeatures;i&&(i.sortRows(e),t.repaint())}}assignSort(e){if(e.locus){const t=function(e){const t=e.split(":"),i=t[1].split("-"),n={chr:t[0],start:Number.parseInt(i[0].replace(/,/g,""))-1};return i.length>1?n.end=Number.parseInt(i[1].replace(/,/g,"")):n.end=n.start+1,n}(e.locus);e.chr=t.chr,e.position=t.start}else e.position--;return e.direction="ASC"===e.direction||!0===e.direction,e.chr=this.browser.genome.getChromosomeName(e.chr),this.sortObject=e,this.sortObject}async getFeatures(e,t,i,n,r){const s=await this.featureSource.getAlignments(e,t,i);if(s.viewport=r,s.hasPairs&&!this._pairedEndStats&&!this.config.maxFragmentLength){const e=new Hm(s.allAlignments(),this.config);e.totalCount>99&&(this._pairedEndStats=e)}s.pack(this.alignmentTrack);const o=this.sortObject;return o&&o.chr===e&&o.position>=t&&o.position<=i&&s.sortRows(o),this.alignmentTrack.hasPairs=this.alignmentTrack.hasPairs||s.hasPairs,s}computePixelHeight(e){return(this.showCoverage?this.coverageTrackHeight:0)+(this.showAlignments?this.alignmentTrack.computePixelHeight(e):0)}draw(e){xo.fillRect(e.context,0,e.pixelTop,e.pixelWidth,e.pixelHeight,{fillStyle:"rgb(255, 255, 255)"}),!0===this.showCoverage&&this.coverageTrackHeight>0?(this.trackView.axisCanvas.style.display="block",this.coverageTrack.draw(e)):this.trackView.axisCanvas.style.display="none",!0===this.showAlignments&&(this.alignmentTrack.setTop(this.coverageTrack,this.showCoverage),this.alignmentTrack.draw(e))}paintAxis(e,t,i){this.coverageTrack.paintAxis(e,t,this.coverageTrackHeight)}contextMenuItemList(e){return this.alignmentTrack.contextMenuItemList(e)}popupData(e){return!0===this.showCoverage&&e.y>=this.coverageTrack.top&&e.y<this.coverageTrackHeight?this.coverageTrack.popupData(e):this.alignmentTrack.popupData(e)}clickedFeatures(e){let t;return t=!0===this.showCoverage&&e.y>=this.coverageTrack.top&&e.y<this.coverageTrackHeight?this.coverageTrack.getClickedObject(e):this.alignmentTrack.getClickedObject(e),t?[t]:void 0}hoverText(e){if(!0===this.showCoverage&&e.y>=this.coverageTrack.top&&e.y<this.coverageTrackHeight){const t=this.coverageTrack.getClickedObject(e);if(t)return t.hoverText()}}menuItemList(){let e=[];e=e.concat(this.numericDataMenuItems()),e=e.concat(this.alignmentTrack.menuItemList());const t=()=>{if(!this.autoHeight){const e=(this.showCoverage?this.coverageTrackHeight:0)+(this.showAlignments?this.alignmentTrack.height:0);this.trackView.setTrackHeight(e)}};return e.push("<hr/>"),e.push({object:Bt(Dl("Show Coverage",this.showCoverage)),click:function(){this.showCoverage=!this.showCoverage,t(),this.trackView.checkContentHeight(),this.trackView.repaintViews()}}),e.push({object:Bt(Dl("Show Alignments",this.showAlignments)),click:function(){this.showAlignments=!this.showAlignments,t(),this.trackView.checkContentHeight(),this.trackView.repaintViews()}}),e}getState(){const e=super.getState();return this.sortObject&&(e.sort={chr:this.sortObject.chr,position:this.sortObject.position+1,option:this.sortObject.option,direction:this.sortObject.direction?"ASC":"DESC"}),Object.assign(e,this.alignmentTrack.getState()),e}getCachedAlignmentContainers(){return this.trackView.viewports.map((e=>e.cachedFeatures))}get dataRange(){return this.coverageTrack.dataRange}set dataRange(e){this.coverageTrack.dataRange=e}get logScale(){return this.coverageTrack.logScale}set logScale(e){this.coverageTrack.logScale=e}get autoscale(){return this.coverageTrack.autoscale}set autoscale(e){this.coverageTrack.autoscale=e}addPairedChordsForViewport(e){const t=this.maxTemplateLength,i=[],n=e.referenceFrame;for(let r of e.cachedFeatures.allAlignments())r.end>=n.start&&r.start<=n.end&&(r.paired?r.end-r.start>t&&i.push(r):r.mate&&r.mate.chr&&(r.mate.chr!==r.chr||Math.max(r.fragmentLength)>t)&&i.push(r));zm((e=>{const t=[];for(let i of e)if(i.paired)i.firstAlignment&&i.secondAlignment&&t.push({uniqueId:i.readName,refName:Tm(i.firstAlignment.chr),start:i.firstAlignment.start,end:i.firstAlignment.end,mate:{refName:Tm(i.secondAlignment.chr),start:i.secondAlignment.start,end:i.secondAlignment.end}});else{const e=i.mate;e&&e.chr&&e.position&&t.push({uniqueId:i.readName,refName:Tm(i.chr),start:i.start,end:i.end,mate:{refName:Tm(e.chr),start:e.position-1,end:e.position}})}return t})(i),this,n,.02)}addSplitChordsForViewport(e){const t=[],i=e.referenceFrame;for(let n of e.cachedFeatures.allAlignments()){const e=n.hasTag("SA");n.end>=i.start&&n.start<=i.end&&e&&t.push(n)}zm((e=>{const t=e=>{const t=pp(e.tags().SA);let n=0;for(let r of t)r.start!==e.start&&i.push({uniqueId:`${e.readName}_${n++}`,refName:Tm(e.chr),start:e.start,end:e.end,mate:{refName:Tm(r.chr),start:r.start,end:r.start+r.lenOnRef}})},i=[];for(let i of e)i.paired?(t(i.firstAlignment),i.secondAlignment&&t(i.secondAlignment)):t(i);return i})(t),this,i,.02)}}class ew extends Hl{static defaults={height:250,theta:Math.PI/4,arcOrientation:"UP",showBlocks:!0,blockHeight:3,thickness:1,color:"rgb(180,25,137)",alpha:.02,logScale:!0};constructor(e,t){super(e,t)}init(e){super.init(e),!1===e.arcOrientation?this.arcOrientation="DOWN":!0===e.arcOrientation?this.arcOrientation="UP":e.arcOrientation?this.arcOrientation=e.arcOrientation.toUpperCase():this.arcOrientation="UP",this.sinTheta=Math.sin(this.theta),this.cosTheta=Math.cos(this.theta),this.arcType=function(e){if(!e.arcType)return"nested";switch(e.arcType){case"chiapet":return"inView";case"chiapetoutbound":return"partialInView";default:return e.arcType}}(e),this.painter={flipAxis:"DOWN"===this.arcOrientation,dataRange:this.dataRange,paintAxis:Yu},e.valueColumn?(this.valueColumn=e.valueColumn,this.hasValue=!0):e.useScore&&(this.hasValue=!0,this.valueColumn="score"),e.max?(this.dataRange={min:e.min||0,max:e.max},this.autoscale=!1):this.autoscale=!0,e.featureSource?(this.featureSource=e.featureSource,delete e._featureSource):(this.featureSource=wd(e,this.browser.genome),this.featureSource.getWGFeatures=sw)}async postInit(){if("function"!=typeof this.featureSource.getHeader||(this.header=await this.featureSource.getHeader(),!this.disposed))return this.header&&this.setTrackProperties(this.header),void 0===this.visibilityWindow&&"function"==typeof this.featureSource.defaultVisibilityWindow&&(this.visibilityWindow=await this.featureSource.defaultVisibilityWindow(),this.featureSource.visibilityWindow=this.visibilityWindow),this}get supportsWholeGenome(){return!0}async getFeatures(e,t,i){const n=this.visibilityWindow,r=await this.featureSource.getFeatures({chr:e,start:t,end:i,visibilityWindow:n});return void 0===this.hasValue&&r&&r.length>0&&(this.hasValue=void 0!==r[0].score),r}draw(e){"proportional"===this.arcType||"inView"===this.arcType||"partialInView"===this.arcType?this.drawProportional(e):this.drawNested(e)}drawNested(e){const t=e.context,i=e.pixelWidth,n=e.pixelHeight,r=e.viewportWidth,s=e.bpPerPixel,o=e.bpStart,a=s;xo.fillRect(t,0,e.pixelTop,i,n,{fillStyle:"rgb(255, 255, 255)"});const c=e.features;if(c){(function(){let e=0;for(let t of c){let n=(t.start-o)/a,r=(t.end-o)/a;n>=0&&r<=i&&(e=Math.max(e,r-n))}let t=Math.min(r,e)/2;if(e>0){let e=(n-10)/t;this.theta=function(e){let t,i=[.01570925532366355,.15838444032453644,.3249196962329063,.5095254494944288,.7265425280053609,.9999999999999999],n=[.031415926535897934,.3141592653589793,.6283185307179586,.9424777960769379,1.2566370614359172,1.5707963267948966];for(t=0;t<i.length&&!(i[t]>e);t++);let r=0===t?0:i[t-1],s=t<i.length?i[t]:1,o=(e-r)/(s-r),a=0===t?0:n[t-1],c=t<n.length?n[t]:Math.PI/2;return Math.min(Math.PI/2,a+o*(c-a))}(e),this.sinTheta=Math.sin(this.theta),this.cosTheta=Math.cos(this.theta)}}).call(this);const s="UP"===this.arcOrientation,h=s?e.pixelHeight:0;t.font="8px sans-serif",t.textAlign="center";for(let e of c){let n;if(e.drawState=void 0,"function"==typeof this.color?n=this.color(e):(n=this.color||e.color||"rgb(180,25,137)",n&&this.config.useScore&&(n=rw(n,(l=e.score,Math.min(1,.11+l/779*.89).toString())))),t.lineWidth=e.thickness||this.thickness||1,e.chr1===e.chr2||"all"===e.chr){const{m1:c,m2:l}=tw(e,this.browser.genome);let d=Math.round((c-o)/a),u=Math.round((l-o)/a);if(u<0||d>i)continue;let f=u-d;f<3&&(f=3,d--);const p=f/2,g=p/this.sinTheta,m=this.cosTheta*g,w=d+p;let b,F,v;if(s?(b=this.height+m,F=Math.PI+Math.PI/2-this.theta,v=Math.PI+Math.PI/2+this.theta):(b=-m,F=Math.PI/2-this.theta,v=Math.PI/2+this.theta),this.showBlocks&&"all"!==e.chr){const i=(e.start1-o)/a,n=(e.end1-o)/a,r=(e.start2-o)/a,c=(e.end2-o)/a,l=s?-this.blockHeight:this.blockHeight;t.fillRect(i,h,n-i,l),t.fillRect(r,h,c-r,l)}n&&!this.config.useScore&&f>r&&(n=rw(n,this.alpha)),t.strokeStyle=n,t.fillStyle=n,t.beginPath(),t.arc(w,b,g,F,v,!1),t.stroke(),e.drawState={xc:w,yc:b,r:g}}else{let r=Math.round((e.start-o)/a),c=Math.round((e.end-o)/a);if(c<0||r>i)continue;let l=c-r;l<3&&(l=3,r--);const h=e.chr===e.chr1?e.chr2:e.chr1;t.strokeStyle=n,t.fillStyle=rw(_u(h),.5),s?(t.fillRect(r,this.height/2,l,this.height/2),t.fillText(h,r+l/2,this.height/2-5),e.drawState={x:r,y:this.height/2,w:l,h:this.height/2}):(t.fillRect(r,0,l,this.height/2),t.fillText(h,r+l/2,this.height/2+13),e.drawState={x:r,y:0,w:l,h:this.height/2})}}}var l}getScaleFactor(e,t,i,n){return n?i/(Math.log10(t+1)-(e<=0?0:Math.log10(e+1))):i/(t-e)}drawProportional(e){const t=e.context,i=e.pixelWidth,n=e.pixelHeight,r=e.bpPerPixel,s=e.bpStart,o=r,a=e.referenceFrame.start,c=e.referenceFrame.end,l="UP"===this.arcOrientation;xo.fillRect(t,0,e.pixelTop,i,n,{fillStyle:"rgb(255, 255, 255)"});const h=e.features;if(h&&h.length>0){const n=0,r=this.getScaleFactor(n,this.dataRange.max,e.pixelHeight-1,this.logScale),d=l?e.pixelHeight:0;for(let e of h){e.drawState=void 0;const n=this.valueColumn?e[this.valueColumn]:e.score;if(void 0===n||Number.isNaN(n))continue;const h=Math.round((this.logScale?Math.log10(n+1):n)*r);if(e.chr1===e.chr2||"all"===e.chr){const{m1:i,m2:r}=tw(e,this.browser.genome);let u=Math.round((i-s)/o),f=Math.round((r-s)/o)-u;if(f<3&&(f=3,u--),n<this.dataRange.min||n>this.dataRange.max)continue;if("proportional"!==this.arcType){const e="partialInView"===this.arcType,t=i>=a&&r<=c;let n=!1,s=!1;if(!t&&e&&(n=a<=i&&i<=c,n||(s=a<=r&&r<=c)),!(t||n||s))continue}const p=f/2,g=u+f/2;e.drawState={xc:g,yc:d,radiusX:p,radiusY:h};const m=l,w=e.color||this.color;if(t.strokeStyle=w,t.lineWidth=e.thickness||this.thickness||1,!0===t.isSVG?t.strokeEllipse(g,d,p,h,0,0,Math.PI,m):(t.beginPath(),t.ellipse(g,d,p,h,0,0,Math.PI,m),t.stroke()),this.alpha&&(t.fillStyle=rw(w,this.alpha),!0===t.isSVG?t.fillEllipse(g,d,p,h,0,0,Math.PI,m):t.fill()),this.showBlocks&&"all"!==e.chr){t.fillStyle=w;const i=(e.start1-s)/o,n=(e.end1-s)/o,r=(e.start2-s)/o,a=(e.end2-s)/o,c=l?-this.blockHeight:this.blockHeight;t.fillRect(i,d,n-i,c),t.fillRect(r,d,a-r,c)}}else{let r=Math.round((e.start-s)/o),a=Math.round((e.end-s)/o);if(a<0||r>i||n<this.dataRange.min||n>this.dataRange.max)continue;const c=Math.min(h,this.height-13);let d=a-r;d<3&&(d=3,r--);const u=e.chr===e.chr1?e.chr2:e.chr1;if(t.font="8px sans-serif",t.textAlign="center",t.fillStyle=rw(_u(u),.5),l){const i=this.height-c;t.fillRect(r,i,d,c),t.fillText(u,r+d/2,i-5),e.drawState={x:r,y:i,w:d,h:c}}else t.fillRect(r,0,d,c),t.fillText(u,r+d/2,c+13),e.drawState={x:r,y:0,w:d,h:c}}}}}clearAxis(e,t,i){xo.fillRect(e,0,0,t,i,{fillStyle:"rgb(255, 255, 255)"})}paintAxis(e,t,i){const n={min:0,max:this.dataRange.max};"proportional"===this.arcType||"inView"===this.arcType||"partialInView"===this.arcType?(this.painter.flipAxis="DOWN"===this.arcOrientation,this.painter.dataRange=n,this.painter.paintAxis(e,t,i)):this.clearAxis(e,t,i)}menuItemList(){let e=[];if(this.hasValue){e.push("<hr/>");const t={nested:"Nested",proportional:"Proportional - All",inView:"Proportional - Both Ends in View",partialInView:"Proportional - One End in View"};e.push("<b>Arc Type</b>");for(let i of["nested","proportional","inView","partialInView"])e.push({object:Bt(Dl(t[i],i===this.arcType)),click:function(){this.arcType=i,this.trackView.repaintViews()}})}return e.push("<hr/>"),e.push({name:"Toggle arc direction",click:function(){this.arcOrientation="UP"===this.arcOrientation?"DOWN":"UP",this.trackView.repaintViews()}}),e.push({name:this.showBlocks?"Hide Blocks":"Show Blocks",click:function(){this.showBlocks=!this.showBlocks,this.trackView.repaintViews()}}),"proportional"!==this.arcType&&"inView"!==this.arcType&&"partialInView"!==this.arcType||(e=e.concat(this.numericDataMenuItems())),this.browser.circularView&&(e.push("<hr/>"),e.push({label:"Add interactions to circular view",click:function(){for(let e of this.trackView.viewports)this.addChordsForViewport(e.referenceFrame)}})),e}contextMenuItemList(e){if(this.browser.circularView){const t=e.viewport,i=[];return i.push({label:"Add interactions to circular view",click:()=>{const e=t.referenceFrame;this.addChordsForViewport(e)}}),i.push("<hr/>"),i}}addChordsForViewport(e){let t;if("all"===e.chr)t=Object.values(this.featureSource.getAllFeatures()).flat();else{t=this.featureSource.featureCache.queryFeatures(e.chr,e.start,e.end).filter((e=>e.drawState))}if(0===t.length)return;zm(t.map((e=>{const t=e._f||e;return{uniqueId:`${t.chr1}:${t.start1}-${t.end1}_${t.chr2}:${t.start2}-${t.end2}`,refName:Tm(t.chr1),start:t.start1,end:t.end1,mate:{refName:Tm(t.chr2),start:t.start2,end:t.end2}}})),this,e,.5)}doAutoscale(e){let t=0;if(e)for(let i of e){const e=this.valueColumn?i[this.valueColumn]:i.score;Number.isNaN(e)||(t=Math.max(t,e))}return{min:0,max:t}}popupData(e,t){void 0===t&&(t=this.clickedFeatures(e));const i=[];for(let e of t){const t=e._||e;if(i.push({name:"Region 1",value:iw(t.chr1,t.start1,t.end1,t.strand1)}),i.push({name:"Region 2",value:iw(t.chr2,t.start2,t.end2,t.strand2)}),t.name&&i.push({name:"Name",value:t.name}),void 0!==t.value&&i.push({name:"Value",value:t.value}),void 0!==t.score&&i.push({name:"Score",value:t.score}),t.extras&&this.header&&this.header.columnNames){const e=this.header.columnNames,n=this.header.hiccups?6:10;for(let r=n;r<e.length;r++)this.header.colorColumn!==r&&("info"===e[r]?ow(i,t.extras[r-n]):i.push({name:e[r],value:t.extras[r-n]}))}break}return i}clickedFeatures(e){const t=e.viewport.cachedFeatures,i=[];if(t){const n="proportional"===this.arcType||"inView"===this.arcType||"partialInView"===this.arcType;for(let r of t)if(r.drawState)if(r.chr1===r.chr2||"all"===r.chr)if(n){const{xc:t,yc:n,radiusX:s,radiusY:o}=r.drawState,a=e.canvasX-t,c=e.canvasY-n,l=a/s*(a/s)+c/o*(c/o);l<=1&&i.push({score:1/l,feature:r})}else{const{xc:t,yc:n,r:s}=r.drawState,o=e.canvasX-t,a=e.canvasY-n,c=Math.abs(Math.sqrt(o*o+a*a)-s);c<5&&i.push({score:c,feature:r})}else{const{x:t,y:n,w:s,h:o}=r.drawState,a=5;if(e.canvasX>=t-a&&e.canvasX<=t+s+a&&e.canvasY>=n&&e.canvasY<=n+o){const n=-Math.abs(e.canvasX-(t+s/2));i.push({score:n,feature:r});break}}}return i.length>1&&i.sort(((e,t)=>e.score-t.score)),i.map((e=>e.feature))}}function tw(e,t){let i=(e.start1+e.end1)/2,n=(e.start2+e.end2)/2;if("all"===e.chr&&(i=t.getGenomeCoordinate(e.chr1,i),n=t.getGenomeCoordinate(e.chr2,n)),i>n){const e=i;i=n,n=e}return{m1:i,m2:n}}function iw(e,t,i,n){return n&&"."!==n?`${e}:${Rt(t+1)}-${Rt(i)} (${n})`:`${e}:${Rt(t+1)}-${Rt(i)}`}const nw=new Map;function rw(e,t){const i=`${e}_${t}`;let n=nw.get(i);return n||(n=_s.addAlpha(e,t),nw.set(i,n)),n}function sw(e){const t=e=>{const t=Object.assign({},e);return t.chr="all",t.start=i.getGenomeCoordinate(e.chr1,e.start1),t.end=i.getGenomeCoordinate(e.chr2,e.end2),t},i=this.genome;let n,r=0;for(let t of i.wgChromosomeNames){let i=e[t];if(i)for(let e of i)e.dup||(r++,e.score&&(!n||e.score>n.score)&&(n=e))}const s=this.maxWGCount,o=n&&n.score>0&&r>s?5:1,a=Math.floor(s/o),c=n&&n.score>0?Math.log(n.score)/o:Number.MAX_SAFE_INTEGER;let l,h=[],d=[];for(let e=0;e<o;e++)d.push([0]),h.push([]);for(let n of i.wgChromosomeNames){let i=e[n];if(i)for(let e of i)if(!e.dup){const i=e.score?Math.max(0,Math.min(o-1,Math.floor(Math.log(e.score)/c))):0;if(h[i].length<a)h[i].push(t(e));else{const n=a/(d[i]+1);if(Math.random()<n){const n=Math.floor(Math.random()*(a-1));h[i][n]=t(e)}}d[i]++}}if(1===o)l=h[0];else{l=[];for(let e of h)for(let t of e)l.push(t);n&&l.push(t(n)),l.sort((function(e,t){return e.start-t.start})),console.log(l.length)}return l}function ow(e,t){const i=t.split(";");for(let t of i){const i=t.split("=");2===i.length&&e.push({name:i[0],value:i[1]})}}class aw{constructor(e){var t;this.config=e,this.url=(t=e.path||e.url).includes("//www.dropbox.com")?t.replace("//www.dropbox.com","//dl.dropboxusercontent.com"):t.startsWith("ftp://ftp.ncbi.nlm.nih.gov")?t.replace("ftp://","https://"):t}async read(e,t){const i=this.config.headers||{};if(void 0!==e&&t){const n="bytes="+e+"-"+(e+t-1);i.Range=n}let n=this.url.slice();if(this.config.oauthToken){const e=async function(e){return"function"==typeof e?await Promise.resolve(e()):e}(this.config.oauthToken);i.Authorization=`Bearer ${e}`}this.config.apiKey&&(n=function(e,t,i){const n=e.includes("?")?"&":"?";return e+n+t+"="+i}(n,"key",this.config.apiKey));const r=await fetch(n,{method:"GET",headers:i,redirect:"follow",mode:"cors"}),s=r.status;if(s>=400){const e=Error(r.statusText);throw e.code=s,e}return r.arrayBuffer()}}class cw{constructor(e){this.file=e.file,this.fetchSize=e.fetchSize||16e3,this.maxSize=e.maxSize||1e6,this.buffers=[]}async read(e,t){let i=this.buffers.filter((i=>i.overlaps(e,e+t)));for(let n of i)if(n.contains(e,e+t))return n.slice(e,e+t);if(0===i.length){let i=Math.max(t,this.fetchSize);this.buffers.sort(((e,t)=>e.start-t.start));const n=function(e,t,i){let n=i-1,r=e.length;for(;1+n<r;){const i=n+(r-n>>1);t(e[i])?r=i:n=i}return r}(this.buffers,(t=>t.start>e),0);n<this.buffers.length&&(i=Math.min(i,this.buffers[n].start-e));const r=e,s=await this.file.read(r,i),o=new lw(r,s);return this.addBuffer(o),o.slice(e,e+t)}{i.sort(((e,t)=>e.start-t.start));const n=[];let r=e;for(let e of i){if(r<e.start){const t=r,i=e.start-r,s=await this.file.read(t,i),o=new lw(t,s);n.push(o)}n.push(e),r=e.end}const s=e+t;if(s>r){const e=r,t=s-e,i=await this.file.read(e,t),o=new lw(e,i);n.push(o)}const o=n[0].start,a=function(e){const t=e.reduce(((e,t)=>e+t.byteLength),0),i=new Uint8Array(t);let n=0;for(let t of e)i.set(new Uint8Array(t),n),n+=t.byteLength;return i.buffer}(n.map((e=>e.buffer))),c=new lw(o,a),l=new Set(i);return this.buffers=this.buffers.filter((e=>!l.has(e))),this.addBuffer(c),c.slice(e,e+t)}}addBuffer(e){const t=this.buffers.reduce(((e,t)=>e+t.size),0)+e.size;if(t>this.maxSize){const e=t-this.maxSize;this.buffers.sort(((e,t)=>e.creationTime-t.creationTime));let i,n=0;for(i=0;i<this.buffers.length&&(n+=this.buffers[i].size,!(n>e));i++);this.buffers=i<this.buffers.length-1?this.buffers.slice(i):[]}e.size<=this.maxSize&&this.buffers.push(e)}}class lw{constructor(e,t){this.creationTime=Date.now(),this.start=e,this.buffer=t}slice(e,t){if(e<this.start||t-e>this.buffer.byteLength)throw Error("buffer bounds error");return this.buffer.slice(e-this.start,t-this.start)}get end(){return this.start+this.buffer.byteLength}get size(){return this.buffer.byteLength}contains(e,t){return e>=this.start&&t<=this.end}overlaps(e,t){return e>this.start&&e<this.end||t>this.start&&t<this.end}toString(){return`Buffer ${this.creationTime}   ${this.start} - ${this.end}`}}class hw{constructor(e){this.file=e}async read(e,t){if(0===t)return new ArrayBuffer;return(null!=e&&t?this.file.slice(e,e+t):this.file).arrayBuffer()}}var dw=Object.defineProperty,uw=(e,t,i)=>(((e,t,i)=>{t in e?dw(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i})(e,"symbol"!=typeof t?t+"":t,i),i);async function fw(e,t,i=0){var n=new Map;for(let[r,s]of e.entries()){let e=await vw.unpack_from_async("<"+s,t,i);i+=vw.calcsize(s),1==e.length&&(e=e[0]),n.set(r,e)}return n}function pw(e,t,i=0){var n=new Map;for(let[r,s]of e.entries()){let e=vw.unpack_from("<"+s,t,i);i+=vw.calcsize(s),1==e.length&&(e=e[0]),n.set(r,e)}return n}function gw(e){e||e()}function mw(e){var t="<"+Array.from(e.values()).join("");return vw.calcsize(t)}function ww(e,t=8){return Math.ceil(e/t)*t}var bw={u:"Uint",i:"Int",f:"Float"};function Fw(e){var t,i,n=vw._is_big_endian(e);if(/S/.test(e))t="getString",i=0|((e.match(/S(\d*)/)||[])[1]||1);else{let[n,r,s]=e.match(/[<>=!@]?(i|u|f)(\d*)/);i=parseInt(s||4,10),t="get"+bw[r]+(8*i).toFixed()}return[t,n,i]}var vw=new class{constructor(){this.big_endian=function(){const e=new Uint8Array(4);return!((new Uint32Array(e.buffer)[0]=1)&e[0])}(),this.getters={s:"getUint8",b:"getInt8",B:"getUint8",h:"getInt16",H:"getUint16",i:"getInt32",I:"getUint32",l:"getInt32",L:"getUint32",q:"getInt64",Q:"getUint64",f:"getFloat32",d:"getFloat64"},this.byte_lengths={s:1,b:1,B:1,h:2,H:2,i:4,I:4,l:4,L:4,q:8,Q:8,f:4,d:8};let e=Object.keys(this.byte_lengths).join("");this.fmt_size_regex="(\\d*)(["+e+"])"}calcsize(e){for(var t,i=0,n=new RegExp(this.fmt_size_regex,"g");null!==(t=n.exec(e));){let e=parseInt(t[1]||1,10),n=t[2];i+=e*this.byte_lengths[n]}return i}_is_big_endian(e){return!/^</.test(e)&&(!!/^(!|>)/.test(e)||this.big_endian)}async unpack_from_async(e,t,i){i=Number.parseInt(i||0);const n=this.calcsize(e),r=await t.slice(i,i+n);let s=0;for(var o,a=new yw(r),c=[],l=this._is_big_endian(e),h=new RegExp(this.fmt_size_regex,"g");null!==(o=h.exec(e));){let e=parseInt(o[1]||1,10),t=o[2],i=this.getters[t],n=this.byte_lengths[t];if("s"==t)c.push((new TextDecoder).decode(r.slice(s,s+e))),s+=e;else for(var d=0;d<e;d++)c.push(a[i](s,!l)),s+=n}return c}unpack_from(e,t,i){i=Number.parseInt(i||0);const n=this.calcsize(e),r=t.slice(i,i+n);let s=0;for(var o,a=new yw(r),c=[],l=this._is_big_endian(e),h=new RegExp(this.fmt_size_regex,"g");null!==(o=h.exec(e));){let e=parseInt(o[1]||1,10),t=o[2],i=this.getters[t],n=this.byte_lengths[t];if("s"==t)c.push((new TextDecoder).decode(r.slice(s,s+e))),s+=e;else for(var d=0;d<e;d++)c.push(a[i](s,!l)),s+=n}return c}};var yw=class extends DataView{getUint64(e,t){const i=BigInt(this.getUint32(e,t)),n=BigInt(this.getUint32(e+4,t));let r=t?i+(n<<32n):(i<<32n)+n;return Number.parseInt(r)}getInt64(e,t){var i,n;t?(i=this.getUint32(e,!0),n=this.getInt32(e+4,!0)):(n=this.getInt32(e,!1),i=this.getUint32(e+4,!1));let r=BigInt(i)+(BigInt(n)<<32n);return Number.parseInt(r)}getString(e,t,i){const n=this.buffer.slice(e,e+i);return(new TextDecoder).decode(n)}getVLENStruct(e,t,i){return[this.getUint32(e,t),this.getUint64(e+4,t),this.getUint32(e+12,t)]}};function Aw(e){return e.toString(2).length}function Cw(e,t,i=0,n=!0){const r=t.slice(i,i+e);let s=new Uint8Array(r);n||s.reverse();let o=s.reduce(((e,t,i)=>e+(t<<8*i)),0);return o}var _w=class{constructor(e,t){this.buf=e,this.offset=t,this.dtype=this.determine_dtype()}async determine_dtype(){let e=await fw(xw,this.buf,this.offset);this.offset+=kw;let t=15&e.get("class_and_version");if(t==Iw)return this._determine_dtype_fixed_point(e);if(t==Sw)return this._determine_dtype_floating_point(e);if(t==Ew)throw"Time datatype class not supported.";if(t==Nw)return this._determine_dtype_string(e);if(t==Bw)throw"Bitfield datatype class not supported.";if(t==Mw)return{datatype_class:Mw,size:e.get("size")};if(t==Rw)return this._determine_dtype_compound(e);if(t==Dw)return["REFERENCE",e.get("size")];if(t==Tw)return this.determine_dtype();if(t==zw)throw"Array datatype class not supported.";if(t==Lw){let t=this._determine_dtype_vlen(e);if("VLEN_SEQUENCE"==t[0]){t=["VLEN_SEQUENCE",this.determine_dtype()]}return t}throw"Invalid datatype class "+t}_determine_dtype_fixed_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var i;var n;return i=(8&e.get("class_bit_field_0"))>0?"i":"u",n=0==(1&e.get("class_bit_field_0"))?"<":">",this.offset+=4,n+i+t.toFixed()}_determine_dtype_floating_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var i;return i=0==(1&e.get("class_bit_field_0"))?"<":">",this.offset+=12,i+"f"+t.toFixed()}_determine_dtype_string(e){return"S"+e.get("size").toFixed()}_determine_dtype_vlen(e){return 1!=(1&e.get("class_bit_field_0"))?["VLEN_SEQUENCE",0,0]:["VLEN_STRING",e.get("class_bit_field_0")>>4,1&e.get("class_bit_field_1")]}_determine_dtype_compound(e){throw"Compound type not yet implemented!"}},xw=new Map([["class_and_version","B"],["class_bit_field_0","B"],["class_bit_field_1","B"],["class_bit_field_2","B"],["size","I"]]),kw=mw(xw);mw(new Map([["offset","I"],["dimensionality","B"],["reserved_0","B"],["reserved_1","B"],["reserved_2","B"],["permutation","I"],["reserved_3","I"],["dim_size_1","I"],["dim_size_2","I"],["dim_size_3","I"],["dim_size_4","I"]]));var Iw=0,Sw=1,Ew=2,Nw=3,Bw=4,Mw=5,Rw=6,Dw=7,Tw=8,Lw=9,zw=10;function Hw(e){let t=e.length;for(;--t>=0;)e[t]=0}Hw(new Array(576)),Hw(new Array(60)),Hw(new Array(512)),Hw(new Array(256)),Hw(new Array(29)),Hw(new Array(30));var Pw=(e,t,i,n)=>{let r=65535&e,s=e>>>16&65535,o=0;for(;0!==i;){o=i>2e3?2e3:i,i-=o;do{r=r+t[n++]|0,s=s+r|0}while(--o);r%=65521,s%=65521}return r|s<<16},Ow=new Uint32Array((()=>{let e,t=[];for(var i=0;i<256;i++){e=i;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[i]=e}return t})()),Uw=(e,t,i,n)=>{const r=Ow,s=n+i;e^=-1;for(let i=n;i<s;i++)e=e>>>8^r[255&(e^t[i])];return~e},qw={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Qw={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},Vw=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),jw={assign:function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const i=t.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(const t in i)Vw(i,t)&&(e[t]=i[t])}}return e},flattenChunks:e=>{let t=0;for(let i=0,n=e.length;i<n;i++)t+=e[i].length;const i=new Uint8Array(t);for(let t=0,n=0,r=e.length;t<r;t++){let r=e[t];i.set(r,n),n+=r.length}return i}},Ww=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(EA){Ww=!1}var Gw=new Uint8Array(256);for(let NA=0;NA<256;NA++)Gw[NA]=NA>=252?6:NA>=248?5:NA>=240?4:NA>=224?3:NA>=192?2:1;Gw[254]=Gw[254]=1;var $w={string2buf:e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,i,n,r,s,o=e.length,a=0;for(r=0;r<o;r++)i=e.charCodeAt(r),55296==(64512&i)&&r+1<o&&(n=e.charCodeAt(r+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),r++)),a+=i<128?1:i<2048?2:i<65536?3:4;for(t=new Uint8Array(a),s=0,r=0;s<a;r++)i=e.charCodeAt(r),55296==(64512&i)&&r+1<o&&(n=e.charCodeAt(r+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),r++)),i<128?t[s++]=i:i<2048?(t[s++]=192|i>>>6,t[s++]=128|63&i):i<65536?(t[s++]=224|i>>>12,t[s++]=128|i>>>6&63,t[s++]=128|63&i):(t[s++]=240|i>>>18,t[s++]=128|i>>>12&63,t[s++]=128|i>>>6&63,t[s++]=128|63&i);return t},buf2string:(e,t)=>{const i=t||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));let n,r;const s=new Array(2*i);for(r=0,n=0;n<i;){let t=e[n++];if(t<128){s[r++]=t;continue}let o=Gw[t];if(o>4)s[r++]=65533,n+=o-1;else{for(t&=2===o?31:3===o?15:7;o>1&&n<i;)t=t<<6|63&e[n++],o--;o>1?s[r++]=65533:t<65536?s[r++]=t:(t-=65536,s[r++]=55296|t>>10&1023,s[r++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&Ww)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let i="";for(let n=0;n<t;n++)i+=String.fromCharCode(e[n]);return i})(s,r)},utf8border:(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let i=t-1;for(;i>=0&&128==(192&e[i]);)i--;return i<0||0===i?t:i+Gw[e[i]]>t?i:t}};var Kw=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0},Yw=function(e,t){let i,n,r,s,o,a,c,l,h,d,u,f,p,g,m,w,b,F,v,y,A,C,_,x;const k=e.state;i=e.next_in,_=e.input,n=i+(e.avail_in-5),r=e.next_out,x=e.output,s=r-(t-e.avail_out),o=r+(e.avail_out-257),a=k.dmax,c=k.wsize,l=k.whave,h=k.wnext,d=k.window,u=k.hold,f=k.bits,p=k.lencode,g=k.distcode,m=(1<<k.lenbits)-1,w=(1<<k.distbits)-1;e:do{f<15&&(u+=_[i++]<<f,f+=8,u+=_[i++]<<f,f+=8),b=p[u&m];t:for(;;){if(F=b>>>24,u>>>=F,f-=F,F=b>>>16&255,0===F)x[r++]=65535&b;else{if(!(16&F)){if(64&F){if(32&F){k.mode=12;break e}e.msg="invalid literal/length code",k.mode=30;break e}b=p[(65535&b)+(u&(1<<F)-1)];continue t}for(v=65535&b,F&=15,F&&(f<F&&(u+=_[i++]<<f,f+=8),v+=u&(1<<F)-1,u>>>=F,f-=F),f<15&&(u+=_[i++]<<f,f+=8,u+=_[i++]<<f,f+=8),b=g[u&w];;){if(F=b>>>24,u>>>=F,f-=F,F=b>>>16&255,16&F){if(y=65535&b,F&=15,f<F&&(u+=_[i++]<<f,f+=8,f<F&&(u+=_[i++]<<f,f+=8)),y+=u&(1<<F)-1,y>a){e.msg="invalid distance too far back",k.mode=30;break e}if(u>>>=F,f-=F,F=r-s,y>F){if(F=y-F,F>l&&k.sane){e.msg="invalid distance too far back",k.mode=30;break e}if(A=0,C=d,0===h){if(A+=c-F,F<v){v-=F;do{x[r++]=d[A++]}while(--F);A=r-y,C=x}}else if(h<F){if(A+=c+h-F,F-=h,F<v){v-=F;do{x[r++]=d[A++]}while(--F);if(A=0,h<v){F=h,v-=F;do{x[r++]=d[A++]}while(--F);A=r-y,C=x}}}else if(A+=h-F,F<v){v-=F;do{x[r++]=d[A++]}while(--F);A=r-y,C=x}for(;v>2;)x[r++]=C[A++],x[r++]=C[A++],x[r++]=C[A++],v-=3;v&&(x[r++]=C[A++],v>1&&(x[r++]=C[A++]))}else{A=r-y;do{x[r++]=x[A++],x[r++]=x[A++],x[r++]=x[A++],v-=3}while(v>2);v&&(x[r++]=x[A++],v>1&&(x[r++]=x[A++]))}break}if(64&F){e.msg="invalid distance code",k.mode=30;break e}b=g[(65535&b)+(u&(1<<F)-1)]}}break}}while(i<n&&r<o);v=f>>3,i-=v,f-=v<<3,u&=(1<<f)-1,e.next_in=i,e.next_out=r,e.avail_in=i<n?n-i+5:5-(i-n),e.avail_out=r<o?o-r+257:257-(r-o),k.hold=u,k.bits=f},Xw=15,Zw=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Jw=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),eb=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),tb=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),ib=(e,t,i,n,r,s,o,a)=>{const c=a.bits;let l,h,d,u,f,p,g=0,m=0,w=0,b=0,F=0,v=0,y=0,A=0,C=0,_=0,x=null,k=0;const I=new Uint16Array(16),S=new Uint16Array(16);let E,N,B,M=null,R=0;for(g=0;g<=Xw;g++)I[g]=0;for(m=0;m<n;m++)I[t[i+m]]++;for(F=c,b=Xw;b>=1&&0===I[b];b--);if(F>b&&(F=b),0===b)return r[s++]=20971520,r[s++]=20971520,a.bits=1,0;for(w=1;w<b&&0===I[w];w++);for(F<w&&(F=w),A=1,g=1;g<=Xw;g++)if(A<<=1,A-=I[g],A<0)return-1;if(A>0&&(0===e||1!==b))return-1;for(S[1]=0,g=1;g<Xw;g++)S[g+1]=S[g]+I[g];for(m=0;m<n;m++)0!==t[i+m]&&(o[S[t[i+m]]++]=m);if(0===e?(x=M=o,p=19):1===e?(x=Zw,k-=257,M=Jw,R-=257,p=256):(x=eb,M=tb,p=-1),_=0,m=0,g=w,f=s,v=F,y=0,d=-1,C=1<<F,u=C-1,1===e&&C>852||2===e&&C>592)return 1;for(;;){E=g-y,o[m]<p?(N=0,B=o[m]):o[m]>p?(N=M[R+o[m]],B=x[k+o[m]]):(N=96,B=0),l=1<<g-y,h=1<<v,w=h;do{h-=l,r[f+(_>>y)+h]=E<<24|N<<16|B}while(0!==h);for(l=1<<g-1;_&l;)l>>=1;if(0!==l?(_&=l-1,_+=l):_=0,m++,0==--I[g]){if(g===b)break;g=t[i+o[m]]}if(g>F&&(_&u)!==d){for(0===y&&(y=F),f+=w,v=g-y,A=1<<v;v+y<b&&(A-=I[v+y],!(A<=0));)v++,A<<=1;if(C+=1<<v,1===e&&C>852||2===e&&C>592)return 1;d=_&u,r[d]=F<<24|v<<16|f-s}}return 0!==_&&(r[f+_]=g-y<<24|64<<16),a.bits=F,0},{Z_FINISH:nb,Z_BLOCK:rb,Z_TREES:sb,Z_OK:ob,Z_STREAM_END:ab,Z_NEED_DICT:cb,Z_STREAM_ERROR:lb,Z_DATA_ERROR:hb,Z_MEM_ERROR:db,Z_BUF_ERROR:ub,Z_DEFLATED:fb}=Qw,pb=12,gb=30,mb=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function wb(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}var bb,Fb,vb=e=>{if(!e||!e.state)return lb;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,ob},yb=e=>{if(!e||!e.state)return lb;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,vb(e)},Ab=(e,t)=>{let i;if(!e||!e.state)return lb;const n=e.state;return t<0?(i=0,t=-t):(i=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?lb:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=i,n.wbits=t,yb(e))},Cb=(e,t)=>{if(!e)return lb;const i=new wb;e.state=i,i.window=null;const n=Ab(e,t);return n!==ob&&(e.state=null),n},_b=!0,xb=e=>{if(_b){bb=new Int32Array(512),Fb=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(ib(1,e.lens,0,288,bb,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;ib(2,e.lens,0,32,Fb,0,e.work,{bits:5}),_b=!1}e.lencode=bb,e.lenbits=9,e.distcode=Fb,e.distbits=5},kb=(e,t,i,n)=>{let r;const s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),n>=s.wsize?(s.window.set(t.subarray(i-s.wsize,i),0),s.wnext=0,s.whave=s.wsize):(r=s.wsize-s.wnext,r>n&&(r=n),s.window.set(t.subarray(i-n,i-n+r),s.wnext),(n-=r)?(s.window.set(t.subarray(i-n,i),0),s.wnext=n,s.whave=s.wsize):(s.wnext+=r,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=r))),0},Ib=(e,t)=>{let i,n,r,s,o,a,c,l,h,d,u,f,p,g,m,w,b,F,v,y,A,C,_=0;const x=new Uint8Array(4);let k,I;const S=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return lb;i=e.state,i.mode===pb&&(i.mode=13),o=e.next_out,r=e.output,c=e.avail_out,s=e.next_in,n=e.input,a=e.avail_in,l=i.hold,h=i.bits,d=a,u=c,C=ob;e:for(;;)switch(i.mode){case 1:if(0===i.wrap){i.mode=13;break}for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(2&i.wrap&&35615===l){i.check=0,x[0]=255&l,x[1]=l>>>8&255,i.check=Uw(i.check,x,2,0),l=0,h=0,i.mode=2;break}if(i.flags=0,i.head&&(i.head.done=!1),!(1&i.wrap)||(((255&l)<<8)+(l>>8))%31){e.msg="incorrect header check",i.mode=gb;break}if((15&l)!==fb){e.msg="unknown compression method",i.mode=gb;break}if(l>>>=4,h-=4,A=8+(15&l),0===i.wbits)i.wbits=A;else if(A>i.wbits){e.msg="invalid window size",i.mode=gb;break}i.dmax=1<<i.wbits,e.adler=i.check=1,i.mode=512&l?10:pb,l=0,h=0;break;case 2:for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(i.flags=l,(255&i.flags)!==fb){e.msg="unknown compression method",i.mode=gb;break}if(57344&i.flags){e.msg="unknown header flags set",i.mode=gb;break}i.head&&(i.head.text=l>>8&1),512&i.flags&&(x[0]=255&l,x[1]=l>>>8&255,i.check=Uw(i.check,x,2,0)),l=0,h=0,i.mode=3;case 3:for(;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.head&&(i.head.time=l),512&i.flags&&(x[0]=255&l,x[1]=l>>>8&255,x[2]=l>>>16&255,x[3]=l>>>24&255,i.check=Uw(i.check,x,4,0)),l=0,h=0,i.mode=4;case 4:for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.head&&(i.head.xflags=255&l,i.head.os=l>>8),512&i.flags&&(x[0]=255&l,x[1]=l>>>8&255,i.check=Uw(i.check,x,2,0)),l=0,h=0,i.mode=5;case 5:if(1024&i.flags){for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.length=l,i.head&&(i.head.extra_len=l),512&i.flags&&(x[0]=255&l,x[1]=l>>>8&255,i.check=Uw(i.check,x,2,0)),l=0,h=0}else i.head&&(i.head.extra=null);i.mode=6;case 6:if(1024&i.flags&&(f=i.length,f>a&&(f=a),f&&(i.head&&(A=i.head.extra_len-i.length,i.head.extra||(i.head.extra=new Uint8Array(i.head.extra_len)),i.head.extra.set(n.subarray(s,s+f),A)),512&i.flags&&(i.check=Uw(i.check,n,f,s)),a-=f,s+=f,i.length-=f),i.length))break e;i.length=0,i.mode=7;case 7:if(2048&i.flags){if(0===a)break e;f=0;do{A=n[s+f++],i.head&&A&&i.length<65536&&(i.head.name+=String.fromCharCode(A))}while(A&&f<a);if(512&i.flags&&(i.check=Uw(i.check,n,f,s)),a-=f,s+=f,A)break e}else i.head&&(i.head.name=null);i.length=0,i.mode=8;case 8:if(4096&i.flags){if(0===a)break e;f=0;do{A=n[s+f++],i.head&&A&&i.length<65536&&(i.head.comment+=String.fromCharCode(A))}while(A&&f<a);if(512&i.flags&&(i.check=Uw(i.check,n,f,s)),a-=f,s+=f,A)break e}else i.head&&(i.head.comment=null);i.mode=9;case 9:if(512&i.flags){for(;h<16;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(l!==(65535&i.check)){e.msg="header crc mismatch",i.mode=gb;break}l=0,h=0}i.head&&(i.head.hcrc=i.flags>>9&1,i.head.done=!0),e.adler=i.check=0,i.mode=pb;break;case 10:for(;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}e.adler=i.check=mb(l),l=0,h=0,i.mode=11;case 11:if(0===i.havedict)return e.next_out=o,e.avail_out=c,e.next_in=s,e.avail_in=a,i.hold=l,i.bits=h,cb;e.adler=i.check=1,i.mode=pb;case pb:if(t===rb||t===sb)break e;case 13:if(i.last){l>>>=7&h,h-=7&h,i.mode=27;break}for(;h<3;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}switch(i.last=1&l,l>>>=1,h-=1,3&l){case 0:i.mode=14;break;case 1:if(xb(i),i.mode=20,t===sb){l>>>=2,h-=2;break e}break;case 2:i.mode=17;break;case 3:e.msg="invalid block type",i.mode=gb}l>>>=2,h-=2;break;case 14:for(l>>>=7&h,h-=7&h;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if((65535&l)!=(l>>>16^65535)){e.msg="invalid stored block lengths",i.mode=gb;break}if(i.length=65535&l,l=0,h=0,i.mode=15,t===sb)break e;case 15:i.mode=16;case 16:if(f=i.length,f){if(f>a&&(f=a),f>c&&(f=c),0===f)break e;r.set(n.subarray(s,s+f),o),a-=f,s+=f,c-=f,o+=f,i.length-=f;break}i.mode=pb;break;case 17:for(;h<14;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(i.nlen=257+(31&l),l>>>=5,h-=5,i.ndist=1+(31&l),l>>>=5,h-=5,i.ncode=4+(15&l),l>>>=4,h-=4,i.nlen>286||i.ndist>30){e.msg="too many length or distance symbols",i.mode=gb;break}i.have=0,i.mode=18;case 18:for(;i.have<i.ncode;){for(;h<3;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.lens[S[i.have++]]=7&l,l>>>=3,h-=3}for(;i.have<19;)i.lens[S[i.have++]]=0;if(i.lencode=i.lendyn,i.lenbits=7,k={bits:i.lenbits},C=ib(0,i.lens,0,19,i.lencode,0,i.work,k),i.lenbits=k.bits,C){e.msg="invalid code lengths set",i.mode=gb;break}i.have=0,i.mode=19;case 19:for(;i.have<i.nlen+i.ndist;){for(;_=i.lencode[l&(1<<i.lenbits)-1],m=_>>>24,w=_>>>16&255,b=65535&_,!(m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(b<16)l>>>=m,h-=m,i.lens[i.have++]=b;else{if(16===b){for(I=m+2;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(l>>>=m,h-=m,0===i.have){e.msg="invalid bit length repeat",i.mode=gb;break}A=i.lens[i.have-1],f=3+(3&l),l>>>=2,h-=2}else if(17===b){for(I=m+3;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=m,h-=m,A=0,f=3+(7&l),l>>>=3,h-=3}else{for(I=m+7;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=m,h-=m,A=0,f=11+(127&l),l>>>=7,h-=7}if(i.have+f>i.nlen+i.ndist){e.msg="invalid bit length repeat",i.mode=gb;break}for(;f--;)i.lens[i.have++]=A}}if(i.mode===gb)break;if(0===i.lens[256]){e.msg="invalid code -- missing end-of-block",i.mode=gb;break}if(i.lenbits=9,k={bits:i.lenbits},C=ib(1,i.lens,0,i.nlen,i.lencode,0,i.work,k),i.lenbits=k.bits,C){e.msg="invalid literal/lengths set",i.mode=gb;break}if(i.distbits=6,i.distcode=i.distdyn,k={bits:i.distbits},C=ib(2,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,k),i.distbits=k.bits,C){e.msg="invalid distances set",i.mode=gb;break}if(i.mode=20,t===sb)break e;case 20:i.mode=21;case 21:if(a>=6&&c>=258){e.next_out=o,e.avail_out=c,e.next_in=s,e.avail_in=a,i.hold=l,i.bits=h,Yw(e,u),o=e.next_out,r=e.output,c=e.avail_out,s=e.next_in,n=e.input,a=e.avail_in,l=i.hold,h=i.bits,i.mode===pb&&(i.back=-1);break}for(i.back=0;_=i.lencode[l&(1<<i.lenbits)-1],m=_>>>24,w=_>>>16&255,b=65535&_,!(m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(w&&!(240&w)){for(F=m,v=w,y=b;_=i.lencode[y+((l&(1<<F+v)-1)>>F)],m=_>>>24,w=_>>>16&255,b=65535&_,!(F+m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=F,h-=F,i.back+=F}if(l>>>=m,h-=m,i.back+=m,i.length=b,0===w){i.mode=26;break}if(32&w){i.back=-1,i.mode=pb;break}if(64&w){e.msg="invalid literal/length code",i.mode=gb;break}i.extra=15&w,i.mode=22;case 22:if(i.extra){for(I=i.extra;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.length+=l&(1<<i.extra)-1,l>>>=i.extra,h-=i.extra,i.back+=i.extra}i.was=i.length,i.mode=23;case 23:for(;_=i.distcode[l&(1<<i.distbits)-1],m=_>>>24,w=_>>>16&255,b=65535&_,!(m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(!(240&w)){for(F=m,v=w,y=b;_=i.distcode[y+((l&(1<<F+v)-1)>>F)],m=_>>>24,w=_>>>16&255,b=65535&_,!(F+m<=h);){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}l>>>=F,h-=F,i.back+=F}if(l>>>=m,h-=m,i.back+=m,64&w){e.msg="invalid distance code",i.mode=gb;break}i.offset=b,i.extra=15&w,i.mode=24;case 24:if(i.extra){for(I=i.extra;h<I;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}i.offset+=l&(1<<i.extra)-1,l>>>=i.extra,h-=i.extra,i.back+=i.extra}if(i.offset>i.dmax){e.msg="invalid distance too far back",i.mode=gb;break}i.mode=25;case 25:if(0===c)break e;if(f=u-c,i.offset>f){if(f=i.offset-f,f>i.whave&&i.sane){e.msg="invalid distance too far back",i.mode=gb;break}f>i.wnext?(f-=i.wnext,p=i.wsize-f):p=i.wnext-f,f>i.length&&(f=i.length),g=i.window}else g=r,p=o-i.offset,f=i.length;f>c&&(f=c),c-=f,i.length-=f;do{r[o++]=g[p++]}while(--f);0===i.length&&(i.mode=21);break;case 26:if(0===c)break e;r[o++]=i.length,c--,i.mode=21;break;case 27:if(i.wrap){for(;h<32;){if(0===a)break e;a--,l|=n[s++]<<h,h+=8}if(u-=c,e.total_out+=u,i.total+=u,u&&(e.adler=i.check=i.flags?Uw(i.check,r,u,o-u):Pw(i.check,r,u,o-u)),u=c,(i.flags?l:mb(l))!==i.check){e.msg="incorrect data check",i.mode=gb;break}l=0,h=0}i.mode=28;case 28:if(i.wrap&&i.flags){for(;h<32;){if(0===a)break e;a--,l+=n[s++]<<h,h+=8}if(l!==(4294967295&i.total)){e.msg="incorrect length check",i.mode=gb;break}l=0,h=0}i.mode=29;case 29:C=ab;break e;case gb:C=hb;break e;case 31:return db;default:return lb}return e.next_out=o,e.avail_out=c,e.next_in=s,e.avail_in=a,i.hold=l,i.bits=h,(i.wsize||u!==e.avail_out&&i.mode<gb&&(i.mode<27||t!==nb))&&kb(e,e.output,e.next_out,u-e.avail_out),d-=e.avail_in,u-=e.avail_out,e.total_in+=d,e.total_out+=u,i.total+=u,i.wrap&&u&&(e.adler=i.check=i.flags?Uw(i.check,r,u,e.next_out-u):Pw(i.check,r,u,e.next_out-u)),e.data_type=i.bits+(i.last?64:0)+(i.mode===pb?128:0)+(20===i.mode||15===i.mode?256:0),(0===d&&0===u||t===nb)&&C===ob&&(C=ub),C},Sb={inflateReset:yb,inflateReset2:Ab,inflateResetKeep:vb,inflateInit:e=>Cb(e,15),inflateInit2:Cb,inflate:Ib,inflateEnd:e=>{if(!e||!e.state)return lb;let t=e.state;return t.window&&(t.window=null),e.state=null,ob},inflateGetHeader:(e,t)=>{if(!e||!e.state)return lb;const i=e.state;return 2&i.wrap?(i.head=t,t.done=!1,ob):lb},inflateSetDictionary:(e,t)=>{const i=t.length;let n,r,s;return e&&e.state?(n=e.state,0!==n.wrap&&11!==n.mode?lb:11===n.mode&&(r=1,r=Pw(r,t,i,0),r!==n.check)?hb:(s=kb(e,t,i,i),s?(n.mode=31,db):(n.havedict=1,ob))):lb},inflateInfo:"pako inflate (from Nodeca project)"};var Eb=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},Nb=Object.prototype.toString,{Z_NO_FLUSH:Bb,Z_FINISH:Mb,Z_OK:Rb,Z_STREAM_END:Db,Z_NEED_DICT:Tb,Z_STREAM_ERROR:Lb,Z_DATA_ERROR:zb,Z_MEM_ERROR:Hb}=Qw;function Pb(e){this.options=jw.assign({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Kw,this.strm.avail_out=0;let i=Sb.inflateInit2(this.strm,t.windowBits);if(i!==Rb)throw new Error(qw[i]);if(this.header=new Eb,Sb.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=$w.string2buf(t.dictionary):"[object ArrayBuffer]"===Nb.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(i=Sb.inflateSetDictionary(this.strm,t.dictionary),i!==Rb)))throw new Error(qw[i])}function Ob(e,t){const i=new Pb(t);if(i.push(e),i.err)throw i.msg||qw[i.err];return i.result}Pb.prototype.push=function(e,t){const i=this.strm,n=this.options.chunkSize,r=this.options.dictionary;let s,o,a;if(this.ended)return!1;for(o=t===~~t?t:!0===t?Mb:Bb,"[object ArrayBuffer]"===Nb.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;;){for(0===i.avail_out&&(i.output=new Uint8Array(n),i.next_out=0,i.avail_out=n),s=Sb.inflate(i,o),s===Tb&&r&&(s=Sb.inflateSetDictionary(i,r),s===Rb?s=Sb.inflate(i,o):s===zb&&(s=Tb));i.avail_in>0&&s===Db&&i.state.wrap>0&&0!==e[i.next_in];)Sb.inflateReset(i),s=Sb.inflate(i,o);switch(s){case Lb:case zb:case Tb:case Hb:return this.onEnd(s),this.ended=!0,!1}if(a=i.avail_out,i.next_out&&(0===i.avail_out||s===Db))if("string"===this.options.to){let e=$w.utf8border(i.output,i.next_out),t=i.next_out-e,r=$w.buf2string(i.output,e);i.next_out=t,i.avail_out=n-t,t&&i.output.set(i.output.subarray(e,e+t),0),this.onData(r)}else this.onData(i.output.length===i.next_out?i.output:i.output.subarray(0,i.next_out));if(s!==Rb||0!==a){if(s===Db)return s=Sb.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===i.avail_in)break}}return!0},Pb.prototype.onData=function(e){this.chunks.push(e)},Pb.prototype.onEnd=function(e){e===Rb&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=jw.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Ub=function(e,t){return(t=t||{}).raw=!0,Ob(e,t)},qb={Inflate:Pb,inflate:Ob,inflateRaw:Ub,ungzip:Ob,constants:Qw},{Inflate:Qb,inflate:Vb,inflateRaw:jb,ungzip:Wb}=qb,Gb=Vb,$b=Wb;var Kb=new Map([[1,function(e,t){let i=new Uint8Array(e);return Gb(i).buffer}],[2,function(e,t){let i=e.byteLength,n=new Uint8Array(i),r=Math.floor(i/t),s=new DataView(e);for(var o=0;o<t;o++)for(var a=0;a<r;a++)n[o+a*t]=s.getUint8(o*r+a);return n.buffer}],[3,function(e,t){return function(e){for(var t=e.byteLength%2!=0,i=e.byteLength-4,n=new DataView(e),r=0,s=0,o=0;o<i-1;o+=2){s=(s+(r=(r+n.getUint16(o,!0))%65535))%65535}if(t){s=(s+(r=(r+n.getUint8(i-1))%65535))%65535}var[a,c]=vw.unpack_from(">HH",e,i);if(c%=65535,r!=(a%=65535)||s!=c)throw'ValueError("fletcher32 checksum invalid")'}(e),e.slice(0,-4)}]]),Yb=class{constructor(e,t){this.fh=e,this.offset=t,this.depth=null}async init(){this.all_nodes=new Map,await this._read_root_node(),await this._read_children()}async _read_children(){let e=this.depth;for(;e>0;){for(var t of this.all_nodes.get(e))for(var i of t.get("addresses"))this._add_node(await this._read_node(i,e-1));e--}}async _read_root_node(){let e=await this._read_node(this.offset,null);this._add_node(e),this.depth=e.get("node_level")}_add_node(e){let t=e.get("node_level");this.all_nodes.has(t)?this.all_nodes.get(t).push(e):this.all_nodes.set(t,[e])}async _read_node(e,t){let i=await this._read_node_header(e,t);return i.set("keys",[]),i.set("addresses",[]),i}async _read_node_header(e){throw"NotImplementedError: must define _read_node_header in implementation class"}},Xb=class extends Yb{constructor(){super(...arguments),uw(this,"B_LINK_NODE",new Map([["signature","4s"],["node_type","B"],["node_level","B"],["entries_used","H"],["left_sibling","Q"],["right_sibling","Q"]]))}async _read_node_header(e,t){let i=await fw(this.B_LINK_NODE,this.fh,e);if(null!=t&&i.get("node_level")!=t)throw"node level does not match";return i}},Zb=class extends Xb{constructor(e,t){super(e,t),uw(this,"NODE_TYPE",0),this.ready=this.init()}async _read_node(e,t){let i=await this._read_node_header(e,t);e+=mw(this.B_LINK_NODE);let n=[],r=[],s=i.get("entries_used");for(var o=0;o<s;o++){let t=(await vw.unpack_from_async("<Q",this.fh,e))[0];e+=8;let i=(await vw.unpack_from_async("<Q",this.fh,e))[0];e+=8,n.push(t),r.push(i)}return n.push((await vw.unpack_from_async("<Q",this.fh,e))[0]),i.set("keys",n),i.set("addresses",r),i}symbol_table_addresses(){var e=[],t=this.all_nodes.get(0);for(var i of t)e=e.concat(i.get("addresses"));return e}},Jb=class extends Xb{constructor(e,t,i){super(e,t),uw(this,"NODE_TYPE",1),this.dims=i,this.ready=this.init()}async _read_node(e,t){let i=await this._read_node_header(e,t);e+=mw(this.B_LINK_NODE);var n=[],r=[];let s=i.get("entries_used");for(var o=0;o<s;o++){let[t,i]=await vw.unpack_from_async("<II",this.fh,e);e+=8;let s="<"+this.dims.toFixed()+"Q",o=vw.calcsize(s),a=await vw.unpack_from_async(s,this.fh,e);e+=o;let c=(await vw.unpack_from_async("<Q",this.fh,e))[0];e+=8,n.push(new Map([["chunk_size",t],["filter_mask",i],["chunk_offset",a]])),r.push(c)}return i.set("keys",n),i.set("addresses",r),i}async construct_data_from_chunks(e,t,i,n){var r,s,o;if(i instanceof Array){let e=i[0];if("REFERENCE"==e){if(8!=i[1])throw"NotImplementedError('Unsupported Reference type')";i="<u8",r="getUint64",s=!1,o=8}else{if("VLEN_STRING"!=e&&"VLEN_SEQUENCE"!=e)throw"NotImplementedError('datatype not implemented')";r="getVLENStruct",s=!1,o=16}}else[r,s,o]=Fw(i);var a=t.reduce((function(e,t){return e*t}),1),c=e.reduce((function(e,t){return e*t}),1);let l=t.length;var h=1;e.slice().map((function(e){let t=h;return h*=e,t}));h=1;var d=t.slice().reverse().map((function(e){let t=h;return h*=e,t})).reverse(),u=new Array(a);let f=c*o;for(var p of this.all_nodes.get(0)){let i=p.get("keys"),a=p.get("addresses"),h=i.length;for(var g=0;g<h;g++){let h=i[g],p=a[g];var m;if(null==n)m=await this.fh.slice(p,p+f);else{m=await this.fh.slice(p,p+h.get("chunk_size"));let e=h.get("filter_mask");m=this._filter_chunk(m,e,n,o)}for(var w=h.get("chunk_offset").slice(),b=w.slice(),F=b.map((function(){return 0})),v=new yw(m),y=0;y<c;y++){for(var A=l-1;A>=0&&F[A]>=e[A];A--)F[A]=0,b[A]=w[A],A>0&&(F[A-1]+=1,b[A-1]+=1);if(b.slice(0,-1).every((function(e,i){return e<t[i]}))){let e=y*o,t=v[r](e,!s,o),i=b.slice(0,-1).reduce((function(e,t,i){return t*d[i]+e}),0);u[i]=t}F[l-1]+=1,b[l-1]+=1}}}return u}_filter_chunk(e,t,i,n){let r=i.length,s=e.slice();for(var o=r-1;o>=0;o--){if(t&1<<o)continue;let e=i[o],r=e.get("filter_id"),a=e.get("client_data");if(!Kb.has(r))throw'NotImplementedError("Filter with id:'+r.toFixed()+' not supported")';s=Kb.get(r)(s,n,a)}return s}},eF=class extends Yb{constructor(e,t){super(e,t),uw(this,"B_TREE_HEADER",new Map([["signature","4s"],["version","B"],["node_type","B"],["node_size","I"],["record_size","H"],["depth","H"],["split_percent","B"],["merge_percent","B"],["root_address","Q"],["root_nrecords","H"],["total_nrecords","Q"]])),uw(this,"B_LINK_NODE",new Map([["signature","4s"],["version","B"],["node_type","B"]])),this.ready=this.init()}async _read_root_node(){let e=await this._read_tree_header(this.offset);this.address_formats=this._calculate_address_formats(e),this.header=e,this.depth=e.get("depth");let t=[e.get("root_address"),e.get("root_nrecords"),e.get("total_nrecords")],i=await this._read_node(t,this.depth);this._add_node(i)}async _read_tree_header(e){return await fw(this.B_TREE_HEADER,this.fh,this.offset)}_calculate_address_formats(e){let t=e.get("node_size"),i=e.get("record_size"),n=0,r=0,s=new Map,o=e.get("depth");for(var a=0;a<=o;a++){let e,c,l,h="",d="",u="";if(0==a?(e=0,c=0,l=0):1==a?(e=8,h="<Q",c=this._required_bytes(n),d=this._int_format(c),l=0):(e=8,h="<Q",c=this._required_bytes(n),d=this._int_format(c),l=this._required_bytes(r),u=this._int_format(l)),s.set(a,[e,c,l,h,d,u]),a<o){let s=e+c+l;n=this._nrecords_max(t,i,s),r>0?r*=n:r=n}}return s}_nrecords_max(e,t,i){return Math.floor((e-10-i)/(t+i))}_required_bytes(e){return Math.ceil(Aw(e)/8)}_int_format(e){return["<B","<H","<I","<Q"][e-1]}async _read_node(e,t){let[i,n,r]=e,s=this._read_node_header(i,t);i+=mw(this.B_LINK_NODE);let o=this.header.get("record_size"),a=[];for(let e=0;e<n;e++){let e=await this._parse_record(this.fh,i,o);i+=o,a.push(e)}let c=[],l=this.address_formats.get(t);if(0!=t){let[e,t,r,s,o,a]=l;for(let l=0;l<=n;l++){let n=(await vw.unpack_from_async(s,this.fh,i))[0];i+=e;let l=(await vw.unpack_from_async(o,this.fh,i))[0];i+=t;let h=l;r>0&&(h=(await vw.unpack_from_async(a,this.fh,i))[0],i+=r),c.push([n,l,h])}}return s.set("keys",a),s.set("addresses",c),s}async _read_node_header(e,t){let i=await fw(this.B_LINK_NODE,this.fh,e);return i.set("node_level",t),i}*iter_records(){for(let e of this.all_nodes.values())for(let t of e)for(let e of t.get("keys"))yield e}_parse_record(e){throw"NotImplementedError"}},tF=class extends eF{constructor(){super(...arguments),uw(this,"NODE_TYPE",5)}async _parse_record(e,t,i){let n=(await vw.unpack_from_async("<I",e,t))[0];t+=4;const r=await e.slice(t,t+7);return new Map([["namehash",n],["heapid",r]])}},iF=class extends eF{constructor(){super(...arguments),uw(this,"NODE_TYPE",6)}async _parse_record(e,t,i){let n=(await vw.unpack_from_async("<Q",e,t))[0];t+=8;const r=await e.slice(t,t+7);return new Map([["creationorder",n],["heapid",r]])}},nF=class{constructor(e,t){this.ready=this.init(e,t)}async init(e,t){let i=await vw.unpack_from_async("<B",e,t+8);var n;if(0==i)n=await fw(hF,e,t),this._end_of_sblock=t+dF;else{if(2!=i&&3!=i)throw"unsupported superblock version: "+i.toFixed();n=await fw(uF,e,t),this._end_of_sblock=t+fF}if(n.get("format_signature")!=cF)throw"Incorrect file signature: "+n.get("format_signature");if(8!=n.get("offset_size")||8!=n.get("length_size"))throw"File uses non-64-bit addressing";this.version=n.get("superblock_version"),this._contents=n,this._root_symbol_table=null,this._fh=e}async get_offset_to_dataobjects(){if(0==this.version){var e=new sF(this._fh,this._end_of_sblock,!0);return await e.ready,this._root_symbol_table=e,e.group_offset}if(2==this.version||3==this.version)return this._contents.get("root_group_address");throw"Not implemented version = "+this.version.toFixed()}},rF=class{constructor(e,t){this.ready=this.init(e,t)}async init(e,t){let i=await fw(bF,e,t);gw("HEAP"==i.get("signature")),gw(0==i.get("version"));let n=i.get("address_of_data_segment"),r=await e.slice(n,n+i.get("data_segment_size"));i.set("heap_data",r),this._contents=i,this.data=r}get_object_name(e){let t=new Uint8Array(this.data).indexOf(0,e)-e;return vw.unpack_from("<"+t.toFixed()+"s",this.data,e)[0]}},sF=class{constructor(e,t,i=!1){this.ready=this.init(e,t,i)}async init(e,t,i){var n;if(i)n=new Map([["symbols",1]]);else{if("SNOD"!=(n=await fw(mF,e,t)).get("signature"))throw"incorrect node type";t+=wF}for(var r=[],s=n.get("symbols"),o=0;o<s;o++)r.push(await fw(pF,e,t)),t+=gF;return i&&(this.group_offset=r[0].get("object_header_address")),this.entries=r,this._contents=n,this}assign_name(e){this.entries.forEach((function(t){let i=t.get("link_name_offset"),n=e.get_object_name(i);t.set("link_name",n)}))}get_links(e){var t={};return this.entries.forEach((function(i){let n=i.get("cache_type"),r=i.get("link_name");if(0==n||1==n)t[r]=i.get("object_header_address");else if(2==n){let n=i.get("scratch"),o=new ArrayBuffer(4),a=new Uint8Array(o);for(var s=0;s<4;s++)a[s]=n.charCodeAt(s);let c=vw.unpack_from("<I",o,0)[0];t[r]=e.get_object_name(c)}})),t}},oF=class{constructor(e,t){this.ready=this.init(e,t)}async init(e,t){let i=await fw(FF,e,t);t+=vF;let n=i.get("collection_size")-vF,r=await e.slice(t,t+n);this.heap_data=r,this._header=i,this._objects=null}get objects(){if(null==this._objects){this._objects=new Map;for(var e=0;e<=this.heap_data.byteLength-AF;){let t=pw(yF,this.heap_data,e);if(0==t.get("object_index"))break;e+=AF;let i=this.heap_data.slice(e,e+t.get("object_size"));this._objects.set(t.get("object_index"),i),e+=ww(t.get("object_size"))}}return this._objects}},aF=class{constructor(e,t){this.fh=e,this.ready=this.init(t)}async init(e){let t=await fw(CF,this.fh,e);if(e+=mw(CF),gw("FRHP"==t.get("signature")),gw(0==t.get("version")),t.get("filter_info_size")>0)throw"Filter info size not supported on FractalHeap";if(t.get("btree_address_huge_objects")!=lF)throw"Huge objects not implemented in FractalHeap";t.set("btree_address_huge_objects",null),t.get("root_block_address")==lF&&t.set("root_block_address",null);let i=t.get("log2_maximum_heap_size"),n=this._min_size_nbits(i),r=new Map([["signature","4s"],["version","B"],["heap_header_adddress","Q"],["block_offset",`${n}B`]]);this.indirect_block_header=new Map(r),this.indirect_block_header_size=mw(r),2&~t.get("flags")||r.set("checksum","I"),this.direct_block_header=r,this.direct_block_header_size=mw(r);let s=t.get("maximum_direct_block_size");this._managed_object_offset_size=this._min_size_nbits(i);let o=Math.min(s,t.get("max_managed_object_size"));this._managed_object_length_size=this._min_size_integer(o);let a=t.get("starting_block_size"),c=t.get("table_width");if(!(a>0))throw"Starting block size == 0 not implemented";let l=Number(Math.floor(Math.log2(s)));gw(1n<<BigInt(l)==s);let h=Number(Math.floor(Math.log2(a)));gw(1n<<BigInt(h)==a),this._max_direct_nrows=l-h+2;let d=Math.floor(Math.log2(c));gw(1<<d==c),this._indirect_nrows_sub=d+h-1,this.header=t,this.nobjects=t.get("managed_object_count")+t.get("huge_object_count")+t.get("tiny_object_count");let u=[],f=t.get("root_block_address"),p=0;if(null!=f&&(p=t.get("indirect_current_rows_count")),p>0)for await(let e of this._iter_indirect_block(this.fh,f,p))u.push(e);else{let e=await this._read_direct_block(this.fh,f,a);u.push(e)}let g=u.reduce(((e,t)=>e+t.byteLength),0),m=new Uint8Array(g),w=0;u.forEach((e=>{m.set(new Uint8Array(e),w),w+=e.byteLength})),this.managed=m.buffer}async _read_direct_block(e,t,i){let n=await e.slice(t,t+i);return gw("FHDB"==pw(this.direct_block_header,n).get("signature")),n}get_data(e){let t=vw.unpack_from("<B",e,0)[0],i=t>>4&3,n=1;if(0==i){gw(0==t>>6);let i=this._managed_object_offset_size,r=Cw(i,e,n);n+=i,i=this._managed_object_length_size;let s=Cw(i,e,n);return this.managed.slice(r,r+s)}throw 1==i?"tiny objectID not supported in FractalHeap":2==i?"huge objectID not supported in FractalHeap":"unknown objectID type in FractalHeap"}_min_size_integer(e){return this._min_size_nbits(Aw(e))}_min_size_nbits(e){return Math.ceil(e/8)}async*_iter_indirect_block(e,t,i){let n=await fw(this.indirect_block_header,e,t);t+=this.indirect_block_header_size,gw("FHIB"==n.get("signature"));let r=n.get("block_offset").reduce(((e,t,i)=>e+(t<<8*i)),0);n.set("block_offset",r);let[s,o]=this._indirect_info(i),a=[];for(let i=0;i<s;i++){let n=(await vw.unpack_from_async("<Q",e,t))[0];if(t+=8,n==lF)break;let r=this._calc_block_size(i);a.push([n,r])}let c=[];for(let i=s;i<s+o;i++){let n=(await vw.unpack_from_async("<Q",e,t))[0];if(t+=8,n==lF)break;let r=this._calc_block_size(i),s=this._iblock_nrows_from_block_size(r);c.push([n,s])}for(let[t,i]of a){let n=await this._read_direct_block(e,t,i);yield n}for(let[t,i]of c)for await(let n of this._iter_indirect_block(e,t,i))yield n}_calc_block_size(e){let t=Math.floor(e/this.header.get("table_width"));return 2**Math.max(t-1,0)*this.header.get("starting_block_size")}_iblock_nrows_from_block_size(e){let t=Math.floor(Math.log2(e));return gw(2**t==e),t-this._indirect_nrows_sub}_indirect_info(e){let t,i,n=this.header.get("table_width"),r=e*n,s=this._max_direct_nrows*n;return e<=s?(t=r,i=0):(t=s,i=r-s),[t,i]}_int_format(e){return["B","H","I","Q"][e-1]}},cF=vw.unpack_from("8s",new Uint8Array([137,72,68,70,13,10,26,10]).buffer)[0],lF=vw.unpack_from("<Q",new Uint8Array([255,255,255,255,255,255,255,255]).buffer)[0],hF=new Map([["format_signature","8s"],["superblock_version","B"],["free_storage_version","B"],["root_group_version","B"],["reserved_0","B"],["shared_header_version","B"],["offset_size","B"],["length_size","B"],["reserved_1","B"],["group_leaf_node_k","H"],["group_internal_node_k","H"],["file_consistency_flags","L"],["base_address_lower","Q"],["free_space_address","Q"],["end_of_file_address","Q"],["driver_information_address","Q"]]),dF=mw(hF),uF=new Map([["format_signature","8s"],["superblock_version","B"],["offset_size","B"],["length_size","B"],["file_consistency_flags","B"],["base_address","Q"],["superblock_extension_address","Q"],["end_of_file_address","Q"],["root_group_address","Q"],["superblock_checksum","I"]]),fF=mw(uF),pF=new Map([["link_name_offset","Q"],["object_header_address","Q"],["cache_type","I"],["reserved","I"],["scratch","16s"]]),gF=mw(pF),mF=new Map([["signature","4s"],["version","B"],["reserved_0","B"],["symbols","H"]]),wF=mw(mF),bF=new Map([["signature","4s"],["version","B"],["reserved","3s"],["data_segment_size","Q"],["offset_to_free_list","Q"],["address_of_data_segment","Q"]]),FF=new Map([["signature","4s"],["version","B"],["reserved","3s"],["collection_size","Q"]]),vF=mw(FF),yF=new Map([["object_index","H"],["reference_count","H"],["reserved","I"],["object_size","Q"]]),AF=mw(yF),CF=new Map([["signature","4s"],["version","B"],["object_index_size","H"],["filter_info_size","H"],["flags","B"],["max_managed_object_size","I"],["next_huge_object_index","Q"],["btree_address_huge_objects","Q"],["managed_freespace_size","Q"],["freespace_manager_address","Q"],["managed_space_size","Q"],["managed_alloc_size","Q"],["next_directblock_iterator_address","Q"],["managed_object_count","Q"],["huge_objects_total_size","Q"],["huge_object_count","Q"],["tiny_objects_total_size","Q"],["tiny_object_count","Q"],["table_width","H"],["starting_block_size","Q"],["maximum_direct_block_size","Q"],["log2_maximum_heap_size","H"],["indirect_starting_rows_count","H"],["root_block_address","Q"],["indirect_current_rows_count","H"]]),_F=class{constructor(e,t){this.ready=this.init(e,t)}async init(e,t){let i=(await vw.unpack_from_async("<B",e,t))[0];if(1==i)var[n,r,s]=await this._parse_v1_objects(e,t);else{if(i!="O".charCodeAt(0))throw"InvalidHDF5File('unknown Data Object Header')";var[n,r,s]=await this._parse_v2_objects(e,t)}this.fh=e,this.msgs=n,this.msg_data=r,this.offset=t,this._global_heaps={},this._header=s,this._filter_pipeline=null,this._chunk_params_set=!1,this._chunks=null,this._chunk_dims=null,this._chunk_address=null}get dtype(){let e=this.find_msg_type(ZF)[0].get("offset_to_message");return new _w(this.fh,e).dtype}get chunks(){return this._get_chunk_params().then((()=>this._chunks))}get shape(){let e=this.find_msg_type(YF)[0].get("offset_to_message");return async function(e,t){let i=(await vw.unpack_from_async("<B",e,t))[0];var n;if(1==i)gw(1==(n=await fw(RF,e,t)).get("version")),t+=DF;else{if(2!=i)throw"InvalidHDF5File('unknown dataspace message version')";gw(2==(n=await fw(TF,e,t)).get("version")),t+=LF}let r=n.get("dimensionality");return(await vw.unpack_from_async("<"+(2*r).toFixed()+"I",e,t)).filter((function(e,t){return t%2==0}))}(this.fh,e)}async get_filter_pipeline(){if(null!=this._filter_pipeline)return this._filter_pipeline;let e=this.find_msg_type(iv);if(!e.length)return this._filter_pipeline=null,this._filter_pipeline;var t=e[0].get("offset_to_message");let[i,n]=await vw.unpack_from_async("<BB",this.fh,t);t+=vw.calcsize("<BB");var r=[];if(1==i){await vw.unpack_from_async("<HI",this.fh,t),t+=vw.calcsize("<HI");for(var s=0;s<n;s++){let e=await fw($F,this.fh,t);t+=KF;let i=ww(e.get("name_length"),8),n="<"+i.toFixed()+"s",s=(await vw.unpack_from_async(n,this.fh,t))[0];e.set("filter_name",s),t+=i,n="<"+e.get("client_data_values").toFixed()+"I";let o=await vw.unpack_from_async(n,this.fh,t);e.set("client_data",o),t+=4*e.get("client_data_values"),e.get("client_data_values")%2&&(t+=4),r.push(e)}}else{if(2!=i)throw`version ${i} is not supported`;for(let e=0;e<n;e++){let e=new Map,i=this.fh,n=(await vw.unpack_from_async("<H",i,t))[0];t+=2,e.set("filter_id",n);let s=0;n>255&&(s=(await vw.unpack_from_async("<H",i,t))[0],t+=2);let o=(await vw.unpack_from_async("<H",i,t))[0];t+=2;let a=(1&o)>0;e.set("optional",a);let c,l=(await vw.unpack_from_async("<H",i,t))[0];t+=2,s>0&&(c=(await vw.unpack_from_async(`${s}s`,i,t))[0],t+=s),e.set("name",c);let h=await vw.unpack_from_async(`<${l}i`,i,t);t+=4*l,e.set("client_data_values",h),r.push(e)}}return this._filter_pipeline=r,this._filter_pipeline}find_msg_type(e){return this.msgs.filter((function(t){return t.get("type")==e}))}async get_attributes(){let e={},t=this.find_msg_type(nv);for(let i of t){let t=i.get("offset_to_message"),[n,r]=await this.unpack_attribute(t);e[n]=r}return e}async get_fillvalue(){var e,t=this.find_msg_type(JF)[0].get("offset_to_message");let i=(await vw.unpack_from_async("<B",this.fh,t))[0];var n,r,s;if(1==i||2==i)n=await fw(VF,this.fh,t),t+=jF,e=n.get("fillvalue_defined");else{if(3!=i)throw'InvalidHDF5File("Unknown fillvalue msg version: "'+String(i);n=await fw(WF,this.fh,t),t+=GF,e=32&n.get("flags")}if(e?(r=(await vw.unpack_from_async("<I",this.fh,t))[0],t+=4):r=0,r){let[e,i,n]=Fw(await this.dtype);s=new yw(await this.fh.slice(t,t+n))[e](t,!i,n)}else s=0;return s}async unpack_attribute(e){let t=(await vw.unpack_from_async("<B",this.fh,e))[0];var i,n;if(1==t)gw(1==(i=await fw(IF,this.fh,e)).get("version")),e+=SF,n=8;else{if(3!=t)throw"unsupported attribute message version: "+t;gw(3==(i=await fw(EF,this.fh,e)).get("version")),e+=NF,n=1}let r=i.get("name_size"),s=(await vw.unpack_from_async("<"+r.toFixed()+"s",this.fh,e))[0];var o;s=s.replace(/\x00$/,""),e+=ww(r,n);try{o=await new _w(this.fh,e).dtype}catch(e){return console.warn("Attribute "+s+" type not implemented, set to null."),[s,null]}e+=ww(i.get("datatype_size"),n);let a=await this.determine_data_shape(this.fh,e),c=a.reduce((function(e,t){return e*t}),1);if(e+=ww(i.get("dataspace_size"),n),5===o.datatype_class)l=await this.fh.slice(e,e+o.size);else{var l=await this._attr_value(o,this.fh,c,e);0==a.length&&(l=l[0])}return[s,l]}async determine_data_shape(e,t){let i=(await vw.unpack_from_async("<B",e,t))[0];var n;if(1==i)gw(1==(n=await fw(RF,e,t)).get("version")),t+=DF;else{if(2!=i)throw"unknown dataspace message version";gw(2==(n=await fw(TF,e,t)).get("version")),t+=LF}let r=n.get("dimensionality");return await vw.unpack_from_async("<"+r.toFixed()+"Q",e,t)}async _attr_value(e,t,i,n){var r=new Array(i);if(e instanceof Array){let l=e[0];for(var s=0;s<i;s++)if("VLEN_STRING"==l){let i=e[2];var[o,a]=await this._vlen_size_and_data(t,n);const c=new TextDecoder(0==i?"ascii":"utf-8");r[s]=c.decode(a),n+=16}else if("REFERENCE"==l){var c=await vw.unpack_from_async("<Q",t,n);r[s]=c,n+=8}else{if("VLEN_SEQUENCE"!=l)throw"NotImplementedError";{let i=e[1];var[o,a]=this._vlen_size_and_data(t,n);r[s]=this._attr_value(i,a,o,0),n+=16}}}else{let[o,a,c]=Fw(e);const l=await t.slice(n,n+i*c);let h=new yw(l,0),d=0;for(s=0;s<i;s++)r[s]=h[o](d,!a,c),d+=c}return r}async _vlen_size_and_data(e,t){let i=(await vw.unpack_from_async("<I",e,t))[0],n=await fw(kF,e,t+4),r=n.get("collection_address");var s;return gw(n.get("collection_address")<Number.MAX_SAFE_INTEGER),r in this._global_heaps||(s=new oF(this.fh,r),await s.ready,this._global_heaps[r]=s),[i,(s=this._global_heaps[r]).objects.get(n.get("object_index"))]}async _parse_v1_objects(e,t){let i=await fw(BF,e,t);gw(1==i.get("version"));let n=i.get("total_header_messages");for(var r=i.get("object_header_size"),s=t+mw(BF),o=await e.slice(s,s+r),a=[[s,r]],c=0,l=0,h=new Array(n),d=0;d<n;d++){l>=r&&([s,r]=a[++c],l=0);let t=await fw(zF,e,s+l),i=s+l+HF;if(t.set("offset_to_message",i),t.get("type")==rv){var[u,f]=await vw.unpack_from_async("<QQ",e,i);a.push([u,f])}l+=HF+t.get("size"),h[d]=t}return[h,o,i]}async _parse_v2_objects(e,t){var[i,n,r]=await this._parse_v2_header(e,t);t=r;for(var s=[],o=i.get("size_of_chunk_0"),a=e.slice(t,t+=o),c=[[r,o]],l=0,h=0;;){if(h>=o-OF){let e=c[++l];if(null==e)break;[r,o]=e,h=0}let t=await fw(PF,e,r+h),i=r+h+OF+n;if(t.set("offset_to_message",i),t.get("type")==rv){var[d,u]=await vw.unpack_from_async("<QQ",e,i);c.push([d+4,u-4])}h+=OF+t.get("size")+n,s.push(t)}return[s,a,i]}async _parse_v2_header(e,t){let i=await fw(MF,e,t);var n;if(t+=mw(MF),gw(2==i.get("version")),n=4&i.get("flags")?2:0,gw(!(16&i.get("flags"))),32&i.get("flags")){let n=await vw.unpack_from_async("<4I",e,t);t+=16,i.set("access_time",n[0]),i.set("modification_time",n[1]),i.set("change_time",n[2]),i.set("birth_time",n[3])}let r=["<B","<H","<I","<Q"][3&i.get("flags")];return i.set("size_of_chunk_0",(await vw.unpack_from_async(r,e,t))[0]),[i,n,t+=vw.calcsize(r)]}async find_link(e){if(this._links){for(link of this._links)if(e===link[0])return link}else{const t=[];for await(const i of this.iter_links()){if(e===i[0])return i;t.push(i)}this._links=t}}async get_links(){const e=[];for await(const t of this.iter_links())e.push(t);return Object.fromEntries(e)}async*iter_links(){for(let e of this.msgs)e.get("type")==sv?yield*this._iter_links_from_symbol_tables(e):e.get("type")==ev?yield this._get_link_from_link_msg(e):e.get("type")==XF&&(yield*this._iter_link_from_link_info_msg(e))}async*_iter_links_from_symbol_tables(e){gw(16==e.get("size"));let t=await fw(UF,this.fh,e.get("offset_to_message"));yield*this._iter_links_btree_v1(t.get("btree_address"),t.get("heap_address"))}async*_iter_links_btree_v1(e,t){let i=new Zb(this.fh,e);await i.ready;let n=new rF(this.fh,t);await n.ready;for(let e of i.symbol_table_addresses()){let t=new sF(this.fh,e);await t.ready,t.assign_name(n),yield*Object.entries(t.get_links(n))}}async _get_link_from_link_msg(e){let t=e.get("offset_to_message");return await this._decode_link_msg(this.fh,t)[1]}async _decode_link_msg(e,t){let[i,n]=await vw.unpack_from_async("<BB",e,t);t+=2,gw(1==i);let r,s,o=2**(3&n),a=(16&n)>0,c=(4&n)>0;(8&n)>0?(r=(await vw.unpack_from_async("<B",e,t))[0],t+=1):r=0,gw([0,1].includes(r)),c&&(s=(await vw.unpack_from_async("<Q",e,t))[0],t+=8);let l=0;a&&(l=(await vw.unpack_from_async("<B",e,t))[0],t+=1);let h=0==l?"ascii":"utf-8",d=["<B","<H","<I","<Q"][3&n],u=(await vw.unpack_from_async(d,e,t))[0];t+=o;let f,p=new TextDecoder(h).decode(await e.slice(t,t+u));if(t+=u,0==r)f=(await vw.unpack_from_async("<Q",e,t))[0];else if(1==r){let i=(await vw.unpack_from_async("<H",e,t))[0];t+=2,f=new TextDecoder(h).decode(await e.slice(t,t+i))}return[s,[p,f]]}async*_iter_link_from_link_info_msg(e){let t=e.get("offset_to_message"),i=await this._decode_link_info_msg(this.fh,t),n=i.get("heap_address"),r=i.get("name_btree_address"),s=i.get("order_btree_address");null!=r&&(yield*this._iter_links_btree_v2(r,s,n))}async*_iter_links_btree_v2(e,t,i){let n,r=new aF(this.fh,i);await r.ready;const s=null!=t;s?(n=new iF(this.fh,t),await n.ready):(n=new tF(this.fh,e),await n.ready);let o=new Map;for(let e of n.iter_records()){let t=r.get_data(e.get("heapid")),[i,n]=await this._decode_link_msg(t,0);const a=s?i:n[0];o.set(a,n)}let a=Array.from(o.keys()).sort();for(let e of a)yield o.get(e)}async _decode_link_info_msg(e,t){let[i,n]=await vw.unpack_from_async("<BB",e,t);gw(0==i),t+=2,(1&n)>0&&(t+=8);let r=(2&n)>0?QF:qF,s=await fw(r,e,t),o=new Map;for(let[e,t]of s.entries())o.set(e,t==xF?null:t);return o}get is_dataset(){return this.find_msg_type(YF).length>0}async get_data(){let e=this.find_msg_type(tv)[0].get("offset_to_message");var[t,i,n,r]=await this._get_data_message_properties(e);if(0==n)throw"Compact storage of DataObject not implemented";return 1==n?this._get_contiguous_data(r):2==n?this._get_chunked_data(e):void 0}async _get_data_message_properties(e){let t,i,n,[r,s,o]=await vw.unpack_from_async("<BBB",this.fh,e);return 1==r||2==r?(t=s,i=o,n=e,n+=vw.calcsize("<BBB"),n+=vw.calcsize("<BI"),gw(1==i||2==i)):3!=r&&4!=r||(i=s,n=e,n+=vw.calcsize("<BB")),gw(r>=1&&r<=4),[r,t,i,n]}async _get_contiguous_data(e){let[t]=await vw.unpack_from_async("<Q",this.fh,e);const i=await this.shape,n=await this.dtype;if(t==xF){let e=i.reduce((function(e,t){return e*t}),1);return new Array(e)}var r=i.reduce((function(e,t){return e*t}),1);if(n instanceof Array){let e=n[0];if("REFERENCE"==e){if(8!=n[1])throw"NotImplementedError('Unsupported Reference type')";return await this.fh.slice(t,t+r)}if("VLEN_STRING"==e){let e=n[2];const i=new TextDecoder(0==e?"ascii":"utf-8");var s=[];for(o=0;o<r;o++){const[e,n]=await this._vlen_size_and_data(this.fh,t);s[o]=i.decode(n),t+=16}return s}throw"NotImplementedError('datatype not implemented')"}if(/[<>=!@\|]?(i|u|f|S)(\d*)/.test(n)){let[e,i,s]=Fw(n),a=new Array(r);const c=await this.fh.slice(t,t+s*r);let l=new yw(c);for(var o=0;o<r;o++)a[o]=l[e](o*s,!i,s);return a}if(5===n.datatype_class)return this.fh.slice(t,t+n.size);throw"not Implemented - no proper dtype defined"}async _get_chunked_data(e){if(await this._get_chunk_params(),this._chunk_address==xF)return[];var t=new Jb(this.fh,this._chunk_address,this._chunk_dims);await t.ready;const i=await this.dtype,n=await this.shape,r=await this.chunks,s=await this.get_filter_pipeline();let o=await t.construct_data_from_chunks(r,n,i,s);if(i instanceof Array&&/^VLEN/.test(i[0])){let e=i[0];for(var a=0;a<o.length;a++){let[t,n,r]=o[a];var c;n in this._global_heaps?c=this._global_heaps[n]:(c=new oF(this.fh,n),await c.ready,this._global_heaps[n]=c);let s=c.objects.get(r);if("VLEN_STRING"==e){let e=i[2];const t=new TextDecoder(0==e?"ascii":"utf-8");o[a]=t.decode(s)}}}return o}async _get_chunk_params(){if(!this._chunk_params_set){this._chunk_params_set=!0;var e=this.find_msg_type(tv)[0].get("offset_to_message"),[t,i,n,r]=await this._get_data_message_properties(e);if(2==n){var s;if(1==t||2==t){var o=(await vw.unpack_from_async("<Q",this.fh,r))[0];s=r+vw.calcsize("<Q")}else if(3==t){var[i,o]=await vw.unpack_from_async("<BQ",this.fh,r);s=r+vw.calcsize("<BQ")}gw(t>=1&&t<=3);var a="<"+(i-1).toFixed()+"I",c=await vw.unpack_from_async(a,this.fh,s);this._chunks=c,this._chunk_dims=i,this._chunk_address=o}}}};var xF=vw.unpack_from("<Q",new Uint8Array([255,255,255,255,255,255,255,255]).buffer),kF=new Map([["collection_address","Q"],["object_index","I"]]);mw(kF);var IF=new Map([["version","B"],["reserved","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"]]),SF=mw(IF),EF=new Map([["version","B"],["flags","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"],["character_set_encoding","B"]]),NF=mw(EF),BF=new Map([["version","B"],["reserved","B"],["total_header_messages","H"],["object_reference_count","I"],["object_header_size","I"],["padding","I"]]),MF=new Map([["signature","4s"],["version","B"],["flags","B"]]),RF=new Map([["version","B"],["dimensionality","B"],["flags","B"],["reserved_0","B"],["reserved_1","I"]]),DF=mw(RF),TF=new Map([["version","B"],["dimensionality","B"],["flags","B"],["type","B"]]),LF=mw(TF),zF=new Map([["type","H"],["size","H"],["flags","B"],["reserved","3s"]]),HF=mw(zF),PF=new Map([["type","B"],["size","H"],["flags","B"]]),OF=mw(PF),UF=new Map([["btree_address","Q"],["heap_address","Q"]]),qF=new Map([["heap_address","Q"],["name_btree_address","Q"]]),QF=new Map([["heap_address","Q"],["name_btree_address","Q"],["order_btree_address","Q"]]),VF=new Map([["version","B"],["space_allocation_time","B"],["fillvalue_write_time","B"],["fillvalue_defined","B"]]),jF=mw(VF),WF=new Map([["version","B"],["flags","B"]]),GF=mw(WF),$F=new Map([["filter_id","H"],["name_length","H"],["flags","H"],["client_data_values","H"]]),KF=mw($F),YF=1,XF=2,ZF=3,JF=5,ev=6,tv=8,iv=11,nv=12,rv=16,sv=17,ov=class{constructor(e,t){null==t?(this.parent=this,this.file=this):(this.parent=t,this.file=t.file),this.name=e}async init(e){const t=this.file.index;t&&this.name in t?this._links=t[this.name]:this._links=await e.get_links(),this._dataobjects=e,this._attrs=null,this._keys=null}get keys(){return null==this._keys&&(this._keys=Object.keys(this._links)),this._keys.slice()}get values(){return this.keys.map((e=>this.get(e)))}length(){return this.keys.length}_dereference(e){if(!e)throw"cannot deference null reference";let t=this.file._get_object_by_address(e);if(null==t)throw"reference not found in file";return t}async get(e){if("number"==typeof e)return this._dereference(e);var t=lv(e);if("/"==t)return this.file;if("."==t)return this;if(/^\//.test(t))return this.file.get(t.slice(1));if(""!=function(e){let t="/",i=e.lastIndexOf(t)+1,n=e.slice(0,i),r=new RegExp("^"+t+"+$"),s=new RegExp(t+"$");n&&!r.test(n)&&(n=n.replace(s,""));return n}(t))var[i,n]=t.split(/\/(.*)/);else var i=t,n=".";if(!(i in this._links))throw i+" not found in group";var r=lv(this.name+"/"+i);let s=this._links[i];if("string"==typeof s)try{return this.get(s)}catch(e){return null}var o=new _F(this.file._fh,s);if(await o.ready,o.is_dataset){if("."!=n)throw r+" is a dataset, not a group";return new cv(r,o,this)}var a=new ov(r,this);return await a.init(o),a.get(n)}visit(e){return this.visititems(((t,i)=>e(t)))}visititems(e){var t=this.name.length;/\/$/.test(this.name)||(t+=1);for(var i=this.values.slice();i;){let n=i.shift();1==i.length&&console.log(n);let r=e(n.name.slice(t),n);if(null!=r)return r;n instanceof ov&&(i=i.concat(n.values))}return null}get attrs(){return null==this._attrs&&(this._attrs=this._dataobjects.get_attributes()),this._attrs}},av=class extends ov{constructor(e,t,i){super("/",null),this.ready=this.init(e,t,i)}async init(e,t,i){var n=new nF(e,0);await n.ready;var r=await n.get_offset_to_dataobjects(),s=new _F(e,r);if(await s.ready,this.parent=this,this.file=this,this.name="/",this._dataobjects=s,this._attrs=null,this._keys=null,this._fh=e,this.filename=t||"",this.mode="r",this.userblock_size=0,i&&i.index)this.index=i.index;else{let t;if(i&&i.indexOffset)t=i.indexOffset;else{const e=await this.attrs;if(e.hasOwnProperty("_index_offset"))t=e._index_offset;else{const e=this.indexName||"_index",i=await s.find_link(e);i&&(t=i[1])}}if(t)try{const i=new _F(e,t);await i.ready;const n=await i.get_data(),r=$b(n),s=(new TextDecoder).decode(r);this.index=JSON.parse(s)}catch(e){console.error(`Error loading index by offset ${e}`)}}this.index&&this.name in this.index?this._links=this.index[this.name]:this._links=await s.get_links()}_get_object_by_address(e){return this._dataobjects.offset==e?this:this.visititems((e=>{e._dataobjects.offset}))}},cv=class extends Array{constructor(e,t,i){super(),this.parent=i,this.file=i.file,this.name=e,this._dataobjects=t,this._attrs=null,this._astype=null}get value(){var e=this._dataobjects.get_data();return null==this._astype?this.getValue(e):e.astype(this._astype)}get shape(){return this._dataobjects.shape}get attrs(){return this._dataobjects.get_attributes()}get dtype(){return this._dataobjects.dtype}get fillvalue(){return this._dataobjects.get_fillvalue()}async to_array(){return function(e,t){const i=e.length,n=t.reduce(((e,t)=>e*t),1);i!==n&&console.warn(`shape product: ${n} does not match length of flattened array: ${i}`);let r=e;const s=t.slice(1).reverse();for(let e of s){const t=[],{length:i}=r;let n=0;for(;n<i;)t.push(r.slice(n,n+=e));r=t}return r}
/*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */(await this.value,await this.shape)}async getValue(e){const t=await this.dtype;return("string"==typeof t||t instanceof String)&&t.startsWith("S")?(await e).map((e=>{let t=e.indexOf("\0");return t>=0?e.substring(0,t):e})):e}};function lv(e){return e.replace(/\/(\/)+/g,"/")}async function hv(e){var t;e.url&&("function"==typeof(t=e.url).slice&&"function"==typeof t.arrayBuffer)&&(e.file=e.url,e.url=void 0);const i=void 0!==e.url;let n=e.reader?e.reader:function(e){if(e.url)return new aw(e);if(e.path)return new NodeLocalFile(e);if(e.file)return new hw(e.file);throw Error("One of 'url', 'path (node only)', or 'file (browser only)' must be specified")}(e);const r=e.fetchSize||2e3,s=e.maxSize||2e5;i&&(n=new cw({file:n,fetchSize:r,maxSize:s}));const o=new dv(n),a=await async function(e){let t;if(e.indexReader)t=e.indexReader;else{if(e.index)return e.index;e.indexURL?t=new aw({url:e.indexURL}):e.indexPath?t=new NodeLocalFile({path:e.indexPath}):e.indexFile&&(t=new hw({file:e.indexFile}))}if(t){const e=await t.read(),i=(new TextDecoder).decode(e);return JSON.parse(i)}return}(e),c=e.indexOffset,l=function(e){if(e.url)return uv(e.url);if(e.path)return uv(e.path);if(e.file)return e.file.name}(e),h=new av(o,l,{index:a,indexOffset:c});return await h.ready,h}class dv{constructor(e){this.fileReader=e}async slice(e,t){return this.fileReader.read(e,t-e)}}function uv(e){const t=e.lastIndexOf("/");return t>0?e.substring(t+1):e}class fv{constructor(e,t){this.chrom=e,this.signal_bin_size=t;this.signals={raw_RD:`his_rd_p_${this.chrom}_${this.signal_bin_size}`,gc_RD:`his_rd_p_${this.chrom}_${this.signal_bin_size}_GC`,gc_partition:`his_rd_p_${this.chrom}_${this.signal_bin_size}_partition_GC_merge`,baf:`snp_likelihood_${this.chrom}_${this.signal_bin_size}_mask`,baf_i1:`snp_i1_${this.chrom}_${this.signal_bin_size}_mask`,Mosaic_segments:`his_rd_p_${this.chrom}_${this.signal_bin_size}_partition_GC_mosaic_segments_2d`,Mosaic_calls:`his_rd_p_${this.chrom}_${this.signal_bin_size}_partition_GC_mosaic_call_2d`}}}class pv{constructor(e,t=1e5){this.h5_file=e,this.bin_size=t,this.h5_obj=void 0}async fetch(){return this.h5_obj||(this.h5_obj=await hv({url:this.h5_file,fetchSize:1e6,maxSize:2e8})),this.h5_obj}async get_keys(){return(await this.fetch()).keys}async get_rd_signal(e=this.bin_size){let t=await this.fetch();this.h5_obj=t,this.pytor_keys=t.keys;let i=new gv(this.pytor_keys),n=i.get_rd_bins(),r=i.get_snp_bins();this.available_bins=[...new Set(n,r)],this.available_bins.includes(e)||(e=this.available_bins.at(-1));const s=await t.get("rd_chromosomes");await s.dtype;let o=await s.value,a=await this.rd_stat(e);var c=[],l=[],h=[],d=[],u=[],f=[];for(let t of o){let i=new fv(t,e);var p=i.signals.raw_RD;let n=await this.get_chr_signal(t,e,p,a);c=c.concat(n);var g=i.signals.gc_RD;let r=await this.get_chr_signal(t,e,g,a);l=l.concat(r);let s=i.signals.gc_partition,o=await this.get_chr_signal(t,e,s,a);h=h.concat(o);let m=await this.rd_call_combined(t,e,a,i);d=d.concat(m);let w=i.signals.baf_i1,b=await this.get_baf_signals_v2(t,e,w);u=u.concat(b[0]),f=f.concat(b[1])}this.callers=[],0!=d.length&&this.callers.push("ReadDepth"),0!=d.length&&this.callers.push("2D");var m={},w={RD_Raw:c,RD_Raw_gc_coor:l,ReadDepth:h,"2D":d,BAF1:u,BAF2:f};return m[e]=w,m}decode_segments(e){let t=[],i=[];for(let n of e)4294967295==n?(t.push(i),i=[]):i.push(n);return t}async rd_call_combined(e,t,i,n){let r,s=[],o=n.signals.Mosaic_segments;if(this.pytor_keys.includes(o)){const e=await this.h5_obj.get(o);let t=await e.value;r=this.decode_segments(t)}let a=n.signals.Mosaic_calls;if(this.pytor_keys.includes(a)){const n=await this.h5_obj.get(a);let o=await n.to_array();r.forEach(((n,r)=>{n.forEach(((n,a)=>{s.push({chr:e,start:n*t,end:(n+1)*t,value:o[0][r]/i[4]*2})}))}))}return s}async rd_stat(e){let t,i=`rd_stat_${e}_auto`;if(this.pytor_keys.includes(i)){const e=await this.h5_obj.get(i);t=await e.value}return t}async get_chr_signal(e,t,i,n){let r=[];if(this.pytor_keys.includes(i)){const s=await this.h5_obj.get(i);(await s.value).forEach(((i,s)=>{r.push({chr:e,start:s*t,end:(s+1)*t,value:i/n[4]*2})}))}return r}async get_baf_signals(e,t,i,n=-1){let r=[],s=[];if(this.pytor_keys.includes(i)){let o=await this.h5_obj.get(i);(await o.to_array()).forEach(((i,o)=>{let a=Math.max(...i);const c=i.indexOf(a);let l=Math.max(c/200,1-c/200);r.push({chr:e,start:o*t,end:(o+1)*t,value:n*l}),.5!=l&&s.push({chr:e,start:o*t,end:(o+1)*t,value:n*(1-l)})}))}return[r,s]}async get_baf_signals_v2(e,t,i,n=-1){let r=[],s=[];if(this.pytor_keys.includes(i)){let o=await this.h5_obj.get(i);(await o.to_array()).forEach(((i,o)=>{isNaN(i)||(r.push({chr:e,start:o*t,end:(o+1)*t,value:n*(.5-i)}),.5!=i&&s.push({chr:e,start:o*t,end:(o+1)*t,value:n*(.5+i)}))}))}return[r,s]}}class gv{constructor(e){this.signals=e}get_rd_bins(){let e=[];this.signals.forEach((t=>{let i=t.match(/^his_rd_p_(.*)_(\d+)$/);i&&e.push({chr:i[1],bin_size:i[2]})}));return[...new Set(e.map((e=>Number(e.bin_size))))]}get_snp_bins(){let e=[];this.signals.forEach((t=>{let i=t.match(/^snp_likelihood_(.*)_(\d+)_mask$/);i&&e.push({chr:i[1],bin_size:i[2]})}));return[...new Set(e.map((e=>Number(e.bin_size))))]}}function mv(e){let t=function(e){if(e.length<4)return e;let t,i,n,r,s,o;return t=e.slice().sort(((e,t)=>e-t)),t.length/4%1==0?(i=.5*(t[t.length/4]+t[t.length/4+1]),n=.5*(t[t.length*(3/4)]+t[t.length*(3/4)+1])):(i=t[Math.floor(t.length/4+1)],n=t[Math.ceil(t.length*(3/4)+1)]),r=n-i,s=n+1.5*r,o=i-1.5*r,t.filter((e=>e>=o&&e<=s))}(e);const i=t.length,n=t.reduce(((e,t)=>e+t))/i,r=Math.sqrt(t.map((e=>Math.pow(e-n,2))).reduce(((e,t)=>e+t))/i);return[n,r]}var wv={range_function:function(e,t,i){return Array(Math.ceil((t-e)/i)).fill(e).map(((e,t)=>e+t*i))},getDistParams:mv,linspace:function(e,t,i){if(void 0===i&&(i=Math.max(Math.round(t-e)+1,1)),i<2)return 1===i?[e]:[];var n=Array(i);for(let r=--i;r>=0;r--)n[r]=(r*t+(i-r)*e)/i;return n},GetFit:class{constructor(e){this.allBins=e}getValues(){return Object.values(this.allBins).reduce(((e,t)=>e.concat(t.filter((e=>e.binScore>0)).map((e=>e.binScore)))),[])}getMean(e){return e.reduce((function(e,t){return e+t}))/e.length}fit_data(){return mv(this.getValues())}histogram(e,t){const i=t[1]-t[0],n=[];e.forEach(((e,r)=>{t.forEach(((t,r)=>{if(n[t]||(n[t]={count:0}),t<=e&&e<t+i)return n[t].count++,!1}))}));const r=[];return n.forEach(((e,t)=>{r.push(e.count)})),r}}};function bv(e,t){return isNaN(e)||isNaN(t)||t<=0?NaN:0===e?.5:.5+.5*(Fv(.5*t,.5,1)-Fv(.5*t,.5,t/(t+e*e)))*Math.sign(e)}function Fv(e,t,i){if(0==i)return 0;if(1==i)return 1;{let n=Cv(e+t)-Cv(e)-Cv(t)+e*Math.log(i)+t*Math.log(1-i);return i<(e+1)/(e+t+2)?Math.exp(n)*vv(e,t,i)/e:1-Math.exp(n)*vv(t,e,1-i)/t}}function vv(e,t,i,n=1e3){let r=1,s=1,o=1,a=e+t,c=e+1,l=e-1,h=1-a*i/c;for(let d=0;d<=n;d++){let n=parseFloat(d+1),u=n+n,f=n*(t-n)*i/((l+u)*(e+u)),p=r+f*s,g=h+f*o;f=-(e+n)*(a+n)*i/((c+u)*(e+u));let m=g+f*h,w=r;if(s=p/m,o=g/m,r=(p+f*r)/m,h=1,Math.abs(r-w)<3e-7*Math.abs(r))return r}}function yv(e){if(0==e||1==e)return 1;return e*yv(e-1)}function Av(e){let t;var i=[75122.633153,80916.6278952,36308.2951477,8687.24529705,1168.92649479,83.8676043424,2.50662827511],n=0,r=1;if(0==e)t=1e99;else if(e%1==0)t=yv(e-1);else{for(let t=0;t<i.length;t++)n+=i[t]*Math.pow(e,t),r*=e+t;t=n*Math.pow(e+5.5,e+.5)*Math.exp(-(e+5.5))/r}return t}function Cv(e){return Math.log(Av(e))}var _v={TdistributionCDF:bv,gamma:Av,t_test_1_sample:function(e,t,i,n){0==i&&(i=1);var r=(e-t)/i*Math.sqrt(n);return 1-bv(Math.abs(r),n-1)},t_test_2_samples:function(e,t,i,n,r,s){0==t&&(t=1),0==r&&(r=1);var o=(e-n)/Math.sqrt(t**2/i+r**2/s),a=(t**2/i+r**2/s)**2*(i-1)*(s-1)/(t**4*(s-1)/i**2+r**4*(i-1)/s**2);return 1-bv(Math.abs(o),parseInt(a+.5))}};function xv(e){return e.reduce((function(e,t){return e>t?e:t}))}function kv(e,t,i,n){return t*Math.exp(-1*(e-i)**2/(2*n**2))/Math.sqrt(2*Math.PI)/n}function Iv(e,t,i,n){return Math.exp(-1*(e-i)**2/(t**2+n**2))}function Sv(e,t){let i;try{i=e.reduce(((e,i,n)=>e+Math.min(i,t[n])))}catch{return console.log("Failed to find likelihood overlap: ",e,t),0}return i}function Ev(e,t,i,n){return 0==t&&0==n?{nl:.5*(e+i),ne:0}:{nl:(e*n*n+i*t*t)/(t*t+n*n),ne:Math.sqrt(t*t*n*n/(t*t+n*n))}}function Nv(e,t){let i=parseInt(t*(e.length-1)),n=t*(e.length-1)-i;return i<e.length-1?e[i]*(1-n)+e[i+1]*n:e[i]}function Bv(e){const t=e.length,i=Math.max(...e);let n=e.indexOf(i);n>Math.floor(t/2)&&(n=t-1-n);const r=(t/2-n)/(t+1),s=Math.floor((t/2+n)/2),o=t-1-s;let a=e.slice(s,o+1).reduce(((e,t)=>e+t),0)/e.reduce(((e,t)=>e+t),0);return n===Math.floor(t/2)&&(a=1),{mean:r,p:a}}var Mv=class{constructor(e,t){this.wigFeatures=e,this.binSize=t}get_fit(){var e=new wv.GetFit(this.wigFeatures),[t,i]=e.fit_data();return{globalMean:t,globalStd:i}}async call_2d(e=null,t=null,i="both",n=.1,r=0,s=10,o=0){let a=this.get_fit();this.globalMean=a.globalMean,this.globalStd=a.globalStd;let c=null==e?.05*this.binSize/3e9:e,l=null==t?parseInt(this.binSize/1e4):t,h=[],d=[],u=[],f=[],p=[],g=[];for(const[e,t]of Object.entries(this.wigFeatures)){let e=[],i=[],s=[];t.forEach(((t,n)=>{t.hets_count>4&&t.dp_count>l&&(e.push([n]),i.push(t.binScore),s.push(t.likelihood_score),delete t.likelihood_score)}));let o=[];for(let e=1;e<i.length;e++)o.push(Math.abs(i[e]-i[e-1]));let a=[0];for(let e=1;e<o.length;e++)a.push(Math.min(o[e-1],o[e]));a.push(0);let g=i.map(((e,t)=>Math.sqrt(Math.sqrt(e)**2+this.globalStd**2+Math.pow(a[t]/2,2)))),m=[];for(let t=0;t<e.length-1;t++){let n=0;try{n=Sv(s[t],s[t+1])}catch{console.log("Overlap failed: ",t,s[t],e[t+1],s[t+1])}let r=Iv(i[t],g[t],i[t+1],g[t+1]);m.push(r*n)}for(;m.length>0;){m=m.filter((e=>"number"==typeof e));let t=xv(m);if(isNaN(t)&&console.log("NaN value",m),t<c)break;let n,r,o=m.indexOf(t),a=Ev(i[o],g[o],i[o+1],g[o+1]);try{n=s[o].map(((e,t)=>e*s[o+1][t])),r=n.reduce(((e,t)=>e+t))}catch{console.log(s),console.log("max_overlap:",t,o,m.length),console.log("likelihood: ",o,s[o],s[o+1]),console.log("nlh: ",r)}if(i[o]=a.nl,g[o]=a.ne,s[o]=n.map((function(e){return e/r})),e[o].push(...e[o+1]),i.splice(o+1,1),g.splice(o+1,1),e.splice(o+1,1),s.splice(o+1,1),m.splice(o,1),o<m.length){let e=Iv(i[o],g[o],i[o+1],g[o+1])*Sv(s[o],s[o+1]);m[o]=e}if(o>0){let e=Iv(i[o-1],g[o-1],i[o],g[o])*Sv(s[o-1],s[o]);m[o-1]=e}}let w=-1;for(;;){m=[];for(let t=0;t<i.length;t++)for(let r=t;r<i.length;r++)e[r][0]-e[t].at(-1)<n*(e[t].length+e[r].length)&&m.push(Iv(i[t],g[t],i[r],g[r])*Sv(s[t],s[r]));if(0==m.length)break;let t=xv(m);if(t<c)break;let r=0,o=1;for(;r<e.length-1;){let a=Iv(i[r],g[r],i[o],g[o])*Sv(s[r],s[o]);if(e[o][0]-e[r].at(-1)<n*(e[r].length+e[o].length)&&a==t){let t=Ev(i[r],g[r],i[r+1],g[r+1]);i[r]=t.nl,g[r]=t.ne;let n=s[r].map(((e,t)=>e*s[r+1][t])),a=n.reduce(((e,t)=>e+t));s[r]=n.map((function(e){return e/a})),e[r].push(...e[r+1]),e[r]=e[r].sort(((e,t)=>e-t)),i.splice(o,1),g.splice(o,1),e.splice(o,1),s.splice(o,1),o>=e.length&&(r+=1,o=r+1)}else o+=1,o>=e.length&&(r+=1,o=r+1)}if(w==e.length)break;w=e.length}e.forEach(((e,n)=>{let o=Bv(s[n]);e.length>1&&(e.forEach(((e,s)=>{d.push(t[e]),o.mean<=r&&h.push(t[e]),t[e].segment_score=i[n]})),u.push(i[n]),f.push(g[n]),p.push(s[n]))}))}let m=parseInt(1e3*(1-o));0==m&&(m=1);let w=wv.linspace(o,1,m),b={},F={};for(let e=10;e>-1;e--)for(let t=0;t<e/2+1;t++){let n,r,s=e-t,o=w.map(((t,i)=>1-t+t*e/2)),a=e/2;e>0?(n=.5-t/(t+s),r=w.map(((e,i)=>.5-(1-e+e*t)/(2-2*e+(t+s)*e)))):(n=0,r=w.map(((e,t)=>0*e)));for(let i=0;i<u.length;i++){let c=kv(a*this.globalMean,1,u[i],f[i])*Nv(p[i],.5+n);i in F?F[i].push([e,t,s,c,1]):F[i]=[e,t,s,c,1];let l=0,h=0,d=0;o.forEach(((e,t)=>{if(!isNaN(r[t])){let n=kv(e*this.globalMean,1,u[i],f[i])*Nv(p[i],.5+r[t]);l+=n,n>h&&(h=n,d=w[t])}})),i in b?b[i].push([e,t,s,l/w.length,d]):b[i]=[e,t,s,l/w.length,d]}for(let e=0;e<u.length;e++)if("germline"==i)b[e].sort(((e,t)=>e[3]-t[3]));else if(b[e].sort(((e,t)=>e[3]-t[3])),"both"==i&&(F[e].sort(((e,t)=>e[3]-t[3])),F[e][0][3]>b[e][0][3])){let t=b[e].filter((t=>t[0]!=F[e][0][0]&&t[1]<=F[e][0][1]));b[e]=[F[e][0]].push(...t)}for(let e=0;e<u.length;e++)b[e][0][0],b[e][0][0],u[e],this.globalMean,_v.t_test_1_sample(this.globalMean,u[e],f[e],g[e])}return{binScore:this.formatDataStructure(this.wigFeatures,"binScore",this.globalMean),segment_score:this.formatDataStructure(this.wigFeatures,"segment_score",this.globalMean)}}formatDataStructure(e,t,i=1){const n=[];for(const[r,s]of Object.entries(e))s.forEach((e=>{var r={...e};1!=i&&(r.value=e[t]/i*2),n.push(r)}));return n}formatDataStructure_BAF(e,t=-1){const i=[],n=[];for(const[r,s]of Object.entries(this.wigFeatures))s.forEach((r=>{var s={...r},o={...r};let a=r[e];.5!=a&&(o.value=t*(1-a),n.push(o)),s.value=t*a,i.push(s)}));return[i,n]}};const Rv=2871e6;function Dv(e){for(var t=1,i=1,n=1*e,r=1;r<50;r++)t*=r,n+=(i*=-1)*Math.pow(e,2*r+1)/(t*(2*r+1));return 2*n/Math.sqrt(3.14159265358979)}function Tv(e,t,i,n,r){var s=new Hv(i.slice(n,r));return 0==s.std&&(s.std=t>0?t*s.mean/e:1),Pv(e,s.mean,s.std,r-n)/(r-n)}function Lv(e,t,i,n,r){var s=new Hv(i.slice(n,r));if(s.mean<e){var o=(s.max-s.mean)/(t*Math.sqrt(2));return Math.pow(.5*(1+Dv(o)),r-n)}o=(s.min-s.mean)/(t*Math.sqrt(2));return Math.pow(.5*(1-Dv(o)),r-n)}function zv(e,t,i,n,r,s,o=1e3){for(var a=Tv(e,t,i,n,r),c=0,l=!1;a>s&!l&c<o;){l=!0,c+=1;var[h,d,u,f]=[1e10,1e10,1e10,1e10];if(n>0&&(h=Tv(e,t,i,n-1,r)),r-n>2)var d=Tv(e,t,i,n+1,r),u=Tv(e,t,i,n,r-1);if(r<i.length)var f=Tv(e,t,i,n,r+1);Math.min[f]<a&&(l=!1,h==Math.min[f]&&(n-=1,a=h),elif(d==Math.min[f]),n+=1,a=d,elif(u==Math.min[f]),r-=1,a=u,elif(f==Math.min[f]),r+=1,a=f)}return a<=s?r:0}class Hv{constructor(e){this.data=e,this.mean=e.reduce(((e,t)=>e+t))/e.length,this.std=Math.sqrt(e.reduce(((e,t)=>(t-this.mean)**2))/e.length)}}function Pv(e,t,i,n){0==i&&(i=1);var r=(e-t)/i*Math.sqrt(n);return 1-_v.TdistributionCDF(Math.abs(r),n-1)}function Ov(e,t,i,n,r,s){0==t&&(t=1),0==r&&(r=1);var o=(e-n)/Math.sqrt(t**2/i+r**2/s),a=(t**2/i+r**2/s)**2*(i-1)*(s-1)/(t**4*(s-1)/i**2+r**4*(i-1)/s**2);return 1-_v.TdistributionCDF(Math.abs(o),parseInt(a+.5))}var Uv=class{constructor(e,t,i){this.rd=e,this.mean=t,this.std=i,this.bin_bands=[2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128]}get_rd_signal_bandwidth(e){var t=[];return e.forEach(((e,i)=>{var n=0;n=e>this.mean/4?this.mean/(this.std**2*e):4/this.std**2,t.push(n)})),t}meanShiftCaller(e,t=3){var i={};return Object.entries(this.rd).forEach((([e,n])=>{var r=new Array(n.length).fill(!1),s=new Array(n.length);for(let e=0;e<n.length;e++)r[e]||(s[e]=n[e]);this.bin_bands.forEach(((e,i)=>{var o=r.map(((e,t)=>!e)),a=[];Object.entries(n).forEach((([e,t])=>{a.push(t.binScore)}));var c=[0],l=0;for(let e=0;e<r.length;e++)r[e]?l>0&&(c.push(c[c.length-1]+l-1),l=0):l+=1;c.shift();for(let i=0;i<t;i++){var h=this.get_rd_signal_bandwidth(a),d=new Array(a.length).fill(0);for(let t=0;t<a.length;t++)for(let i=t-3*e;i<=t+3*e+1;i++)if(!(i<0||i>=a.length||Math.abs(t-i)>=a.length)){var u=(i-t)*Math.exp(-.5*(i-t)**2/e**2)*Math.exp(-.5*(a[t]-a[i])**2*h[t]);d[t]+=u}for(var f=new Array,p=0;p<d.length-1;p++)d[p]<0&d[p+1]>=0&&f.push(p);f.push(d.length-1),f=f.concat(c).sort(((e,t)=>e-t)),f=Array.from(new Set(f));var g=0;for(p=0;p<f.length;p++){var m=a.slice(g,f[p]+1),w=m.reduce(((e,t)=>e+t))/m.length;a.fill(w,g,f[p]+1),g=f[p]+1}}p=0;for(var b=0;p<s.length;p++)o[p]&&(s[p]=a[b],b++);for(f=new Array,p=0;p<s.length-1;p++){Math.abs(s[p+1]-s[p])>.01&&f.push(p+1)}f.unshift(0),f.push(s.length),r=new Array(this.rd.length).fill(!1);for(p=1;p<f.length;p++){var F=[f[p-1],f[p]],v=[f[p-1],f[p-1]];if(!(p>1))continue;v[0]=f[p-2];var y=[f[p],f[p]];if(!(p<f.length-1))continue;y[1]=f[p+1];var A=F[1]-F[0],C=v[1]-v[0],_=y[1]-y[0];if(A<=1)continue;var x=new Hv(s.slice(F[0],F[1]));if(_<=15||C<=15||A<=15){var k=1.8*Math.sqrt(s[v[0]]/this.mean)*this.std;if(Math.abs(s[v[0]]-s[F[0]])<k)continue;if(k=1.8*Math.sqrt(s[y[0]]/this.mean)*this.std,Math.abs(s[y[0]]-s[F[0]])<k)continue}else{var I=s.slice(v[0],v[1]),S=new Hv(I),E=s.slice(y[0],y[1]),N=new Hv(E);if(Ov(x.mean,x.std,x.data.length,S.mean,S.std,S.data.length)>.01/Rv*bin_size*(A+C))continue;if(Ov(x.mean,x.std,x.data.length,N.mean,N.std,N.data.length)>.01/Rv*bin_size*(A+_))continue}if(Pv(this.mean,x.mean,x.std,x.data.length)>.05)continue;let e=a.slice(F[0],F[1]);var B=new Hv(e);r.fill(!0,F[0],F[1]),s.fill(B.mean,F[0],F[1])}})),i[e]=s})),i}call_mean_shift(e=3){for(var t=new Array(this.rd.length).fill(!1),i=new Array(this.rd.length),n=0;n<this.rd.length;n++)t[n]||(i[n]=this.rd[n]);return this.bin_bands.forEach(((n,r)=>{var s=t.map(((e,t)=>!e)),o=[];s.forEach(((e,t)=>{e&&o.push(this.rd[t])}));for(var a=[0],c=0,l=0;l<t.length;l++)t[l]?c>0&&(a.push(a[a.length-1]+c-1),c=0):c+=1;a.shift();for(var h=0;h<e;h++){var d=this.get_rd_signal_bandwidth(o),u=new Array(o.length).fill(0);for(l=0;l<o.length;l++)for(var f=l-3*n;f<=l+3*n+1;f++)if(!(f<0||f>=o.length||Math.abs(l-f)>=o.length)){var p=(f-l)*Math.exp(-.5*(f-l)**2/n**2)*Math.exp(-.5*(o[l]-o[f])**2*d[l]);u[l]+=p}var g=new Array;for(l=0;l<u.length-1;l++)u[l]<0&u[l+1]>=0&&g.push(l);g.push(u.length-1),g=g.concat(a).sort(((e,t)=>e-t)),g=Array.from(new Set(g));var m=0;for(l=0;l<g.length;l++){var w=o.slice(m,g[l]+1),b=w.reduce(((e,t)=>e+t))/w.length;o.fill(b,m,g[l]+1),m=g[l]+1}}for(l=0,f=0;l<i.length;l++)s[l]&&(i[l]=o[f],f++);for(g=new Array,l=0;l<i.length-1;l++){Math.abs(i[l+1]-i[l])>.01&&g.push(l+1)}g.unshift(0),g.push(i.length),t=new Array(this.rd.length).fill(!1);for(l=1;l<g.length;l++){var F=[g[l-1],g[l]],v=[g[l-1],g[l-1]];if(l>1){v[0]=g[l-2];var y=[g[l],g[l]];if(l<g.length-1){y[1]=g[l+1];var A=F[1]-F[0],C=v[1]-v[0],_=y[1]-y[0];if(!(A<=1)){var x=new Hv(i.slice(F[0],F[1]));if(_<=15||C<=15||A<=15){var k=1.8*Math.sqrt(i[v[0]]/this.mean)*this.std;if(Math.abs(i[v[0]]-i[F[0]])<k)continue;if(k=1.8*Math.sqrt(i[y[0]]/this.mean)*this.std,Math.abs(i[y[0]]-i[F[0]])<k)continue}else{var I=i.slice(v[0],v[1]),S=new Hv(I),E=i.slice(y[0],y[1]),N=new Hv(E);if(Ov(x.mean,x.std,x.data.length,S.mean,S.std,S.data.length)>3.483106931382794e-9*(A+C))continue;if(Ov(x.mean,x.std,x.data.length,N.mean,N.std,N.data.length)>3.483106931382794e-9*(A+_))continue}if(!(Pv(this.mean,x.mean,x.std,x.data.length)>.05)){var B=new Hv(this.rd.slice(F[0],F[1]));t.fill(!0,F[0],F[1]),i.fill(B.mean,F[0],F[1])}}}}}})),i}cnv_calling(e=1e5){var t=.25*this.mean,i=this.mean-t,n=this.mean+t,r=2971e6,s=this.meanShiftCaller(e),o={},a=[];return Object.entries(s).forEach((([c,l])=>{for(var h=!1;!h;){h=!0;var d=new Array(1).fill(0);for(let e=0;e<l.length-1;e++){Math.abs(l[e+1]-l[e])>.01&&d.push(e+1)}d.push(l.length);for(let e=0;e<d.length-2;e++){var u=Math.abs(l[d[e]]-l[d[e+1]]);if(u<t){var f=u+1,p=u+1;if(e>0&&(f=Math.abs(l[d[e]]-l[d[e-1]])),e<d.length-3&&(p=Math.abs(s[d[e+1]]-l[d[e+2]])),u<f&&u<p){h=!1;var g=new Hv(l.slice(d[e],d[e+2]));l.fill(g.mean,d[e],d[e+2]),d.splice(e+1,e+1)}}}}var m=[];Object.entries(this.rd[c]).forEach((([e,t])=>{m.push(t.binScore)}));for(var w,b=new Array(l.length).fill(""),F=0,v=.05*e/r;F<l.length;){for(var y=F,A=F;F<l.length&l[F]<i;)F+=1;if((_=F)>A+1){var C=zv(this.mean,this.std,m,A,_,v);if(C){var _=C;b.fill("D",A,_)}}for(A=F;F<l.length&l[F]>n;)F+=1;(_=F)>A+1&&(C=zv(this.mean,this.std,m,A,_,v))&&(_=C,b.fill("A",A,_)),F==y&&(F+=1)}for(F=0;F<l.length;){for(;F<l.length&""!=b[F];)F+=1;for(A=F;F<l.length&l[F]<i;)F+=1;(_=F)>A+1&&(Lv(this.mean,this.std,m,A,_)<1682935038707506e-26&&b.fill(["d"]*(_-A),A,_),F-=1),F+=1}(F=0)<l.length&&(w=b[F]),A=0;for(var x=[...m];F<l.length;){for(;b[F]==w&&!((F+=1)>=b.length););if(F>A){var k=new Hv(x.slice(A,F));x.fill(k.mean,A,F)}F<l.length&&(w=b[F]),A=F}for(o[c]=x,F=0;F<l.length;){if(""==(w=b[F])){F+=1;continue}for(A=F;F<l.length&w==b[F];)F+=1;let t,i=new Hv(x.slice(A,F)).mean/this.mean;t="D"==w?"deletion":"duplication";let n={chr:c,start:e*A+1,end:e*F,size:e*(F-A+1),value:2*i,event_type:t};a.push(n)}})),[o,a]}};class qv{constructor(e,t){this.allVariants=e,this.rowBinSize=1e4,this.binSize=t,this.binFactor=parseInt(t/this.rowBinSize)}async read_rd_baf(e="ReadDepth"){var t={};for(let e=this.allVariants.length-1;e>=0;e--){var i;let n=this.allVariants[e];this.allVariants.splice(e,1);let r=n.chr;i=Math.max(Math.floor(n.start/this.rowBinSize),0),t[r]||(t[r]=[]),t[r][i]||(t[r][i]={chr:r,start:i*this.rowBinSize,end:(i+1)*this.rowBinSize,dp_sum_score:0,dp_count:0,hets_count:0,hets:[]});const s=Object.values(n.calls);if(1!==s.length)throw Error(`Unexpected number of genotypes: ${s.length}.  CNVPytor expects 1 and only 1 genotype`);const o=s[0],a=o.info.DP;a&&(t[r][i].dp_sum_score+=Number.parseInt(a),t[r][i].dp_count++);let c=o.info.AD.split(","),l=o.genotype;if(0==l[0]&&1==l[1]||1==l[0]&&0==l[1]){t[r][i].hets_count++;let e=parseInt(c[0]),n=parseInt(c[1]);t[r][i].hets.push({ref:e,alt:n})}}this.chromosomes=Object.keys(t);var n,r=this.adjust_bin_size(t);if("ReadDepth"==e){n=new Vv(r,this.binSize).ReadDepth_caller();var s=this.formatDataStructure_BAF(r,"max_likelihood")}else if("2D"==e){let e=new Mv(r,this.binSize),t=await e.call_2d();n=[t.binScore,[],t.segment_score];s=e.formatDataStructure_BAF("max_likelihood",-1)}return[n,s]}formatDataStructure(e,t,i=1){const n=[];for(const[s,o]of Object.entries(e))for(let e of o){var r={...e};1!=i&&(r.value=e[t]/i*2),n.push(r)}return n}format_BAF_likelihood(e){const t=[];for(const[n,r]of Object.entries(e))for(let e of r){var i={...e};.5!=e.value&&(i.value=1-e.value,t.push(i))}return t}get_max_min_score(e){if(e.likelihood_score.length>0){const t=Math.max(...e.likelihood_score),i=e.likelihood_score.indexOf(t);e.value=Math.max(i/100,1-i/100),e.min_score=Math.min(i/100,1-i/100)}else e.score=0;return e}async getAllbins(){const e=await this.computeDepthFeatures();return new wv.GetFit(e).fit_data(),e}formatDataStructure_BAF(e,t,i=-1){const n=[],r=[];for(const[a,c]of Object.entries(e))for(let e of c){var s={...e},o={...e};let a=e[t];.5!=a&&(o.value=i*(1-a),r.push(o)),s.value=i*a,n.push(s)}return[n,r]}adjust_bin_size(e){var t={};for(let r of this.chromosomes){t[r]||(t[r]=[]);for(let s=0;s<e[r].length/this.binFactor;s++){const o=s;t[r][s]||(t[r][s]={chr:r,start:o*this.binSize,end:(o+1)*this.binSize,dp_count:0,hets_count:0,binScore:0,likelihood_score:[],dp_sum_score:0});for(var i=s*this.binFactor;i<this.binFactor*s+this.binFactor;i++)if(e[r][i]&&(t[r][s].dp_sum_score+=e[r][i].dp_sum_score,t[r][s].dp_count+=e[r][i].dp_count,t[r][s].hets_count+=e[r][i].hets_count,0!=e[r][i].hets.length))for(let o of e[r][i].hets)if(0==t[r][s].likelihood_score.length)t[r][s].likelihood_score=wv.linspace(0,1,100).map(((e,t)=>Qv(o.ref,o.alt,e)));else{var n=0;t[r][s].likelihood_score=wv.linspace(0,1,100).map(((e,i)=>{var a=t[r][s].likelihood_score[i]*Qv(o.ref,o.alt,e);return n+=a,a})),t[r][s].likelihood_score=wv.linspace(0,1,100).map(((e,i)=>t[r][s].likelihood_score[i]/n))}t[r][s].binScore=100*parseInt(t[r][s].dp_sum_score/t[r][s].dp_count);const a=this.get_max_min_score(t[r][s]);t[r][s].max_likelihood=a.value}}return t}}function Qv(e,t,i,n=!0){return Math.pow(i,e)*Math.pow(1-i,t)+Math.pow(i,t)*Math.pow(1-i,e)}class Vv{constructor(e,t){this.wigFeatures=e,this.binSize=t}ReadDepth_caller(){var e=new wv.GetFit(this.wigFeatures),[t,i]=e.fit_data(),n=new Uv(this.wigFeatures,t,i),r=n.meanShiftCaller(this.binSize),s=n.cnv_calling();return Object.entries(this.wigFeatures).forEach((([e,t])=>{t.forEach(((t,i)=>{t.partition_level=parseInt(r[e][i]),t.partition_call=parseInt(s[0][e][i])}))})),[this.formatDataStructure("binScore",t),this.formatDataStructure("partition_level",t),this.formatDataStructure("partition_call",t),s[1]]}formatDataStructure(e,t=1){const i=[];for(const[r,s]of Object.entries(this.wigFeatures))for(let r of s){var n={...r};1!=t&&(n.value=r[e]/t*2),i.push(n)}return i}}class jv extends Hl{static DEFAULT_TRACK_HEIGHT=250;constructor(e,t){super(e,t)}init(e){this.featureType="numeric",this.type="cnvpytor",e.max||(this.defaultScale=!0,this.autoscale=!1),e.height||(e.height=jv.DEFAULT_TRACK_HEIGHT),this.type="cnvpytor",this.graphType=e.graphType||"points",this.bin_size=e.bin_size||1e5,this.signal_name=e.signal_name||"rd_snp",this.cnv_caller=e.cnv_caller||"2D",this.colors=e.colors||["gray","black","green","blue"],super.init(e)}get supportsWholeGenome(){return!0}get_signals(){let e=[];return"rd_snp"==this.signal_name?e=["RD_Raw","RD_Raw_gc_coor",this.cnv_caller,"BAF1","BAF2"]:"rd"==this.signal_name?e=["RD_Raw","RD_Raw_gc_coor",this.cnv_caller]:"snp"==this.signal_name?e=["BAF1","BAF2"]:"cnh"==this.signal_name&&(e=[this.cnv_caller]),e}get_signal_colors(){return[{singal_name:"RD_Raw",color:this.colors[0]},{singal_name:"RD_Raw_gc_coor",color:this.colors[1]},{singal_name:"ReadDepth",color:this.colors[2]},{singal_name:"2D",color:this.colors[2]},{singal_name:"BAF1",color:this.colors[3]},{singal_name:"BAF2",color:this.colors[3]}]}async postInit(){if("vcf"==this.config.format){let e;this.featureSource?e=Object.values(this.featureSource.getAllFeatures()).flat():(this.featureSource=this.featureSource||wd(this.config,this.browser.genome),this.header=await this.getHeader(),e=this.featureSource.reader.features);const t=new qv(e,this.bin_size);let i,n,r;this.wigFeatures_obj={},this.wigFeatures_obj[this.bin_size]={},"2D"==this.cnv_caller?(r=await t.read_rd_baf("2D"),i=r[0],n=r[1],this.wigFeatures_obj[this.bin_size]["2D"]=i[2],this.available_callers=["2D"]):(r=await t.read_rd_baf(),i=r[0],n=r[1],this.wigFeatures_obj[this.bin_size].ReadDepth=i[2],this.available_callers=["ReadDepth"]),this.wigFeatures_obj[this.bin_size].RD_Raw=i[0],this.wigFeatures_obj[this.bin_size].RD_Raw_gc_coor=i[1],this.wigFeatures_obj[this.bin_size].BAF1=n[0],this.wigFeatures_obj[this.bin_size].BAF2=n[1],this.available_bins=[this.bin_size],this.set_available_callers()}else this.cnvpytor_obj=new pv(this.config.url,this.bin_size),this.wigFeatures_obj=await this.cnvpytor_obj.get_rd_signal(this.bin_size),this.available_bins=this.cnvpytor_obj.available_bins,this.available_callers=this.cnvpytor_obj.callers,this.set_available_callers();this.tracks=[];const e=[];this.signals=this.get_signals(),this.signal_colors=this.get_signal_colors();for(let t in this.wigFeatures_obj)for(const[i,n]of Object.entries(this.wigFeatures_obj[t]))if(this.signals.includes(i)){let t={type:"wig"};t.features=n,t.name=i,t.color=this.signal_colors.filter((e=>e.singal_name===i)).map((e=>e.color));const r=await this.browser.createTrack(t);r?(r.isMergedTrack=!0,r.autoscale=!1,this.tracks.push(r)):console.warn("Could not create track "+t),"function"==typeof r.postInit&&e.push(r.postInit())}this.flipAxis=!!this.config.flipAxis&&this.config.flipAxis,this.logScale=!!this.config.logScale&&this.config.logScale,this.autoscale=this.config.autoscale,this.autoscale||(this.dataRange={min:this.config.min||0,max:this.config.max});for(let e of this.tracks)e.autoscale=!1,e.dataRange=this.dataRange;return Promise.all(e)}set_available_callers(){this.available_callers.includes(this.cnv_caller)||(this.available_callers.length>0?this.cnv_caller=this.available_callers[0]:this.cnv_caller=null)}async getHeader(){if(!this.header){if("function"==typeof this.featureSource.getHeader){const e=await this.featureSource.getHeader();e&&(this.callSets=e.callSets||[]),this.header=e}this.sampleKeys=this.callSets?this.callSets.map((e=>e.sample)):[],this.sampleNames=this.sampleKeys}return this.header}get height(){return this._height}set height(e){if(this._height=e,this.tracks)for(let t of this.tracks)t.height=e,t.config.height=e}menuItemList(){let e=[];void 0!==this.flipAxis&&e.push({label:"Flip y-axis",click:function(){this.flipAxis=!this.flipAxis,this.trackView.repaintViews()}}),e=e.concat(this.numericDataMenuItems()),e.push("<hr/>"),e.push("Bin Sizes");for(let t of this.available_bins){const i=Dl(t,t===this.bin_size);e.push({object:Bt(i),click:async function(){this.bin_size=t,this.trackView.startSpinner(),await this.recreate_tracks(t),this.clearCachedFeatures(),this.trackView.updateViews(),this.trackView.repaintViews()}})}e.push("<hr/>"),e.push("Signal Type");let t={rd_snp:"RD and BAF Likelihood",rd:"RD Signal",snp:"BAF Likelihood"};for(let i in t){const n=Dl(t[i],i===this.signal_name);e.push({object:Bt(n),click:async function(){this.signal_name=i,await this.recreate_tracks(this.bin_size),this.clearCachedFeatures(),this.trackView.updateViews(),this.trackView.repaintViews()}})}e.push("<hr/>"),e.push("CNV caller");for(let t of this.available_callers){const i=Dl(t,t===this.cnv_caller);e.push({object:Bt(i),click:async function(){this.cnv_caller=t,this.trackView.startSpinner(),await this.recreate_tracks(this.bin_size),this.clearCachedFeatures(),this.trackView.updateViews(),this.trackView.repaintViews()}})}if(this.variantState){e.push("<hr/>");for(let t of this.available_callers)e.push({label:"Convert to variant track",click:()=>{this.convertToVariant()}})}return e}async recreate_tracks(e){this.tracks=[];const t=[];e in this.wigFeatures_obj||(this.wigFeatures_obj={...this.wigFeatures_obj,...await this.cnvpytor_obj.get_rd_signal(e)}),this.signals=this.get_signals(),this.signal_colors=this.get_signal_colors();for(const[i,n]of Object.entries(this.wigFeatures_obj[e]))if(this.signals.includes(i)){let e={type:"wig"};e.features=n,e.name=i,e.color=this.signal_colors.filter((e=>e.singal_name===i)).map((e=>e.color));const r=await this.browser.createTrack(e);r?(r.isMergedTrack=!0,r.autoscale=!1,this.tracks.push(r)):console.warn("Could not create track "+e),"function"==typeof r.postInit&&t.push(r.postInit())}this.flipAxis=!!this.config.flipAxis&&this.config.flipAxis,this.logScale=!!this.config.logScale&&this.config.logScale,this.autoscale=this.config.autoscale,this.autoscale||(this.dataRange={min:this.config.min||0,max:this.config.max});for(let e of this.tracks)e.autoscale=!1,e.dataRange=this.dataRange;return Promise.all(t)}async getFeatures(e,t,i,n){if(this.tracks){const r=this.tracks.map((r=>r.getFeatures(e,t,i,n)));return Promise.all(r)}}getScaleFactor(e,t,i,n){return n?i/(Math.log10(t+1)-(e<=0?0:Math.log10(e+1))):i/(t-e)}computeYPixelValue(e,t){return(this.flipAxis?e-this.dataRange.min:this.dataRange.max-e)*t}computeYPixelValueInLogScale(e,t){let i=this.dataRange.max,n=this.dataRange.min;return i<=0?0:(n<=-1&&(n=0),n=n<=0?0:Math.log10(n+1),i=Math.log10(i+1),e=Math.log10(e+1),(this.flipAxis?e-n:i-e)*t)}draw(e){const t=e.features;if(!t)return;if(this.defaultScale&&("rd_snp"==this.signal_name?this.dataRange={min:this.config.min||this.dataRange.min||-1,max:this.config.max||this.dataRange.max||5}:"rd"==this.signal_name?this.dataRange={min:this.config.min||this.dataRange.min||0,max:this.config.max||this.dataRange.max||5}:"snp"==this.signal_name&&(this.dataRange={min:this.config.min||this.dataRange.min||-1,max:this.config.max||this.dataRange.max||0})),this.autoscale&&(this.dataRange=function(e,t){let i=0,n=-Number.MAX_VALUE;for(let e of t)for(let t of e)void 0===t.value||Number.isNaN(t.value)||(i=Math.min(i,t.value),n=Math.max(n,t.value));return{min:i,max:n}}(e.referenceFrame.chr,t)),this.tracks)for(let i=0,n=this.tracks.length;i<n;i++){const n=Object.assign({},e);n.features=t[i],this.tracks[i].dataRange=this.dataRange,this.tracks[i].flipAxis=this.flipAxis,this.tracks[i].logScale=this.logScale,this.graphType&&(this.tracks[i].graphType=this.graphType),this.tracks[i].draw(n)}const i=this.getScaleFactor(this.dataRange.min,this.dataRange.max,e.pixelHeight,this.logScale),n=e=>this.logScale?this.computeYPixelValueInLogScale(e,i):this.computeYPixelValue(e,i);if(this.config.hasOwnProperty("guideLines"))for(let t of this.config.guideLines)if(t.hasOwnProperty("color")&&t.hasOwnProperty("y")&&t.hasOwnProperty("dotted")){let i=n(t.y),r={strokeStyle:t.color,strokeWidth:1};t.dotted?xo.dashedLine(e.context,0,i,e.pixelWidth,i,5,r):xo.strokeLine(e.context,0,i,e.pixelWidth,i,r)}let r=n(2);xo.dashedLine(e.context,0,r,e.pixelWidth,r,5,{strokeStyle:"lightgray",strokeWidth:.5})}paintAxis(e,t,i){var n,r,s,o,a,c,l,h={font:"normal 10px Arial",textAlign:"right",strokeStyle:"black"};if(void 0===this.dataRange||void 0===this.dataRange.max||void 0===this.dataRange.min)return;let d=void 0!==this.flipAxis&&this.flipAxis;function u(e){return e<0?Math.abs(e):0===e?"0":Math.abs(e)>=10||e%1==0?e.toFixed():Math.abs(e)>=1?e.toFixed(1):e.toFixed(2)}xo.fillRect(e,0,0,t,i,{fillStyle:"rgb(255, 255, 255)"}),n=(l=.95*t)-8,a={x:r=l,y:s=o=.01*i},xo.strokeLine(e,n,s,r,o,h),xo.fillText(e,u(d?this.dataRange.min:this.dataRange.max),n+4,s+12,h),c={x:r,y:s=o=.99*i},xo.strokeLine(e,n,s,r,o,h),xo.fillText(e,u(d?this.dataRange.max:this.dataRange.min),n+4,s-4,h),xo.strokeLine(e,a.x,a.y,c.x,c.y,h);const f=this.getScaleFactor(this.dataRange.min,this.dataRange.max,i,this.logScale),p=e=>this.logScale?this.computeYPixelValueInLogScale(e,f):this.computeYPixelValue(e,f),g=Math.ceil((this.dataRange.max-this.dataRange.min)/10);for(let t=Math.ceil(this.dataRange.min+1);t<Math.round(this.dataRange.max-.4);t+=g){const i=p(t);xo.strokeLine(e,45,i,50,i,h),xo.fillText(e,u(d?this.dataRange.max-t:t),44,i+4,h)}}popupData(e,t){const i=t||e.viewport.cachedFeatures;if(i&&i.length===this.tracks.length){const t=[];for(let n=0;n<this.tracks.length;n++){n>0&&t.push("<hr/>"),t.push(`<div style=background-color:rgb(245,245,245);border-bottom-style:dashed;border-bottom-width:1px;padding-bottom:5px;padding-top:10px;font-weight:bold;font-size:larger >${this.tracks[n].name}</div>`);const r=this.tracks[n].popupData(e,i[n]);t.push(...r)}return t}}async convertToVariant(){this.variantState&&(Object.setPrototypeOf(this,$v.prototype),this.init(this.variantState),await this.postInit(),this.trackView.clearCachedFeatures(),this.variantState.trackHeight&&this.trackView.setTrackHeight(this.variantState.trackHeight),this.trackView.checkContentHeight(),this.trackView.updateViews(),delete this.variantState)}}const Wv=Mt,Gv=10;class $v extends Hl{static defaults={displayMode:"EXPANDED",sortDirection:"ASC",showGenotypes:!0,expandedVariantHeight:10,squishedVariantHeight:2,squishedCallHeight:1,expandedCallHeight:10,expandedVGap:2,squishedVGap:1,expandedGroupGap:10,squishedGroupGap:5,featureHeight:14,noGenotypeColor:"rgb(200,180,180)",noCallColor:"rgb(225, 225, 225)",nonRefColor:"rgb(200, 200, 215)",mixedColor:"rgb(200, 220, 200)",homrefColor:"rgb(200, 200, 200)",homvarColor:"rgb(17,248,254)",hetvarColor:"rgb(34,12,253)",refColor:"rgb(0,0,220)",altColor:"rgb(255,0,0)",visibilityWindow:void 0,labelDisplayMode:void 0,type:"variant"};_sortDirections=new Map;constructor(e,t){super(e,t)}init(e){if(super.init(e),e.variantHeight&&(this.expandedVariantHeight=e.variantHeight),this.featureSource=wd(e,this.browser.genome),this.colorTables=new Map,e.colorTable){const t=e.colorBy||"*";this.colorTables.set(t,new ao(e.colorTable))}if(this.strokecolor=e.strokecolor,this._context_hook=e.context_hook,e.color&&(this.colorBy=void 0),this.nVariantRows=1,e.samples)for(let t of e.samples)this.sampleKeys=e.samples;e.sort&&(this.initialSort=e.sort),this._colorByItems=new Map([["none","None"]])}async postInit(){if(this.header=await this.getHeader(),this.header.INFO){const e=new Set(Object.keys(this.header.INFO));this.config.colorBy?this.colorBy=this.config.colorBy:!this.config.color&&e.has("AF")&&(this.colorBy="AF"),e.has("AF")&&this._colorByItems.set("AF","Allele frequency"),e.has("VT")&&this._colorByItems.set("VT","Variant Type"),e.has("SVTYPE")&&this._colorByItems.set("SVTYPE","SV Type")}if(this.config.colorBy&&!this._colorByItems.has(this.config.colorBy)&&this._colorByItems.set(this.config.colorBy,this.config.colorBy),!this.disposed){if(this.header&&!this.sampleKeys&&(this.sampleKeys=this.header.sampleNameMap?Array.from(this.header.sampleNameMap.keys()):[]),void 0===this.visibilityWindow&&!1!==this.config.indexed){const e=Ht(this.config.url)?this.config.url.name:this.config.url;Wv(e)&&e.toLowerCase().includes("gnomad")?this.visibilityWindow=1e3:"function"==typeof this.featureSource.defaultVisibilityWindow?this.visibilityWindow=await this.featureSource.defaultVisibilityWindow():this.visibilityWindow=1e6}return this}}get supportsWholeGenome(){return!this.config.indexURL||!0===this.config.supportsWholeGenome}get color(){return this._color||"rgb(0,0,150)"}set color(e){this._color=e,e&&(this.colorBy=void 0)}async getHeader(){return this.header||"function"==typeof this.featureSource.getHeader&&(this.header=await this.featureSource.getHeader()),this.header}getSampleCount(){return this.sampleKeys?this.sampleKeys.length:0}async getFeatures(e,t,i,n){void 0===this.header&&(this.header=await this.getHeader());const r=await this.featureSource.getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:this.visibilityWindow});if(this.initialSort){const e=this.initialSort;if(void 0===e.option||"GENOTYPE"===e.option.toUpperCase())this.sortSamplesByGenotype(e,r);else if("ATTRIBUTE"===e.option.toUpperCase()&&e.attribute){const t="ASC"===e.direction?1:-1;this.sortByAttribute(e.attribute,t)}this.initialSort=void 0}return r}hasSamples(){return this.getSampleCount()>0}getSamples(){const e="SQUISHED"===this.displayMode?this.squishedVGap:this.expandedVGap,t="COLLAPSED"===this.displayMode?1:this.nVariantRows,i="SQUISHED"===this.displayMode?this.squishedVariantHeight:this.expandedVariantHeight,n=t*(("SQUISHED"===this.displayMode?this.squishedCallHeight:this.expandedCallHeight)+e),r=Gv+t*(i+e);return{names:this.sampleKeys,yOffset:r,height:n}}computePixelHeight(e){if(!e||0===e.length)return Gv;const t="COLLAPSED"===this.displayMode?1:this.nVariantRows,i="SQUISHED"===this.displayMode?this.squishedVGap:this.expandedVGap,n="SQUISHED"===this.displayMode?this.squishedVariantHeight:this.expandedVariantHeight,r="SQUISHED"===this.displayMode?this.squishedCallHeight:this.expandedCallHeight,s=!1===this.showGenotypes?0:this.getSampleCount()*t;return Gv+t*(n+i)+i+(s+1)*(r+i)}variantRowCount(e){this.nVariantRows=e}draw({context:e,pixelWidth:t,pixelHeight:i,bpPerPixel:n,bpStart:r,pixelTop:s,features:o}){xo.fillRect(e,0,s,t,i,{fillStyle:"rgb(255, 255, 255)"});const a="SQUISHED"===this.displayMode?this.squishedVGap:this.expandedVGap,c="COLLAPSED"===this.displayMode?1:this.nVariantRows,l="SQUISHED"===this.displayMode?this.squishedVariantHeight:this.expandedVariantHeight;this.variantBandHeight=Gv+c*(l+a);let h=this.sampleColumns;const d=this.hasSamples();if(h&&d&&!1!==this.showGenotypes&&xo.strokeLine(e,0,this.variantBandHeight,t,this.variantBandHeight,{strokeStyle:"rgb(224,224,224) "}),o){const i="SQUISHED"===this.displayMode?this.squishedCallHeight:this.expandedCallHeight,s="SQUISHED"===this.displayMode?this.squishedVGap:this.expandedVGap,a=r+t*n+1;for(let t of o){if(t.end<r)continue;if(t.start>a)break;const o="SQUISHED"===this.displayMode?this.squishedVariantHeight:this.expandedVariantHeight,c=Gv+("COLLAPSED"===this.displayMode?0:t.row*(o+s)),l=o;let h=(t.start-r)/n,u=(t.end-r)/n,f=Math.max(1,u-h);f<3?(f=3,h-=1):f>5&&(h+=1,f-=2);const p=t._f||t;let g;try{g=p.alleleFreq()}catch(e){console.log(e)}if("AF"===this.colorBy&&g){const t=Math.min(1,g)*l,i=l-t;e.fillStyle=p.isFiltered()?this.refColorFiltered:this.refColor,e.fillRect(h,c,f,i),e.fillStyle=p.isFiltered()?this.altColorFiltered:this.altColor,e.fillRect(h,c+i,f,t)}else e.fillStyle=this.getColorForFeature(p),e.fillRect(h,c,f,l);let m=this.getVariantStrokecolor(p);if(m&&(e.strokeStyle=m,e.strokeRect(h,c,f,l)),this.callContextHook(p,e,h,c,f,l),d&&!1!==this.showGenotypes){const t="COLLAPSED"===this.displayMode?1:this.nVariantRows;this.sampleYOffset=this.variantBandHeight+s,this.sampleHeight=t*(i+s);let n=0;for(let t of this.sampleKeys){const r=this.header.sampleNameMap.get(t),o=p.calls[r];if(o){const t="COLLAPSED"===this.displayMode?0:p.row,r=this.sampleYOffset+n*this.sampleHeight+t*(i+s);let a=!0,c=!0,l=!1;if(o.genotype)for(let e of o.genotype){if("."===e){l=!0;break}0!==e&&(c=!1),0===e&&(a=!1)}o.genotype?e.fillStyle=l?this.noCallColor:c?this.homrefColor:a?this.homvarColor:this.hetvarColor:e.fillStyle=this.noGenotypeColor,e.fillRect(h,r,f,i)}n++}}}}else console.log("No feature list")}get refColorFiltered(){return this._refColorFiltered||(this._refColorFiltered=_s.addAlpha(this.refColor,.2)),this._refColorFiltered}get altColorFiltered(){return this._altColorFiltered||(this._altColorFiltered=_s.addAlpha(this.altColor,.2)),this._altColorFiltered}getColorForFeature(e){const t=e._f||e;let i;if(this.colorBy&&"none"!==this.colorBy){const e=t.getAttributeValue(this.colorBy);i=void 0!==e?this.getVariantColorTable(this.colorBy).getColor(e):"gray"}else i=this.color?"function"==typeof this.color?this.color(e):this.color:"NONVARIANT"===t.type?this.nonRefColor:"MIXED"===t.type?this.mixedColor:this.color;return t.isFiltered()&&(i=_s.addAlpha(i,.2)),i}getVariantStrokecolor(e){const t=e._f||e;let i;return i=this.strokecolor?"function"==typeof this.strokecolor?this.strokecolor(t):this.strokecolor:void 0,i}callContextHook(e,t,i,n,r,s){if(this._context_hook&&"function"==typeof this._context_hook){const o=e._f||e;t.save(),this._context_hook(o,t,i,n,r,s),t.restore()}}clickedFeatures(e){let t=super.clickedFeatures(e);const i="EXPANDED"===this.displayMode?this.expandedVGap:this.squishedVGap,n=i+("SQUISHED"===this.displayMode?this.squishedCallHeight:this.expandedCallHeight),r=e.y;if(r<=this.variantBandHeight){const e="SQUISHED"===this.displayMode?this.squishedVariantHeight:this.expandedVariantHeight,n=Math.floor((r-Gv)/(e+i));"COLLAPSED"!==this.displayMode&&(t=t.filter((e=>e.row===n)))}else if(this.sampleKeys){const e=r-this.variantBandHeight,i=Math.floor(e/this.sampleHeight);if(i>=0&&i<this.sampleKeys.length){const r=Math.floor((e-i*this.sampleHeight)/n),s="COLLAPSED"===this.displayMode?t:t.filter((e=>e.row===r)),o=this.sampleKeys[i],a=this.header.sampleNameMap.get(o);t=s.map((e=>{const t=e.calls[a];return t.genotypeString=function(e,t){if(e.genotype){let i="";if("."===t.alternateBases)i="No Call";else{const n=t.alternateBases.split(",");for(let r of e.genotype)if(i.length>0&&(i+=" | "),"."===r)i+=".";else if(0===r)i+=t.referenceBases;else{i+=n[r-1].replace("<","&lt;")}}return i}}(t,e),t}))}}return t}popupData(e,t){void 0===t&&(t=this.clickedFeatures(e));const i=e.genomicLocation,n=this.browser.genome.id;let r=[];for(let e of t){const t=e._f||e;if(r.length>0&&r.push({html:'<hr style="border-top-width:2px ;border-color: #c9c3ba" />'}),"function"==typeof t.popupData){const e=t.popupData(i,n);Array.prototype.push.apply(r,e)}}return r}menuItemList(){const e=[];if(this.header.INFO&&this.header.INFO){const t=this._colorByItems;e.push("<hr/>");const i=Bt('<div class="igv-track-menu-category igv-track-menu-border-top">');i.text("Color by:"),e.push({name:void 0,object:i,click:void 0,init:void 0});for(let n of t.keys()){const r=this.colorBy===n;e.push(this.colorByCB({key:n,label:t.get(n)},r))}e.push(this.colorByCB({key:"info",label:"Info field..."}))}if(!0===zf(this.browser.sampleInfo,this.sampleKeys)){e.push("<hr/>"),e.push("Sort by attribute:");for(const s of this.browser.sampleInfo.attributeNames)if(this.sampleKeys.some((e=>{const t=this.browser.sampleInfo.getAttributes(e);return t&&t[s]}))){const o=Bt("<div>");function a(){const e=this._sortDirections.get(s)||1;this.sortByAttribute(s,e),this.config.sort={option:"ATTRIBUTE",attribute:s,direction:e>0?"ASC":"DESC"},this._sortDirections.set(s,-1*e)}o.html(`&nbsp;&nbsp;${s.split(Tu.emptySpaceReplacement).join(" ")}`),e.push({object:o,click:a})}}e.push("<hr/>"),this.getSampleCount()>0&&(e.push({object:Bt('<div class="igv-track-menu-border-top">')}),e.push({object:Bt(Dl("Show Genotypes",this.showGenotypes)),click:function(){this.showGenotypes=!this.showGenotypes,this.trackView.checkContentHeight(),this.trackView.repaintViews(),this.browser.sampleNameControl.performClickWithState(this.browser,this.showGenotypes),this.browser.sampleInfoControl.performClickWithState(this.browser,this.showGenotypes)}})),e.push({object:Bt('<div class="igv-track-menu-border-top">')});for(let c of["COLLAPSED","SQUISHED","EXPANDED"]){e.push({object:Bt(Dl({COLLAPSED:"Collapse",SQUISHED:"Squish",EXPANDED:"Expand"}[c],c===this.displayMode)),click:function(){this.displayMode=c,this.trackView.checkContentHeight(),this.trackView.repaintViews()}})}return this.browser.circularView&&(e.push("<hr>"),e.push({label:"Add SVs to circular view",click:function(){for(let e of this.trackView.viewports)this.sendChordsForViewport(e)}})),this.canCovertToPytor()&&(e.push("<hr>"),e.push({label:"Convert to CNVpytor track",click:function(){this.convertToPytor()}})),e}contextMenuItemList(e){const t=[];if(this.hasSamples()&&this.showGenotypes){const i=e.viewport.referenceFrame,n=e.genomicLocation,r=i.toBP(2.5),s=this._sortDirections.get("genotype")||1;this._sortDirections.set("genotype",-1*s),t.push({label:"Sort by genotype",click:t=>{const i={direction:s,option:"genotype",chr:e.viewport.referenceFrame.chr,start:Math.floor(n-r),end:Math.ceil(n+r)},o=e.viewport.cachedFeatures;this.sortSamplesByGenotype(i,o),this.config.sort=i}}),t.push("<hr/>")}if(this.browser.circularView){const i=e.viewport;t.push({label:"Add SVs to Circular View",click:()=>{this.sendChordsForViewport(i)}}),t.push("<hr/>")}return t}async sortSamplesByGenotype({chr:e,position:t,start:i,end:n,direction:r},s){if(void 0===i&&(i=t-1),void 0===n&&(n=t),s||(s=await this.featureSource.getFeatures({chr:e,start:i,end:n})),!s)return;const o=new Map,a="ASC"===r?1:-1;for(let e of s)if(!(e.end<i)){if(e.start>n)break;for(let t of e.calls){const e=t.sample,i=t.zygosityScore();o.set(e,o.has(e)?o.get(e)+i:i)}}this.sampleKeys.sort((function(e,t){let i=o.get(e)||0,n=o.get(t)||0;return a*(i-n)})),this.trackView.repaintViews()}sortByAttribute(e,t){this.config.sort={option:"ATTRIBUTE",attribute:e,direction:1===t?"ASC":"DESC"},this.sampleKeys=this.browser.sampleInfo.getSortedSampleKeysByAttribute(this.sampleKeys,e,t),this.trackView.repaintViews()}sendChordsForViewport(e){const t=e.referenceFrame;let i;if("all"===t.chr){const e=this.featureSource.getAllFeatures(),t=Object.keys(e).map((t=>e[t]));i=[].concat(...t)}else i=this.featureSource.featureCache.queryFeatures(t.chr,t.start,t.end);zm(i.filter((e=>{const t=e._f||e;return t.info&&t.info.CHR2&&t.info.END&&(t.info.CHR2!==t.chr||Math.abs(Number.parseInt(t.info.END)-t.pos)>1e6)})).map((e=>{const t=e._f||e,i=Number.parseInt(t.info.END),n=i-100,r=i+100;return{uniqueId:`${t.chr}:${t.start}-${t.end}_${t.info.CHR2}:${t.info.END}`,refName:Tm(t.chr),start:t.start,end:t.end,mate:{refName:Tm(t.info.CHR2),start:n,end:r}}})),this,t,.5)}colorByCB(e,t){const i=Bt(Dl(e.label,t));if("info"!==e.key){function n(){const t="none"===e.key?void 0:e.key;this.colorBy=t,this.config.colorBy=t,this.trackView.repaintViews()}return{name:void 0,object:i,click:n,init:void 0}}{function r(e){this.browser.inputDialog.present({label:"Info field",value:"",callback:e=>{e?(this.colorBy=e,this._colorByItems.set(e,e)):this.colorBy=void 0,this.trackView.repaintViews()}},e)}return{name:void 0,object:i,dialog:r,init:void 0}}}getState(){const e=super.getState();return this.color&&"function"!=typeof this.color&&(e.color=this.color),e}getVariantColorTable(e){if(this.colorTables.has(e))return this.colorTables.get(e);if(this.colorTables.has("*"))return this.colorTables.get("*");{let t;if("SVTYPE"===e)t=Kv;else t=new oo("Set1");return this.colorTables.set(e,t),t}}paintAxis(){}canCovertToPytor(){return!this.config.indexURL&&(!!this.header&&(1===Object.keys(this.sampleKeys).length&&this.header.FORMAT&&this.header.FORMAT.AD&&this.header.FORMAT.DP))}async convertToPytor(){this.variantState={...this.config,...this.getState()},this.variantState.trackHeight=this.height,this.trackView.startSpinner(),setTimeout((async()=>{try{const e=Object.assign({},this.config);Object.setPrototypeOf(this,jv.prototype),this.init(e),await this.postInit(),this.trackView.clearCachedFeatures(),this.trackView.setTrackHeight(this.config.height||jv.DEFAULT_TRACK_HEIGHT),this.trackView.checkContentHeight(),this.trackView.updateViews(),this.trackView.track.autoHeight=!1}finally{this.trackView.stopSpinner()}}),100)}}const Kv=new ao({DEL:"#ff2101",INS:"#001888",DUP:"#028401",INV:"#008688",CNV:"#8931ff",BND:"#891100","*":"#002eff"}),Yv={timeout:5e3,type:"plain",url:"https://igv.org/genomes/locus.php?genome=$GENOME$&name=$FEATURE$",coords:0};async function Xv(e,t){const i=e.searchConfig||Yv;let n;const r=e.tracks.filter((e=>e.searchable));for(let e of r){const i=await e.search(t);if(i)return i}if(e.config&&!1!==e.config.search)try{return n=await async function(e,t,i){let n=i.url.replace("$FEATURE$",t.toUpperCase());n.indexOf("$GENOME$")>-1&&(n=n.replace("$GENOME$",e.genome.id?e.genome.id:"hg19"));const r=i.timeout?{timeout:i.timeout}:void 0,s=await Qs.loadString(n,r);return function(e,t,i){let n;n="plain"===i.type?function(e,t){const i=[],n=Dt(t);for(let t of n){const n=t.split("\t");if(n.length>=3){const t=n[1].split(":"),r=t[1].split("-");i.push({chromosome:e.genome.getChromosomeName(t[0].trim()),start:parseInt(r[0].replace(/,/g,"")),end:parseInt(r[1].replace(/,/g,"")),name:n[0].toUpperCase()})}}return i}(e,t):JSON.parse(t);i.resultsField&&(n=n[i.resultsField]);if(n&&0!==n.length){const e=i.chromosomeField||"chromosome",t=i.startField||"start",r=i.endField||"end",s=i.coords||1;let o;o=Array.isArray(n)?n[0]:n,o.hasOwnProperty(e)&&o.hasOwnProperty(t)||console.error("Search service results must include chromosome and start fields: "+o);const a=o[e];let c=o[t]-s,l=o[r];void 0===l&&(l=c+1);const h={chr:a,start:c,end:l};if(!o.type||o.type,i.geneField&&i.snpField){const e=o[i.geneField]||o[i.snpField];e&&(h.name=e.toUpperCase())}return h}return}(e,s,i)}(e,t,i),n}catch(e){console.log("Search service not available "+e)}}function Zv(e,t=!1){const i=e.split("\t");if(i.length>2)try{const e=i[0],t=parseInt(i[1].replace(/,/g,""),10)-1,n=parseInt(i[2].replace(/,/g,""),10);if(!isNaN(t)&&!isNaN(n))return{chr:e,start:t,end:n}}catch(e){}const n=e.split(":"),r={chr:n[0]};if(n.length>1){let e,i=n[1].split("-");if(i.length>2){if(!n[1].startsWith("-"))return;{const e=n[1].indexOf("-",1);if(e>0){i=[n[1].substring(0,e),n[1].substring(e+1)]}}}if(e=i[0].replace(/,/g,""),isNaN(e))return;if(r.start=parseInt(e,10)-1,r.end=r.start+1,1===i.length&&(r.start-=20,r.end+=20),2===i.length){if(e=i[1].replace(/,/g,""),isNaN(e))return;if(r.end=parseInt(e,10),r.start<0&&!t){const e=-extent.start;r.start+=e,r.end+=e}}}return r}class Jv extends Hl{constructor(e,t){super(e,t)}init(e){super.init(e),this.type="qtl",this.name=e.name;const t=e.minLogP||e.min,i=e.maxLogP||e.max;this.dataRange={min:void 0!==t?t:3.5,max:i||25},this.autoscale=!i||e.autoscale,this.autoscalePercentile=void 0===e.autoscalePercentile?98:e.autoscalePercentile,this.background=e.background,this.divider=e.divider||"rgb(225,225,225)",this.dotSize=e.dotSize||2,this.height=e.height||100,this.autoHeight=!1,this.disableButtons=e.disableButtons,this.featureSource=wd(e,this.browser.genome)}paintAxis(e,t,i){const n=(this.dataRange.max-this.dataRange.min)/i,r={font:"normal 10px Arial",textAlign:"right",strokeStyle:"black"};xo.fillRect(e,0,0,t,i,{fillStyle:"rgb(255, 255, 255)"});const s=Math.ceil(10*(this.dataRange.max-this.dataRange.min)/i);for(let o=4;o<=this.dataRange.max;o+=s){const s=.85*t,a=s-5,c=s,l=i-(o-this.dataRange.min)/n;xo.strokeLine(e,a,l,c,l,r),l>8&&xo.fillText(e,o,a-1,l+2,r)}r.textAlign="center",xo.fillText(e,"-log10(pvalue)",t/4,i/2,r,{rotate:{angle:-90}})}async getFeatures(e,t,i){const n=this.visibilityWindow;return await this.featureSource.getFeatures({chr:e,start:t,end:i,visibilityWindow:n})}draw(e){const{context:t,referenceFrame:i,pixelWidth:n,pixelHeight:r}=e;this.background&&xo.fillRect(t,0,0,n,r,{fillStyle:this.background}),xo.strokeLine(t,0,r-1,n,r-1,{strokeStyle:this.divider}),i.feature&&i.feature.match(/RS[0-9]+/);const s=i=>{const s=i?2*this.dotSize:this.dotSize,o=e.bpStart,a=(this.dataRange.max-this.dataRange.min)/r;for(let d of e.features){const u=(d.start-o+.5)/e.bpPerPixel;if(u<0)continue;if(u>n)break;const f=d.phenotype;let p;if(this.browser.qtlSelections.qtl?(l=this.browser.qtlSelections.qtl,h=d,p=l.chr===h.chr&&l.start===h.start&&l.pValue===h.pValue):p=this.browser.qtlSelections.snps.size>0?this.browser.qtlSelections.hasSnp(d.snp)&&this.browser.qtlSelections.hasPhenotype(f):this.browser.qtlSelections.hasPhenotype(f),!i||p){var c=-Math.log(d.pValue)/Math.LN10;if(c>=this.dataRange.min){let e;c>this.dataRange.max?(c=this.dataRange.max,e=!0):e=!1;const n=Math.max(0+s,r-Math.round((c-this.dataRange.min)/a));let o;d.px=u,d.py=n,d.radius=s,i&&p?(o=this.browser.qtlSelections.colorForGene(f),xo.setProperties(t,{fillStyle:o,strokeStyle:"black"})):(o=e?"rgb(150, 150, 150)":"rgb(180, 180, 180)",xo.setProperties(t,{fillStyle:o,strokeStyle:o})),xo.fillCircle(t,u,n,s),xo.strokeCircle(t,u,n,s)}}}var l,h};s(!1),s(!0)}popupData(e,t){if(void 0===t&&(t=e.viewport.cachedFeatures),!t||0===t.length)return[];const i=this.name,n=[];for(let r of this._clickedFeatures(e,t))n.length>0&&n.push("<hr/>"),"function"==typeof r.popupData?n.push(...r.popupData(e)):n.push({name:"snp id",value:r.snp},{name:"gene id",value:r.gencodeId},{name:"gene name",value:r.geneSymbol},{name:"p value",value:r.pValue},{name:"tissue",value:i});return n}_clickedFeatures(e,t){const i=(e,t)=>Math.sqrt((e.px-t.canvasX)*(e.px-t.canvasX)+(e.py-t.canvasY)*(e.py-t.canvasY)),n=t.filter((t=>i(t,e)<6));if(n.length>1){n.sort(((t,n)=>i(t,e)-i(n,e)));const t=i(n[0],e);return n.filter((n=>i(n,e)<=t))}return n}contextMenuItemList(e){const t=[],i=e.viewport.cachedFeatures;if(i){const n=this._clickedFeatures(e,i);n.length>0&&(t.push({label:"Highlight associated features",click:async()=>{this.browser.qtlSelections.clear();for(let e of n)this.browser.qtlSelections.qtl=e,this.browser.qtlSelections.addPhenotype(e.phenotype);this.browser.repaintViews()}}),t.push("<hr>"))}return t}menuItemList(){const e=[];return e.push(...this.numericDataMenuItems()),e.push("<hr/>"),e.push({label:"Search for...",dialog:function(e){this.browser.inputDialog.present({label:"Search for snp or phenotype",value:"",callback:async e=>{if(e){e=e.trim().toUpperCase();const t=t=>((t.phenotype&&t.phenotype.toUpperCase())===e||t.snp&&t.snp.toUpperCase()===e)&&-Math.log(t.pValue)/Math.LN10>this.dataRange.min;let i,n,r,s=await this.featureSource.findFeatures(t);if(0==s.length){await this.browser.search(e)&&(s=await this.featureSource.findFeatures(t))}if(s.length>0){this.browser.qtlSelections.clear();const t=new Set;i=s[0].chr,n=s[0].start,r=s[0].end;for(let o of s)o.snp&&o.snp.toUpperCase()===e&&this.browser.qtlSelections.addSnp(o.snp),this.browser.qtlSelections.addPhenotype(o.phenotype),t.add(o.phenotype),o.chr===i&&(n=Math.min(n,o.start),r=Math.max(r,o.end));const o=this.browser.genome.getChromosomeName(i);for(let e of t){const t=await Xv(this.browser,e);t&&o===this.browser.genome.getChromosomeName(t.chr)&&(n=Math.min(n,t.start),r=Math.max(r,t.end))}const a=Math.floor(.1*(r-n));n=Math.max(0,n-a),r+=a,await this.browser.search(`${i}:${n}-${r}`)}}}},e)}}),e}doAutoscale(e){let t=this.config.max||25;if(e.length>0){const i=e.map((e=>-Math.log(e.pValue)/Math.LN10));i.sort(((e,t)=>e-t));t=i[Math.floor(i.length*(this.autoscalePercentile/100))]}return this.dataRange.max=Math.max(t,10),this.dataRange}}const ey={X:"rgb(204, 153, 0)",Y:"rgb(153, 204, 0)",Un:"darkGray)",1:"rgb(80, 80, 255)",2:"rgb(206, 61, 50)","2a":"rgb(210, 65, 55)","2b":"rgb(215, 70, 60)",3:"rgb(116, 155, 88)",4:"rgb(240, 230, 133)",5:"rgb(70, 105, 131)",6:"rgb(186, 99, 56)",7:"rgb(93, 177, 221)",8:"rgb(128, 34, 104)",9:"rgb(107, 215, 107)",10:"rgb(213, 149, 167)",11:"rgb(146, 72, 34)",12:"rgb(131, 123, 141)",13:"rgb(199, 81, 39)",14:"rgb(213, 143, 92)",15:"rgb(122, 101, 165)",16:"rgb(228, 175, 105)",17:"rgb(59, 27, 83)",18:"rgb(205, 222, 183)",19:"rgb(97, 42, 121)",20:"rgb(174, 31, 99)",21:"rgb(231, 199, 111)",22:"rgb(90, 101, 94)",23:"rgb(204, 153, 0)",24:"rgb(153, 204, 0)",25:"rgb(51, 204, 0)",26:"rgb(0, 204, 51)",27:"rgb(0, 204, 153)",28:"rgb(0, 153, 204)",29:"rgb(10, 71, 255)",30:"rgb(71, 117, 255)",31:"rgb(255, 194, 10)",32:"rgb(255, 209, 71)",33:"rgb(153, 0, 51)",34:"rgb(153, 26, 0)",35:"rgb(153, 102, 0)",36:"rgb(128, 153, 0)",37:"rgb(51, 153, 0)",38:"rgb(0, 153, 26)",39:"rgb(0, 153, 102)",40:"rgb(0, 128, 153)",41:"rgb(0, 51, 153)",42:"rgb(26, 0, 153)",43:"rgb(102, 0, 153)",44:"rgb(153, 0, 128)",45:"rgb(214, 0, 71)",46:"rgb(255, 20, 99)",47:"rgb(0, 214, 143)",48:"rgb(20, 255, 177)"};for(let BA of Object.keys(ey)){ey["chr"+BA]=ey[BA]}for(let MA=1;MA<=48;MA++){if(10===MA)continue;const RA=ty(MA);ey[RA]=ey[MA.toString()]}function ty(e){if(!+e)return!1;for(var t=String(+e).split(""),i=["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"],n="",r=3;r--;)n=(i[+t.pop()+10*r]||"")+n;return Array(+t.join("")+1).join("M")+n}class iy extends Hl{constructor(e,t){super(e,t)}init(e){super.init(e),this.useChrColors=void 0===e.useChrColors||e.useChrColors,this.trait=e.trait,this.posteriorProbability=e.posteriorProbability,this.valueProperty="bed"===e.format?"score":"value",this.height=e.height||100,this.autoscale=e.autoscale,this.autoscalePercentile=void 0===e.autoscalePercentile?98:e.autoscalePercentile,this.background=e.background,this.divider=e.divider||"rgb(225,225,225)",this.dotSize=e.dotSize||3,this.popoverWindow=void 0===e.popoverWindow?1e8:e.popoverWindow,this.useChrColors?this.colorScale=new ao(e.colorTable||ey):e.color?this.colorScale=new uf(e.color):this.colorScale=new hf(e.colorScale||{thresholds:[5e-8,5e-4,.5],colors:["rgb(255,50,50)","rgb(251,100,100)","rgb(251,170,170)","rgb(227,238,249)"]}),this.featureSource=wd(e,this.browser.genome)}async postInit(){if("function"!=typeof this.featureSource.getHeader||(this.header=await this.featureSource.getHeader(),!this.disposed))return this.header&&this.setTrackProperties(this.header),this.autoscale||(this.posteriorProbability?this.dataRange={min:void 0===this.config.min?0:this.config.min,max:void 0===this.config.max?1:this.config.max}:this.dataRange={min:void 0===this.config.min?0:this.config.min,max:void 0===this.config.max?25:this.config.max}),this}get supportsWholeGenome(){return!0}async getFeatures(e,t,i){const n=this.visibilityWindow;return this.featureSource.getFeatures({chr:e,start:t,end:i,visibilityWindow:n})}draw(e){const t=e.features,i=e.context,n=e.pixelWidth,r=e.pixelHeight;if(this.background&&xo.fillRect(i,0,0,n,r,{fillStyle:this.background}),xo.strokeLine(i,0,r-1,n,r-1,{strokeStyle:this.divider}),t){const s=e.bpPerPixel,o=e.bpStart,a=o+n*s+1;for(let e of t){const t=e.start;if(t<o)continue;if(t>a)break;let n;if(this.posteriorProbability)n=e[this.valueProperty];else{const t=e[this.valueProperty];if(!t)continue;n=-Math.log10(t)}const c=this.useChrColors?e._f?e._f.chr:e.chr:n,l=this.colorScale.getColor(c),h=(this.dataRange.max-this.dataRange.min)/r,d=Math.round((t-o)/s),u=Math.max(this.dotSize,r-Math.round((n-this.dataRange.min)/h));l&&xo.setProperties(i,{fillStyle:l,strokeStyle:"black"}),xo.fillCircle(i,d,u,this.dotSize),e.px=d,e.py=u}}}paintAxis(e,t,i){xo.fillRect(e,0,0,t,i,{fillStyle:"rgb(255, 255, 255)"});var n={font:"normal 10px Arial",textAlign:"right",strokeStyle:"black"};const r=(this.dataRange.max-this.dataRange.min)/i;if(this.posteriorProbability){const t=.1;for(let s=this.dataRange.min;s<this.dataRange.max;s+=t){const t=i-Math.round((s-this.dataRange.min)/r);xo.strokeLine(e,45,t-2,50,t-2,n),xo.fillText(e,s.toFixed(1),44,t+2,n)}}else{const t=Math.ceil(10*(this.dataRange.max-this.dataRange.min)/i);for(let s=this.dataRange.min;s<this.dataRange.max;s+=t){const t=i-Math.round((s-this.dataRange.min)/r);xo.strokeLine(e,45,t,50,t,n),xo.fillText(e,Math.floor(s),44,t+4,n)}}n.textAlign="center",this.posteriorProbability?xo.fillText(e,"PPA",t/2,i/2,n,{rotate:{angle:-90}}):xo.fillText(e,"-log10(pvalue)",t/2,i/2,n,{rotate:{angle:-90}})}popupData(e,t){void 0===t&&(t=e.viewport.cachedFeatures);let i=[];const n=e.viewport.trackView.track;if(t){let r=0;for(let s of t){const t=Math.abs(e.canvasX-s.px),o=Math.abs(e.canvasY-s.py);if(t<this.dotSize&&o<this.dotSize){if(r>0&&i.push("<HR/>"),5==r){i.push("...");break}if(s=s._f||s,"function"==typeof s.popupData)i=i.concat(s.popupData());else{const e=s[this.valueProperty],t=s.chr,r=Rt(s.start+1);i.push({name:"chromosome",value:t}),i.push({name:"position",value:r}),i.push({name:"name",value:s.name}),n.posteriorProbability?i.push({name:"posterior probability",value:e}):i.push({name:"pValue",value:e})}r++}}}return i}menuItemList(){return this.numericDataMenuItems()}doAutoscale(e){if(e.length>0){const t=this.valueProperty,i=this.posteriorProbability,n=e.map((function(e){const n=e[t];return{value:i?n:-Math.log(n)/Math.LN10}}));this.dataRange=Qa(n)}else this.posteriorProbability?this.dataRange={min:this.config.min||0,max:this.config.max||1}:this.dataRange={min:this.config.max||25,max:this.config.min||0};return this.dataRange}}class ny extends Hl{constructor(e,t){super(e,t)}init(e){super.init(e),this.autoscale=e.autoscale||void 0===e.max,this.dataRange={min:e.min||0,max:e.max},this.windowFunction=e.windowFunction||"mean",this.paintAxis=Yu,this.graphType=e.graphType||"bar",e._featureSource?(this.featureSource=e._featureSource,delete e._featureSource):this.featureSource=wd(this.config,this.browser.genome),this.visibilityWindow=-1,this.featureSource.visibilityWindow=this.visibilityWindow}async postInit(){if("function"==typeof this.featureSource.getHeader){if(this.header=await this.featureSource.getHeader(),this.disposed)return;if(this.sampleKeys=this.header.columnNames.slice(3),this.setTrackProperties(this.header),this.header.hasOwnProperty("clickToHighlight")){let e=this.header.clickToHighlight;this.config.clickToHighlight=e,this.config.samplesClickedToHighlight={}}if(this.header.hasOwnProperty("highlight")){this.config.highlightSamples={};let e=this.header.highlight;Array.isArray(e)||(e=[e]);for(let t of e){const e=t.split(";");2===e.length&&(this.config.highlightSamples[e[0]]=e[1])}}}}menuItemList(){return this.numericDataMenuItems()}async getFeatures(e,t,i){const n=await this.featureSource.getFeatures({chr:e,start:0,end:Number.MAX_SAFE_INTEGER,visibilityWindow:this.visibilityWindow});let r,s;for(let e=1;e<n.length-1;e++)if(void 0===r&&n[e].end>t&&(r=e-1),void 0===s&&n[e].start>i){s=e+1;break}return void 0===r&&(r=0),void 0===s&&(s=n.length),n.slice(r,s)}draw(e){const{features:t,context:i,bpPerPixel:n,bpStart:r,pixelWidth:s,pixelHeight:o}=e,a=e=>(this.dataRange.max-e)/(this.dataRange.max-this.dataRange.min)*o,c=function(e){let t=Math.floor((e-r)/n);return isNaN(t)&&console.warn("isNaN(x). feature start "+Rt(e)+" bp start "+Rt(r)),t};if(t&&t.length>0&&(void 0===this.dataRange.min&&(this.dataRange.min=0),this.dataRange.max>this.dataRange.min)){const e=this.config.highlightSamples,n=this.config.onlyHandleClicksForHighlightedSamples,r=this.config.clickToHighlight;let s=-1,o={},l=[],h=[];this.clickDetectorCache={};for(let d of t){const t=c(d.start),u=c(d.end),f=s>=0?c(s):t;if(!isNaN(t)&&!isNaN(u)){this.clickDetectorCache[t]=[],this.clickDetectorCache[u]=[];for(let s=0;s<d.values.length;s++){const c=this.sampleKeys[s],p=d.values[s],g=a(p);if(t-f>=1){const s=o[c],h=a(s),d=e&&e[c];d?l.push([f,h,t,g,d]):r&&c in this.config.samplesClickedToHighlight?l.push([f,h,t,g,this.config.samplesClickedToHighlight[c]]):xo.strokeLine(i,f,h,t,g,{strokeStyle:"#D9D9D9"}),n&&!(c in e)||this.clickDetectorCache[t].push([f,h,t,g,c,d||"gray"])}if(u-t>=1){const s=e&&e[c];s?h.push([t,g,u,g,s]):r&&c in this.config.samplesClickedToHighlight?h.push([t,g,u,g,this.config.samplesClickedToHighlight[c]]):xo.strokeLine(i,t,g,u,g,{strokeStyle:"gray"}),n&&!(c in e)||this.clickDetectorCache[u].push([t,g,u,g,c,s||"gray"])}o[c]=p}s=d.end}}for(let e of l)xo.strokeLine(i,e[0],e[1],e[2],e[3],{strokeStyle:e[4],lineWidth:1.3});for(let e of h)xo.strokeLine(i,e[0],e[1],e[2],e[3],{strokeStyle:e[4],lineWidth:2})}(e=>{if(this.config.hasOwnProperty("guideLines"))for(let t of this.config.guideLines)if(t.hasOwnProperty("color")&&t.hasOwnProperty("y")&&t.hasOwnProperty("dotted")){let i=a(t.y),n={strokeStyle:t.color,strokeWidth:2};t.dotted?xo.dashedLine(e.context,0,i,e.pixelWidth,i,5,n):xo.strokeLine(e.context,0,i,e.pixelWidth,i,n)}})(e)}doAutoscale(e){let t,i;return e.length>0?(t=Number.MAX_VALUE,i=-Number.MAX_VALUE,e.forEach((function(e){t=Math.min(t,...e.values),i=Math.max(i,...e.values)})),t-=.01,i+=.01):(t=0,i=100),{min:t,max:i}}clickedFeatures(e){const t=e.canvasX,i=e.canvasY;let n=null;for(n of Object.keys(this.clickDetectorCache))if(n=parseInt(n),n>=t)break;if(n){let e=Number.MAX_VALUE,o=[];const a=this.clickDetectorCache[n];for(let n of a){const r=n[0],s=n[2];if(t<r||t>s)return[];const a=n[1],c=n[3];if(i<Math.min(a,c)-10||i>Math.max(a,c)+10)continue;const l=ry(t,i,r,a,s,c);l<e&&(o=[{name:n[4],color:n[5]}],e=l)}if(e<5){if(this.config.clickToHighlight){if(o[0].name in this.config.samplesClickedToHighlight)delete this.config.samplesClickedToHighlight[o[0].name];else if("any"===this.config.clickToHighlight){var r=["red","darkblue","green","teal","olivedrab","orange","maroon","purple","blue","gold"],s=r[Math.floor(Math.random()*(r.length+1))];this.config.samplesClickedToHighlight[o[0].name]=s}else this.config.samplesClickedToHighlight[o[0].name]=this.config.clickToHighlight;this.trackView.repaintViews()}return o}}return[]}popupData(e,t){void 0===t&&(t=this.clickedFeatures(e));const i=[];return t.forEach((function(e){for(let t of Object.keys(e))Ua(e[t])&&i.push({name:t,value:e[t]})})),i}get supportsWholeGenome(){return!1}}function ry(e,t,i,n,r,s){const o=r-i,a=s-n,c=Math.abs(o*(n-t)-(i-e)*a),l=Math.sqrt(o*o+a*a);return l>0?c/l:0}class sy extends Hl{static defaults={height:300,theta:Math.PI/2,arcOrientation:"UP"};constructor(e,t){super(e,t),!1===e.arcOrientation?this.arcOrientation="DOWN":!0===e.arcOrientation?this.arcOrientation="UP":e.arcOrientation?this.arcOrientation=e.arcOrientation.toUpperCase():this.arcOrientation="UP","bp"===e.format?this.featureSource=new ay(e,t.genome):this.featureSource=new Ph(e,t.genome)}async getFeatures(e,t,i){const n=this.visibilityWindow;return this.featureSource.getFeatures({chr:e,start:t,end:i,visibilityWindow:n})}draw(e){const t=e.context,i=Math.PI/2,n=e.pixelWidth,r=e.pixelHeight;e.viewportWidth;const s=e.bpPerPixel,o=e.bpStart,a=s,c="UP"===this.arcOrientation;xo.fillRect(t,0,e.pixelTop,n,r,{fillStyle:"rgb(255, 255, 255)"});const l=e.features;if(l){oy(l,1);for(let e of l)if(e.startLeft){let n=Math.round((e.startLeft-o)/a),r=Math.round((e.startRight-o)/a),s=Math.round((e.endLeft-o)/a),l=Math.round((e.endRight-o)/a);t.fillStyle=e.color,t.strokeStyle=e.color,t.beginPath();let h=(n+l)/2,d=(l-n)/2,u=this.height,f=Math.PI+(Math.PI/2-i),p=2*Math.PI-(Math.PI/2-i);c?(t.arc(h,u,d,f,p),t.lineTo(s,u)):(u=0,t.arc(h,u,d,p,f),t.lineTo(l,u));const g=(r+s)/2,m=(s-r)/2,w=u;c?(t.arc(g,w,m,p,f,!0),t.lineTo(n,w)):(t.arc(g,w,m,f,p,!0),t.lineTo(s,w)),t.stroke(),t.fill(),e.drawState={x1:h,y1:u,r1:d,x2:g,y2:w,r2:m,sa:f,ea:p}}else{let n=Math.round((e.start-o)/a),r=Math.round((e.end-o)/a);t.strokeStyle=e.color,t.beginPath();let s=(n+r)/2,l=(r-n)/2,h=this.height,d=Math.PI+(Math.PI/2-i),u=2*Math.PI-(Math.PI/2-i);c?t.arc(s,h,l,d,u):(h=0,t.arc(s,h,l,u,d)),t.stroke(),e.drawState={x1:s,y1:h,r1:l,sa:d,ea:u}}}}clickedFeatures(e){const t=super.clickedFeatures(e),i=[];oy(t,-1);for(let n of t){const t=n.drawState,r=e.canvasX-t.x1,s=e.canvasY-t.y1,o=Math.sqrt(r*r+s*s),a=t.r1+3;let c,l;if(void 0===t.x2)c=o,l=t.r1-3;else{const i=e.canvasX-t.x2,n=e.canvasY-t.y2;c=Math.sqrt(i*i+n*n),l=t.r2-3}if(o<a&&c>l){i.push(n);break}}return i}popupData(e,t){if(void 0===t&&(t=this.clickedFeatures(e)),t&&t.length>0)return this.extractPopupData(t[0],this.getGenomeId())}menuItemList(){return[{name:"Toggle arc direction",click:function(){this.arcOrientation="UP"===this.arcOrientation?"DOWN":"UP",this.trackView.repaintViews()}}]}}function oy(e,t){e.sort((function(e,i){const n=void 0===e.score?-Number.MAX_VALUE:e.score,r=void 0===i.score?-Number.MAX_VALUE:i.score;return(void 0===t?1:t)*(n-r)}))}class ay{constructor(e,t){this.config=e,this.genome=t}async getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:r}){const s=this.genome;if(this.featureCache)return this.featureCache.queryFeatures(e,t,i);{const n=qa(this.config),r=await Qs.loadByteArray(this.config.url,n);return this.featureCache=new Zs(function(e){if(!e)return null;const t=mh(e);let i,n=!0;const r=[],s=[],o=[];for(;void 0!==(i=t.nextLine());){const e=i.split("\t");if(n&&i.startsWith("color:")){const t="rgb("+e[1]+","+e[2]+","+e[3]+")";r.push(t),e.length>4&&s.push(e[4])}else{n=!1;const t=e[0],i=Number.parseInt(e[1])-1,c=Number.parseInt(e[2])-1,l=Number.parseInt(e[3]),h=Number.parseInt(e[4]);var a=Number.parseInt(e[5]);const d=r[a];let u;u=i<=h?{chr:t,startLeft:Math.min(i,c),startRight:Math.max(i,c),endLeft:Math.min(l,h),endRight:Math.max(l,h),color:d,score:a}:{chr:t,startLeft:Math.min(l,h),startRight:Math.max(l,h),endLeft:Math.min(i,c),endRight:Math.max(i,c),color:d,score:a},u.start=u.startLeft,u.end=u.endRight,s.length>a&&(u.description=s[a]),o.push(u)}}return o}(r),s),this.featureCache.queryFeatures(e,t,i)}}}class cy{constructor(e){this.browser=e,this.type="ideogram",this.height=16,this.order=Number.MIN_SAFE_INTEGER,this.disableButtons=!0,this.ignoreTrackMenu=!0}computePixelHeight(e){return this.height}draw({context:e,referenceFrame:t,pixelWidth:i,pixelHeight:n,features:r}){const s=t.chr,o=t.genome.getChromosome(s);if(void 0===o||i<=0||n<=0||"all"===s.toLowerCase())return;!function({ctx:e,chr:t,referenceFrame:i,genome:n,width:r,height:s,stainColors:o,features:a}){const c=1,l=.5*c,h=0;if(void 0===n)return;xo.fillRect(e,0,0,r,s,{fillStyle:_s.greyScale(255)});const d=a;if(d){const t=h+s/2,i=[],n=[];if(0===d.length)return;const a=r/d[d.length-1].end;e.beginPath(),xo.roundRect(e,l,l+h,r-2*l,s-2*l,(s-2*l)/2,0,1),e.clip();for(let r=0;r<d.length;r++){const l=d[r],u=a*l.start,f=a*l.end;"c"===l.type?("p"===l.name.charAt(0)?(i[0]=u,n[0]=s+h,i[1]=u,n[1]=h,i[2]=f,n[2]=t):(i[0]=f,n[0]=s+h,i[1]=f,n[1]=h,i[2]=u,n[2]=t),e.fillStyle="rgb(150, 0, 0)",e.strokeStyle="rgb(150, 0, 0)",xo.polygon(e,i,n,1,0)):(e.fillStyle=ly(o,l),xo.fillRect(e,u,c+h,f-u,s-2*c))}}e.strokeStyle=_s.greyScale(41),xo.roundRect(e,l,l+h,r-2*l,s-2*l,(s-2*l)/2,0,1)}({ctx:e,features:r,chr:s,referenceFrame:t,genome:t.genome,width:i,height:n,stainColors:[]});const a=Math.round(t.bpPerPixel*i),c=t.start;let l=o.bpLength;const h=t.genome.getCytobands(s);if(h&&h.length>0&&h[h.length-1].end&&(l=Math.max(l,h[h.length-1].end),o.bpLength=l),a<l){const t=a/l,r=c/l;let s=Math.floor(r*i),o=Math.floor(t*i);s=Math.max(0,s),s=Math.min(i-o,s),e.save(),e.strokeStyle="red",e.lineWidth=o<2?1:2;const h=s+e.lineWidth/2;o=o<2?1:o-e.lineWidth;const d=e.lineWidth/2,u=n-e.lineWidth;e.strokeRect(h,d,o,u),e.restore()}}dispose(){this.trackView=void 0}}function ly(e,t){if("c"===t.type)return"rgb(150, 10, 10)";var i=t.stain,n=230;"p"===t.type&&(n=Math.floor(230-i/100*230));var r=e[n];return r||(r="rgb("+n+","+n+","+n+")",e[n]=r),r}let hy=new oo("Dark2");["GT/AG","CT/AC","GC/AG","CT/GC","AT/AC","GT/AT","non-canonical"].forEach((e=>{hy.getColor(e)}));class dy extends Hl{static defaults={margin:10,colorByNumReadsThreshold:5,height:100};constructor(e,t){super(e,t)}init(e){super.init(e),this.type=e.type||"junctions",e._featureSource?(this.featureSource=e._featureSource,delete e._featureSource):this.featureSource=e.featureSource?e.featureSource:wd(e,this.browser.genome)}async postInit(){if("function"!=typeof this.featureSource.getHeader||(this.header=await this.featureSource.getHeader(),!this.disposed))return this.header&&this.setTrackProperties(this.header),void 0===this.visibilityWindow&&"function"==typeof this.featureSource.defaultVisibilityWindow&&(this.visibilityWindow=await this.featureSource.defaultVisibilityWindow()),this}get supportsWholeGenome(){return!1}async getFeatures(e,t,i,n){const r=this.visibilityWindow;return this.featureSource.getFeatures({chr:e,start:t,end:i,bpPerPixel:n,visibilityWindow:r})}computePixelHeight(e){return this.height}draw(e){const t=e.features,i=e.context,n=e.bpPerPixel,r=e.bpStart,s=e.pixelWidth,o=e.pixelHeight,a=r+s*n+1;if(this.isMergedTrack||xo.fillRect(i,0,e.pixelTop,s,o,{fillStyle:"rgb(255, 255, 255)"}),t){const s={};s.referenceFrame=e.viewport.referenceFrame,s.referenceFrameStart=s.referenceFrame.start,s.referenceFrameEnd=s.referenceFrameStart+s.referenceFrame.toBP(e.viewport.getWidth()),s.featureZoomOutTracker={};for(let e of t)if(!(e.end<r)){if(e.start>a)break;this.renderJunction(e,r,n,o,i,s)}}else console.log("No feature list")}renderJunction(e,t,i,n,r,s){e.isVisible=!1;const o=Math.round((e.start-t)/i),a=Math.round((e.end-t)/i),c=(o+a)/2;if(a-o<=3){if(c in s.featureZoomOutTracker)return;s.featureZoomOutTracker[c]=!0}if(this.config.hideAnnotatedJunctions&&"true"===e.attributes.annotated_junction)return;if(this.config.hideUnannotatedJunctions&&"false"===e.attributes.annotated_junction)return;if(this.config.hideMotifs&&this.config.hideMotifs.includes(e.attributes.motif))return;if(this.config.hideStrand===e.strand)return;if(this.config.minJunctionEndsVisible){let t=0;if(e.start>=s.referenceFrameStart&&e.start<=s.referenceFrameEnd&&(t+=1),e.end>=s.referenceFrameStart&&e.end<=s.referenceFrameEnd&&(t+=1),t<this.config.minJunctionEndsVisible)return}let l,h,d,u;if(e.attributes.uniquely_mapped){if(l=parseInt(e.attributes.uniquely_mapped),l<this.config.minUniquelyMappedReads)return;if(h=parseInt(e.attributes.multi_mapped),d=l+h,d<this.config.minTotalReads)return;if(d>0&&h/d>this.config.maxFractionMultiMappedReads)return;if(e.attributes.maximum_spliced_alignment_overhang&&parseInt(e.attributes.maximum_spliced_alignment_overhang)<this.config.minSplicedAlignmentOverhang)return}if(e.attributes.num_samples_with_this_junction){if(u=parseInt(e.attributes.num_samples_with_this_junction),this.config.minSamplesWithThisJunction&&u<this.config.minSamplesWithThisJunction)return;if(this.config.maxSamplesWithThisJunction&&u>this.config.maxSamplesWithThisJunction)return;if(e.attributes.num_samples_total&&(e.attributes.percent_samples_with_this_junction=100*u/Number(e.attributes.num_samples_total),this.config.minPercentSamplesWithThisJunction&&(e.attributes.percent_samples_with_this_junction<this.config.minPercentSamplesWithThisJunction||e.attributes.percent_samples_with_this_junction>this.config.maxPercentSamplesWithThisJunction)))return}const f=this.margin,p=n,g=f+.5*p;let m=f;const w=f+p-10,b=(o+c)/2,F=(c+a)/2;let v,y,A=1;e.attributes.line_width?A=Number(e.attributes.line_width):(void 0===this.config.thicknessBasedOn||"numUniqueReads"===this.config.thicknessBasedOn?A=l:"numReads"===this.config.thicknessBasedOn?A=d:"numSamplesWithThisJunction"===this.config.thicknessBasedOn&&void 0!==u&&(A=u),A=1+Math.log(A+1)/Math.log(12)),void 0===this.config.bounceHeightBasedOn||"random"===this.config.bounceHeightBasedOn?v=(e.start+e.end)%7:"distance"===this.config.bounceHeightBasedOn?v=6*(e.end-e.start)/(s.referenceFrameEnd-s.referenceFrameStart):"thickness"===this.config.bounceHeightBasedOn&&(v=2*A),m+=p*Math.max(7-v,0)/10,y=e.attributes.color?e.attributes.color:void 0===this.config.colorBy||"numUniqueReads"===this.config.colorBy?l>this.config.colorByNumReadsThreshold?"blue":"#AAAAAA":"numReads"===this.config.colorBy?d>this.config.colorByNumReadsThreshold?"blue":"#AAAAAA":"isAnnotatedJunction"===this.config.colorBy?"true"===e.attributes.annotated_junction?"#b0b0ec":"orange":"strand"===this.config.colorBy?"+"===e.strand?"#b0b0ec":"#ecb0b0":"motif"===this.config.colorBy?hy.getColor(e.attributes.motif):"#AAAAAA";let C="";e.attributes.label?C=e.attributes.label.replace(/_/g," "):void 0===this.config.labelWith||"uniqueReadCount"===this.config.labelWith?C=l:"totalReadCount"===this.config.labelWith?C=d:"numSamplesWithThisJunction"===this.config.labelWith?void 0!==u&&(C=u):"percentSamplesWithThisJunction"===this.config.labelWith?void 0!==e.attributes.percent_samples_with_this_junction&&(C=e.attributes.percent_samples_with_this_junction.toFixed(0)+"%"):"motif"===this.config.labelWith&&void 0!==e.attributes.motif&&(C+=e.attributes.motif),"uniqueReadCount"===this.config.labelWithInParen?C+=" ("+l+")":"totalReadCount"===this.config.labelWithInParen?C+=" ("+d+")":"multiMappedReadCount"===this.config.labelWithInParen?h>0&&(C+=" (+"+h+")"):"numSamplesWithThisJunction"===this.config.labelWithInParen?void 0!==u&&(C+=" ("+u+")"):"percentSamplesWithThisJunction"===this.config.labelWithInParen?void 0!==e.attributes.percent_samples_with_this_junction&&(C+=" ("+e.attributes.percent_samples_with_this_junction.toFixed(0)+"%)"):"motif"===this.config.labelWithInParen&&void 0!==e.attributes.motif&&(C+=` ${e.attributes.motif}`),e.isVisible=!0,r.beginPath(),r.moveTo(o,w),r.bezierCurveTo(b,m,F,m,a,w),r.lineWidth=A,r.strokeStyle=y,r.stroke();const _=(e,t,i,n)=>{e.beginPath(),e.moveTo(t,i),e.lineTo(t-n/2,i-n),e.lineTo(t+n/2,i-n),e.lineTo(t,i),e.closePath(),e.fill()};if(e.attributes.left_shape||e.attributes.right_shape){r.fillStyle=y;const t=r.lineWidth>2?10:7;e.attributes.left_shape&&_(r,o,w,t),e.attributes.right_shape&&_(r,a,w,t)}r.fillText(C,c-r.measureText(C).width/2,(7*m+g)/8)}clickedFeatures(e){return super.clickedFeatures(e).filter((function(e){return e.isVisible&&e.attributes}))}popupData(e,t){void 0===t&&(t=this.clickedFeatures(e));const i=e.genomicLocation,n=[];for(let e of t){const t="function"==typeof e.popupData?e.popupData(i):this.extractPopupData(e._f||e,this.getGenomeId());t&&(n.length>0&&n.push("<hr/><hr/>"),Array.prototype.push.apply(n,t))}return n}dispose(){this.trackView=void 0}}const uy=new Map([["ideogram",(e,t)=>new cy(e,t)],["sequence",(e,t)=>new Gd(e,t)],["feature",(e,t)=>new Rd(e,t)],["seg",(e,t)=>new Hf(e,t)],["mut",(e,t)=>new Hf(e,t)],["maf",(e,t)=>new Hf(e,t)],["shoebox",(e,t)=>new Hf(e,t)],["wig",(e,t)=>new cf(e,t)],["merged",(e,t)=>new Xu(e,t)],["alignment",(e,t)=>new Jm(e,t)],["interaction",(e,t)=>new ew(e,t)],["interact",(e,t)=>new ew(e,t)],["variant",(e,t)=>new $v(e,t)],["qtl",(e,t)=>new Jv(e,t)],["eqtl",(e,t)=>new Jv(e,t)],["gwas",(e,t)=>new iy(e,t)],["arc",(e,t)=>new sy(e,t)],["gcnv",(e,t)=>new ny(e,t)],["junction",(e,t)=>new dy(e,t)],["blat",(e,t)=>new Pd(e,t)],["cnvpytor",(e,t)=>new jv(e,t)]]);class fy{constructor(e,t){const i=(new DOMParser).parseFromString(e,"text/xml");this.processRootNode(i,t);const n=i.getElementsByTagName("Resource"),r=i.getElementsByTagName("Track"),s=r&&r.length>0,o=[];this.tracks=o;const a=new Map;Array.from(n).forEach((function(e,t){var i={url:e.getAttribute("path"),indexURL:e.getAttribute("index"),order:t};a.set(i.url,i),s||o.push(i)})),s&&Array.from(r).forEach((function(e){const t=e.getElementsByTagName("Track");if(t&&t.length>0){const i={type:"merged",tracks:[]};py(e,i),o.push(i),Array.from(t).forEach((function(e){e.processed=!0;const t=e.getAttribute("id"),n=a.get(t);n&&(i.tracks.push(n),py(e,n),n.autoscale=!1,i.height=n.height)}))}else if(!e.processed){const t=e.getAttribute("id"),i=a.get(t);i&&(o.push(i),py(e,i))}}))}processRootNode(e,t){const i=e.getElementsByTagName("Session");!i||i.length;const n=i.item(0),r=n.getAttribute("genome"),s=n.getAttribute("locus"),o=n.getAttribute("ucscID");t&&t.hasOwnProperty(r)?this.genome=r:(this.reference={fastaURL:r},o&&(this.reference.id=o)),s&&(this.locus=s)}}function py(e,t){t.name=e.getAttribute("name");const i=e.getAttribute("color");i&&(t.color="rgb("+i+")");const n=e.getAttribute("altColor");i&&(t.altColor="rgb("+n+")");const r=e.getAttribute("height");r&&(t.height=parseInt(r));const s=e.getAttribute("autoScale");s&&(t.autoscale="true"===s);const o=e.getAttribute("autoscaleGroup");o&&(t.autoscaleGroup=o);const a=e.getAttribute("windowFunction");a&&(t.windowFunction=a);const c=e.getAttribute("visibilityWindow")||e.getAttribute("featureVisibilityWindow");c&&(t.visibilityWindow=c);const l=e.getAttribute("indexed");l&&(t.indexed="true"===l);const h=e.getAttribute("normalize");h&&(t.normalize="true"===h);const d=e.getElementsByTagName("DataRange");if(d.length>0){const e=d.item(0);t.min=Number(e.getAttribute("minimum")),t.max=Number(e.getAttribute("maximum")),t.logScale="LOG"===e.getAttribute("type")}}class gy{constructor(e,t,i,n,r){this.genome=e,this.chr=t,this.start=i,this.end=n,this.bpPerPixel=r,this.id=s()}get center(){return(this.start+this.end)/2}get locusSearchString(){return`${this.chr}:${this.start+1}-${this.end}`}extend(e){const t=Math.min(e.start,this.start),i=Math.max(e.end,this.end),n=(i-t)/(this.end-this.start);this.start=t,this.end=i,this.bpPerPixel*=n}calculateEnd(e){return this.start+this.bpPerPixel*e}calculateCenter(e){return this.start+this.bpPerPixel*e/2}calculateBPP(e,t){return(e-this.start)/t}set(e){this.chr=e.chr,this.start=e.start,this.bpPerPixel=e.bpPerPixel}toPixels(e){return e/this.bpPerPixel}toBP(e){return this.bpPerPixel*e}shift(e){this.start+=e,this.end+=e}shiftPixels(e,t,i){const n=this.start,r=e*this.bpPerPixel;return this.start+=r,i&&this.clampStart(t),this.end=this.start+t*this.bpPerPixel,n!==this.start}clampStart(e){const t=this.genome.getChromosome(this.chr).bpStart||0;if(this.start=Math.max(t,this.start),e){const{bpLength:t}=this.genome.getChromosome(this.chr),i=t-e*this.bpPerPixel;this.start>i&&(this.start=i)}}async zoomWithScaleFactor(e,t,i,n){const r=void 0===n?this.start+this.toBP(i/2):n,s=this.start,o=this.bpPerPixel,a=this.getChromosome().bpLength,c=t<1?e.minimumBases()/i:a/i;this.bpPerPixel=t<1?Math.max(this.bpPerPixel*t,c):Math.min(this.bpPerPixel*t,c);const l=this.bpPerPixel*i;this.start=r-.5*l,this.clampStart(i),this.end=this.start+l;(s!==this.start||o!==this.bpPerPixel)&&await e.updateViews(!0)}getChromosome(){return this.genome.getChromosome(this.chr)}getMultiLocusLabelBPLengthOnly(e){const t="&nbsp",i=Math.floor(this.start)+1,n=Math.round(this.start+this.bpPerPixel*e);return`${t}${this.chr}${t}${Ga(n-i)}${t}`}getMultiLocusLabelLocusOnly(e){const t="&nbsp",{chr:i,start:n,end:r}=this.getPresentationLocusComponents(e);return`${t}${i}:${n}-${r}${t}`}getMultiLocusLabel(e){const t="&nbsp",{chr:i,start:n,end:r}=this.getPresentationLocusComponents(e),s=Math.floor(this.start)+1;return`${t}${i}:${n}-${r}${t}${t}(${Ga(Math.round(this.start+this.bpPerPixel*e)-s)})${t}`}getPresentationLocusComponents(e){if("all"===this.chr)return{chr:this.chr};{const t=Rt(Math.floor(this.start)+1),i=Rt(Math.round(this.start+this.bpPerPixel*e));return{chr:this.chr,start:t,end:i}}}getLocusString(){if("all"===this.chr)return"all";return`${this.genome.getChromosomeDisplayName(this.chr)}:${Rt(Math.floor(this.start)+1)}-${Rt(Math.round(this.end))}`}description(e){console.log(` ${e||""} referenceFrame - ${this.chr} bpp ${this.bpPerPixel.toFixed(3)} start ${Rt(Math.round(this.start))} end ${Rt(Math.round(this.end))} `)}overlaps(e){return this.chr===e.chr&&this.end>=e.start&&e.end>=this.start}}function my(){return"3.0.2"}const wy={},by=8;let Fy;function vy(e,t){"igv-navbar-text-button"===Gu.currentNavbarButtonClass(e)&&(Fy=e.$navigation.get(0).querySelector(".igv-navbar-right-container").getBoundingClientRect().width);const i=function(e,t){const i=e.isMultiLocusWholeGenomeView()||e.referenceFrameList&&hu.isWholeGenomeView(e.referenceFrameList[0].chr);i?e.windowSizePanel.hide():e.windowSizePanel.show();const{x:n,width:r}=e.$navigation.get(0).querySelector(".igv-navbar-left-container").getBoundingClientRect(),s=n+r,{x:o}=e.$navigation.get(0).querySelector(".igv-navbar-right-container").getBoundingClientRect(),a=o-s,c=Gu.currentNavbarButtonClass(e);if("igv-navbar-text-button"===c&&a<by)wy.navbarButton="igv-navbar-icon-button";else if(Fy&&"igv-navbar-icon-button"===c){t-s-Fy>by&&(wy.navbarButton="igv-navbar-text-button")}wy.zoomContainer=i?"igv-zoom-widget-hidden":t>860?"igv-zoom-widget":"igv-zoom-widget-900";return wy}(e,t);Bt(e.zoomWidget.zoomContainer).removeClass(),Bt(e.zoomWidget.zoomContainer).addClass(i.zoomContainer),e.fireEvent("navbar-resize",[i.navbarButton])}const yy="Maximum sequence count exceeded";class Ay{constructor(t,i){this.container=e({class:"igv-chromosome-select-widget-container"}),i.appendChild(this.container),this.select=document.createElement("select"),this.select.setAttribute("name","chromosome-select-widget"),this.container.appendChild(this.select),this.select.addEventListener("change",(()=>{this.select.blur(),""!==this.select.value&&yy!==this.select.value&&t.search(this.select.value)})),this.showAllChromosomes=!1!==t.config.showAllChromosomes}show(){this.container.style.display="flex"}hide(){this.container.style.display="none"}update(e){const t=e.wgChromosomeNames||[];if(this.showAllChromosomes&&e.chromosomeNames.length>1){const i=new Set(t);let n=0;for(let r of e.chromosomeNames){if(1e3==++n){t.push(yy);break}i.has(r)||t.push(r)}}this.select.innerHTML="",e.showWholeGenomeView()&&t.unshift("all");for(let i of t){const t=document.createElement("option");t.setAttribute("value",i),t.innerText=e.getChromosomeDisplayName(i),this.select.appendChild(t)}}}class Cy{constructor(t,i){this.container=e({class:"igv-windowsize-panel-container"}),t.appendChild(this.container),i.on("locuschange",(e=>{this.updatePanel(e)})),this.browser=i}show(){this.container.style.display="block"}hide(){this.container.style.display="none"}updatePanel(e){const t=this.browser.calculateViewportWidth(this.browser.referenceFrameList.length);this.container.innerText=1===e.length?Ga(Math.round(t*e[0].bpPerPixel)):""}}class _y{constructor(t,i){this.browser=i,this.columnContainer=t,this.horizontalGuide=e({class:"igv-cursor-guide-horizontal"}),t.appendChild(this.horizontalGuide),this.verticalGuide=e({class:"igv-cursor-guide-vertical"}),t.appendChild(this.verticalGuide),this.addMouseHandler(i),this.setVisibility(i.config.showCursorGuide)}addMouseHandler(e){this.boundMouseMoveHandler=function(t){t.target.tagName;const{x:i,y:n}=a(t,this.columnContainer);if(this.horizontalGuide.style.top=`${n}px`,"CANVAS"===t.target.tagName){const n=function(e,t){for(;e.parentElement;){if(e.parentElement.classList.contains(t))return e.parentElement;e=e.parentElement}return}(t.target,"igv-viewport");if(n&&e.getRulerTrackView()){this.verticalGuide.style.left=`${i}px`;const r=e.root.querySelectorAll(".igv-column");let s;const o=n.parentElement;for(let e=0;e<r.length;e++)void 0===s&&o===r[e]&&(s=e);if(void 0!==s){const i=e.getRulerTrackView().viewports[s].mouseMove(t);if(i){const{start:e,bp:t,end:n}=i,r=(t-e)/(n-e);this.customMouseHandler&&this.customMouseHandler({start:e,bp:t,end:n,interpolant:r})}}}}}.bind(this),this.columnContainer.addEventListener("mousemove",this.boundMouseMoveHandler)}removeMouseHandler(){this.columnContainer.removeEventListener("mousemove",this.boundMouseMoveHandler)}setVisibility(e){!0===e?this.show():this.hide()}show(){this.verticalGuide.style.display="block",this.horizontalGuide.style.display="block"}hide(){if(this.verticalGuide.style.display="none",this.horizontalGuide.style.display="none",this.browser.getRulerTrackView())for(let e of this.browser.getRulerTrackView().viewports)e.$tooltip.hide()}}class xy extends Gu{constructor(e,t){super(e,t,"Crosshairs",$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>cursor</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="cursor" stroke="#737373">\n            <rect id="Rectangle-Copy-3" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="Group" transform="translate(5, 9)" stroke-width="24">\n                <line x1="0.5" y1="212.5" x2="614.5" y2="212.5" id="Line"></line>\n                <line x1="-115.5" y1="303.5" x2="490.5" y2="303.5" id="Line-Copy" transform="translate(187.5, 303.5) scale(-1, 1) rotate(90) translate(-187.5, -303.5)"></line>\n            </g>\n            <circle id="Oval" stroke-width="24" cx="191.5" cy="221.5" r="88.5"></circle>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>cursor hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="cursor-hover">\n            <rect id="Rectangle-Copy-5" stroke="#737373" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="Group-Copy-2" transform="translate(5, 9)" stroke="#FFFFFF" stroke-width="24">\n                <line x1="0.5" y1="212.5" x2="614.5" y2="212.5" id="Line"></line>\n                <line x1="-115.5" y1="303.5" x2="490.5" y2="303.5" id="Line-Copy" transform="translate(187.5, 303.5) scale(-1, 1) rotate(90) translate(-187.5, -303.5)"></line>\n            </g>\n            <circle id="Oval" stroke="#FFFFFF" stroke-width="24" cx="191.5" cy="221.5" r="88.5"></circle>\n        </g>\n    </g>\n</svg>',e.doShowCursorGuide),this.button.addEventListener("mouseenter",(()=>{!1===e.doShowCursorGuide&&this.setState(!0)})),this.button.addEventListener("mouseleave",(()=>{!1===e.doShowCursorGuide&&this.setState(!1)}));this.boundMouseClickHandler=(()=>{e.doShowCursorGuide=!e.doShowCursorGuide,e.setCursorGuideVisibility(e.doShowCursorGuide),this.setState(e.doShowCursorGuide)}).bind(this),this.button.addEventListener("click",this.boundMouseClickHandler),this.setVisibility(e.config.showCursorTrackingGuideButton)}}class ky extends Gu{constructor(e,t){super(e,t,"Center Line",$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>centerline</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="centerline" stroke="#737373">\n            <rect id="Rectangle-Copy-2" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <line x1="6.5" y1="312.5" x2="618.5" y2="312.5" id="Line-Copy" stroke-width="31" transform="translate(312.5, 312.5) scale(-1, 1) rotate(90) translate(-312.5, -312.5)"></line>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>centerline hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="centerline-hover">\n            <rect id="Rectangle-Copy-9" stroke="#737373" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <line x1="6.5" y1="312.5" x2="618.5" y2="312.5" id="Line-Copy" stroke="#FFFFFF" stroke-width="31" transform="translate(312.5, 312.5) scale(-1, 1) rotate(90) translate(-312.5, -312.5)"></line>\n        </g>\n    </g>\n</svg>',e.config.showCenterGuide),this.button.addEventListener("mouseenter",(()=>{!1===e.doShowCenterLine&&this.setState(!0)})),this.button.addEventListener("mouseleave",(()=>{!1===e.doShowCenterLine&&this.setState(!1)}));this.boundMouseClickHandler=(()=>{e.doShowCenterLine=!e.doShowCenterLine,e.setCenterLineVisibility(e.doShowCenterLine),this.setState(e.doShowCenterLine)}).bind(this),this.button.addEventListener("click",this.boundMouseClickHandler),this.setVisibility(e.config.showCenterGuideButton)}}class Iy extends Gu{constructor(e,t){super(t,e,"Track Labels",$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>track labels</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="track-labels" fill="#FFFFFF" stroke="#737373">\n            <rect id="Rectangle-Copy-27" stroke-width="12" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="group" transform="translate(52.2778, 149.7248)" stroke-width="24">\n                <path d="M448.444444,87.1189616 L448.444444,322.431462 L166.619398,322.431462 L19.2344421,204.775212 L166.619398,87.1189616 L448.444444,87.1189616 Z M244.028212,163.997434 C232.925565,163.997434 222.874656,168.493347 215.598982,175.760254 C208.318067,183.032394 203.815972,193.079106 203.815972,204.175675 C203.815972,215.272243 208.318067,225.318955 215.598982,232.591095 C222.874656,239.858002 232.925565,244.353915 244.028212,244.353915 C255.130858,244.353915 265.181767,239.858002 272.457442,232.591095 C279.738356,225.318955 284.240451,215.272243 284.240451,204.175675 C284.240451,193.079106 279.738356,183.032394 272.457442,175.760254 C265.181767,168.493347 255.130858,163.997434 244.028212,163.997434 Z" id="backdrop"></path>\n                <path d="M495.232604,12 L495.232604,264.550423 L193.616935,264.550423 L35.4455183,138.275212 L193.616935,12 L495.232604,12 Z M168.133512,95.1660194 C156.441871,95.1660194 145.858581,99.8943121 138.197214,107.534302 C130.523695,115.18641 125.780417,125.758499 125.780417,137.434423 C125.780417,149.110347 130.523695,159.682435 138.197214,167.334543 C145.858581,174.974533 156.441871,179.702826 168.133512,179.702826 C179.825153,179.702826 190.408443,174.974533 198.06981,167.334543 C205.743329,159.682435 210.486607,149.110347 210.486607,137.434423 C210.486607,125.758499 205.743329,115.18641 198.06981,107.534302 C190.408443,99.8943121 179.825153,95.1660194 168.133512,95.1660194 Z" id="hero"></path>\n            </g>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>track labels hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="track-labels-hover" stroke="#737373">\n            <rect id="Rectangle-Copy-29" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="group" transform="translate(52.2778, 149.7248)" fill="#FFFFFF" stroke-width="24">\n                <path d="M448.444444,85.1189616 L448.444444,320.431462 L166.619398,320.431462 L19.2344421,202.775212 L166.619398,85.1189616 L448.444444,85.1189616 Z M244.028212,161.997434 C232.925565,161.997434 222.874656,166.493347 215.598982,173.760254 C208.318067,181.032394 203.815972,191.079106 203.815972,202.175675 C203.815972,213.272243 208.318067,223.318955 215.598982,230.591095 C222.874656,237.858002 232.925565,242.353915 244.028212,242.353915 C255.130858,242.353915 265.181767,237.858002 272.457442,230.591095 C279.738356,223.318955 284.240451,213.272243 284.240451,202.175675 C284.240451,191.079106 279.738356,181.032394 272.457442,173.760254 C265.181767,166.493347 255.130858,161.997434 244.028212,161.997434 Z" id="backdrop"></path>\n                <path d="M495.232604,12 L495.232604,264.550423 L193.616935,264.550423 L35.4455183,138.275212 L193.616935,12 L495.232604,12 Z M168.133512,95.1660194 C156.441871,95.1660194 145.858581,99.8943121 138.197214,107.534302 C130.523695,115.18641 125.780417,125.758499 125.780417,137.434423 C125.780417,149.110347 130.523695,159.682435 138.197214,167.334543 C145.858581,174.974533 156.441871,179.702826 168.133512,179.702826 C179.825153,179.702826 190.408443,174.974533 198.06981,167.334543 C205.743329,159.682435 210.486607,149.110347 210.486607,137.434423 C210.486607,125.758499 205.743329,115.18641 198.06981,107.534302 C190.408443,99.8943121 179.825153,95.1660194 168.133512,95.1660194 Z" id="hero"></path>\n            </g>\n        </g>\n    </g>\n</svg>',t.config.showTrackLabels),this.button.addEventListener("mouseenter",(()=>{!1===t.doShowTrackLabels&&this.setState(!0)})),this.button.addEventListener("mouseleave",(()=>{!1===t.doShowTrackLabels&&this.setState(!1)}));this.boundMouseClickHandler=(()=>{t.doShowTrackLabels=!t.doShowTrackLabels,t.setTrackLabelVisibility(t.doShowTrackLabels),this.setState(t.doShowTrackLabels)}).bind(this),this.button.addEventListener("click",this.boundMouseClickHandler),this.setVisibility(t.config.showTrackLabelButton)}}class Sy extends Gu{constructor(e,t){super(t,e,"Sample Names",'<svg width="90px" height="20px" viewBox="0 0 90 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="igv-navbar-button-group">\n            <rect id="Rectangle" x="0.5" y="0.5" width="89" height="18" rx="6"></rect>\n            <text id="igv-text-button-label" x="50%" y="50%" dy=".1em" font-family="Helvetica" font-size="12" font-weight="normal" letter-spacing="-0.372">\n                <tspan id="igv-navbar-button-label"></tspan>\n            </text>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>sample names</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="sample-names" stroke="#737373">\n            <rect id="Rectangle-Copy-13" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <line x1="80" y1="465" x2="541" y2="464.5" id="Line-3-Copy-3" stroke-width="32"></line>\n            <line x1="80" y1="312.5" x2="542" y2="313" id="Line-3" stroke-width="32"></line>\n            <line x1="80" y1="158" x2="541" y2="158" id="Line-3-Copy" stroke-width="32"></line>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>sample names hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="sample-names-hover">\n            <rect id="Rectangle-Copy-18" stroke="#737373" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <line x1="80" y1="465" x2="541" y2="464.5" id="Line-3-Copy-3" stroke="#FFFFFF" stroke-width="32" fill="#FFFFFF"></line>\n            <line x1="80" y1="312.5" x2="542" y2="313" id="Line-3" stroke="#FFFFFF" stroke-width="32" fill="#FFFFFF"></line>\n            <line x1="80" y1="158" x2="541" y2="158" id="Line-3-Copy" stroke="#FFFFFF" stroke-width="32" fill="#FFFFFF"></line>\n        </g>\n    </g>\n</svg>',t.config.showSampleNames),this.button.addEventListener("mouseenter",(()=>{!1===t.showSampleNames&&this.setState(!0)})),this.button.addEventListener("mouseleave",(()=>{!1===t.showSampleNames&&this.setState(!1)})),this.button.addEventListener("click",(()=>{this.performClickWithState(t,void 0)})),!0===t.config.showSampleNameButton?this.show():this.hide()}performClickWithState(e,t){e.showSampleNames=void 0===t?!e.showSampleNames:t;e.columnContainer.querySelector(".igv-sample-name-column").style.display=!1===e.showSampleNames?"none":"flex",this.setState(e.showSampleNames),e.layoutChange()}}class Ey extends Gu{constructor(e,t){super(t,e,"Sample Info",$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>sample info</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="sample-info">\n            <rect id="Rectangle-Copy-6" stroke="#737373" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="Group-2" transform="translate(8, 149)">\n                <rect id="Rectangle" fill="#8DD3C7" x="0" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy" fill="#FBB4AE" x="102" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-8" fill="#7FC97F" x="204" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#ADE2CF" x="306" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#E41A1C" x="408" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#3F70AE" x="510" y="0" width="102" height="102"></rect>\n            </g>\n            <g id="Group-2-Copy" transform="translate(8, 251)">\n                <rect id="Rectangle" fill="#E41A1C" x="0" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy" fill="#377EB8" x="102" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-8" fill="#FDB46B" x="204" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#BC80BD" x="306" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#FFFFB3" x="408" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#ADE2CF" x="510" y="0" width="102" height="102"></rect>\n            </g>\n            <g id="Group-2-Copy-2" transform="translate(314, 404) scale(-1, 1) translate(-314, -404)translate(8, 353)">\n                <rect id="Rectangle" fill="#1B9E77" x="0" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy" fill="#377EB8" x="102" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-8" fill="#FDB46B" x="204" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#BAD1E9" x="306" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#4DAF4A" x="408" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#CBF03E" x="510" y="0" width="102" height="102"></rect>\n            </g>\n            <rect id="Rectangle-Copy-10" stroke="#737373" stroke-width="12" x="6" y="6" width="613" height="613" rx="135"></rect>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>sample info hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="sample-info-hover">\n            <rect id="Rectangle-Copy-14" stroke="#737373" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="row-2" transform="translate(314, 404) scale(-1, 1) translate(-314, -404)translate(8, 353)">\n                <rect id="Rectangle" fill="#1B9E77" x="0" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy" fill="#377EB8" x="102" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-8" fill="#FDB46B" x="204" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#BAD1E9" x="306" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#4DAF4A" x="408" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#CBF03E" x="510" y="0" width="102" height="102"></rect>\n            </g>\n            <g id="row-1" transform="translate(8, 251)">\n                <rect id="Rectangle" fill="#E41A1C" x="0" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy" fill="#377EB8" x="102" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-8" fill="#FDB46B" x="204" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#BC80BD" x="306" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#FFFFB3" x="408" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#ADE2CF" x="510" y="0" width="102" height="102"></rect>\n            </g>\n            <g id="row-0" transform="translate(8, 149)">\n                <rect id="Rectangle" fill="#8DD3C7" x="0" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy" fill="#FBB4AE" x="102" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-8" fill="#7FC97F" x="204" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#ADE2CF" x="306" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#E41A1C" x="408" y="0" width="102" height="102"></rect>\n                <rect id="Rectangle-Copy-7" fill="#3F70AE" x="510" y="0" width="102" height="102"></rect>\n            </g>\n            <rect id="Rectangle-Copy-15" stroke="#737373" stroke-width="12" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <rect id="scrim" fill="#000000" style="mix-blend-mode: hue;" x="8" y="149" width="612" height="306"></rect>\n        </g>\n    </g>\n</svg>',!1),this.showSampleInfo=!1,this.button.addEventListener("mouseenter",(()=>{!1===this.showSampleInfo&&this.setState(!0)})),this.button.addEventListener("mouseleave",(()=>{!1===this.showSampleInfo&&this.setState(!1)})),this.button.addEventListener("click",(()=>{this.performClickWithState(t,void 0)}))}performClickWithState(e,t){this.showSampleInfo=void 0===t?!this.showSampleInfo:t;e.columnContainer.querySelector(".igv-sample-info-column").style.display=!1===this.showSampleInfo?"none":"flex",this.setState(this.showSampleInfo),e.layoutChange()}setButtonVisibility(e){this.showSampleInfo=e,this.setState(this.showSampleInfo),!0===this.showSampleInfo?this.show():this.hide()}}let Ny=23,By=0;const My=function(t,i){this.browser=t,this.zoomContainer=e({class:"igv-zoom-widget"}),i.appendChild(this.zoomContainer),this.zoomOutButton=e(),this.zoomContainer.appendChild(this.zoomOutButton),this.zoomOutButton.appendChild(l("minus-circle")),this.zoomOutButton.addEventListener("click",(()=>{t.zoomOut()}));const n=e();this.zoomContainer.appendChild(n),this.slider=document.createElement("input"),this.slider.type="range",this.slider.min="0",this.slider.max=`${Ny}`,n.appendChild(this.slider),this.slider.addEventListener("change",(e=>{e.preventDefault(),e.stopPropagation();const i=t.referenceFrameList[0],{bpLength:n}=i.genome.getChromosome(i.chr),{end:r,start:s}=i,o=r-s,a=n/Math.pow(2,e.target.valueAsNumber);t.zoomWithScaleFactor(a/o)})),this.zoomInButton=e(),this.zoomContainer.appendChild(this.zoomInButton),this.zoomInButton.appendChild(l("plus-circle")),this.zoomInButton.addEventListener("click",(()=>{t.zoomIn()})),t.on("locuschange",(e=>{this.browser.isMultiLocusMode()?this.disable():(this.enable(),this.update(e))}))};My.prototype.update=function(e){const t=e[0],{bpLength:i}=t.genome.getChromosome(t.chr),{start:n,end:r}=t;Ny=Math.ceil(Math.log2(i/this.browser.minimumBases())),this.slider.max=`${Ny}`;const s=i/(r-n);By=Math.log2(s),this.slider.value=`${Math.round(By)}`},My.prototype.enable=function(){this.slider.disabled=!1},My.prototype.disable=function(){this.slider.disabled=!0},My.prototype.hide=function(){this.zoomContainer.style.display="none"},My.prototype.show=function(){this.zoomContainer.style.display="block"},My.prototype.hideSlider=function(){this.slider.style.display="none"},My.prototype.showSlider=function(){this.slider.style.display="block"};class Ry{constructor(t,i){this.parent=t,this.popover=e({class:"igv-ui-dropdown"}),t.appendChild(this.popover),this.popoverContent=e(),this.popover.appendChild(this.popoverContent),this.popover.style.display="none",this.shim=i}configure(e){if(0===e.length)return;const t=rc(e,this.popover);for(const{object:e}of t)this.popoverContent.appendChild(e)}present(e){this.popover.style.display="block";let{x:t,y:i}=a(e,this.parent);this.popover.style.left=`${t+this.shim.left}px`,this.popover.style.top=`${i+this.shim.top}px`}_present(e){this.popover.style.display="block";let{x:t,y:i,width:n}=a(e,this.parent);t+=this.shim.left,i+=this.shim.top,this.popover.style.top=`${i}px`;const{width:r}=this.popover.getBoundingClientRect(),s=t+r,o=s-n;this.popover.style.left=`${s>n?t-o:t}px`}dismiss(){this.popover.style.display="none"}}class Dy extends Gu{constructor(e,t){super(t,e,"Save Image",$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>save image</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="save-image">\n            <rect id="border" stroke="#737373" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="frame" transform="translate(66, 66)" fill="#737373" fill-rule="nonzero">\n                <path d="M54.75,493 C39.69375,493 26.8046875,487.639062 16.0828125,476.917187 C5.3609375,466.195312 0,453.30625 0,438.25 L0,274 L54.75,274 L54.75,438.25 L219,438.25 L219,493 L54.75,493 Z" id="Path"></path>\n                <path d="M274,493 L274,438.25 L438.25,438.25 L438.25,274 L493,274 L493,438.25 C493,453.30625 487.639062,466.195312 476.917187,476.917187 C466.195312,487.639062 453.30625,493 438.25,493 L274,493 Z" id="Path"></path>\n                <path d="M0,219 L0,54.75 C0,39.69375 5.3609375,26.8046875 16.0828125,16.0828125 C26.8046875,5.3609375 39.69375,0 54.75,0 L219,0 L219,54.75 L54.75,54.75 L54.75,219 L0,219 Z" id="Path"></path>\n                <path d="M438.25,219 L438.25,54.75 L274,54.75 L274,0 L438.25,0 C453.30625,0 466.195312,5.3609375 476.917187,16.0828125 C487.639062,26.8046875 493,39.69375 493,54.75 L493,219 L438.25,219 Z" id="Path"></path>\n            </g>\n            <rect id="border-hold-out-matte" fill="#FFFFFF" x="91" y="90" width="444" height="444" rx="38"></rect>\n            <g id="artwork" transform="translate(148, 176)" fill="#737373" fill-rule="nonzero">\n                <polygon id="Path" points="0 273 82.25 163.4 143.9375 245.6 226.1875 136 329 273"></polygon>\n                <path d="M260,82 C248.155556,82 238.361111,78.1277778 230.616667,70.3833333 C222.872222,62.6388889 219,52.8444444 219,41 C219,29.1555556 222.872222,19.3611111 230.616667,11.6166667 C238.361111,3.87222222 248.155556,0 260,0 C271.844444,0 281.638889,3.87222222 289.383333,11.6166667 C297.127778,19.3611111 301,29.1555556 301,41 C301,52.8444444 297.127778,62.6388889 289.383333,70.3833333 C281.638889,78.1277778 271.844444,82 260,82 Z" id="Path"></path>\n            </g>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>save image</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="save-image">\n            <rect id="border" stroke="#737373" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="frame" transform="translate(66, 66)" fill="#737373" fill-rule="nonzero">\n                <path d="M54.75,493 C39.69375,493 26.8046875,487.639062 16.0828125,476.917187 C5.3609375,466.195312 0,453.30625 0,438.25 L0,274 L54.75,274 L54.75,438.25 L219,438.25 L219,493 L54.75,493 Z" id="Path"></path>\n                <path d="M274,493 L274,438.25 L438.25,438.25 L438.25,274 L493,274 L493,438.25 C493,453.30625 487.639062,466.195312 476.917187,476.917187 C466.195312,487.639062 453.30625,493 438.25,493 L274,493 Z" id="Path"></path>\n                <path d="M0,219 L0,54.75 C0,39.69375 5.3609375,26.8046875 16.0828125,16.0828125 C26.8046875,5.3609375 39.69375,0 54.75,0 L219,0 L219,54.75 L54.75,54.75 L54.75,219 L0,219 Z" id="Path"></path>\n                <path d="M438.25,219 L438.25,54.75 L274,54.75 L274,0 L438.25,0 C453.30625,0 466.195312,5.3609375 476.917187,16.0828125 C487.639062,26.8046875 493,39.69375 493,54.75 L493,219 L438.25,219 Z" id="Path"></path>\n            </g>\n            <rect id="border-hold-out-matte" fill="#FFFFFF" x="91" y="90" width="444" height="444" rx="38"></rect>\n            <g id="artwork" transform="translate(148, 176)" fill="#737373" fill-rule="nonzero">\n                <polygon id="Path" points="0 273 82.25 163.4 143.9375 245.6 226.1875 136 329 273"></polygon>\n                <path d="M260,82 C248.155556,82 238.361111,78.1277778 230.616667,70.3833333 C222.872222,62.6388889 219,52.8444444 219,41 C219,29.1555556 222.872222,19.3611111 230.616667,11.6166667 C238.361111,3.87222222 248.155556,0 260,0 C271.844444,0 281.638889,3.87222222 289.383333,11.6166667 C297.127778,19.3611111 301,29.1555556 301,41 C301,52.8444444 297.127778,62.6388889 289.383333,70.3833333 C281.638889,78.1277778 271.844444,82 260,82 Z" id="Path"></path>\n            </g>\n        </g>\n    </g>\n</svg>',!1),this.button.addEventListener("mouseenter",(()=>this.setState(!0))),this.button.addEventListener("mouseleave",(()=>{for(const e of this.button.querySelectorAll("div"))if("block"===e.style.display)return;this.setState(!1)})),this.dropdown=new Ry(this.button.parentNode,{top:24,left:-88});const i=[{label:"Save as SVG",click:e=>{this.browser.saveSVGtoFile("igvjs.svg"),this.dropdown.dismiss()}},{label:"Save as PNG",click:e=>{this.browser.savePNGtoFile("igvjs.png"),this.dropdown.dismiss()}}];this.dropdown.configure(i),this.button.addEventListener("click",(e=>{let t;if(e.target===this.button)t=!0;else if(e.target.closest("svg")){e.target.closest("div")===this.button&&(t=!0)}!0===t&&("none"===this.dropdown.popover.style.display?this.dropdown.present(e):this.dropdown.dismiss())})),this.setVisibility(t.config.showSVGButton)}navbarResizeHandler(e){this.dropdown.dismiss(),super.navbarResizeHandler(e)}}const Ty=(e,t)=>{const i=0===e?t.nextElementSibling:t.previousElementSibling;t.remove(),i.remove()},Ly=t=>{const i=e({class:"igv-column-shim"});Xa(i,t);const n=e({class:"igv-column"});return Xa(n,i),n},zy=(t,i)=>{for(let n=0;n<i;n++){const r=e({class:"igv-column"});if(Ya(r,t),i>1&&n>0){Ya(e({class:"igv-column-shim"}),r)}}};class Hy{constructor(t,i,n){this.browser=t,this.referenceFrame=i,this.column=n,this.container=e({class:"igv-center-line"}),n.appendChild(this.container),t.doShowCenterLine?this.show():this.hide()}repaint(){if(this.referenceFrame){if(1/this.referenceFrame.bpPerPixel>1){const e=Math.floor(this.referenceFrame.toPixels(1));this.container.style.width=`${e}px`,this.container.classList.remove("igv-center-line-thin"),this.container.classList.add("igv-center-line-wide")}else this.container.style.width="1px",this.container.classList.remove("igv-center-line-wide"),this.container.classList.add("igv-center-line-thin")}}show(){this.isVisible=!0,this.container.style.display="block",this.repaint()}hide(){this.isVisible=!1,this.container.style.display="none"}resize(){this.repaint()}}const Py=function(t,i){this.button=e({class:"igv-navbar-button"}),t.appendChild(this.button),this.button.textContent="circular view",this.button.addEventListener("click",(()=>{i.circularViewVisible=!i.circularViewVisible})),this.browser=i,this.setVisibility(i.config.showCircularViewButton),this.setState(i.circularViewVisible)};Py.prototype.setVisibility=function(e){!0===e?this.show():this.hide()},Py.prototype.setState=function(e){!0===e?this.button.classList.add("igv-navbar-button-clicked"):this.button.classList.remove("igv-navbar-button-clicked")},Py.prototype.show=function(){this.button.style.display="block",this.setState(this.browser.circularViewVisible)},Py.prototype.hide=function(){this.button.style.display="none"};const Oy=function(t,i,n){const r=e({class:"igv-navbar-button"});t.append(r),r.textContent=n.label,r.addEventListener("click",(()=>n.callback(i)))};class Uy{constructor(t,i){this.browser=t,this.container=e({class:"igv-roi-menu"}),i.appendChild(this.container);const n=e();this.container.appendChild(n),u(n,(()=>this.container.style.display="none")),this.body=e(),this.container.appendChild(this.body),this.container.style.display="none"}async present(e,t,i,n,r,s){const o=this.menuItems(e,t,i,n,r,s);this.browser.menuPopup.presentTrackContextMenu(i,o)}menuItems(e,t,i,n,r,s){const o=[`<b>${e.name||""}</b>`];return t&&o.push({label:"Set description ...",click:()=>{const t={label:"Description",value:e.name||"",callback:()=>{const t=this.browser.inputDialog.value||"";e.name=t.trim(),this.browser.roiManager.repaintTable()}};this.browser.inputDialog.present(t,i)}}),Za()&&e.end-e.start<1e6&&o.push({label:"Copy reference sequence",click:async()=>{this.container.style.display="none";let t=await this.browser.genome.getSequence(e.chr,e.start,e.end);t||(t="Unknown sequence");try{await navigator.clipboard.writeText(t)}catch(e){console.error(e),this.browser.alert.present(`error copying sequence to clipboard ${e}`)}}}),e.end-e.start<=25e3&&o.push({label:"BLAT reference sequence",click:async()=>{this.container.style.display="none";const{chr:t,start:i,end:n}=e;let r=await this.browser.genome.getSequence(t,i,n);if(r){const e=`blat: ${t}:${i+1}-${n}`,s=`blat: ${t}:${i+1}-${n}`;Od({sequence:r,browser:this.browser,name:e,title:s})}}}),t&&o.push("<hr/>",{label:"Delete",click:()=>{this.browser.roiManager.deleteRegionWithKey(s.dataset.region,this.browser.columnContainer),this.browser.roiManager.repaintTable()}}),o}dispose(){this.container.innerHTML=""}}class qy extends Dd{constructor(e){const t={browser:e,parent:e.columnContainer,headerTitle:"Regions of Interest",dismissHandler:()=>e.roiTableControl.buttonHandler(!1),gotoButtonHandler:qy.gotoButtonHandler};t.columnFormat=qy.getColumnFormatConfiguration(!0),super(Object.assign({width:"640px"},t))}tableRowDOM(t){const i=e({class:"igv-roi-table-row"}),{setName:n,feature:r}=t;i.dataset.region=Gy(r.chr,r.start,r.end);let s=[r.chr,Rt(r.start),Rt(r.end),r.name||"",n];4===this.columnFormat.length&&(s=s.slice(0,4));for(let t=0;t<s.length;t++){const n=e();i.appendChild(n),n.style.width=this.columnFormat[t].width,n.innerText=s[t]}return this.tableRowDOMHelper(i),i}renderTable(e){if(Array.from(this.tableRowContainer.querySelectorAll(".igv-roi-table-row")).forEach((e=>e.remove())),e.length>0){const t=e.sort(((e,t)=>e.feature.chr.localeCompare(t.feature.chr)||e.feature.start-t.feature.start||e.feature.end-t.feature.end));for(let e of t){const t=this.tableRowDOM(e);this.tableRowContainer.appendChild(t)}}}set footerDOM(t){super.footerDOM=t,this.gotoButton.textContent="Go to selected region(s)";const i=e({class:"igv-roi-table-button"});this._footerDOM.appendChild(i),i.id="igv-roi-hide-show-button",i.textContent="Copy Sequence",i.title="One region only of max size 1 mb",this.copySequenceButton=i,Qy(this.copySequenceButton,!1),this.boundCopySequenceButtonHandler=async function(e){e.preventDefault(),e.stopPropagation();const t=this.tableDOM.querySelectorAll(".igv-roi-table-row-selected");if(t.length>0){const e=[];for(let i of t){const{locus:t}=Ky(i.dataset.region);e.push(t)}for(let e of this.tableDOM.querySelectorAll(".igv-roi-table-row"))e.classList.remove("igv-roi-table-row-selected");if(this.setTableRowSelectionState(!1),e.length>0){const{chr:t,start:i,end:n}=Zv(e[0],this.browser.isSoftclipped()),r=await this.browser.genome.getSequence(t,i,n);await navigator.clipboard.writeText(r)}}}.bind(this),this.copySequenceButton.addEventListener("click",this.boundCopySequenceButtonHandler);const n=e({class:"igv-roi-table-button"});this._footerDOM.appendChild(n),n.id="igv-roi-hide-show-button",n.textContent="Hide all ROIs",this.toggleROIButton=n,this.boundToggleDisplayButtonHandler=function(e){e.preventDefault(),e.stopPropagation(),this.browser.roiManager.toggleROIs()}.bind(this),this.toggleROIButton.addEventListener("click",this.boundToggleDisplayButtonHandler)}setROIVisibility(e){const t=this.browser.columnContainer.querySelectorAll(".igv-roi-region");for(let i=0;i<t.length;i++){const n=t[i];!1===e?Vy(n,0):n.style.backgroundColor=n.dataset.color}this.toggleROIButton.textContent=!1===e?"Show all ROIs":"Hide all ROIs"}setTableRowSelectionState(e){super.setTableRowSelectionState(e);const t=this.tableDOM.querySelectorAll(".igv-roi-table-row-selected");if(t.length>0&&t.length<2){const{locus:e}=Ky(t[0].dataset.region),{chr:i,start:n,end:r}=Zv(e,this.browser.isSoftclipped());Qy(this.copySequenceButton,r-n<1e6)}else Qy(this.copySequenceButton,!1)}dispose(){document.removeEventListener("click",this.boundGotoButtonHandler),document.removeEventListener("click",this.boundCopySequenceButtonHandler),document.removeEventListener("click",this.boundToggleDisplayButtonHandler),this.browser.roiTableControl.buttonHandler(!1),super.dispose()}static getColumnFormatConfiguration(e){return!0===e?[{label:"Chr",width:"20%"},{label:"Start",width:"15%"},{label:"End",width:"15%"},{label:"Description",width:"30%"},{label:"ROI Set",width:"20%"}]:[{label:"Chr",width:"25%"},{label:"Start",width:"20%"},{label:"End",width:"20%"},{label:"Description",width:"35%"}]}static gotoButtonHandler(e){e.stopPropagation();const t=this.tableDOM.querySelectorAll(".igv-roi-table-row-selected"),i=[];for(let e of t){const{locus:t}=Ky(e.dataset.region);i.push(t)}for(let e of this.tableDOM.querySelectorAll(".igv-roi-table-row"))e.classList.remove("igv-roi-table-row-selected");this.setTableRowSelectionState(!1),i.length>0&&this.browser.search(i.join(" "))}}function Qy(e,t){e.style.pointerEvents=t?"auto":"none",e.style.color=ro(t?"licorice":"silver"),e.style.borderColor=ro(t?"licorice":"silver")}function Vy(e,t){const i=window.getComputedStyle(e).backgroundColor.match(/[\d.]+/g);3===i.length&&i.push(1),i[3]=t,e.style.backgroundColor=`rgba(${i.join(", ")})`}class jy{constructor(e){this.browser=e,this.roiMenu=new Uy(e,e.columnContainer),this.roiTable=new qy(e,e.columnContainer),this.top=0,this.roiSets=[],this.boundLocusChangeHandler=Wy.bind(this),e.on("locuschange",this.boundLocusChangeHandler);this.observer=new MutationObserver((()=>{const t=e.findTracks((e=>new Set(["ideogram","ruler"]).has(e.type))),[i,n]=t.map((e=>e.trackView.viewports[0].$viewport.get(0))).map((e=>function(e){const t=window.getComputedStyle(e),i=parseInt(t.marginTop),n=parseInt(t.marginBottom),{top:r,bottom:s,height:o}=e.getBoundingClientRect();return{top:Math.floor(r)-i,bottom:Math.floor(s)+n,height:Math.floor(o)+i+n}}(e))),r=e.columnContainer.querySelectorAll(".igv-roi-region");if(r)for(const e of r)e.style.marginTop=`${i.height+n.height+-.5}px`})),this.observer.observe(e.columnContainer,{attributes:!0,childList:!0,subtree:!0})}async reset(){this.roiSets.length>0&&this.browser.roiTableControl.setVisibility(!0);const e=this.roiSets.map((e=>this.renderROISet({browser:this.browser,pixelTop:this.top,roiSet:e})));e.length>0&&await Promise.all(e);const t=await this.getTableRecords();if(this.roiTable.renderTable(t),this.roiSets.length>0){const e=this.roiSets[0].isVisible;this.roiTable.setROIVisibility(e)}}async loadROI(e,t){const i=Array.isArray(e)?e:[e];for(let e of i)!e.name&&e.url&&(e.name=await Wa(e.url)),e.url&&!e.format&&(e.format=await sm(e)),this.roiSets.push(new vu(e,t));await this.reset()}clearROIs(){this.roiTable.clearTable();const e=this.browser.columnContainer.querySelectorAll(".igv-roi-region");for(let t of e)t.remove();for(let e of this.roiSets)e.dispose();this.roiSets=[]}async getTableRecords(){const e=[];for(let t of this.roiSets){const i=t.name||"",n=await t.getAllFeatures();for(let t of Object.keys(n))for(let r of n[t])e.push({setName:i,feature:r})}return e}presentTable(){this.roiTable.present()}async repaintTable(){const e=await this.getTableRecords();this.roiTable.renderTable(e)}dismissTable(){this.roiTable.dismiss()}roiTableIsVisible(){return this.roiTable.isVisible()}async updateUserDefinedROISet(e){let t=await this.getUserDefinedROISet();void 0===t&&(t=this.initializeUserDefinedROISet()),t.addFeature(e),this.setROITableButtonVisibility(!0),await this.renderROISet({browser:this.browser,pixelTop:this.top,roiSet:t});const i=await this.getTableRecords();this.roiTable.renderTable(i)}setROITableButtonVisibility(e){this.browser.roiTableControl.setVisibility(e)}toggleROIs(){const e=!this.roiSets[0].isVisible;this.roiTable.setROIVisibility(e);for(const t of this.roiSets)t.isVisible=e}async renderAllROISets(){for(let e of this.roiSets)await this.renderROISet({browser:this.browser,pixelTop:this.top,roiSet:e})}async renderROISet({browser:e,pixelTop:t,roiSet:i}){const n=e.columnContainer.querySelectorAll(".igv-column");for(let r=0;r<n.length;r++){let{chr:s,start:o,end:a,bpPerPixel:c}=e.referenceFrameList[r];const l=n[r].querySelectorAll(".igv-roi-region");for(let e of l){const t=e.dataset.region,{chr:i,start:n,end:r}=Ky(t);(i!==s||r<o||n>a)&&e.remove()}const h=await i.getFeatures(s,o,a);if(h)for(let l of h){const h=Gy(s,l.start,l.end),{x:d,width:u}=yu(Math.max(o,l.start),Math.min(a,l.end),o,c),f=n[r].querySelector($y(h));if(f)f.style.left=`${d}px`,f.style.width=`${u}px`;else{const s=this.createRegionElement(e.columnContainer,t,d,u,i,h,l);n[r].appendChild(s)}}}}createRegionElement(t,i,n,r,s,o,c){const l=e({class:"igv-roi-region"});l.style.top=`${i}px`,l.style.left=`${n}px`,l.style.width=`${r}px`,l.style.backgroundColor=s.color,l.dataset.color=s.color,l.dataset.region=o;const h=e();return l.appendChild(h),h.style.backgroundColor=s.headerColor,h.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation(),a(e,t);const i=s.isUserDefined;this.roiMenu.present(c,i,e,this,t,l)})),l}renderSVGContext(e,t,{deltaX:i,deltaY:n}){for(const r of e.querySelectorAll(".igv-roi-region")){const{x:e,y:s,width:o,height:a}=r.getBoundingClientRect();t.fillStyle=r.style.backgroundColor,t.fillRect(e-i,s+n,o,a);const c=r.querySelector("div"),{x:l,y:h,width:d,height:u}=c.getBoundingClientRect();t.fillStyle=c.style.backgroundColor,t.fillRect(l-i,h+n,d,u)}}getUserDefinedROISet(){return this.roiSets.find((e=>!0===e.isUserDefined))}initializeUserDefinedROISet(){const e=new vu({name:"user defined",isUserDefined:!0,features:[]},this.browser.genome);return this.roiSets.push(e),e}async deleteRegionWithKey(e,t){t.querySelectorAll($y(e)).forEach((e=>e.remove()));const{feature:i,set:n}=await this.findRegionWithKey(e);n&&n.removeFeature(i);0===(await this.getTableRecords()).length&&(this.browser.roiTableControl.buttonHandler(!1),this.setROITableButtonVisibility(!1))}async findRegionWithKey(e){const{chr:t,start:i,end:n}=Ky(e);for(let e of this.roiSets){const r=await e.getFeatures(t,i,n);for(let s of r)if(s.chr===t&&s.start>=i&&s.end<=n)return{feature:s,set:e}}return{feature:void 0,set:void 0}}toJSON(){return this.roiSets.map((e=>e.toJSON()))}dispose(){this.browser.off("locuschange",this.boundLocusChangeHandler);const e=this.browser.columnContainer.querySelectorAll(".igv-roi-region");for(let t of e)t.remove();this.roiMenu&&this.roiMenu.dispose(),this.roiTable&&this.roiTable.dispose();for(let e of this.roiSets)e.dispose();for(let e of Object.keys(this))this[e]=void 0}}function Wy(){this.renderAllROISets()}function Gy(e,t,i){return`${e}-${t}-${i}`}function $y(e){return`[data-region="${e}"]`}function Ky(e){let t=e.split("-"),i=parseInt(t.pop()),n=parseInt(t.pop()),r=t.join("-");return{chr:r,start:n,end:i,locus:`${r}:${n}-${i}`,bedRecord:`${r}\t${n}\t${i}`}}class Yy{constructor(e,t){this.name=e.name,this.featureSource=e.featureSource||wd(e,t),this.color=e.color||bu}async getFeatures(e,t,i){return this.featureSource.getFeatures({chr:e,start:t,end:i})}draw(e){const{context:t,bpPerPixel:i,bpStart:n,pixelTop:r,pixelHeight:s,pixelWidth:o,features:a}=e;if(!a)return;const c=n+o*i+1;for(let{start:e,end:o}of a){if(o<n)continue;if(e>c)break;const{x:a,width:l}=yu(e,o,n,i);xo.fillRect(t,a,r,l,s,{fillStyle:this.color})}}}class Xy extends Gu{constructor(e,t){super(t,e,["ROI","Regions of Interest Table"],$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>roi</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="roi">\n            <rect id="Rectangle-Copy-23" stroke="#737373" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <text id="ROI" font-family="HelveticaNeue-Bold, Helvetica Neue" font-size="258" font-weight="bold" fill="#737373">\n                <tspan x="81.445" y="389">ROI</tspan>\n            </text>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>roi hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="roi-hover">\n            <rect id="Rectangle-Copy-24" stroke="#737373" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <text id="ROI" font-family="HelveticaNeue-Bold, Helvetica Neue" font-size="258" font-weight="bold" fill="#FFFFFF">\n                <tspan x="81.445" y="389">ROI</tspan>\n            </text>\n        </g>\n    </g>\n</svg>',!1),this.button.addEventListener("mouseenter",(()=>{!1===t.doShowROITable&&this.setState(!0)})),this.button.addEventListener("mouseleave",(()=>{!1===t.doShowROITable&&this.setState(!1)})),this.button.addEventListener("click",(()=>this.buttonHandler(!t.doShowROITable))),this.setVisibility(!1)}buttonHandler(e){this.setState(e),this.browser.setROITableVisibility(e)}}class Zy extends Gu{constructor(e,t,i){super(e,t,"Select Tracks",$u,'<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>multi select</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="multi-select">\n            <rect id="backdrop-copy-3" stroke="#737373" stroke-width="12" fill="#FFFFFF" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="row-copy-3" transform="translate(81, 427)" fill="#737373">\n                <rect id="Rectangle" x="134" y="0" width="329" height="70"></rect>\n                <rect id="Rectangle-Copy-16" stroke="#737373" stroke-width="12" x="6" y="6" width="58" height="58"></rect>\n            </g>\n            <g id="row-copy-2" transform="translate(82, 277)">\n                <rect id="Rectangle" fill-opacity="0.33" fill="#CFCECE" x="133" y="0" width="329" height="70"></rect>\n                <rect id="Rectangle-Copy-16" stroke-opacity="0.32659528" stroke="#CFCECE" stroke-width="12" x="6" y="6" width="58" height="58"></rect>\n            </g>\n            <g id="row-copy" transform="translate(81, 119)" fill="#737373">\n                <rect id="Rectangle" x="134" y="0" width="329" height="70"></rect>\n                <rect id="Rectangle-Copy-17" stroke="#737373" stroke-width="12" x="6" y="6" width="58" height="58"></rect>\n            </g>\n        </g>\n    </g>\n</svg>','<svg width="625px" height="625px" viewBox="0 0 625 625" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <title>multi select hover</title>\n    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="multi-select-hover">\n            <rect id="backdrop-copy-4" stroke="#737373" stroke-width="12" fill="#737373" x="6" y="6" width="613" height="613" rx="135"></rect>\n            <g id="row-copy-3" transform="translate(81, 427)" fill="#FFFFFF">\n                <rect id="Rectangle" x="134" y="0" width="329" height="70"></rect>\n                <rect id="Rectangle-Copy-16" stroke="#FFFFFF" stroke-width="12" x="6" y="6" width="58" height="58"></rect>\n            </g>\n            <g id="row-copy-2" transform="translate(82, 277)">\n                <rect id="Rectangle" fill-opacity="0.33" fill="#CFCECE" x="133" y="0" width="329" height="70"></rect>\n                <rect id="Rectangle-Copy-16" stroke-opacity="0.33" stroke="#CFCECE" stroke-width="12" x="6" y="6" width="58" height="58"></rect>\n            </g>\n            <g id="row-copy" transform="translate(81, 119)" fill="#FFFFFF">\n                <rect id="Rectangle" x="134" y="0" width="329" height="70"></rect>\n                <rect id="Rectangle-Copy-17" stroke="#FFFFFF" stroke-width="12" x="6" y="6" width="58" height="58"></rect>\n            </g>\n        </g>\n    </g>\n</svg>',i=!1),this.enableMultiTrackSelection=i,this.button.addEventListener("mouseenter",(e=>{this.setState(!0)})),this.button.addEventListener("mouseleave",(e=>{this.setState(!1)}));this.boundMouseClickHandler=(()=>{this.setMultiTrackSelection(!this.enableMultiTrackSelection)}).bind(this),this.button.addEventListener("click",this.boundMouseClickHandler),this.setVisibility(!0)}setMultiTrackSelection(e){this.enableMultiTrackSelection=e;for(const e of this.browser.trackViews)!1===mo.has(e.track.type)&&(e.setTrackSelectionState(e.axis,this.enableMultiTrackSelection),this.enableMultiTrackSelection||(e.track.selected=!1));this.setState(this.enableMultiTrackSelection),!1===this.enableMultiTrackSelection&&this.browser.overlayTrackButton.setVisibility(!1)}}class Jy{aliasRecordCache=new Map;constructor(e,t,i){(t=t||{}).url=e,this.reader=new Vh(t,i)}getChromosomeName(e){return this.aliasRecordCache.has(e)?this.aliasRecordCache.get(e).chr:e}getChromosomeAlias(e,t){const i=this.aliasRecordCache.get(e);return i&&i[t]||e}async search(e){if(!this.aliasRecordCache.has(e)){const t=await this.reader.search(e);if(t)for(let e of Object.keys(t))"start"!==e&&"end"!==e&&this.aliasRecordCache.set(t[e],t)}return this.aliasRecordCache.get(e)}async getChromosomeNames(){return await this.reader.loadHeader(),Array.from(this.reader.chrNames)}}class eA{aliasRecordCache=new Map;constructor(e,t,i){this.aliasURL=e,this.config=t,this.genome=i}getChromosomeName(e){return this.aliasRecordCache.has(e)?this.aliasRecordCache.get(e).chr:e}getChromosomeAlias(e,t){const i=this.aliasRecordCache.get(e);return i&&i[t]||e}async loadAliases(){const e=await Qs.loadString(this.aliasURL,qa(this.config)),t=Dt(e),i=t[0];i.startsWith("#")&&(this.headings=i.substring(1).split("\t").map((e=>e.trim())),this.altNameSets=this.headings.slice(1));const n=this.genome.chromosomeNames?new Set(this.genome.chromosomeNames):new Set;for(let e of t)if(!e.startsWith("#")&&e.length>0){const t=e.split("\t");let i=t.find((e=>n.has(e)));i||(i=t[0]);const r={chr:i};for(let e=0;e<t.length;e++){r[this.headings?this.headings[e]:e]=t[e],this.aliasRecordCache.set(t[e],r)}}}async search(e){return 0===this.aliasRecordCache.size&&await this.loadAliases(),this.aliasRecordCache.get(e)}}class tA{constructor(e,t,i,n){this.start=e,this.end=t,this.name=i,this.stain=0,"acen"===n?this.type="c":(this.type=n.charAt(1),"p"===this.type&&(this.stain=parseInt(n.substring(4))))}}class iA{cytobandMap=new Map;constructor(e,t,i){(t=t||{}).url=e,this.source=new Zh(t,i)}async getCytobands(e){if(this.cytobandMap.has(e))return this.cytobandMap.get(e);{let t=await this.#C(e);return t||(t=[]),this.cytobandMap.set(e,t),t}}async#C(e){return(await this.source.getFeatures({chr:e})).map((e=>new tA(e.start,e.end,e.name,e.gieStain)))}}class nA{cytobands=new Map;constructor(e,t){this.url=e,this.config=t}async getCytobands(e){return 0===this.cytobands.size&&await this.#_(),this.cytobands.get(e)}async#_(){let e,t;if($a(this.url)){const t=vs(this.url);e="";const i=t.length;for(let n=0;n<i;n++)e+=String.fromCharCode(t[n])}else e=await Qs.loadString(this.url,qa(this.config));let i=[];const n=Dt(e);for(let e of n){const n=e.split("\t"),r=n[0];if(t||(t=r),r!==t&&(this.cytobands.set(t,i),i=[],t=r),5===n.length){const e=parseInt(n[1]),t=parseInt(n[2]),r=n[3],s=n[4];i.push(new tA(e,t,r,s))}}}async getChromosomeNames(){return 0===this.cytobands.size&&await this.#_(),Array.from(this.cytobands.keys())}async getChromosomes(){0===this.cytobands.size&&await this.#_();const e=[];let t=0;for(let[i,n]of this.cytobands.entries())e.push(new hc(i,t++,n[n.length-1].end));return e}}class rA{aliasRecordCache=new Map;constructor(e,t){this.genomeID=e,this.update(e,t)}getChromosomeName(e){return this.aliasRecordCache.has(e)?this.aliasRecordCache.get(e).chr:e}getChromosomeAlias(e,t){const i=this.aliasRecordCache.get(e);return i&&i[t]||e}update(e,t){if(t){const i=[];for(let n of t){if(this.aliasRecordCache.has(n))continue;let t=!1;const r={chr:n};if(i.push(r),n.startsWith("gi|")){const e=rA.getNCBIName(n);r["ncbi-gi-versioned"]=e;const t=e.lastIndexOf(".");if(t>0){const e=e.substring(0,t);r["ncbi-gi"]=e}}else{if(e.startsWith("hg")||e.startsWith("GRCh")||"1kg_ref"===e||"b37"===e)switch(n){case"23":r.ucsc="chrX",t=!0;break;case"24":r.ucsc="chrY",t=!0;break;case"chrX":r.ncbi="23",t=!0;break;case"chrY":r.ncbi="24",t=!0}else if(e.startsWith("mm")||e.startsWith("GRCm")||e.startsWith("rheMac"))switch(n){case"21":r.ucsc="chrX",t=!0;break;case"22":r.ucsc="chrY",t=!0;break;case"chrX":r.ncbi="21",t=!0;break;case"chrY":r.ncbi="22",t=!0}if(t)continue;"chrM"===n?r.ncbi="MT":"MT"===n?r.ucsc="chrM":n.toLowerCase().startsWith("chr")?r.ncbi=n.substring(3):Number.isInteger(Number(n))&&(r.ucsc="chr"+n)}}for(let e of i)for(let t of Object.values(e))this.aliasRecordCache.set(t,e)}}search(e){return this.aliasRecordCache.get(e)}static getNCBIName(e){const t=e.split("\\|");return t[t.length-1]}}class sA{#x;static async createGenome(e,t){const i=new sA(e,t);return await i.init(),i}constructor(e,t){this.config=e,this.browser=t,this.id=e.id||function(e){return void 0!==e.id?e.id:e.fastaURL&&Mt(e.fastaURL)&&!e.fastaURL.startsWith("data:")?e.fastaURL:e.fastaURL&&e.fastaURL.name?e.fastaURL.name:""}(e),this.name=e.name,this.nameSet=e.nameSet}async init(){const e=this.config;if(this.sequence=await Bc(e,this.browser),e.chromSizesURL?this.chromosomes=await async function(e){const t=new Map;let i;if($a(e)){let t=vs(e);i="";for(let e of t)i+=String.fromCharCode(e)}else i=await Qs.load(e,{});const n=vc(i);let r=0;for(let e of n){const i=e.split("\t");if(i.length>1){const e=Number.parseInt(i[1]);t.set(i[0],new hc(i[0],r++,e))}}return t}(e.chromSizesURL):this.chromosomes=this.sequence.chromosomes||new Map,this.chromosomes.size>0&&(this.chromosomeNames=Array.from(this.chromosomes.keys())),e.chromAliasBbURL?(this.chromAlias=new Jy(e.chromAliasBbURL,Object.assign({},e),this),this.chromosomeNames||(this.chromosomeNames=await this.chromAlias.getChromosomeNames())):e.aliasURL?this.chromAlias=new eA(e.aliasURL,Object.assign({},e),this):this.chromosomeNames&&(this.chromAlias=new rA(this.id,this.chromosomeNames)),e.cytobandBbURL)this.cytobandSource=new iA(e.cytobandBbURL,Object.assign({},e),this),this.chromosomeNames||(this.chromosomeNames=await this.cytobandSource.getChromosomeNames());else if(e.cytobandURL&&(this.cytobandSource=new nA(e.cytobandURL,Object.assign({},e)),this.chromosomeNames||(this.chromosomeNames=await this.cytobandSource.getChromosomeNames()),0===this.chromosomes.size)){const e=await this.cytobandSource.getChromosomes();for(let t of e)this.chromosomes.set(e.name,e)}if(!1!==e.wholeGenomeView&&this.chromosomes.size>0&&(e.chromosomeOrder?Array.isArray(e.chromosomeOrder)?this.#x=e.chromosomeOrder:this.#x=e.chromosomeOrder.split(",").map((e=>e.trim())):this.#x=function(e){const t=[];let i,n=1;for(let r of e.values()){if(i){if(r.bpLength<i/100)continue;i=((n-1)*i+r.bpLength)/n,t.push(r.name)}else i=r.bpLength,t.push(r.name);n++}return t}(this.chromosomes)),this.wholeGenomeView=!1!==e.wholeGenomeView&&this.#x&&this.chromosomes.size>1,this.wholeGenomeView){const e=this.#x.reduce(((e,t)=>e+this.chromosomes.get(t).bpLength),0);this.chromosomes.set("all",new hc("all",0,e))}}get description(){return this.config.description||`${this.id}\n${this.name}`}get infoURL(){return this.config.infoURL}showWholeGenomeView(){return this.wholeGenomeView}toJSON(){return Object.assign({},this.config,{tracks:void 0})}get initialLocus(){return this.config.locus?this.config.locus:this.getHomeChromosomeName()}getHomeChromosomeName(){return this.showWholeGenomeView()&&this.chromosomes.has("all")?"all":this.chromosomeNames[0]}getChromosomeName(e){return this.chromAlias?this.chromAlias.getChromosomeName(e,this.chromosomes.keys()):e}getChromosomeDisplayName(e){return this.nameSet&&this.chromAlias&&this.chromAlias.getChromosomeAlias(e,this.nameSet)||e}getChromosome(e){return this.chromAlias&&(e=this.chromAlias.getChromosomeName(e)),this.chromosomes.get(e)}async loadChromosome(e){if(this.chromAlias){const t=await this.chromAlias.search(e);t&&(e=t.chr)}if(!this.chromosomes.has(e)){let t;const i=await this.sequence.getSequenceRecord(e);i&&(t=new hc(e,0,i.bpLength)),this.chromosomes.set(e,t)}return this.chromosomes.get(e)}async getAliasRecord(e){if(this.chromAlias)return this.chromAlias.search(e)}async getCytobands(e){if(this.cytobandSource){const t=this.getChromosomeName(e);return await this.cytobandSource.getCytobands(t)}}getChromosomes(){return this.chromosomes}get wgChromosomeNames(){return this.#x?this.#x.slice():void 0}get showChromosomeWidget(){return this.config.showChromosomeWidget}getGenomeCoordinate(e,t){var i=this.getCumulativeOffset(e);if(void 0!==i)return i+t}getChromosomeCoordinate(e){let t;void 0===this.cumulativeOffsets&&(this.cumulativeOffsets=computeCumulativeOffsets.call(this));let i=0;for(let n of this.#x){const r=this.cumulativeOffsets[n];if(r>e){return{chr:t,position:e-i}}t=n,i=r}return{chr:this.#x[this.#x.length-1],position:0}}getCumulativeOffset(e){void 0===this.cumulativeOffsets&&(this.cumulativeOffsets=function(){let e={},t=0;for(let i of this.#x){e[i]=Math.floor(t);t+=this.getChromosome(i).bpLength}return e}.call(this));const t=this.getChromosomeName(e);return this.cumulativeOffsets[t]}getGenomeLength(){if(!this.bpLength){let e=0;for(let t of this.#x){e+=this.chromosomes.get(t).bpLength}this.bpLength=e}return this.bpLength}async getSequence(e,t,i){return e=this.getChromosomeName(e),this.sequence.getSequence(e,t,i)}getSequenceInterval(e,t,i){return"function"==typeof this.sequence.getSequenceInterval?this.sequence.getSequenceInterval(e,t,i):void 0}}class oA{constructor(){this.clear()}clear(){this.phenotypeColors=new Map,this.snps=new Set,this.qtl=null}isEmpty(){return 0===this.phenotypeColors.size&&0===this.snps.size&&null===this.qtl}addSnp(e){e=e.toUpperCase(),this.snps.add(e)}addPhenotype(e){e=e.toUpperCase();const t=this.phenotypeColors.size;if(!this.phenotypeColors.has(e.toUpperCase())){const i=t<aA.length?aA[t]:_s.randomRGB(0,255);this.phenotypeColors.set(e.toUpperCase(),i)}}hasSnp(e){return e&&this.snps.has(e.toUpperCase())}hasPhenotype(e){return e&&this.phenotypeColors.has(e.toUpperCase())}hasQTL(e){return this.qtls.has(e)}colorForGene(e){return e?this.phenotypeColors.get(e.toUpperCase()):"black"}toJSON(){const e={};return this.phenotypeColors.size>0&&(e.phenotypes=Array.from(this.phenotypeColors.keys())),this.snps.size>0&&(e.snps=Array.from(this.snps)),this.qtl&&(e.qtl=this.qtl),e}static fromJSON(e){const t=new oA;if(e.phenotypes)for(let i of e.phenotypes)t.addPhenotype(i);if(e.snps)for(let i of e.snps)t.addSnp(i);return e.qtl&&(t.qtl=e.qtl),t}}const aA=[];aA.push("rgb(228,26,28)"),aA.push("rgb(55,126,184)"),aA.push("rgb(77,175,74)"),aA.push("rgb(166,86,40)"),aA.push("rgb(152,78,163)"),aA.push("rgb(255,127,0)"),aA.push("rgb(247,129,191)"),aA.push("rgb(255,255,51)"),aA.push("rgb(102,194,165)"),aA.push("rgb(252,141,98)"),aA.push("rgb(141, 160, 203)"),aA.push("rgb(231, 138, 195)"),aA.push("rgb(166, 216, 84)"),aA.push("rgb(255, 217, 47)"),aA.push("rgb(229, 196, 148)"),aA.push("rgb( 141, 211, 199)"),aA.push("rgb(255, 255, 179)"),aA.push("rgb(190, 186, 218)"),aA.push("rgb(251, 128, 114)"),aA.push("rgb(128, 177, 211)"),aA.push("rgb(253, 180, 98)"),aA.push("rgb(179, 222, 105)"),aA.push("rgb(252, 205, 229)"),aA.push("rgb(188, 128, 189)"),aA.push("rgb(204, 235, 197)"),aA.push("rgb(255, 237, 111)");class cA{qtlSelections=new oA;constructor(t,i){this.config=t,this.guid=s(),this.namespace=".browser_"+this.guid,this.parent=i;let n=i.shadowRoot;if(!n){n=i.attachShadow({mode:"open"});const e=new CSSStyleSheet;e.replaceSync('.igv-ui-dropdown {\n  cursor: default;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2048;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: 1px;\n  font-family: "Open Sans", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  background-color: white;\n}\n.igv-ui-dropdown > div {\n  overflow-y: auto;\n  overflow-x: hidden;\n  background-color: white;\n}\n.igv-ui-dropdown > div > div {\n  padding: 4px;\n  width: 100%;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  background-color: white;\n}\n.igv-ui-dropdown > div > div:last-child {\n  border-bottom-color: transparent;\n  border-bottom-width: 0;\n}\n.igv-ui-dropdown > div > div:hover {\n  cursor: pointer;\n  background-color: rgba(0, 0, 0, 0.04);\n}\n\n.igv-ui-popover {\n  cursor: default;\n  position: absolute;\n  z-index: 2048;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: 1px;\n  font-family: "Open Sans", sans-serif;\n  font-size: small;\n  background-color: white;\n}\n.igv-ui-popover > div:first-child {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-width: 0;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n}\n.igv-ui-popover > div:first-child > div:first-child {\n  margin-left: 4px;\n}\n.igv-ui-popover > div:first-child > div:last-child {\n  margin-right: 4px;\n  height: 12px;\n  width: 12px;\n  color: #7F7F7F;\n}\n.igv-ui-popover > div:first-child > div:last-child:hover {\n  cursor: pointer;\n  color: #444;\n}\n.igv-ui-popover > div:last-child {\n  user-select: text;\n  overflow-y: auto;\n  overflow-x: hidden;\n  max-height: 400px;\n  max-width: 800px;\n  background-color: white;\n  border-bottom-width: 0;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.igv-ui-popover > div:last-child > div {\n  margin-left: 4px;\n  margin-right: 4px;\n  min-width: 220px;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.igv-ui-popover > div:last-child > div > span {\n  font-weight: bolder;\n}\n.igv-ui-popover > div:last-child hr {\n  width: 100%;\n}\n\n.igv-ui-alert-dialog-container {\n  box-sizing: content-box;\n  position: absolute;\n  z-index: 2048;\n  top: 50%;\n  left: 50%;\n  width: 400px;\n  height: 200px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  outline: none;\n  font-family: "Open Sans", sans-serif;\n  font-size: 15px;\n  font-weight: 400;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n}\n.igv-ui-alert-dialog-container > div:first-child {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n}\n.igv-ui-alert-dialog-container > div:first-child div:first-child {\n  padding-left: 8px;\n}\n.igv-ui-alert-dialog-container .igv-ui-alert-dialog-body {\n  -webkit-user-select: text;\n  -moz-user-select: text;\n  -ms-user-select: text;\n  user-select: text;\n  color: #373737;\n  width: 100%;\n  height: calc(100% - 24px - 64px);\n  overflow-y: scroll;\n}\n.igv-ui-alert-dialog-container .igv-ui-alert-dialog-body .igv-ui-alert-dialog-body-copy {\n  margin: 16px;\n  width: auto;\n  height: auto;\n  overflow-wrap: break-word;\n  word-break: break-word;\n  background-color: white;\n  border: unset;\n}\n.igv-ui-alert-dialog-container > div:last-child {\n  width: 100%;\n  margin-bottom: 10px;\n  background-color: white;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n}\n.igv-ui-alert-dialog-container > div:last-child div {\n  margin: unset;\n  width: 40px;\n  height: 30px;\n  line-height: 30px;\n  text-align: center;\n  color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  border-color: #2B81AF;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 4px;\n  background-color: #2B81AF;\n}\n.igv-ui-alert-dialog-container > div:last-child div:hover {\n  cursor: pointer;\n  border-color: #25597f;\n  background-color: #25597f;\n}\n\n.igv-ui-color-swatch {\n  position: relative;\n  box-sizing: content-box;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  width: 32px;\n  height: 32px;\n  border-style: solid;\n  border-width: 2px;\n  border-color: white;\n  border-radius: 4px;\n}\n\n.igv-ui-color-swatch:hover {\n  border-color: dimgray;\n}\n\n.igv-ui-colorpicker-menu-close-button {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n  height: 32px;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  padding-right: 8px;\n}\n.igv-ui-colorpicker-menu-close-button i.fa {\n  display: block;\n  margin-left: 4px;\n  margin-right: 4px;\n  color: #5f5f5f;\n}\n.igv-ui-colorpicker-menu-close-button i.fa:hover,\n.igv-ui-colorpicker-menu-close-button i.fa:focus,\n.igv-ui-colorpicker-menu-close-button i.fa:active {\n  cursor: pointer;\n  color: #0f0f0f;\n}\n\n.igv-ui-generic-dialog-container {\n  box-sizing: content-box;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: fit-content;\n  padding-bottom: 16px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  z-index: 2048;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-header {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-header div {\n  margin-right: 4px;\n  margin-bottom: 2px;\n  height: 12px;\n  width: 12px;\n  color: #7F7F7F;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-header div:hover {\n  cursor: pointer;\n  color: #444;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-one-liner {\n  color: #373737;\n  width: 95%;\n  height: 24px;\n  line-height: 24px;\n  text-align: left;\n  margin-top: 8px;\n  padding-left: 8px;\n  overflow-wrap: break-word;\n  background-color: white;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input {\n  margin-top: 8px;\n  width: 95%;\n  height: 24px;\n  color: #373737;\n  line-height: 24px;\n  padding-left: 8px;\n  background-color: white;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input > div {\n  width: fit-content;\n  height: 100%;\n  font-size: 16px;\n  text-align: right;\n  padding-right: 8px;\n  background-color: white;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input input {\n  display: block;\n  height: 100%;\n  width: 100%;\n  padding-left: 4px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n  color: #373737;\n  text-align: left;\n  outline: none;\n  border-style: solid;\n  border-width: thin;\n  border-color: #7F7F7F;\n  background-color: white;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-label-input input {\n  width: 50%;\n  font-size: 16px;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-input {\n  margin-top: 8px;\n  width: calc(100% - 16px);\n  height: 24px;\n  color: #373737;\n  line-height: 24px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-input input {\n  display: block;\n  height: 100%;\n  width: 100%;\n  padding-left: 4px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n  color: #373737;\n  text-align: left;\n  outline: none;\n  border-style: solid;\n  border-width: thin;\n  border-color: #7F7F7F;\n  background-color: white;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-input input {\n  font-size: 16px;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-input input[type=range] {\n  width: 70%;\n  -webkit-appearance: none;\n  background: linear-gradient(90deg, white, black);\n  outline: none;\n  margin: 0;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-input output {\n  display: block;\n  height: 100%;\n  width: 20%;\n  font-size: 16px;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel {\n  width: 100%;\n  height: 28px;\n  padding-top: 16px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel > div {\n  color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  width: 75px;\n  height: 28px;\n  line-height: 28px;\n  text-align: center;\n  border-color: transparent;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 2px;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel > div:first-child {\n  margin-left: 32px;\n  margin-right: 0;\n  background-color: #5ea4e0;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel > div:last-child {\n  margin-left: 0;\n  margin-right: 32px;\n  background-color: #c4c4c4;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel > div:first-child:hover {\n  cursor: pointer;\n  background-color: #3b5c7f;\n}\n.igv-ui-generic-dialog-container .igv-ui-generic-dialog-ok-cancel > div:last-child:hover {\n  cursor: pointer;\n  background-color: #7f7f7f;\n}\n\n.igv-ui-generic-container {\n  box-sizing: content-box;\n  position: absolute;\n  z-index: 2048;\n  background-color: white;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-ui-generic-container > div:first-child {\n  cursor: move;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  height: 24px;\n  width: 100%;\n  background-color: #dddddd;\n}\n.igv-ui-generic-container > div:first-child > div {\n  display: block;\n  color: #5f5f5f;\n  cursor: pointer;\n  width: 14px;\n  height: 14px;\n  margin-right: 8px;\n  margin-bottom: 4px;\n}\n\n.igv-ui-dialog {\n  z-index: 2048;\n  position: fixed;\n  width: fit-content;\n  height: fit-content;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  background-color: white;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n}\n.igv-ui-dialog .igv-ui-dialog-header {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n}\n.igv-ui-dialog .igv-ui-dialog-header div {\n  margin-right: 4px;\n  margin-bottom: 2px;\n  height: 12px;\n  width: 12px;\n  color: #7F7F7F;\n}\n.igv-ui-dialog .igv-ui-dialog-header div:hover {\n  cursor: pointer;\n  color: #444;\n}\n.igv-ui-dialog .igv-ui-dialog-one-liner {\n  width: 95%;\n  height: 24px;\n  line-height: 24px;\n  text-align: left;\n  margin: 8px;\n  overflow-wrap: break-word;\n  background-color: white;\n  font-weight: bold;\n}\n.igv-ui-dialog .igv-ui-dialog-ok-cancel {\n  width: 100%;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n.igv-ui-dialog .igv-ui-dialog-ok-cancel div {\n  margin: 16px;\n  margin-top: 32px;\n  color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  width: 75px;\n  height: 28px;\n  line-height: 28px;\n  text-align: center;\n  border-color: transparent;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 2px;\n}\n.igv-ui-dialog .igv-ui-dialog-ok-cancel div:first-child {\n  background-color: #5ea4e0;\n}\n.igv-ui-dialog .igv-ui-dialog-ok-cancel div:last-child {\n  background-color: #c4c4c4;\n}\n.igv-ui-dialog .igv-ui-dialog-ok-cancel div:first-child:hover {\n  cursor: pointer;\n  background-color: #3b5c7f;\n}\n.igv-ui-dialog .igv-ui-dialog-ok-cancel div:last-child:hover {\n  cursor: pointer;\n  background-color: #7f7f7f;\n}\n.igv-ui-dialog .igv-ui-dialog-ok {\n  width: 100%;\n  height: 36px;\n  margin-top: 32px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n.igv-ui-dialog .igv-ui-dialog-ok div {\n  width: 98px;\n  height: 36px;\n  line-height: 36px;\n  text-align: center;\n  color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  border-color: white;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 4px;\n  background-color: #2B81AF;\n}\n.igv-ui-dialog .igv-ui-dialog-ok div:hover {\n  cursor: pointer;\n  background-color: #25597f;\n}\n\n.igv-ui-panel, .igv-ui-panel-row, .igv-ui-panel-column {\n  z-index: 2048;\n  background-color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n}\n\n.igv-ui-panel-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.igv-ui-panel-row {\n  display: flex;\n  flex-direction: row;\n}\n\n.igv-ui-textbox {\n  background-color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n}\n\n.igv-ui-table {\n  background-color: white;\n}\n\n.igv-ui-table thead {\n  position: sticky;\n  top: 0;\n}\n\n.igv-ui-table th {\n  text-align: left;\n}\n\n.igv-ui-table td {\n  padding-right: 20px;\n}\n\n.igv-ui-table tr:hover {\n  background-color: lightblue;\n}\n\n.igv-ui-center-fixed {\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.igv-navbar {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  box-sizing: border-box;\n  width: 100%;\n  color: #444;\n  font-size: 12px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n  line-height: 32px;\n  padding-left: 8px;\n  padding-right: 8px;\n  margin-top: 2px;\n  margin-bottom: 6px;\n  height: 32px;\n  border-style: solid;\n  border-radius: 3px;\n  border-width: thin;\n  border-color: #bfbfbf;\n  background-color: #f3f3f3;\n}\n.igv-navbar .igv-navbar-left-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  height: 32px;\n  line-height: 32px;\n}\n.igv-navbar .igv-navbar-left-container .igv-logo {\n  width: 34px;\n  height: 32px;\n  margin-right: 8px;\n}\n.igv-navbar .igv-navbar-left-container .igv-current-genome {\n  height: 32px;\n  margin-left: 4px;\n  margin-right: 4px;\n  user-select: none;\n  line-height: 32px;\n  vertical-align: middle;\n  text-align: center;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-chromosome-select-widget-container {\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n  height: 100%;\n  width: 125px;\n  margin-right: 4px;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-chromosome-select-widget-container select {\n  display: block;\n  cursor: pointer;\n  width: 100px;\n  height: 75%;\n  outline: none;\n  font-size: 12px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  margin-left: 8px;\n  height: 22px;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  width: 240px;\n  height: 22px;\n  line-height: 22px;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container input.igv-search-input {\n  cursor: text;\n  width: 85%;\n  height: 22px;\n  line-height: 22px;\n  font-size: 12px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n  text-align: left;\n  padding-left: 8px;\n  margin-right: 8px;\n  outline: none;\n  border-style: solid;\n  border-radius: 3px;\n  border-width: thin;\n  border-color: #bfbfbf;\n  background-color: white;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-search-container .igv-search-icon-container {\n  cursor: pointer;\n  height: 16px;\n  width: 16px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n}\n.igv-navbar .igv-navbar-left-container .igv-navbar-genomic-location .igv-locus-size-group .igv-windowsize-panel-container {\n  margin-left: 4px;\n  user-select: none;\n}\n.igv-navbar .igv-navbar-right-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n}\n.igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container {\n  position: relative;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n}\n.igv-navbar .igv-navbar-right-container .igv-navbar-toggle-button-container-hidden {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  height: 100%;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget {\n  color: #737373;\n  font-size: 18px;\n  margin-left: 8px;\n  user-select: none;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget div {\n  cursor: pointer;\n  margin-left: unset;\n  margin-right: unset;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget div:first-child {\n  height: 20px;\n  width: 20px;\n  margin-left: unset;\n  margin-right: 4px;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget div:last-child {\n  height: 20px;\n  width: 20px;\n  margin-left: 4px;\n  margin-right: unset;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget div:nth-child(even) {\n  display: block;\n  height: fit-content;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget input {\n  display: block;\n  width: 125px;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget svg {\n  display: block;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 {\n  color: #737373;\n  font-size: 18px;\n  height: 32px;\n  line-height: 32px;\n  margin-left: 8px;\n  user-select: none;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div {\n  cursor: pointer;\n  margin-left: unset;\n  margin-right: unset;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:first-child {\n  height: 20px;\n  width: 20px;\n  margin-left: unset;\n  margin-right: 4px;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:last-child {\n  height: 20px;\n  width: 20px;\n  margin-left: 4px;\n  margin-right: unset;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 div:nth-child(even) {\n  width: 0;\n  height: 0;\n  display: none;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 input {\n  width: 0;\n  height: 0;\n  display: none;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-900 svg {\n  display: block;\n}\n.igv-navbar .igv-navbar-right-container .igv-zoom-widget-hidden {\n  display: none;\n}\n\n.igv-navbar-button {\n  display: block;\n  box-sizing: unset;\n  padding-left: 6px;\n  padding-right: 6px;\n  height: 18px;\n  text-transform: capitalize;\n  user-select: none;\n  line-height: 18px;\n  text-align: center;\n  vertical-align: middle;\n  font-family: "Open Sans", sans-serif;\n  font-size: 11px;\n  font-weight: 200;\n  color: #737373;\n  background-color: #f3f3f3;\n  border-color: #737373;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 6px;\n}\n\n.igv-navbar-button:hover {\n  cursor: pointer;\n}\n\n.igv-navbar-button-clicked {\n  color: white;\n  background-color: #737373;\n}\n\n.igv-navbar-icon-button {\n  cursor: pointer;\n  position: relative;\n  width: 24px;\n  height: 24px;\n  margin-left: 4px;\n  margin-right: 4px;\n  border: none;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n.igv-navbar-icon-button > div:first-child {\n  z-index: 512;\n  position: absolute;\n  top: 36px;\n  left: -18px;\n  width: 24px;\n  height: 24px;\n  border: none;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n.igv-navbar-icon-button > div:last-child {\n  z-index: 512;\n  position: absolute;\n  top: 36px;\n  left: 18px;\n  width: 24px;\n  height: 24px;\n  border: none;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n\n.igv-navbar-text-button {\n  cursor: pointer;\n  position: relative;\n  margin-left: 2px;\n  margin-right: 2px;\n  border: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.igv-navbar-text-button > div:nth-child(2) {\n  z-index: 512;\n  position: absolute;\n  top: 36px;\n  left: 0;\n  width: 38px;\n  height: 18px;\n  border: none;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n.igv-navbar-text-button > div:nth-child(3) {\n  z-index: 512;\n  position: absolute;\n  top: 36px;\n  left: 42px;\n  width: 38px;\n  height: 18px;\n  border: none;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n\n#igv-text-button-label {\n  text-anchor: middle;\n  dominant-baseline: middle;\n}\n\n.igv-navbar-text-button-svg-inactive rect {\n  stroke: #737373;\n  fill: white;\n}\n.igv-navbar-text-button-svg-inactive text {\n  fill: #737373;\n}\n.igv-navbar-text-button-svg-inactive tspan {\n  dominant-baseline: middle;\n}\n\n.igv-navbar-text-button-svg-hover rect {\n  stroke: #737373;\n  fill: #737373;\n}\n.igv-navbar-text-button-svg-hover text {\n  fill: white;\n}\n.igv-navbar-text-button-svg-hover tspan {\n  dominant-baseline: middle;\n}\n\n#igv-save-svg-group rect {\n  stroke: #737373;\n  fill: white;\n}\n#igv-save-svg-group text {\n  fill: #737373;\n}\n\n#igv-save-svg-group:hover rect {\n  stroke: #737373;\n  fill: #737373;\n}\n#igv-save-svg-group:hover text {\n  fill: white;\n}\n\n#igv-save-png-group rect {\n  stroke: #737373;\n  fill: white;\n}\n#igv-save-png-group text {\n  fill: #737373;\n}\n\n#igv-save-png-group:hover rect {\n  stroke: #737373;\n  fill: #737373;\n}\n#igv-save-png-group:hover text {\n  fill: white;\n}\n\n.igv-zoom-in-notice-container {\n  z-index: 256;\n  position: absolute;\n  top: 8px;\n  left: 50%;\n  transform: translate(-50%, 0%);\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n}\n.igv-zoom-in-notice-container > div {\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  width: 100%;\n  height: 100%;\n  font-family: "Open Sans", sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  color: #3f3f3f;\n}\n\n.igv-zoom-in-notice {\n  position: absolute;\n  top: 10px;\n  left: 50%;\n}\n.igv-zoom-in-notice div {\n  position: relative;\n  left: -50%;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  color: #3f3f3f;\n  background-color: rgba(255, 255, 255, 0.51);\n  z-index: 64;\n}\n\n.igv-container-spinner {\n  position: absolute;\n  top: 90%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1024;\n  width: 24px;\n  height: 24px;\n  pointer-events: none;\n  color: #737373;\n}\n\n.igv-multi-locus-close-button {\n  position: absolute;\n  top: 2px;\n  right: 0;\n  padding-left: 2px;\n  padding-right: 2px;\n  width: 12px;\n  height: 12px;\n  color: #666666;\n  background-color: white;\n  z-index: 1000;\n}\n.igv-multi-locus-close-button > svg {\n  vertical-align: top;\n}\n\n.igv-multi-locus-close-button:hover {\n  cursor: pointer;\n  color: #434343;\n}\n\n.igv-multi-locus-ruler-label {\n  z-index: 64;\n  position: absolute;\n  top: 2px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n}\n.igv-multi-locus-ruler-label > div {\n  font-family: "Open Sans", sans-serif;\n  font-size: 12px;\n  color: rgb(16, 16, 16);\n  background-color: white;\n}\n.igv-multi-locus-ruler-label > div {\n  cursor: pointer;\n}\n\n.igv-multi-locus-ruler-label-square-dot {\n  z-index: 64;\n  position: absolute;\n  left: 50%;\n  top: 5%;\n  transform: translate(-50%, 0%);\n  background-color: white;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-multi-locus-ruler-label-square-dot > div:first-child {\n  width: 14px;\n  height: 14px;\n}\n.igv-multi-locus-ruler-label-square-dot > div:last-child {\n  margin-left: 16px;\n  font-family: "Open Sans", sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  color: rgb(16, 16, 16);\n}\n\n.igv-ruler-sweeper {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  top: 26px;\n  bottom: 0;\n  left: 0;\n  width: 0;\n  z-index: 99999;\n  background-color: rgba(68, 134, 247, 0.25);\n}\n\n.igv-ruler-tooltip {\n  pointer-events: none;\n  z-index: 128;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 1px;\n  height: 32px;\n  background-color: transparent;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-ruler-tooltip > div {\n  pointer-events: none;\n  width: 128px;\n  height: auto;\n  padding: 1px;\n  color: #373737;\n  font-size: 10px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n  background-color: white;\n  border-style: solid;\n  border-width: thin;\n  border-color: #373737;\n}\n\n.igv-track-label {\n  position: absolute;\n  left: 8px;\n  top: 8px;\n  width: auto;\n  height: auto;\n  max-width: 50%;\n  padding-left: 4px;\n  padding-right: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-family: "Open Sans", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  text-align: center;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  border-color: #444;\n  border-radius: 2px;\n  border-style: solid;\n  border-width: thin;\n  background-color: white;\n  z-index: 128;\n  cursor: pointer;\n}\n\n.igv-track-label:hover,\n.igv-track-label:focus,\n.igv-track-label:active {\n  background-color: #e8e8e8;\n}\n\n.igv-track-label-popup-shim {\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-top: 4px;\n}\n\n.igv-center-line {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  z-index: 8;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  border-left-style: dashed;\n  border-left-width: thin;\n  border-right-style: dashed;\n  border-right-width: thin;\n}\n\n.igv-center-line-wide {\n  background-color: rgba(0, 0, 0, 0);\n  border-left-color: rgba(127, 127, 127, 0.51);\n  border-right-color: rgba(127, 127, 127, 0.51);\n}\n\n.igv-center-line-thin {\n  background-color: rgba(0, 0, 0, 0);\n  border-left-color: rgba(127, 127, 127, 0.51);\n  border-right-color: rgba(0, 0, 0, 0);\n}\n\n.igv-cursor-guide-horizontal {\n  display: none;\n  pointer-events: none;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 50%;\n  height: 1px;\n  z-index: 32;\n  margin-left: 50px;\n  margin-right: 54px;\n  border-top-style: dotted;\n  border-top-width: thin;\n  border-top-color: rgba(127, 127, 127, 0.76);\n}\n\n.igv-cursor-guide-vertical {\n  pointer-events: none;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 50%;\n  width: 1px;\n  z-index: 32;\n  border-left-style: dotted;\n  border-left-width: thin;\n  border-left-color: rgba(127, 127, 127, 0.76);\n  display: none;\n}\n\n.igv-user-feedback {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 512px;\n  height: 360px;\n  z-index: 2048;\n  background-color: white;\n  border-color: #a2a2a2;\n  border-style: solid;\n  border-width: thin;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-user-feedback div:first-child {\n  position: relative;\n  height: 24px;\n  width: 100%;\n  background-color: white;\n  border-bottom-color: #a2a2a2;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n}\n.igv-user-feedback div:first-child div {\n  position: absolute;\n  top: 2px;\n  width: 16px;\n  height: 16px;\n  background-color: transparent;\n}\n.igv-user-feedback div:first-child div:first-child {\n  left: 8px;\n}\n.igv-user-feedback div:first-child div:last-child {\n  cursor: pointer;\n  right: 8px;\n}\n.igv-user-feedback div:last-child {\n  width: 100%;\n  height: calc(100% - 24px);\n  border-width: 0;\n}\n.igv-user-feedback div:last-child div {\n  width: auto;\n  height: auto;\n  margin: 8px;\n}\n\n.igv-generic-dialog-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 200px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  z-index: 2048;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-generic-dialog-container .igv-generic-dialog-header {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n}\n.igv-generic-dialog-container .igv-generic-dialog-header div {\n  margin-right: 4px;\n  margin-bottom: 2px;\n  height: 12px;\n  width: 12px;\n  color: #7F7F7F;\n}\n.igv-generic-dialog-container .igv-generic-dialog-header div:hover {\n  cursor: pointer;\n  color: #444;\n}\n.igv-generic-dialog-container .igv-generic-dialog-one-liner {\n  color: #373737;\n  width: 95%;\n  height: 24px;\n  line-height: 24px;\n  text-align: left;\n  margin-top: 8px;\n  padding-left: 8px;\n  overflow-wrap: break-word;\n  background-color: white;\n}\n.igv-generic-dialog-container .igv-generic-dialog-label-input {\n  margin-top: 8px;\n  width: 95%;\n  height: 24px;\n  color: #373737;\n  line-height: 24px;\n  padding-left: 8px;\n  background-color: white;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-generic-dialog-container .igv-generic-dialog-label-input div {\n  width: 30%;\n  height: 100%;\n  font-size: 16px;\n  text-align: right;\n  padding-right: 8px;\n  background-color: white;\n}\n.igv-generic-dialog-container .igv-generic-dialog-label-input input {\n  display: block;\n  height: 100%;\n  width: 100%;\n  padding-left: 4px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n  color: #373737;\n  text-align: left;\n  outline: none;\n  border-style: solid;\n  border-width: thin;\n  border-color: #7F7F7F;\n  background-color: white;\n}\n.igv-generic-dialog-container .igv-generic-dialog-label-input input {\n  width: 50%;\n  font-size: 16px;\n}\n.igv-generic-dialog-container .igv-generic-dialog-input {\n  margin-top: 8px;\n  width: calc(100% - 16px);\n  height: 24px;\n  color: #373737;\n  line-height: 24px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n.igv-generic-dialog-container .igv-generic-dialog-input input {\n  display: block;\n  height: 100%;\n  width: 100%;\n  padding-left: 4px;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 400;\n  color: #373737;\n  text-align: left;\n  outline: none;\n  border-style: solid;\n  border-width: thin;\n  border-color: #7F7F7F;\n  background-color: white;\n}\n.igv-generic-dialog-container .igv-generic-dialog-input input {\n  font-size: 16px;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok-cancel {\n  width: 100%;\n  height: 28px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok-cancel div {\n  margin-top: 32px;\n  color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n  width: 75px;\n  height: 28px;\n  line-height: 28px;\n  text-align: center;\n  border-color: transparent;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 2px;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child {\n  margin-left: 32px;\n  margin-right: 0;\n  background-color: #5ea4e0;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child {\n  margin-left: 0;\n  margin-right: 32px;\n  background-color: #c4c4c4;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child:hover {\n  cursor: pointer;\n  background-color: #3b5c7f;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child:hover {\n  cursor: pointer;\n  background-color: #7f7f7f;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok {\n  width: 100%;\n  height: 36px;\n  margin-top: 32px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok div {\n  width: 98px;\n  height: 36px;\n  line-height: 36px;\n  text-align: center;\n  color: white;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  border-color: white;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 4px;\n  background-color: #2B81AF;\n}\n.igv-generic-dialog-container .igv-generic-dialog-ok div:hover {\n  cursor: pointer;\n  background-color: #25597f;\n}\n\n.igv-generic-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2048;\n  background-color: white;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-generic-container div:first-child {\n  cursor: move;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  height: 24px;\n  width: 100%;\n  background-color: #dddddd;\n}\n.igv-generic-container div:first-child i {\n  display: block;\n  color: #5f5f5f;\n  cursor: pointer;\n  width: 14px;\n  height: 14px;\n  margin-right: 8px;\n  margin-bottom: 4px;\n}\n\n.igv-menu-popup {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: max-content;\n  z-index: 512;\n  cursor: pointer;\n  font-family: "Open Sans", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  color: #4b4b4b;\n  background: white;\n  border-radius: 4px;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: thin;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-end;\n  text-align: left;\n}\n.igv-menu-popup > div:not(:first-child) {\n  width: 100%;\n}\n.igv-menu-popup > div:not(:first-child) > div {\n  background: white;\n}\n.igv-menu-popup > div:not(:first-child) > div.context-menu {\n  padding-left: 4px;\n  padding-right: 4px;\n}\n.igv-menu-popup > div:not(:first-child) > div:last-child {\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n  border-bottom-color: transparent;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n}\n.igv-menu-popup > div:not(:first-child) > div:hover {\n  background: #efefef;\n}\n\n.igv-menu-popup-shim {\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-bottom: 1px;\n  padding-top: 1px;\n}\n\n.igv-menu-popup-header {\n  position: relative;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-color: transparent;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n}\n.igv-menu-popup-header div {\n  margin-right: 4px;\n  height: 12px;\n  width: 12px;\n  color: #7F7F7F;\n}\n.igv-menu-popup-header div:hover {\n  cursor: pointer;\n  color: #444;\n}\n\n.igv-menu-popup-check-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 20px;\n  margin-right: 4px;\n  background-color: transparent;\n}\n.igv-menu-popup-check-container div {\n  padding-top: 2px;\n  padding-left: 8px;\n}\n.igv-menu-popup-check-container div:first-child {\n  position: relative;\n  width: 12px;\n  height: 12px;\n}\n.igv-menu-popup-check-container div:first-child svg {\n  position: absolute;\n  width: 12px;\n  height: 12px;\n}\n\n.igv-user-feedback {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 512px;\n  height: 360px;\n  z-index: 2048;\n  background-color: white;\n  border-color: #a2a2a2;\n  border-style: solid;\n  border-width: thin;\n  font-family: "Open Sans", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n}\n.igv-user-feedback div:first-child {\n  position: relative;\n  height: 24px;\n  width: 100%;\n  background-color: white;\n  border-bottom-color: #a2a2a2;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n}\n.igv-user-feedback div:first-child div {\n  position: absolute;\n  top: 2px;\n  width: 16px;\n  height: 16px;\n  background-color: transparent;\n}\n.igv-user-feedback div:first-child div:first-child {\n  left: 8px;\n}\n.igv-user-feedback div:first-child div:last-child {\n  cursor: pointer;\n  right: 8px;\n}\n.igv-user-feedback div:last-child {\n  width: 100%;\n  height: calc(100% - 24px);\n  border-width: 0;\n}\n.igv-user-feedback div:last-child div {\n  width: auto;\n  height: auto;\n  margin: 8px;\n}\n\n.igv-loading-spinner-container {\n  z-index: 1024;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 32px;\n  height: 32px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n}\n.igv-loading-spinner-container > div {\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  border: 4px solid rgba(128, 128, 128, 0.5);\n  border-top-color: rgb(255, 255, 255);\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n  to {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n@-webkit-keyframes spin {\n  to {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n.igv-roi-menu {\n  position: absolute;\n  z-index: 512;\n  font-family: "Open Sans", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  color: #4b4b4b;\n  background-color: white;\n  width: 192px;\n  border-radius: 4px;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: thin;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n}\n.igv-roi-menu > div:first-child {\n  height: 24px;\n  border-top-color: transparent;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n}\n.igv-roi-menu > div:first-child > div {\n  margin-right: 4px;\n  height: 12px;\n  width: 12px;\n  color: #7F7F7F;\n}\n.igv-roi-menu > div:first-child > div:hover {\n  cursor: pointer;\n  color: #444;\n}\n.igv-roi-menu > div:last-child {\n  background-color: white;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n  border-bottom-color: transparent;\n  border-bottom-style: solid;\n  border-bottom-width: 0;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n  text-align: start;\n  vertical-align: middle;\n}\n.igv-roi-menu > div:last-child > div {\n  height: 24px;\n  padding-left: 4px;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  border-bottom-color: #7f7f7f;\n}\n.igv-roi-menu > div:last-child > div:not(:first-child):hover {\n  cursor: pointer;\n  background-color: rgba(127, 127, 127, 0.1);\n}\n.igv-roi-menu > div:last-child div:first-child {\n  font-style: italic;\n  text-align: center;\n  padding-right: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.igv-roi-menu > div:last-child > div:last-child {\n  border-bottom-width: 0;\n  border-bottom-color: transparent;\n}\n\n.igv-roi-placeholder {\n  font-style: normal;\n  color: rgba(75, 75, 75, 0.6);\n}\n\n.igv-roi-table {\n  position: absolute;\n  z-index: 1024;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n  resize: both;\n  overflow: hidden;\n  width: min-content;\n  max-width: 1600px;\n  border-color: #7f7f7f;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: "Open Sans", sans-serif;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: white;\n  cursor: default;\n}\n.igv-roi-table > div {\n  height: 24px;\n  font-size: 14px;\n  text-align: start;\n  vertical-align: middle;\n  line-height: 24px;\n}\n.igv-roi-table > div:first-child {\n  border-color: transparent;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-top-width: 0;\n  border-bottom-color: #7f7f7f;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n  cursor: move;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n}\n.igv-roi-table > div:first-child > div:first-child {\n  text-align: center;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  margin-left: 4px;\n  margin-right: 4px;\n  width: calc(100% - 4px - 12px);\n}\n.igv-roi-table > div:first-child > div:last-child {\n  margin-right: 4px;\n  margin-bottom: 2px;\n  height: 12px;\n  width: 12px;\n  color: #7f7f7f;\n}\n.igv-roi-table > div:first-child > div:last-child > svg {\n  display: block;\n}\n.igv-roi-table > div:first-child > div:last-child:hover {\n  cursor: pointer;\n  color: #444;\n}\n.igv-roi-table > .igv-roi-table-description {\n  padding: 4px;\n  margin-left: 4px;\n  word-break: break-all;\n  overflow-y: auto;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  background-color: transparent;\n}\n.igv-roi-table > .igv-roi-table-goto-explainer {\n  margin-top: 5px;\n  margin-left: 4px;\n  color: #7F7F7F;\n  font-style: italic;\n  height: 24px;\n  border-top: solid lightgray;\n  background-color: transparent;\n}\n.igv-roi-table > .igv-roi-table-column-titles {\n  height: 24px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: stretch;\n  align-items: stretch;\n  padding-right: 16px;\n  background-color: white;\n  border-top-color: #7f7f7f;\n  border-top-style: solid;\n  border-top-width: thin;\n  border-bottom-color: #7f7f7f;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n}\n.igv-roi-table > .igv-roi-table-column-titles > div {\n  font-size: 14px;\n  vertical-align: middle;\n  line-height: 24px;\n  text-align: left;\n  margin-left: 4px;\n  height: 24px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  border-right-color: #7f7f7f;\n  border-right-style: solid;\n  border-right-width: thin;\n}\n.igv-roi-table > .igv-roi-table-column-titles > div:last-child {\n  border-right: unset;\n}\n.igv-roi-table > .igv-roi-table-row-container {\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n  overflow: auto;\n  height: 360px;\n  flex: 1 1 auto;\n  background-color: transparent;\n}\n.igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row {\n  height: 24px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: stretch;\n  align-items: stretch;\n}\n.igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row > div {\n  font-size: 14px;\n  vertical-align: middle;\n  line-height: 24px;\n  text-align: left;\n  margin-left: 4px;\n  height: 24px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  border-right-color: transparent;\n  border-right-style: solid;\n  border-right-width: thin;\n}\n.igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row > div:last-child {\n  border-right: unset;\n}\n.igv-roi-table > .igv-roi-table-row-container > .igv-roi-table-row-hover {\n  background-color: rgba(0, 0, 0, 0.04);\n}\n.igv-roi-table > div:last-child {\n  min-height: 32px;\n  height: 32px;\n  line-height: 32px;\n  border-top-color: #7f7f7f;\n  border-top-style: solid;\n  border-top-width: thin;\n  border-bottom-color: transparent;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n  border-bottom-width: 0;\n  background-color: #eee;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.igv-roi-table-row-selected {\n  background-color: rgba(0, 0, 0, 0.125);\n}\n\n.igv-roi-table-button {\n  cursor: pointer;\n  height: 20px;\n  user-select: none;\n  line-height: 20px;\n  text-align: center;\n  vertical-align: middle;\n  font-family: "Open Sans", sans-serif;\n  font-size: 13px;\n  font-weight: 400;\n  color: black;\n  padding-left: 6px;\n  padding-right: 6px;\n  background-color: rgb(239, 239, 239);\n  border-color: black;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 3px;\n}\n\n.igv-roi-table-button:hover {\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.13);\n}\n\n.igv-roi-region {\n  z-index: 64;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n  overflow: visible;\n  margin-top: 66px;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n}\n.igv-roi-region > div {\n  position: relative;\n  width: 100%;\n  height: 8px;\n  pointer-events: auto;\n}\n\n.igv-roi-menu-row {\n  height: 24px;\n  padding-left: 8px;\n  font-size: small;\n  text-align: start;\n  vertical-align: middle;\n  line-height: 24px;\n  background-color: white;\n}\n\n.igv-roi-menu-row-edit-description {\n  width: -webkit-fill-available;\n  font-size: small;\n  text-align: start;\n  vertical-align: middle;\n  background-color: white;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-bottom: 4px;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: stretch;\n  align-items: stretch;\n}\n.igv-roi-menu-row-edit-description > label {\n  margin-left: 2px;\n  margin-bottom: 0;\n  display: block;\n  width: -webkit-fill-available;\n}\n.igv-roi-menu-row-edit-description > input {\n  display: block;\n  margin-left: 2px;\n  margin-right: 2px;\n  margin-bottom: 1px;\n  width: -webkit-fill-available;\n}\n\n.igv-container {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  padding-top: 4px;\n  user-select: none;\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  min-height: 160px;\n}\n\n.igv-viewport {\n  position: relative;\n  margin-top: 5px;\n  line-height: 1;\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n\n.igv-viewport-content {\n  position: relative;\n  width: 100%;\n}\n.igv-viewport-content > canvas {\n  position: relative;\n  display: block;\n}\n\n.igv-column-container {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n  width: 100%;\n}\n\n.igv-column-shim {\n  width: 1px;\n  margin-left: 2px;\n  margin-right: 2px;\n  background-color: #545453;\n}\n\n.igv-axis-column {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  box-sizing: border-box;\n  height: 100%;\n  width: 50px;\n}\n.igv-axis-column > div {\n  position: relative;\n  margin-top: 5px;\n  width: 100%;\n}\n.igv-axis-column > div > div {\n  z-index: 512;\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  width: fit-content;\n  height: fit-content;\n  background-color: transparent;\n  display: grid;\n  align-items: start;\n  justify-items: center;\n}\n.igv-axis-column > div > div > input {\n  display: block;\n  margin: unset;\n  cursor: pointer;\n}\n\n.igv-column {\n  position: relative;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  box-sizing: border-box;\n  height: 100%;\n}\n\n.igv-sample-info-column {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  box-sizing: border-box;\n  height: 100%;\n}\n\n.igv-sample-name-column {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  box-sizing: border-box;\n  height: 100%;\n}\n\n.igv-scrollbar-column {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  box-sizing: border-box;\n  height: 100%;\n  width: 14px;\n}\n.igv-scrollbar-column > div {\n  position: relative;\n  margin-top: 5px;\n  width: 14px;\n}\n.igv-scrollbar-column > div > div {\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  left: 2px;\n  width: 8px;\n  border-width: 1px;\n  border-style: solid;\n  border-color: #c4c4c4;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.igv-scrollbar-column > div > div:hover {\n  background-color: #c4c4c4;\n}\n\n.igv-track-drag-column {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  box-sizing: border-box;\n  height: 100%;\n  width: 12px;\n  background-color: white;\n}\n.igv-track-drag-column > .igv-track-drag-handle {\n  z-index: 512;\n  position: relative;\n  cursor: pointer;\n  margin-top: 5px;\n  width: 100%;\n  border-style: solid;\n  border-width: 0;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.igv-track-drag-column .igv-track-drag-handle-color {\n  background-color: #c4c4c4;\n}\n.igv-track-drag-column .igv-track-drag-handle-hover-color {\n  background-color: #787878;\n}\n.igv-track-drag-column .igv-track-drag-handle-selected-color {\n  background-color: #0963fa;\n}\n.igv-track-drag-column > .igv-track-drag-shim {\n  position: relative;\n  margin-top: 5px;\n  width: 100%;\n  border-style: solid;\n  border-width: 0;\n}\n\n.igv-gear-menu-column {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  box-sizing: border-box;\n  height: 100%;\n  width: 28px;\n}\n.igv-gear-menu-column > div {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  margin-top: 5px;\n  width: 100%;\n  background: white;\n}\n.igv-gear-menu-column > div > div {\n  position: relative;\n  margin-top: 4px;\n  width: 16px;\n  height: 16px;\n  color: #7F7F7F;\n}\n.igv-gear-menu-column > div > div:hover {\n  cursor: pointer;\n  color: #444;\n}\n\n/*# sourceMappingURL=igv.css.map */\n'),n.adoptedStyleSheets=[e]}if(this.root=e({class:"igv-container"}),n.appendChild(this.root),this.spinner=e({class:"igv-loading-spinner-container"}),this.root.appendChild(this.spinner),this.spinner.appendChild(e()),this.spinner.style.width="64px",this.spinner.style.height="64px",this.stopSpinner(),this.alert=new za(this.root),this.columnContainer=e({class:"igv-column-container"}),this.root.appendChild(this.columnContainer),this.menuPopup=new ju(this.columnContainer),this.menuUtils=new bo(this),this.initialize(t),this.trackViews=[],this.constants={dragThreshold:3,scrollThreshold:5,defaultColor:"rgb(0,0,150)",doubleClickDelay:t.doubleClickDelay||500},this.eventHandlers={},t.listeners)for(let e of Object.keys(t.listeners))this.on(e,t.listeners[e]);this.on("trackremoved",(()=>{0===this.findTracks((e=>"function"==typeof e.getSamples)).length&&(this.sampleInfoControl.setButtonVisibility(!1),this.sampleNameViewportWidth=void 0,this.showSampleNames=!1,this.sampleNameControl.setState(this.showSampleNames),this.sampleNameControl.hide(),this.layoutChange())})),this.on("didchangecolumnlayout",(()=>{if(gu.length>0){const e=gu.length;for(let t=0;t<e;t++)gu[t].dispose();gu.length=0}})),this.addEventHandlers(),this.sampleInfo=new Tu(this),this.setControls(t),this.roiManager=new jy(this)}get doShowROITable(){return this.roiManager.roiTableIsVisible()}startSpinner(){this.spinner.style.display="flex"}stopSpinner(){this.spinner.style.display="none"}initialize(e){this.flanking=e.flanking,this.crossDomainProxy=e.crossDomainProxy,this.formats=e.formats,this.trackDefaults=e.trackDefaults,this.nucleotideColors=e.nucleotideColors||Mc;for(let e of Object.keys(this.nucleotideColors))this.nucleotideColors[e.toLowerCase()]=this.nucleotideColors[e];this.doShowTrackLabels=e.showTrackLabels,this.doShowCenterLine=e.showCenterGuide,this.doShowCursorGuide=e.showCursorGuide,this.showSampleNames=e.showSampleNames,this.sampleNameViewportWidth=void 0,e.sampleNameViewportWidth&&(this.sampleNameViewportWidth=e.sampleNameViewportWidth),e.search&&(this.searchConfig={type:"json",url:e.search.url,coords:void 0===e.search.coords?1:e.search.coords,chromosomeField:e.search.chromosomeField||"chromosome",startField:e.search.startField||"start",endField:e.search.endField||"end",geneField:e.search.geneField||"gene",snpField:e.search.snpField||"snp",resultsField:e.search.resultsField})}setControls(e){const t=this.createStandardControls(e);t.insertBefore(Bt(this.columnContainer)),this.$navigation=t,!1===e.showControls&&t.hide()}createStandardControls(t){const i=Bt("<div>",{class:"igv-navbar"});this.$navigation=i;const n=Bt("<div>",{class:"igv-navbar-left-container"});i.append(n);const r=Bt("<div>",{class:"igv-logo"});n.append(r);const o=Bt('<svg width="690px" height="324px" viewBox="0 0 690 324" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>IGV</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="IGV" fill="#666666"><polygon id="Path" points="379.54574 8.00169252 455.581247 8.00169252 515.564813 188.87244 532.884012 253.529506 537.108207 253.529506 554.849825 188.87244 614.833392 8.00169252 689.60164 8.00169252 582.729511 320.722144 486.840288 320.722144"></polygon><path d="M261.482414,323.793286 C207.975678,323.793286 168.339046,310.552102 142.571329,284.069337 C116.803612,257.586572 103.919946,217.158702 103.919946,162.784513 C103.919946,108.410325 117.437235,67.8415913 144.472217,41.0770945 C171.507199,14.3125977 212.903894,0.930550071 268.663545,0.930550071 C283.025879,0.930550071 298.232828,1.84616386 314.284849,3.6774189 C330.33687,5.50867394 344.839793,7.97378798 357.794056,11.072835 L357.794056,68.968378 C339.48912,65.869331 323.578145,63.5450806 310.060654,61.9955571 C296.543163,60.4460336 284.574731,59.6712835 274.154998,59.6712835 C255.850062,59.6712835 240.502308,61.4320792 228.111274,64.9537236 C215.720241,68.4753679 205.793482,74.2507779 198.330701,82.2801269 C190.867919,90.309476 185.587729,100.87425 182.48997,113.974767 C179.392212,127.075284 177.843356,143.345037 177.843356,162.784513 C177.843356,181.942258 179.251407,198.000716 182.067551,210.960367 C184.883695,223.920018 189.671068,234.41436 196.429813,242.443709 C203.188559,250.473058 212.059279,256.178037 223.042241,259.558815 C234.025202,262.939594 247.683295,264.629958 264.01693,264.629958 C268.241146,264.629958 273.098922,264.489094 278.590403,264.207362 C284.081883,263.925631 289.643684,263.50304 295.275972,262.939577 L295.275972,159.826347 L361.595831,159.826347 L361.595831,308.579859 C344.698967,313.087564 327.239137,316.750019 309.215815,319.567334 C291.192494,322.38465 275.281519,323.793286 261.482414,323.793286 L261.482414,323.793286 L261.482414,323.793286 Z" id="Path"></path>;<polygon id="Path" points="0.81355666 5.00169252 73.0472883 5.00169252 73.0472883 317.722144 0.81355666 317.722144"></polygon></g> </g> </svg>');o.css("width","34px"),o.css("height","32px"),r.append(o),this.$current_genome=Bt("<div>",{class:"igv-current-genome"}),n.append(this.$current_genome),this.$current_genome.text("");const a=Bt("<div>",{class:"igv-navbar-genomic-location"});n.append(a),this.chromosomeSelectWidget=new Ay(this,a.get(0)),!1!==t.showChromosomeWidget?this.chromosomeSelectWidget.show():this.chromosomeSelectWidget.hide();const c=Bt("<div>",{class:"igv-locus-size-group"});a.append(c);const h=Bt("<div>",{class:"igv-search-container"});c.append(h),this.$searchInput=Bt("<input>",{class:"igv-search-input",type:"text",placeholder:"Locus Search"}),h.append(this.$searchInput),this.$searchInput[0].addEventListener("keyup",(e=>{e.stopImmediatePropagation()})),this.$searchInput.change((()=>this.doSearch(this.$searchInput.val())));const d=e({class:"igv-search-icon-container"});h.append(Bt(d)),d.appendChild(l("search")),d.addEventListener("click",(()=>this.doSearch(this.$searchInput.val()))),this.windowSizePanel=new Cy(c.get(0),this);const u=Bt("<div>",{class:"igv-navbar-right-container"});i.append(u);const f=Bt('<div class="igv-navbar-toggle-button-container">');if(u.append(f),this.$toggle_button_container=f,this.overlayTrackButton=new ef(this,f.get(0)),this.overlayTrackButton.setVisibility(!1),this.multiTrackSelectButton=new Zy(this,f.get(0)),this.cursorGuide=new _y(this.columnContainer,this),this.cursorGuideButton=new xy(this,f.get(0)),this.centerLineButton=new ky(this,f.get(0)),this.setTrackLabelVisibility(t.showTrackLabels),this.trackLabelControl=new Iy(f.get(0),this),this.roiTableControl=new Xy(f.get(0),this),this.sampleInfoControl=new Ey(f.get(0),this),this.sampleNameControl=new Sy(f.get(0),this),!0===t.showSVGButton&&(this.saveImageControl=new Dy(f.get(0),this)),t.customButtons)for(let e of t.customButtons)new Oy(f.get(0),this,e);return this.zoomWidget=new My(this,u.get(0)),!1===t.showNavigation&&this.$navigation.hide(),this.sliderDialog=new Na(this.root),this.sliderDialog.container.id=`igv-slider-dialog-${s()}`,this.inputDialog=new Ba(this.root),this.inputDialog.container.id=`igv-input-dialog-${s()}`,this.dataRangeDialog=new _o(this,Bt(this.root)),this.dataRangeDialog.$container.get(0).id=`igv-data-range-dialog-${s()}`,this.genericColorPicker=new Da({parent:this.columnContainer,width:432}),this.genericColorPicker.container.id=`igv-track-color-picker-${s()}`,i}getSampleNameViewportWidth(){return void 0===this.sampleNameViewportWidth||!1===this.showSampleNames?0:this.sampleNameViewportWidth}getSampleInfoViewportWidth(){return this.getSampleInfoColumnWidth()}isMultiLocusMode(){return this.referenceFrameList&&this.referenceFrameList.length>1}isMultiLocusWholeGenomeView(){if(void 0===this.referenceFrameList||1===this.referenceFrameList.length)return!1;for(let e of this.referenceFrameList)if("all"===e.chr.toLowerCase())return!0;return!1}currentLoci(){const e=e=>`${e.chr}:${e.start+1}-${e.end}`;return void 0===this.referenceFrameList||0===this.referenceFrameList.length?"":1===this.referenceFrameList.length?e(this.referenceFrameList[0]):this.referenceFrameList.map((t=>e(t)))}toSVG(){const{x:e,y:t,width:i,height:n}=this.columnContainer.getBoundingClientRect(),r=new ru({width:i,height:n,backdropColor:"white",multiLocusGap:0,viewbox:{x:0,y:0,width:i,height:n}}),s={deltaX:0,deltaY:-t};for(let e of this.trackViews)e.renderSVGContext(r,s);return s.deltaX=e,this.roiManager.renderSVGContext(this.columnContainer,r,s),r.getSerializedSvg(!0)}saveSVGtoFile(e,t){let i=this.toSVG();if(t){const e=document.createElement("svg");e.innerHTML=i,t.append(e),t.appendChild(e)}const n=e||"igvjs.svg",r=URL.createObjectURL(new Blob([i],{type:"application/octet-stream"}));Pt(n,r),URL.revokeObjectURL(r)}savePNGtoFile(e){const t=this.toSVG(),i=new Blob([t],{type:"image/svg+xml"}),n=URL.createObjectURL(i),r=document.createElement("img");r.addEventListener("load",(()=>{const t=this.columnContainer.getBoundingClientRect(),i=window.devicePixelRatio,s=t.width*i,o=t.height*i,a=document.createElement("canvas");a.width=s,a.height=o;const c=a.getContext("2d");c.scale(i,i),c.drawImage(r,0,0);const l=a.toDataURL("image/png");Pt(e=e||"igvjs.png",l),URL.revokeObjectURL(n)})),r.src=n}async loadSession(e){let t;return this.sampleInfo.initialize(),this.roiSets=[],t=e.url||e.file?await cA.loadSessionFile(e):e,this.loadSessionObject(t)}static async loadSessionFile(e){const t=e.url||e.file;let i;if(e.url&&Mt(e.url)&&(e.url.startsWith("blob:")||e.url.startsWith("data:"))){const t=cA.uncompressSession(e.url);i=JSON.parse(t)}else{let n=e.filename;if(n||(n=e.url?await Wa(e.url):e.file.name),n.endsWith(".xml")){const e=hu.KNOWN_GENOMES,n=await Qs.loadString(t);i=new fy(n,e)}else if(n.endsWith("hub.txt")){i={reference:(await su.loadHub(t,e)).getGenomeConfig()}}else{if(!n.endsWith(".json"))throw Error("Unrecognized session file format:"+n);i=await Qs.loadJson(t)}}return gA(i)}async loadSessionObject(e){this.cleanHouseForSession(),this.config=e,e.browsers&&(e=await async function(e){const t=e.browsers[0],i={},n=new Bf({url:t.url});await n.readHeaderAndFooter(),i.sampleNameViewportWidth=20,i.genome="hg38";const r=t.state.split(","),s=n.bpResolutions[Number.parseInt(r[2])],o=Number.parseInt(r[0]),a=Math.floor(Number.parseFloat(r[3])*s),c=a+Math.floor(1700*s);return i.locus=`${n.chromosomes[o].name}:${a}-${c}`,i.tracks=(t.tracks||[]).filter((e=>!("refgene"===e.format||"cellType"===e.name))),i.tracks.push({type:"shoebox",url:t.url,name:t.name,colorScale:t.colorScale,_hicFile:n}),i}(e)),this.sampleInfoControl.setButtonVisibility(!1),this.showSampleNames=e.showSampleNames||!1,this.sampleNameControl.setState(!0===this.showSampleNames),e.sampleNameViewportWidth&&(this.sampleNameViewportWidth=e.sampleNameViewportWidth),Ka(this.columnContainer,"igv-axis-column"),Ka(this.columnContainer,"igv-sample-info-column"),Ka(this.columnContainer,"igv-sample-name-column"),Ka(this.columnContainer,"igv-scrollbar-column"),Ka(this.columnContainer,"igv-track-drag-column"),Ka(this.columnContainer,"igv-gear-menu-column");const t=e.reference||e.genome;if(!t)return void console.warn("No genome or reference object specified");const i=Mt(t)?await hu.expandReference(this.alert,t):t;if(await this.loadReference(i,i.locus||e.locus),this.centerLineList=this.createCenterLineList(this.columnContainer),!1!==e.showIdeogram){const e=new cy(this);e.id="ideogram";const t=new of(this,this.columnContainer,e);this.trackViews.push(t)}if(!1!==e.showRuler){const e=new of(this,this.columnContainer,new Ou(this));this.trackViews.push(e)}e.qtlSelections&&(this.qtlSelections=oA.fromJSON(e.qtlSelections)),this.roiManager.clearROIs(),e.roi?this.roiManager.loadROI(e.roi):await this.roiManager.reset();const n=[];if(e.sampleinfo)for(const t of e.sampleinfo)t.file?n.push(t.file):this.loadSampleInfo(t);const r=i.tracks||[],s=e.tracks?r.concat(e.tracks):r;0===s.filter((e=>"sequence"===e.type&&!e.url&&!e.fastaURL)).length&&s.push({type:"sequence",order:Ud,removable:!1});const o=s.filter((e=>void 0!==e.file)).map((({file:e})=>e)),a=s.filter((e=>void 0!==e.indexFile)).map((({indexFile:e})=>e));a.length>0&&o.push(...a),n.length>0&&o.push(...n),o.length>0&&alert(`Local files cannot be loaded automatically.\nThis session contains references to these local files:\n${o.map((e=>`    ${e}`)).join("\n")}`);const c=s.filter((e=>void 0===e.file));let l=1;for(let e of c)void 0===e.order&&(e.order=l++);await this.loadTrackList(c);for(let e of this.trackViews.filter((e=>"ruler"===e.track.type||"ideogram"===e.track.type)))await e.updateViews();return this.trackViews.some((e=>e.track.selected))&&this.multiTrackSelectButton.setMultiTrackSelection(!0),this.updateUIWithReferenceFrameList(),this.updateLocusSearchWidget(),s}cleanHouseForSession(){for(let e of this.trackViews)e.removeDOMFromColumnContainer();this.columnContainer.querySelectorAll(".igv-axis-column, .igv-column-shim, .igv-column, .igv-sample-info-column, .igv-sample-name-column, .igv-scrollbar-column, .igv-track-drag-column, .igv-gear-menu-column").forEach((e=>e.remove())),this.trackViews=[],this.circularView&&this.circularView.clearChords()}async loadReference(e,t){let i;this.removeAllTracks(),this.roiManager.clearROIs(),this.multiTrackSelectButton.setMultiTrackSelection(!1),i=e.gbkURL?await ud(e.gbkURL):await sA.createGenome(e,this);const n=void 0===this.genome||this.genome.id!==i.id;this.genome=i,this.updateNavbarDOMWithGenome(i);let r=t||i.initialLocus;Array.isArray(r)&&(r=r.join(" "));if(!await this.search(r,!0))throw new Error(`Cannot set initial locus ${r}`);if(n){let t;if(e.hubURL){t=(await su.loadHub(e.hubURL)).getGroupedTrackConfigurations()}this.fireEvent("genomechange",[{genome:i,trackConfigurations:t}]),this.circularView&&this.circularView.setAssembly({name:this.genome.id,id:this.genome.id,chromosomes:Lm(this.genome)})}}updateNavbarDOMWithGenome(e){let t=e.id&&e.id.length<20?e.id:`${e.id.substring(0,8)}...${e.id.substring(e.id.length-8)}`;this.$current_genome.text(t),this.$current_genome.attr("title",e.description);!1!==this.config.showChromosomeWidget&&!1!==this.genome.showChromosomeWidget&&e.chromosomeNames&&e.chromosomeNames.length>1?(this.chromosomeSelectWidget.update(e),this.chromosomeSelectWidget.show()):this.chromosomeSelectWidget.hide()}async loadGenome(e){let t;e.url&&(Mt(e.url)&&e.url.endsWith("/hub.txt")?(e.hubURL=e.url,delete e.url):"gbk"===function(e){let t;if(e instanceof File)t=e.name;else{if("string"!=typeof e)throw new Error("Input must be a File object or a URL string");t=e}const i=t.split(".").pop();return i.split("?")[0]}(e.url)&&(e.gbkURL=e.url,delete e.url));if(e.hubURL||e.url&&Mt(e.url)&&e.url.endsWith("/hub.txt")){t=(await su.loadHub(e.hubURL||e.url,e)).getGenomeConfig()}else t=Mt(e)||!(e.url||e.fastaURL||e.twoBitURL||e.gbkURL)?await hu.expandReference(this.alert,e):e;let i;await this.loadReference(t),i=t.gbkURL||"gbk"===t.format?[{name:"Annotations",format:"gbk",url:t.gbkURL}]:t.tracks||[];return 0===i.filter((e=>"sequence"===e.type)).length&&i.push({type:"sequence",order:Ud}),await this.loadTrackList(i),await this.updateViews(),this.genome}async loadTrackHub(e){const t=gA((await su.loadHub(e.url,e)).getGenomeConfig());return this.loadGenome(t)}updateUIWithReferenceFrameList(){const e=this.referenceFrameList;this.isMultiLocusWholeGenomeView()||hu.isWholeGenomeView(e[0].chr),vy(this,this.$navigation.width()),fA(this.trackViews,this.doShowTrackLabels),this.doShowCenterLine&&hu.isWholeGenomeView(e[0].chr)&&this.centerLineButton.boundMouseClickHandler(),this.doShowCursorGuide&&hu.isWholeGenomeView(e[0].chr)&&this.cursorGuideButton.boundMouseClickHandler(),this.setCenterLineAndCenterLineButtonVisibility(hu.isWholeGenomeView(e[0].chr))}setCenterLineAndCenterLineButtonVisibility(e){e?this.centerLineButton.setVisibility(!e):this.centerLineButton.setVisibility(this.config.showCenterGuideButton);for(let t of this.centerLineList)e?this.setCenterLineVisibility(!e):this.setCenterLineVisibility(this.doShowCenterLine)}setTrackLabelVisibility(e){fA(this.trackViews,e)}setROITableVisibility(e){!0===e?this.roiManager.presentTable():this.roiManager.dismissTable()}setCursorGuideVisibility(e){e?this.cursorGuide.show():this.cursorGuide.hide()}setCustomCursorGuideMouseHandler(e){this.cursorGuide.customMouseHandler=e}setCenterLineVisibility(e){for(let t of this.centerLineList)!0===e?(t.show(),t.repaint()):t.hide()}async loadTrackList(e){let t=0;for(let i of e)void 0===i.order&&(i.order=t++);const i=[];for(let t of e)i.push(this._loadTrack(t));const n=await Promise.all(i);return this.trackViews.filter((function(e){return e.track.autoscaleGroup})).length>0&&this.updateViews(),n}async loadTrack(e){e.sync=!1!==e.sync;const t=this._loadTrack(e);return t&&e.autoscaleGroup&&(await t,this.updateViews()),t}async _loadTrack(e){Mt(e)&&(e=JSON.parse(e));try{if(e.hidden){const t=wd(e,this.genome);return void await t.getFeatures({chr:"1",start:0,end:Number.MAX_SAFE_INTEGER})}const t=await this.createTrack(e);if("sampleinfo"===e.type)return void this.layoutChange();if(void 0===t)return;return this.addTrack(e,t)}catch(t){let i=t.message||t.error||t.toString();const n={401:"Access unauthorized",403:"Access forbidden",404:"Not found"};n.hasOwnProperty(i)&&(i=n[i]),i=`${i} : ${Ht(e.url)?e.url.name:e.url}`;const r=new Error(i);throw console.error(r),r}}async addTrack(e,t){void 0===t.order&&(t.order=this.trackViews.length);const i=new of(this,this.columnContainer,t);if(this.trackViews.push(i),fA(this.trackViews,this.doShowTrackLabels),"function"==typeof t.postInit)try{i.startSpinner(),await t.postInit()}finally{i.stopSpinner()}return t.autoscaleGroup||(e.sync?await i.updateViews():i.updateViews()),"function"==typeof t.hasSamples&&t.hasSamples()&&(this.sampleInfo.hasAttributes()&&this.sampleInfoControl.setButtonVisibility(!0),!1!==this.config.showSampleNameButton&&this.sampleNameControl.show()),this.reorderTracks(),this.fireEvent("trackorderchanged",[this.getTrackOrder()]),this.multiTrackSelectButton.setMultiTrackSelection(this.multiTrackSelectButton.enableMultiTrackSelection),t}async loadROI(e){return this.roiManager.loadROI(e,this.genome)}clearROIs(){this.roiManager.clearROIs()}async getUserDefinedROIs(){if(this.roiManager){const e=this.roiManager.getUserDefinedROISet();if(void 0===e)return[];const t=await e.getAllFeatures(),i=[];for(let e of Object.values(t))i.push(...e);return i}return[]}getRulerTrackView(){const e=this.trackViews.filter((({track:e})=>"ruler"===e.id));return e.length>0?e[0]:void 0}async createTrack(e){let t=await async function(e){return"function"==typeof e?e():e}
/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */(e.url||e.fastaURL);if(Mt(t)&&(t=t.trim()),t)if(e.format)e.format=e.format.toLowerCase();else if(e.fastaURL)e.format="fasta";else if(e.sourceType)"htsget"===e.sourceType&&await Rh.inferFormat(e);else{const t=await sm(e);t&&(e.format=t)}e.type&&Pa(e);let i=e.type?e.type.toLowerCase():void 0;if(!i){if(!e.format)throw Error(`Unrecognized track:  ${JSON.stringify(e)}`);if("hic"===e.format){const t=new Bf(e);if(await t.readHeaderAndFooter(),!t.chromosomeIndexMap.celltype)throw Error("'.hic' files not supported");i="shoebox",e._hicFile=t}else if(i=Ha(e.format),"bedtype"===i){const t=wd(e,this.genome);e._featureSource=t;const n=await t.trackType();i=n||"annotation"}e.type=i}if(this.trackDefaults&&i){const t=this.trackDefaults[i];if(t)for(let i in t)t.hasOwnProperty(i)&&void 0===e[i]&&(e[i]=t[i])}const n=function(e,t,i){let n;switch(e){case"annotation":case"genes":case"fusionjuncspan":case"snp":n="feature";break;case"seg":case"maf":case"mut":n="seg";break;case"junctions":case"splicejunctions":n="junction";break;default:n=e}return uy.has(n)?uy.get(n)(t,i):void 0}(i,e,this);if(void 0!==n)return e.roi&&e.roi.length>0&&(n.roiSets=e.roi.map((e=>new Yy(e,this.genome)))),n;this.alert.present(new Error(`Error creating track.  Could not determine track type for file: ${e.url||e}`),void 0)}reorderTracks(){this.trackViews.sort((function(e,t){const i=e=>"ideogram"===e.track.id?1:"ruler"===e.track.id?2:3,n=i(e),r=i(t);if(n===r){return(e.track.order||0)-(t.track.order||0)}return n-r}));for(let{axis:e,viewports:t,sampleInfoViewport:i,sampleNameViewport:n,outerScroll:r,dragHandle:s,gearContainer:o}of this.trackViews){e.remove();for(let{$viewport:e}of t)e.detach();i.viewport.remove(),n.viewport.remove(),r.remove(),s.remove(),o.remove()}const e=this.columnContainer.querySelectorAll(".igv-column");for(let{axis:t,viewports:i,sampleInfoViewport:n,sampleNameViewport:r,outerScroll:s,dragHandle:o,gearContainer:a}of this.trackViews){this.columnContainer.querySelector(".igv-axis-column").appendChild(t);for(let t=0;t<e.length;t++){const{$viewport:n}=i[t];e[t].appendChild(n.get(0))}this.columnContainer.querySelector(".igv-sample-info-column").appendChild(n.viewport),this.columnContainer.querySelector(".igv-sample-name-column").appendChild(r.viewport),this.columnContainer.querySelector(".igv-scrollbar-column").appendChild(s),this.columnContainer.querySelector(".igv-track-drag-column").appendChild(o),this.columnContainer.querySelector(".igv-gear-menu-column").appendChild(a)}}getTrackOrder(){return this.trackViews.filter((e=>e.track&&e.track.name)).map((e=>e.track.name))}getSelectedTrackViews(){return this.trackViews.filter((e=>!0===e.track.selected))}removeTrackByName(e){const t=this.trackViews.slice();for(let i of t)e===i.track.name&&this.removeTrack(i.track)}removeTrack(e){for(let t of this.trackViews)if(e===t.track){this._removeTrack(t.track);break}}_removeTrack(e){e.disposed||(this.trackViews.splice(this.trackViews.indexOf(e.trackView),1),this.fireEvent("trackremoved",[e]),this.fireEvent("trackorderchanged",[this.getTrackOrder()]),e.trackView&&e.trackView.dispose())}removeAllTracks(){const e=this.trackViews;this.trackViews=[];for(let t of e)"ruler"!==t.track.id&&"ideogram"!==t.track.id?(this.fireEvent("trackremoved",[t.track]),t.dispose()):this.trackViews.push(t)}get ideogramTrackView(){return this.trackViews[0]}get rulerTrackView(){return this.trackViews[1]}findTracks(e,t){let i="function"==typeof e?t=>e(t.track):i=>t===i.track[e];return this.trackViews.filter(i).map((e=>e.track))}get tracks(){return this.trackViews.map((e=>e.track)).filter((e=>void 0!==e))}setTrackHeight(e){this.trackHeight=e,this.trackViews.forEach((function(t){t.setTrackHeight(e)}))}async visibilityChange(){this.layoutChange()}async layoutChange(){if(this.referenceFrameList.find((e=>e.bpPerPixel<0))){const e=this.calculateViewportWidth(this.referenceFrameList.length);for(let t of this.referenceFrameList)t.bpPerPixel=(t.end-t.start)/e}this.referenceFrameList&&(this.isMultiLocusWholeGenomeView()||hu.isWholeGenomeView(this.referenceFrameList[0].chr),vy(this,this.$navigation.width())),lA.call(this),await this.updateViews()}async updateViews(){const e=this.trackViews;this.updateLocusSearchWidget();for(let e of this.referenceFrameList)e.bpPerPixel<=10&&await this.genome.getSequence(e.chr,e.start,e.start+1);for(let e of this.centerLineList)e.repaint();if(this.dragObject)for(let t of e)await t.updateViews();else{const t={},i=[];for(const n of e)if(n.track.autoscaleGroup){const e=n.track.autoscaleGroup;t[e]||(t[e]=[]),t[e].push(n)}else i.push(n);if(Object.entries(t).length>0)for(const[e,i]of Object.entries(t)){const e=await Promise.all(i.map((e=>e.getInViewFeatures()))),t=Qa(e.flat());for(const e of i)e.track.dataRange=Object.assign({},t),e.track.autoscale=!1;await Promise.all(i.map((e=>e.updateViews())))}await Promise.all(i.map((e=>e.updateViews())))}}repaintViews(){for(let e of this.trackViews)e.repaintViews()}updateLocusSearchWidget(){if(!this.referenceFrameList)return;const e=this.referenceFrameList,t=this.calculateViewportWidth(this.referenceFrameList.length);for(let i of e)i.end=i.start+i.bpPerPixel*t;this.chromosomeSelectWidget&&(this.chromosomeSelectWidget.select.value=1===e.length?this.referenceFrameList[0].chr:"");const i=this.referenceFrameList.map((e=>e.getLocusString())).join(" ");this.$searchInput.val(i),this.fireEvent("locuschange",[this.referenceFrameList])}calculateViewportWidth(e){let{width:t}=this.columnContainer.getBoundingClientRect();return t-=50+this.getSampleInfoViewportWidth()+this.getSampleNameViewportWidth()+14+12+28,t-=5*(e-1),Math.floor(t/e)}minimumBases(){return this.config.minimumBases}zoomIn(){this.zoomWithScaleFactor(.5)}zoomOut(){this.zoomWithScaleFactor(2)}async zoomWithScaleFactor(e,t,i){if(!this.referenceFrameList)return;const n=this.calculateViewportWidth(this.referenceFrameList.length);let r=i?[i]:this.referenceFrameList;for(let i of r)i.zoomWithScaleFactor(this,e,n,t)}async addMultiLocusPanel(e,t,i,n){if(!this.referenceFrameList)return;const r=this.calculateViewportWidth(1+this.referenceFrameList.length),s=this.calculateViewportWidth(this.referenceFrameList.length)/this.calculateViewportWidth(1+this.referenceFrameList.length);for(let e of this.referenceFrameList)e.bpPerPixel*=s;const o=(i-t)/r,a=new gy(this.genome,e,t,i,o),c=n?this.referenceFrameList.indexOf(n):this.referenceFrameList.length-1,l=1+c,{$viewport:h}=this.trackViews[0].viewports[c],d=Ly(h.get(0).parentElement);if(this.fireEvent("didchangecolumnlayout"),l===this.referenceFrameList.length){this.referenceFrameList.push(a);for(let e of this.trackViews){const t=Bu(e,d,a);e.viewports.push(t)}}else{this.referenceFrameList.splice(l,0,a);for(let e of this.trackViews){const t=Bu(e,d,a);e.viewports.splice(l,0,t)}}this.centerLineList=this.createCenterLineList(this.columnContainer),lA.call(this),await this.updateViews(!0)}createCenterLineList(e){const t=e.querySelectorAll(".igv-center-line");for(let e=0;e<t.length;e++)t[e].remove();const i=[],n=e.querySelectorAll(".igv-column");for(let e=0;e<n.length;e++)i.push(new Hy(this,this.referenceFrameList[e],n[e]));return i}async removeMultiLocusPanel(e){const t=this.referenceFrameList.indexOf(e),{$viewport:i}=this.trackViews[0].viewports[t];Ty(t,i.parent().get(0)),this.fireEvent("didchangecolumnlayout");for(let{viewports:e}of this.trackViews)e[t].dispose(),e.splice(t,1);if(this.referenceFrameList.splice(t,1),1===this.referenceFrameList.length&&this.getRulerTrackView())for(let e of this.getRulerTrackView().viewports)e.dismissLocusLabel();const n=this.calculateViewportWidth(1+this.referenceFrameList.length)/this.calculateViewportWidth(this.referenceFrameList.length);await this.rescaleForMultiLocus(n)}async gotoMultilocusPanel(e){const t=this.referenceFrameList.indexOf(e);this.columnContainer.querySelectorAll(".igv-column").forEach(((e,i)=>{i===t||e.remove()})),this.columnContainer.querySelectorAll(".igv-column-shim").forEach((e=>e.remove()));for(let e of this.trackViews){const i=e.viewports[t];e.viewports.filter(((e,i)=>i!==t)).forEach((e=>e.dispose())),e.viewports=[i]}const i=this.calculateViewportWidth(1);e.bpPerPixel=(e.end-e.start)/i,this.referenceFrameList=[e],this.trackViews.forEach((({viewports:e})=>e.forEach((e=>e.setWidth(i))))),this.centerLineList=this.createCenterLineList(this.columnContainer),this.updateUIWithReferenceFrameList(),await this.updateViews(!0)}async rescaleForMultiLocus(e){const t=this.calculateViewportWidth(this.referenceFrameList.length);for(let t of this.referenceFrameList)t.bpPerPixel*=e;for(let{viewports:e}of this.trackViews)for(let i of e)i.setWidth(t);this.centerLineList=this.createCenterLineList(this.columnContainer),this.updateUIWithReferenceFrameList(),await this.updateViews()}async goto(e,t,i){await this.search(e+":"+t+"-"+i)}async doSearch(e,t){const i=await this.search(e,t);return i||this.alert.present(new Error(`Unrecognized locus: <b> ${e} </b>`)),i}async search(e,t){const i=await async function(e,t){if(void 0===t||""===t.trim())return;const i=t.split(" ");let n=[];const r=async t=>{if("all"===t.trim().toLowerCase()||"*"===t)return e.genome.wholeGenomeView?{chr:"all",start:0,end:e.genome.getChromosome("all").bpLength}:void 0;let i,n;if(t.includes(":")&&(i=Zv(t,e.isSoftclipped()),i&&(n=await e.genome.loadChromosome(i.chr))),!n){i=void 0;const r=await Xv(e,t);r&&(i={chr:r.chr,start:r.start,end:r.end,name:(r.name||t).toUpperCase()}),i||(n=await e.genome.loadChromosome(t),n&&(i={chr:n.name}))}return i&&(n=n||await e.genome.loadChromosome(i.chr),i.chr=n.name,void 0===i.start&&void 0===i.end&&(i.start=0,i.end=n.bpLength)),i};for(let e of i){const t=await r(e);t&&n.push(t)}if(0===n.length){const e=await r(t.replaceAll(" ","+"));e&&n.push(e)}return 0===n.length?void 0:n}(this,e);if(i&&i.length>0){this.referenceFrameList=function(e,t,i,n,r,s){return e.map((e=>{const o=Object.assign({},e);if(i&&o.name&&(o.start=Math.max(0,o.start-i),o.end+=i),!s){const e=t.getChromosome(o.chr);Va(e.bpLength,o,n)}return new gy(t,o.chr,o.start,o.end,(o.end-o.start)/r)}))}(i,this.genome,this.flanking,this.minimumBases(),this.calculateViewportWidth(i.length),this.isSoftclipped());for(let e of this.trackViews)e.removeViewportsFromColumnContainer();this.columnContainer.querySelectorAll(".igv-column-shim, .igv-column").forEach((e=>e.remove())),zy(this.columnContainer.querySelector(".igv-sample-info-column"),this.referenceFrameList.length),this.fireEvent("didchangecolumnlayout");for(let e of this.trackViews)e.createViewports(this,this.columnContainer,this.referenceFrameList);return this.centerLineList=this.createCenterLineList(this.columnContainer),this.updateUIWithReferenceFrameList(),t||await this.updateViews(),!0}return!1}async loadSampleInfo(e){await this.sampleInfo.loadSampleInfoFile(e.url);for(const{sampleInfoViewport:e}of this.trackViews)e.setWidth(this.getSampleInfoColumnWidth());this.findTracks((e=>"function"==typeof e.getSamples)).length>0&&(this.sampleInfoControl.performClickWithState(this,!0),this.sampleInfoControl.setButtonVisibility(!0));for(const{sampleInfoViewport:e}of this.trackViews)e.repaint()}getSampleInfoColumnWidth(){if(this.sampleInfo.attributeCount){const e=this.findTracks((e=>"function"==typeof e.getSamples)).length>0,t=this.sampleInfo.hasAttributes(),i=this.sampleInfoControl.showSampleInfo;return e&&t&&i?this.sampleInfo.attributeCount*Hu+8:0}return 0}on(e,t){this.eventHandlers[e]||(this.eventHandlers[e]=[]),this.eventHandlers[e].push(t)}un(e,t){this.off(e,t)}off(e,t){if(e)if(t){const i=this.eventHandlers[e];if(i&&0!==i.length){const n=i.indexOf(t);-1!==n&&this.eventHandlers[e].splice(n,1)}else console.warn("No handlers to remove for event: "+e)}else this.eventHandlers[e]=[];else this.eventHandlers={}}fireEvent(e,t,i){const n=this.eventHandlers[e];if(void 0===n||0===n.length)return;const r=i||window;return n.map((function(e){return e.apply(r,t)}))[0]}dispose(){this.removeEventHandlers();for(let e of this.trackViews)e.dispose();this.roiManager&&this.roiManager.dispose()}toJSON(){const e={version:"3.0.2"};if(void 0!==this.showSampleNames&&(e.showSampleNames=this.showSampleNames),this.sampleNameViewportWidth&&(e.sampleNameViewportWidth=this.sampleNameViewportWidth),e.reference=this.genome.toJSON(),e.reference.fastaURL instanceof File)throw new Error(`Error. Sessions cannot include local file references ${e.reference.fastaURL.name}.`);if(e.reference.indexURL instanceof File)throw new Error(`Error. Sessions cannot include local file references ${e.reference.indexURL.name}.`);const t=[];let i=this.trackViews[0];for(let{referenceFrame:e}of i.viewports){const i=e.getLocusString();t.push(i)}e.locus=1===t.length?t[0]:t,e.roi=this.roiManager.toJSON(),this.qtlSelections.isEmpty()||(e.qtlSelections=this.qtlSelections.toJSON());const n=[],r=[];for(const{track:e}of this.trackViews)try{let t;"function"==typeof e.getState?t=Hl.localFileInspection(e.getState()):e.config&&(t=Hl.localFileInspection(e.config)),t&&(t.browser&&delete t.browser,t.order=e.order,n.push(t))}catch(t){const i=`Track: ${e.name}: ${t}`;console.error(i),r.push(i)}if(r.length>0){let e=1,t="Errors encountered saving session: </br>";for(let i of r)t+=` (${e++}) ${i.toString()} <br/>`;throw Error(t)}e.tracks=n;const s=[];for(const e of n)for(const t of Object.keys(e))"file"!==t&&"indexFile"!==t||s.push(e[t]);const o=[];if(this.sampleInfo.sampleInfoFiles.length>0){const t=this.sampleInfo.toJSON();t.length>0&&(e.sampleinfo=t);for(const e of this.sampleInfo.sampleInfoFiles){const t=Hl.localFileInspection({url:e});t.file&&o.push(t.file)}o.length>0&&s.push(...o)}return s.length>0&&alert(`This session includes reference(s) to local file(s):\n${s.map((e=>`    ${e}`)).join("\n")}\nLocal files cannot be loaded automatically when a saved session is restored.`),e}compressedSession(){return function(e){const t=new Uint8Array(e.length);for(var i=0;i<e.length;i++)t[i]=e.charCodeAt(i);const n=new cs(t),r=String.fromCharCode.apply(null,n);return btoa(r).replace(/\+/g,".").replace(/\//g,"_").replace(/=/g,"-")}(JSON.stringify(this.toJSON()))}sessionURL(){const e=window.location.href.slice(),t=e.indexOf("?");return(t>0?e.substring(0,t):e)+"?sessionURL=blob:"+this.compressedSession()}mouseDownOnViewport(e,t){var i;i=r(e),this.vpMouseDown={viewport:t,lastMouseX:i.x,mouseDownX:i.x,lastMouseY:i.y,mouseDownY:i.y,referenceFrame:t.referenceFrame}}cancelTrackPan(){const e=this.dragObject;this.dragObject=void 0,this.isScrolling=!1,this.vpMouseDown=void 0,e&&e.viewport.referenceFrame.start!==e.start&&(this.updateViews(),this.fireEvent("trackdragend"))}isTrackPanning(){return this.dragObject}isSoftclipped(){return void 0!==this.trackViews.find((e=>!0===e.track.showSoftClips))}startTrackDrag(e){this.dragTrack=e}updateTrackDrag(e){if(e&&this.dragTrack){const t=this.dragTrack,i=this.trackViews.indexOf(e),n=this.trackViews.indexOf(t),r=this.trackViews;r[i]=t,r[n]=e;const s=this.trackViews[i].track.order;this.trackViews[n].track.order=s;const o=r.length;let a=s;if(i<n)for(let e=i+1;e<o;e++){const t=r[e].track;if(!(t.order<=a))break;t.order=Math.min(Number.MAX_SAFE_INTEGER,a+1),a=t.order}else for(let e=i-1;e>0;e--){const t=r[e].track;if(!(t.order>=a))break;t.order=Math.max(-Number.MAX_SAFE_INTEGER,a-1),a=t.order}this.reorderTracks()}}endTrackDrag(){this.dragTrack?(this.dragTrack=void 0,this.fireEvent("trackorderchanged",[this.getTrackOrder()])):this.dragTrack=void 0}addEventHandlers(){this.addWindowResizeHandler(),this.addRootMouseUpHandler(),this.addRootMouseLeaveHandler(),this.addColumnContainerEventHandlers(),this.addKeyboardHandler()}removeEventHandlers(){this.removeWindowResizeHandler(),this.removeRootMouseUpHandler(),this.removeRootMouseLeaveHandler(),this.removeColumnContainerEventHandlers(),this.removeKeyboardHandler()}addWindowResizeHandler(){this.boundWindowResizeHandler=lA.bind(this),window.addEventListener("resize",this.boundWindowResizeHandler)}removeWindowResizeHandler(){window.removeEventListener("resize",this.boundWindowResizeHandler)}addRootMouseUpHandler(){this.boundRootMouseUpHandler=dA.bind(this),this.root.addEventListener("mouseup",this.boundRootMouseUpHandler)}removeRootMouseUpHandler(){this.root.removeEventListener("mouseup",this.boundRootMouseUpHandler)}addRootMouseLeaveHandler(){this.boundRootMouseLeaveHandler=dA.bind(this),this.root.addEventListener("mouseleave",this.boundRootMouseLeaveHandler)}removeRootMouseLeaveHandler(){this.root.removeEventListener("mouseleave",this.boundRootMouseLeaveHandler)}addColumnContainerEventHandlers(){this.boundColumnContainerMouseMoveHandler=hA.bind(this),this.boundColumnContainerTouchMoveHandler=hA.bind(this),this.boundColumnContainerMouseLeaveHandler=dA.bind(this),this.boundColumnContainerMouseUpHandler=dA.bind(this),this.boundColumnContainerTouchEndHandler=dA.bind(this),this.columnContainer.addEventListener("mousemove",this.boundColumnContainerMouseMoveHandler),this.columnContainer.addEventListener("touchmove",this.boundColumnContainerTouchMoveHandler),this.columnContainer.addEventListener("mouseleave",this.boundColumnContainerMouseLeaveHandler),this.columnContainer.addEventListener("mouseup",this.boundColumnContainerMouseUpHandler),this.columnContainer.addEventListener("touchend",this.boundColumnContainerTouchEndHandler)}removeColumnContainerEventHandlers(){this.columnContainer.removeEventListener("mousemove",this.boundColumnContainerMouseMoveHandler),this.columnContainer.removeEventListener("touchmove",this.boundColumnContainerTouchMoveHandler),this.columnContainer.removeEventListener("mouseleave",this.boundColumnContainerMouseLeaveHandler),this.columnContainer.removeEventListener("mouseup",this.boundColumnContainerMouseUpHandler),this.columnContainer.removeEventListener("touchend",this.boundColumnContainerTouchEndHandler)}addKeyboardHandler(){this.keyUpHandler=uA.bind(this),document.addEventListener("keyup",this.keyUpHandler)}removeKeyboardHandler(){console.log("Remove handler"),document.addEventListener("keyup",this.keyUpHandler)}static uncompressSession(e){let t;if(e.indexOf("/gzip;base64")>0){t=vs(e);let i="";for(let e of t)i+=String.fromCharCode(e);return i}return function(e){e=e.replace(/\./g,"+").replace(/_/g,"/").replace(/-/g,"=");const t=atob(e),i=[];for(let e=0;e<t.length;e++)i.push(t.charCodeAt(e));const n=hs(i);let r="";for(let e of n)r+=String.fromCharCode(e);return r}(e.substring(5))}createCircularView(e,t){var i;return t=!0===t,this.circularView=(i=this,new Em(e,{onChordClick:(e,t,n)=>{const r=e.data,s=r.mate;function o(e){e.chr=i.genome.getChromosomeName(e.refName);let t=!1;for(let n of i.referenceFrameList){const i=am.fromLocusString(n.getLocusString());if(i.contains(e)){t=!0;break}if(i.overlaps(e)){n.extend(e),t=!0;break}}if(!t){const t=2e3,n=(e.start+e.end)/2;i.addMultiLocusPanel(e.chr,n-t,n+t)}}o(r),o(s)}})),this.circularViewControl=new Py(this.$toggle_button_container.get(0),this),this.circularView.setAssembly({name:this.genome.id,id:this.genome.id,chromosomes:Lm(this.genome)}),this.circularViewVisible=t,this.circularView}get circularViewVisible(){return void 0!==this.circularView&&this.circularView.visible}set circularViewVisible(e){this.circularView&&(this.circularView.visible=e,this.circularViewControl.setState(e))}}async function lA(){if(!this.referenceFrameList)return;const e=this.calculateViewportWidth(this.referenceFrameList.length);for(let t of this.referenceFrameList){const i=this.referenceFrameList.indexOf(t),{chr:n,genome:r}=t,{bpLength:s}=r.getChromosome(t.chr),o=t.toBP(e);hu.isWholeGenomeView(n)||o>s?t.bpPerPixel=s/e:t.end=t.start+t.toBP(e);for(let{viewports:t}of this.trackViews)t[i].setWidth(e)}this.updateUIWithReferenceFrameList(),await this.updateViews(!0)}function hA(e){e.preventDefault();const{x:t,y:i}=r(e);if(this.vpMouseDown){const{viewport:e,referenceFrame:n}=this.vpMouseDown,r=Math.abs(t-this.vpMouseDown.mouseDownX)>Math.abs(i-this.vpMouseDown.mouseDownY);if(!this.dragObject&&!this.isScrolling)if(r)this.vpMouseDown.mouseDownX&&Math.abs(t-this.vpMouseDown.mouseDownX)>this.constants.dragThreshold&&(this.dragObject={viewport:e,start:n.start});else if(this.vpMouseDown.mouseDownY&&Math.abs(i-this.vpMouseDown.mouseDownY)>this.constants.scrollThreshold){this.isScrolling=!0;const t=e.$viewport.height(),i=e.trackView.maxViewportContentHeight();this.vpMouseDown.r=t/i}if(this.dragObject){const i=!this.isSoftclipped();let r=this.vpMouseDown.lastMouseX-t;n.shiftPixels(r,e.$viewport.width(),i)&&this.updateViews(),this.fireEvent("trackdrag")}if(this.isScrolling){const t=this.vpMouseDown.r*(this.vpMouseDown.lastMouseY-i);e.trackView.moveScroller(t)}this.vpMouseDown.lastMouseX=t,this.vpMouseDown.lastMouseY=i}}function dA(e){this.cancelTrackPan(),this.endTrackDrag()}async function uA(e){if(!(this.referenceFrameList.length>1||"KeyF"!==e.code&&"KeyB"!==e.code)){const t=this.getSelectedTrackViews();if(t.length>0){const i=t[0].track;if("function"==typeof i.nextFeatureAfter){const t=this.referenceFrameList[0],n=t.viewport?t.viewport.getWidth():this.calculateViewportWidth(this.referenceFrameList.length),r="all"===t.chr.toLowerCase(),s=i.visibilityWindow;if(r||s&&s>0&&t.bpPerPixel*n>s)return;const o="KeyF"===e.code,a=t.chr,c=t.center,l=await i.nextFeatureAfter(a,c,o);if(l){const i=await this.genome.getChromosomeName(l.chr);if(a===i){const i=(l.start+l.end)/2;if(e.shiftKey){const e=this.config.minimumBases||40,r=Math.max(e,1.1*(l.end-l.start));t.start=Math.max(0,i-r/2),t.end=i+r/2,t.bpPerPixel=(t.end-t.start)/n}else t.shift(i-c);this.updateViews()}else{t.chr=i;const r=(l.start+l.end)/2;if(e.shiftKey){const e=this.config.minimumBases||40,i=Math.max(e,1.1*(l.end-l.start));t.start=Math.max(0,r-i/2),t.end=t.start+i,t.bpPerPixel=(t.end-t.start)/n}else t.start=r-n*t.bpPerPixel/2,t.end=t.start+n*t.bpPerPixel;this.updateViews()}}}}}}function fA(e,t){for(let{viewports:i}of e)for(let e of i)e.$trackLabel&&(0===i.indexOf(e)&&!0===t?e.$trackLabel.show():e.$trackLabel.hide())}let pA=[];function gA(e){return void 0===e.minimumBases&&(e.minimumBases=40),void 0===e.showIdeogram&&(e.showIdeogram=!0),void 0===e.showCircularView&&(e.showCircularView=!1),void 0===e.showCircularViewButton&&(e.showCircularViewButton=!1),void 0===e.showTrackLabelButton&&(e.showTrackLabelButton=!0),void 0===e.showTrackLabels&&(e.showTrackLabels=!0),void 0===e.showCursorTrackingGuideButton&&(e.showCursorTrackingGuideButton=!0),void 0===e.showCursorGuide&&(e.showCursorGuide=e.showCursorTrackingGuide||!1),void 0===e.showCenterGuideButton&&(e.showCenterGuideButton=!0),void 0===e.showCenterGuide&&(e.showCenterGuide=!1),void 0===e.showSampleNames&&(e.showSampleNames=!1),void 0===e.showSVGButton&&(e.showSVGButton=!0),void 0===e.showControls&&(e.showControls=!0),void 0===e.showNavigation&&(e.showNavigation=!0),void 0===e.showRuler&&(e.showRuler=!0),void 0===e.flanking&&(e.flanking=1e3),void 0===e.pairsSupported&&(e.pairsSupported=!0),e.tracks||(e.tracks=[]),e}const mA=Qs.setApiKey;const wA=Qs.oauth;var bA={TrackUtils:Oa,IGVGraphics:xo,MenuUtils:bo,DataRangeDialog:_o,createTrack:async function(e,t){return await cA.prototype.createTrack.call(t,e)},createBrowser:async function(e,t){void 0===t&&(t={}),hu.KNOWN_GENOMES||await hu.initializeGenomes(t),gA(t),t.queryParametersSupported&&function(e){var t,i,n,r,s,o,a,c,l;let h,d,u;if(a=window.location.href,s={},t=a.indexOf("?"),i=a.lastIndexOf("#"),t>=0)for(i<0&&(i=a.length),n=t+1;n<i;)(r=a.indexOf("&",n))<0&&(r=i),2===(o=a.substring(n,r).split("=",2)).length?(c=o[0],l=decodeURIComponent(o[1]),"file"===c?h=l.split(","):"index"===c?d=l.split(","):"name"===c?u=l.split(","):"genome"===c?!l.startsWith("https://")&&!l.startsWith("http://")||l.endsWith(".json")?(e[c]=l,e.reference=void 0):e.reference={fastaURL:l,indexURL:l+".fai"}:("reference"===c&&(e.genome=void 0),e[c]=l),n=r+1):n++;if(h){e.tracks||(e.tracks=[]);for(let t=0;t<h.length;t++){if(h[t].endsWith(".xml")||h[t].endsWith(".json")){e.sessionURL=h[t];break}const i={url:h[t]};d&&d.length>t&&(i.indexURL=d[t]),u&&u.length>t&&(i.name=u[t]),e.tracks.push(i)}}}(t),t.apiKey&&Qs.setApiKey(t.apiKey),t.oauthToken&&Qs.setOauthToken(t.oauthToken),t.clientId&&!Ts()&&await async function(e){if(!google.accounts.oauth2.initTokenClient)throw new Error("Google accounts token client not loaded (https://accounts.google.com/gsi/client)");if(Ts())throw new Error("Google client is already initialized");const t={client_id:e.client_id||e.clientId,scope:e.scope||"https://www.googleapis.com/auth/userinfo.profile",state:e.state||"igv",error:e=>{throw new Error(e.type)},hint:e.hint,hosted_domain:e.hosted_domain},i=google.accounts.oauth2.initTokenClient(t);google.igv={tokenClient:i,apiKey:e.apiKey}}({client_id:t.clientId,apiKey:t.apiKey,scope:"https://www.googleapis.com/auth/userinfo.profile"});const i=new cA(t,e);pA.push(i),i.startSpinner();const n=t.sessionURL||t.session||t.hubURL;return n?await i.loadSession({url:n}):await i.loadSessionObject(t),i.stopSpinner(),vy(i,i.$navigation.width()),i},removeBrowser:function(e){e.dispose(),e.root.remove(),pA=pA.filter((t=>t!==e))},removeAllBrowsers:function(){for(let e of pA)e.dispose(),e.root.remove();pA=[]},visibilityChange:async function(){for(let e of pA)await e.visibilityChange()},setGoogleOauthToken:function(e){return Qs.setOauthToken(e)},setOauthToken:function(e,t){return Qs.setOauthToken(e,t)},oauth:wA,version:my,setApiKey:mA,TrackBase:Hl,registerTrackClass:function(e,t){uy.set(e,((e,i)=>new t(e,i)))},registerTrackCreatorFunction:function(e,t){uy.set(e,t)},registerFileFormats:function(e,t){Sl[e]={fields:t}},loadSessionFile:cA.loadSessionFile};return bA}));
//# sourceMappingURL=igv.min.js.map
</script>

    <style type="text/css">
        body {
            font-size: 80%;
            font-family: 'Lucida Grande', Verdana, Arial, Sans-Serif;
        }


    </style>

    <!-- selector table style -->
    <style>

        thead {
            position: sticky;
            top: 0;
        }

        tr {
            cursor: default;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: lightblue;
        }

        th {
            background-color: lightskyblue;
            color: white;
            cursor: pointer;
        }

        .selected {
            background-color: lightblue !important;
            outline: solid thin darkblue !important;
        }
    </style>

    <!-- accordian style,  ref: https://alligator.io/css/collapsible/ -->
    <style type="text/css">
        .wrap-collabsible {
            margin-bottom: 1.2rem;
        }

        input[type='checkbox'] {
            display: none;
        }

        .lbl-toggle {
            display: block;

            font-weight: bold;
            font-family: monospace;
            font-size: 1.2rem;
            text-transform: uppercase;
            text-align: left;

            padding: 1rem;

            color: black;
            background: #dddddd;

            cursor: pointer;

            border-radius: 7px;
            transition: all 0.25s ease-out;
        }

        .lbl-toggle:hover {
            color: blue;
        }

        .lbl-toggle::before {
            content: ' ';
            display: inline-block;

            border-top: 5px solid transparent;
            border-bottom: 5px solid transparent;
            border-left: 5px solid currentColor;
            vertical-align: middle;
            margin-right: .7rem;
            transform: translateY(-2px);

            transition: transform .2s ease-out;
        }

        .toggle:checked + .lbl-toggle::before {
            transform: rotate(90deg) translateX(-3px);
        }

        .collapsible-content {
            max-height: 0px;
            overflow: auto;
            transition: max-height .25s ease-in-out;
        }

        .toggle:checked + .lbl-toggle + .collapsible-content {
            max-height: 350px;
        }

        .toggle:checked + .lbl-toggle {
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }

        .collapsible-content .content-inner {
            background: rgba(250, 224, 66, .2);
            border-bottom: 1px solid rgba(250, 224, 66, .45);
            border-bottom-left-radius: 7px;
            border-bottom-right-radius: 7px;
            padding: .5rem 1rem;
        }
    </style>

</head>

<body>


<div id="container" style="display: flex; flex-direction: column">
    <div id="tableContainer" class="wrap-collabsible">
        <input id="collapsible" class="toggle" type="checkbox" checked>
        <label for="collapsible" class="lbl-toggle">Variants</label>
        <div class="collapsible-content">
            <div id="tableSelectorDiv"></div>
        </div>
    </div>

    <div id="igvContainer">
        <div id="igvDiv"></div>
    </div>
</div>

<!--
Remove igv.js script tag in header and uncomment for local debugging.  "igv.js" is the root directory of a  local
igv.js repository.  Adjust path as neccessary


<script type="module">
      import igv from "./igv.js/js/index.js";
-->

<script type="text/javascript">

    const tableJson = {"headers": ["unique_id", "Chrom", "Start", "End", "Name"], "rows": [[0, "XM_031953124.1", 3487, 3489, "Exon7:codon1163:FS_INS:+1"], [1, "XM_031953124.1", 3490, 3492, "Exon7:codon1164:COMPENSATION:FS_2,3"], [2, "XM_031953124.1", 3490, 3492, "Exon7:codon1164:FS_DEL:-1"], [3, "XM_031953124.1", 3556, 3558, "Exon7:codon1186:STOP:AAA-&gt;TAA"], [4, "XM_031953124.1", 3556, 3558, "Exon7:codon1186:FS_INS:+1"], [5, "XM_031953124.1", 3559, 3561, "Exon7:codon1187:FS_DEL:-1"], [6, "XM_031953124.1", 10654, 10656, "Exon9:codon3552:STOP:CAG-&gt;TAG"]]}
    const sessionDictionary = {"0": "data:application/gzip;base64,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", "1": "data:application/gzip;base64,", "2": "data:application/gzip;base64,", "3": "data:application/gzip;base64,", "4": "data:application/gzip;base64,", "5": "data:application/gzip;base64,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", "6": "data:application/gzip;base64,"}
    let igvBrowser

    document.addEventListener("DOMContentLoaded", function () {
        initIGV()
    })


    /**
     * Create the igv instance initialized with the first session in the session dictionary.  This will correspond
     * to the first variant in the variant table. *
     */
    function initIGV() {

        const igvDiv = document.getElementById("igvDiv")
        const options =
            {
                sessionURL: sessionDictionary["0"],
                showChromosomeWidget: false,  // The session for each variant contains data and sequence for that variant only
                showCenterGuide: true,
                search: false     // disable webservice search
            }

        igv.createBrowser(igvDiv, options)
            .then(function (b) {
                igvBrowser = b
                initTable()
            })
    }

    function initTable() {

        // table
        const table = document.createElement("table")
        table.id = "variant_table"
        table.style.width = "100%"
        document.getElementById("tableSelectorDiv").appendChild(table)

        // header
        const thead = document.createElement('thead')
        table.appendChild(thead)
        const headerRow = thead.insertRow(0)
        const headers = tableJson.headers
        for (let j = 1; j < headers.length; j++) {
            var cell = document.createElement("th")
            headerRow.appendChild(cell)
            cell.innerHTML = headers[j]
        }


        // body
        const tbody = document.createElement('tbody')
        table.appendChild(tbody)
        const tableRows = tableJson.rows
        for (let i = 0; i < tableRows.length; i++) {

            const rowData = tableRows[i]
            const unique_id = rowData[0]
            const row = document.createElement("tr")
            row.id = "row_" + unique_id
            tbody.appendChild(row)

            // First row selected by default
            if (i === 0) row.classList.add("selected")

            row.onclick = function (event) {
                const list = document.getElementById("variant_table").getElementsByTagName("tr")
                for (let i = 0; i < list.length; i++) {
                    list[i].classList.remove("selected")
                }
                const rowID = event.target.parentElement.id
                const row = document.getElementById(rowID)
                row.classList.add("selected")
                const uniqueId = rowID.substring(4)
                const session = sessionDictionary[uniqueId]
                igvBrowser.loadSession({
                    url: session
                })
            }

            for (let j = 1; j < headers.length; j++) {
                cell = document.createElement("td")
                //cell.rowID = i;
                row.appendChild(cell)
                cell.innerHTML = rowData[j]
            }
        }

        // Add sorting.  Adapted from https://stackoverflow.com/questions/14267781/sorting-html-table-with-javascript/49041392
        Array.prototype.slice.call(document.querySelectorAll('th')).forEach(function (th) {
            th.addEventListener('click', function () {
                //var table = th.parentNode
                //while (table.tagName.toUpperCase() != 'TABLE') table = table.parentNode;
                Array.prototype.slice.call(table.querySelectorAll('tr:nth-child(n+1)'), 1)
                    .sort(comparer(Array.prototype.slice.call(th.parentNode.children).indexOf(th), this.asc = !this.asc))
                    .forEach(function (tr) {
                        table.appendChild(tr)
                    })
            })
        })


        function getCellValue(tr, idx) {
            return tr.children[idx].innerText || tr.children[idx].textContent
        }

        function comparer(idx, asc) {
            return function (a, b) {
                return function (v1, v2, asc) {
                    // Special case for chromosome coloumn
                    if (idx === 0 && v1.startsWith('chr') && v2.startsWith('chr')) {
                        v1 = v1.substr(3)
                        v2 = v2.substr(3)
                    }
                    // always put empty columns at end of table when sorting            
                    if (v1 == '' && v2 != '') {
                        return 1
                    }
                    if (v2 == '' && v1 != '') {
                        return -1
                    }

                    var isNumber = v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2)
                    ret = isNumber ? v1 - v2 : v1.toString().localeCompare(v2)

                    // reverse ordering if not ascending order            
                    if (!asc) {
                        ret = -1 * ret
                    }
                    return (ret)

                }(getCellValue(a, idx), getCellValue(b, idx), asc)
            }
        }

    }


</script>
</body>
</html>
